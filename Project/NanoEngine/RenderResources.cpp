#include "Base.h"
#include "Core.h"
#include "RenderCore.h"
#include "RenderResources.h"
#include "RenderDevice.h"

#pragma region Bitmap

static const char* kRadianceSig = "#?RADIANCE";
static const size_t kRadianceSigSize = 10;

// -------------------------------------------------------------------------------------------------
// Bitmap
// -------------------------------------------------------------------------------------------------
Bitmap::Bitmap()
{
	InternalCtor();
}

Bitmap::Bitmap(const Bitmap& obj)
{
	Result ppxres = InternalCopy(obj);
	if (Failed(ppxres)) {
		InternalCtor();
		ASSERT_MSG(false, "copy failed");
	}
}

Bitmap::~Bitmap()
{
	FreeStbiDataIfNeeded();
}

Bitmap& Bitmap::operator=(const Bitmap& rhs)
{
	if (&rhs != this) {
		Result ppxres = InternalCopy(rhs);
		if (Failed(ppxres)) {
			InternalCtor();
			ASSERT_MSG(false, "copy failed");
		}
	}
	return *this;
}

void Bitmap::FreeStbiDataIfNeeded()
{
	if (mDataIsFromStbi && !IsNull(mData)) {
		stbi_image_free(mData);
		mData = nullptr;
		mDataIsFromStbi = false;
	}
}

void Bitmap::InternalCtor()
{
	mWidth = 0;
	mHeight = 0;
	mFormat = Bitmap::FORMAT_UNDEFINED;
	mChannelCount = 0;
	mPixelStride = 0;
	mRowStride = 0;
	mData = nullptr;
	mInternalStorage.clear();
}

Result Bitmap::InternalInitialize(uint32_t width, uint32_t height, Bitmap::Format format, uint32_t rowStride, char* pExternalStorage)
{
	if (format == Bitmap::FORMAT_UNDEFINED) {
		return ERROR_IMAGE_INVALID_FORMAT;
	}

	// In case of initialization to a preexisting object.
	FreeStbiDataIfNeeded();

	uint32_t minimumRowStride = (width * Bitmap::FormatSize(format));
	if ((rowStride > 0) && (rowStride < minimumRowStride)) {
		return ERROR_BITMAP_FOOTPRINT_MISMATCH;
	}
	if (rowStride == 0) {
		rowStride = minimumRowStride;
	}

	mWidth = width;
	mHeight = height;
	mFormat = format;
	mChannelCount = Bitmap::ChannelCount(format);
	mPixelStride = Bitmap::FormatSize(format);
	mRowStride = rowStride;
	mData = pExternalStorage;

	if (IsNull(mData)) {
		size_t n = Bitmap::StorageFootprint(width, height, format);
		if (n > 0) {
			mInternalStorage.resize(n);
			if (mInternalStorage.size() != n) {
				return ERROR_ALLOCATION_FAILED;
			}

			mData = mInternalStorage.data();
		}
	}

	return SUCCESS;
}

Result Bitmap::InternalCopy(const Bitmap& obj)
{
	// In case of copies into a preexisting object.
	FreeStbiDataIfNeeded();

	// Copy properties
	mWidth = obj.mWidth;
	mHeight = obj.mHeight;
	mFormat = obj.mFormat;
	mChannelCount = obj.mChannelCount;
	mPixelStride = obj.mPixelStride;
	mRowStride = obj.mRowStride;

	// Allocate storage
	size_t footprint = Bitmap::StorageFootprint(mWidth, mHeight, mFormat);
	mInternalStorage.resize(footprint);
	if (mInternalStorage.size() != footprint) {
		return ERROR_ALLOCATION_FAILED;
	}
	mData = mInternalStorage.data();

	uint64_t srcFootprint = obj.GetFootprintSize();
	if (srcFootprint != static_cast<uint64_t>(footprint)) {
		return ERROR_BITMAP_FOOTPRINT_MISMATCH;
	}

	memcpy(mData, obj.mData, footprint);

	return SUCCESS;
}

Result Bitmap::Create(uint32_t width, uint32_t height, Bitmap::Format format, Bitmap* pBitmap)
{
	ASSERT_NULL_ARG(pBitmap);
	if (IsNull(pBitmap)) {
		return ERROR_UNEXPECTED_NULL_ARGUMENT;
	}

	Result ppxres = pBitmap->InternalInitialize(width, height, format, 0, nullptr);
	if (Failed(ppxres)) {
		return ppxres;
	}

	return SUCCESS;
}

Result Bitmap::Create(uint32_t width, uint32_t height, Bitmap::Format format, uint32_t rowStride, char* pExternalStorage, Bitmap* pBitmap)
{
	ASSERT_NULL_ARG(pBitmap);
	if (IsNull(pBitmap)) {
		return ERROR_UNEXPECTED_NULL_ARGUMENT;
	}

	Result ppxres = pBitmap->InternalInitialize(width, height, format, rowStride, pExternalStorage);
	if (Failed(ppxres)) {
		return ppxres;
	}

	return SUCCESS;
}

Result Bitmap::Create(uint32_t width, uint32_t height, Bitmap::Format format, char* pExternalStorage, Bitmap* pBitmap)
{
	return Bitmap::Create(width, height, format, 0, pExternalStorage, pBitmap);
}

Bitmap Bitmap::Create(uint32_t width, uint32_t height, Bitmap::Format format, Result* pResult)
{
	Bitmap bitmap;
	Result ppxres = Bitmap::Create(width, height, format, &bitmap);
	if (Failed(ppxres)) {
		bitmap.InternalCtor();
	}
	if (!IsNull(pResult)) {
		*pResult = ppxres;
	}
	return bitmap;
}

Bitmap Bitmap::Create(uint32_t width, uint32_t height, Bitmap::Format format, uint32_t rowStride, char* pExternalStorage, Result* pResult)
{
	Bitmap bitmap;
	Result ppxres = Bitmap::Create(width, height, format, rowStride, pExternalStorage, &bitmap);
	if (Failed(ppxres)) {
		bitmap.InternalCtor();
	}
	if (!IsNull(pResult)) {
		*pResult = ppxres;
	}
	return bitmap;
}

Bitmap Bitmap::Create(uint32_t width, uint32_t height, Bitmap::Format format, char* pExternalStorage, Result* pResult)
{
	return Bitmap::Create(width, height, format, 0, pExternalStorage, pResult);
}

bool Bitmap::IsOk() const
{
	bool isSizeValid = (mWidth > 0) && (mHeight > 0);
	bool isFormatValid = (mFormat != Bitmap::FORMAT_UNDEFINED);
	bool isStorageValid = (mData != nullptr);
	return isSizeValid && isFormatValid && isStorageValid;
}

uint64_t Bitmap::GetFootprintSize(uint32_t rowStrideAlignment) const
{
	uint32_t alignedRowStride = RoundUp<uint32_t>(mRowStride, rowStrideAlignment);
	uint64_t size = alignedRowStride * mHeight;
	return size;
}

Result Bitmap::Resize(uint32_t width, uint32_t height)
{
	// If internal storage is empty then this bitmap is using
	// external storage...so don't resize!
	//
	if (mInternalStorage.empty()) {
		return ERROR_IMAGE_CANNOT_RESIZE_EXTERNAL_STORAGE;
	}

	mWidth = width;
	mHeight = height;
	mRowStride = width * mPixelStride;

	size_t n = Bitmap::StorageFootprint(mWidth, mHeight, mFormat);
	mInternalStorage.resize(n);
	mData = (mInternalStorage.size() > 0) ? mInternalStorage.data() : nullptr;

	return SUCCESS;
}

Result Bitmap::ScaleTo(Bitmap* pTargetBitmap) const
{
	return ScaleTo(pTargetBitmap, STBIR_FILTER_DEFAULT);
}

Result Bitmap::ScaleTo(Bitmap* pTargetBitmap, stbir_filter filterType) const
{
	if (IsNull(pTargetBitmap)) {
		return ERROR_UNEXPECTED_NULL_ARGUMENT;
	}

	// Format must match
	if (pTargetBitmap->GetFormat() != mFormat) {
		return ERROR_IMAGE_INVALID_FORMAT;
	}

	// clang-format off
	stbir_datatype datatype = InvalidValue<stbir_datatype>();
	switch (ChannelDataType(GetFormat())) {
	default: break;
	case Bitmap::DATA_TYPE_UINT8: datatype = STBIR_TYPE_UINT8; break;
	case Bitmap::DATA_TYPE_UINT16: datatype = STBIR_TYPE_UINT16; break;
	case Bitmap::DATA_TYPE_UINT32: datatype = STBIR_TYPE_UINT32; break;
	case Bitmap::DATA_TYPE_FLOAT: datatype = STBIR_TYPE_FLOAT; break;
	}
	// clang-format on

	int res = stbir_resize(
		static_cast<const void*>(GetData()),
		static_cast<int>(GetWidth()),
		static_cast<int>(GetHeight()),
		static_cast<int>(GetRowStride()),
		static_cast<void*>(pTargetBitmap->GetData()),
		static_cast<int>(pTargetBitmap->GetWidth()),
		static_cast<int>(pTargetBitmap->GetHeight()),
		static_cast<int>(pTargetBitmap->GetRowStride()),
		datatype,
		static_cast<int>(Bitmap::ChannelCount(GetFormat())),
		-1,
		0,
		STBIR_EDGE_CLAMP,
		STBIR_EDGE_CLAMP,
		filterType,
		filterType,
		STBIR_COLORSPACE_LINEAR,
		nullptr);

	if (res == 0) {
		return ERROR_IMAGE_RESIZE_FAILED;
	}

	return SUCCESS;
}

char* Bitmap::GetPixelAddress(uint32_t x, uint32_t y)
{
	char* pPixel = nullptr;
	if (!IsNull(mData) && (x >= 0) && (x < mWidth) && (y >= 0) && (y < mHeight)) {
		size_t offset = (y * mRowStride) + (x * mPixelStride);
		pPixel = mData + offset;
	}
	return pPixel;
}

const char* Bitmap::GetPixelAddress(uint32_t x, uint32_t y) const
{
	const char* pPixel = nullptr;
	if (!IsNull(mData) && (x >= 0) && (x < mWidth) && (y >= 0) && (y < mHeight)) {
		size_t offset = (y * mRowStride) + (x * mPixelStride);
		pPixel = mData + offset;
	}
	return pPixel;
}

uint8_t* Bitmap::GetPixel8u(uint32_t x, uint32_t y)
{
	if (Bitmap::ChannelDataType(mFormat) != Bitmap::DATA_TYPE_UINT8) {
		return nullptr;
	}
	return reinterpret_cast<uint8_t*>(GetPixelAddress(x, y));
}

const uint8_t* Bitmap::GetPixel8u(uint32_t x, uint32_t y) const
{
	if (Bitmap::ChannelDataType(mFormat) != Bitmap::DATA_TYPE_UINT8) {
		return nullptr;
	}
	return reinterpret_cast<const uint8_t*>(GetPixelAddress(x, y));
}

uint16_t* Bitmap::GetPixel16u(uint32_t x, uint32_t y)
{
	if (Bitmap::ChannelDataType(mFormat) != Bitmap::DATA_TYPE_UINT16) {
		return nullptr;
	}
	return reinterpret_cast<uint16_t*>(GetPixelAddress(x, y));
}

const uint16_t* Bitmap::GetPixel16u(uint32_t x, uint32_t y) const
{
	if (Bitmap::ChannelDataType(mFormat) != Bitmap::DATA_TYPE_UINT16) {
		return nullptr;
	}
	return reinterpret_cast<const uint16_t*>(GetPixelAddress(x, y));
}

uint32_t* Bitmap::GetPixel32u(uint32_t x, uint32_t y)
{
	if (Bitmap::ChannelDataType(mFormat) != Bitmap::DATA_TYPE_UINT32) {
		return nullptr;
	}
	return reinterpret_cast<uint32_t*>(GetPixelAddress(x, y));
}

const uint32_t* Bitmap::GetPixel32u(uint32_t x, uint32_t y) const
{
	if (Bitmap::ChannelDataType(mFormat) != Bitmap::DATA_TYPE_UINT32) {
		return nullptr;
	}
	return reinterpret_cast<const uint32_t*>(GetPixelAddress(x, y));
}

float* Bitmap::GetPixel32f(uint32_t x, uint32_t y)
{
	if (Bitmap::ChannelDataType(mFormat) != Bitmap::DATA_TYPE_FLOAT) {
		return nullptr;
	}
	return reinterpret_cast<float*>(GetPixelAddress(x, y));
}

const float* Bitmap::GetPixel32f(uint32_t x, uint32_t y) const
{
	if (Bitmap::ChannelDataType(mFormat) != Bitmap::DATA_TYPE_FLOAT) {
		return nullptr;
	}
	return reinterpret_cast<const float*>(GetPixelAddress(x, y));
}

uint32_t Bitmap::ChannelSize(Bitmap::Format value)
{
	// clang-format off
	switch (value) {
	default: break;
	case Bitmap::FORMAT_R_UINT8: return 1; break;
	case Bitmap::FORMAT_RG_UINT8: return 1; break;
	case Bitmap::FORMAT_RGB_UINT8: return 1; break;
	case Bitmap::FORMAT_RGBA_UINT8: return 1; break;

	case Bitmap::FORMAT_R_UINT16: return 2; break;
	case Bitmap::FORMAT_RG_UINT16: return 2; break;
	case Bitmap::FORMAT_RGB_UINT16: return 2; break;
	case Bitmap::FORMAT_RGBA_UINT16: return 2; break;

	case Bitmap::FORMAT_R_UINT32: return 4; break;
	case Bitmap::FORMAT_RG_UINT32: return 4; break;
	case Bitmap::FORMAT_RGB_UINT32: return 4; break;
	case Bitmap::FORMAT_RGBA_UINT32: return 4; break;

	case Bitmap::FORMAT_R_FLOAT: return 4; break;
	case Bitmap::FORMAT_RG_FLOAT: return 4; break;
	case Bitmap::FORMAT_RGB_FLOAT: return 4; break;
	case Bitmap::FORMAT_RGBA_FLOAT: return 4; break;
	}
	// clang-format on
	return 0;
}

uint32_t Bitmap::ChannelCount(Bitmap::Format value)
{
	// clang-format off
	switch (value) {
	default: break;
	case Bitmap::FORMAT_R_UINT8: return 1; break;
	case Bitmap::FORMAT_RG_UINT8: return 2; break;
	case Bitmap::FORMAT_RGB_UINT8: return 3; break;
	case Bitmap::FORMAT_RGBA_UINT8: return 4; break;

	case Bitmap::FORMAT_R_UINT16: return 1; break;
	case Bitmap::FORMAT_RG_UINT16: return 2; break;
	case Bitmap::FORMAT_RGB_UINT16: return 3; break;
	case Bitmap::FORMAT_RGBA_UINT16: return 4; break;

	case Bitmap::FORMAT_R_UINT32: return 1; break;
	case Bitmap::FORMAT_RG_UINT32: return 2; break;
	case Bitmap::FORMAT_RGB_UINT32: return 3; break;
	case Bitmap::FORMAT_RGBA_UINT32: return 4; break;

	case Bitmap::FORMAT_R_FLOAT: return 1; break;
	case Bitmap::FORMAT_RG_FLOAT: return 2; break;
	case Bitmap::FORMAT_RGB_FLOAT: return 3; break;
	case Bitmap::FORMAT_RGBA_FLOAT: return 4; break;
	}
	// clang-format on
	return 0;
}

Bitmap::DataType Bitmap::ChannelDataType(Bitmap::Format value)
{
	// clang-format off
	switch (value) {
	default: break;
	case Bitmap::FORMAT_R_UINT8:
	case Bitmap::FORMAT_RG_UINT8:
	case Bitmap::FORMAT_RGB_UINT8:
	case Bitmap::FORMAT_RGBA_UINT8: {
		return Bitmap::DATA_TYPE_UINT8;
	} break;

	case Bitmap::FORMAT_R_UINT16:
	case Bitmap::FORMAT_RG_UINT16:
	case Bitmap::FORMAT_RGB_UINT16:
	case Bitmap::FORMAT_RGBA_UINT16: {
		return Bitmap::DATA_TYPE_UINT16;
	} break;

	case Bitmap::FORMAT_R_UINT32:
	case Bitmap::FORMAT_RG_UINT32:
	case Bitmap::FORMAT_RGB_UINT32:
	case Bitmap::FORMAT_RGBA_UINT32: {
		return Bitmap::DATA_TYPE_UINT32;
	} break;

	case Bitmap::FORMAT_R_FLOAT:
	case Bitmap::FORMAT_RG_FLOAT:
	case Bitmap::FORMAT_RGB_FLOAT:
	case Bitmap::FORMAT_RGBA_FLOAT: {
		return Bitmap::DATA_TYPE_FLOAT;
	} break;
	}
	// clang-format on
	return Bitmap::DATA_TYPE_UNDEFINED;
}

uint32_t Bitmap::FormatSize(Bitmap::Format value)
{
	uint32_t channelSize = Bitmap::ChannelSize(value);
	uint32_t channelCount = Bitmap::ChannelCount(value);
	uint32_t size = channelSize * channelCount;
	return size;
}

uint64_t Bitmap::StorageFootprint(uint32_t width, uint32_t height, Bitmap::Format format)
{
	uint64_t size = width * height * Bitmap::FormatSize(format);
	return size;
}

static Result IsRadianceFile(const std::filesystem::path& path, bool& isRadiance)
{
	// Open file
	fs::File file;
	if (!file.Open(path.string().c_str())) {
		return ERROR_IMAGE_FILE_LOAD_FAILED;
	}
	// Signature buffer
	char buf[kRadianceSigSize] = { 0 };

	// Read signature
	size_t n = file.Read(buf, kRadianceSigSize);

	// Only check if kBufferSize bytes were read
	if (n == kRadianceSigSize) {
		int res = strncmp(buf, kRadianceSig, kRadianceSigSize);
		isRadiance = (res == 0);
	}

	return SUCCESS;
}

static Result IsRadianceImage(const size_t dataSize, const void* pData, bool& isRadiance)
{
	if ((dataSize < kRadianceSigSize) || IsNull(pData)) {
		return ERROR_UNEXPECTED_NULL_ARGUMENT;
	}

	int res = strncmp(static_cast<const char*>(pData), kRadianceSig, kRadianceSigSize);
	isRadiance = (res == 0);

	return SUCCESS;
}

Result Bitmap::StbiInfo(const std::filesystem::path& path, int* pX, int* pY, int* pComp)
{
	fs::File file;
	if (!file.Open(path)) {
		return ERROR_IMAGE_FILE_LOAD_FAILED;
	}

	int stbiResult = 0;
	if (file.IsMapped()) {
		stbiResult = stbi_info_from_memory(
			reinterpret_cast<const stbi_uc*>(file.GetMappedData()),
			static_cast<int>(file.GetLength()),
			pX,
			pY,
			pComp);
	}
	else {
		std::vector<uint8_t> buffer(file.GetLength());
		file.Read(buffer.data(), buffer.size());
		stbiResult = stbi_info_from_memory(
			buffer.data(),
			static_cast<int>(buffer.size()),
			pX,
			pY,
			pComp);
	}

	return stbiResult ? SUCCESS : ERROR_IMAGE_FILE_LOAD_FAILED;
}

bool Bitmap::IsBitmapFile(const std::filesystem::path& path)
{
	int x, y, comp;
	return (StbiInfo(path, &x, &y, &comp) == SUCCESS);
}

Result Bitmap::GetFileProperties(const std::filesystem::path& path, uint32_t* pWidth, uint32_t* pHeight, Bitmap::Format* pFormat)
{
	if (!fs::path_exists(path)) {
		return ERROR_PATH_DOES_NOT_EXIST;
	}

	int x = 0;
	int y = 0;
	int comp = 0;
	StbiInfo(path, &x, &y, &comp);

	bool   isRadiance = false;
	Result ppxres = IsRadianceFile(path, isRadiance);
	if (Failed(ppxres)) {
		return ppxres;
	}

	if (!IsNull(pWidth)) {
		*pWidth = static_cast<uint32_t>(x);
	}

	if (!IsNull(pHeight)) {
		*pHeight = static_cast<uint32_t>(y);
	}

	// Force to 4 channels to make things easier for the graphics APIs.
	if (!IsNull(pFormat)) {
		*pFormat = isRadiance ? Bitmap::FORMAT_RGBA_FLOAT : Bitmap::FORMAT_RGBA_UINT8;
	}

	return SUCCESS;
}

char* Bitmap::StbiLoad(const std::filesystem::path& path, Bitmap::Format format, int* pWidth, int* pHeight, int* pChannels, int desiredChannels)
{
	fs::File file;
	if (!file.Open(path)) {
		return nullptr;
	}

	std::vector<stbi_uc> buffer(0);
	if (!file.IsMapped()) {
		buffer.resize(file.GetLength());
		file.Read(buffer.data(), buffer.size());
	}

	const stbi_uc* readPtr = file.IsMapped() ? reinterpret_cast<const stbi_uc*>(file.GetMappedData()) : buffer.data();
	if (format == Bitmap::FORMAT_RGBA_FLOAT) {
		return reinterpret_cast<char*>(stbi_loadf_from_memory(
			readPtr,
			static_cast<int>(file.GetLength()),
			pWidth,
			pHeight,
			pChannels,
			desiredChannels));
	}
	return reinterpret_cast<char*>(stbi_load_from_memory(
		readPtr,
		static_cast<int>(file.GetLength()),
		pWidth,
		pHeight,
		pChannels,
		desiredChannels));
}

Result Bitmap::LoadFile(const std::filesystem::path& path, Bitmap* pBitmap)
{
	if (!fs::path_exists(path)) {
		return ERROR_PATH_DOES_NOT_EXIST;
	}

	bool   isRadiance = false;
	Result ppxres = IsRadianceFile(path, isRadiance);
	if (Failed(ppxres)) {
		return ppxres;
	}

	int            width = 0;
	int            height = 0;
	int            channels = 0;
	int            requiredChannels = 4; // Force to 4 channels to make things easier for the graphics APIs.
	Bitmap::Format format = (isRadiance) ? Bitmap::FORMAT_RGBA_FLOAT : Bitmap::FORMAT_RGBA_UINT8;
	char* dataPtr = StbiLoad(path, format, &width, &height, &channels, requiredChannels);

	if (IsNull(dataPtr)) {
		LOG_ERROR("Failed to open file '" + path.string() + "'");
		return ERROR_IMAGE_FILE_LOAD_FAILED;
	}
	ppxres = Bitmap::Create(width, height, format, dataPtr, pBitmap);
	if (!pBitmap->IsOk()) {
		// Something has gone really wrong if this happens
		stbi_image_free(dataPtr);
		return ERROR_FAILED;
	}
	// Critical! This marks the memory as needing to be freed later!
	pBitmap->mDataIsFromStbi = true;

	return SUCCESS;
}

Result Bitmap::SaveFilePNG(const std::filesystem::path& path, const Bitmap* pBitmap)
{
#if defined(ANDROID)
	ASSERT_MSG(false, "SaveFilePNG not supported on Android");
	return ERROR_IMAGE_FILE_SAVE_FAILED;
#else
	int res = stbi_write_png(path.string().c_str(), pBitmap->GetWidth(), pBitmap->GetHeight(), pBitmap->GetChannelCount(), pBitmap->GetData(), pBitmap->GetRowStride());
	if (res == 0) {
		return ERROR_IMAGE_FILE_SAVE_FAILED;
	}
	return SUCCESS;
#endif
}

Result Bitmap::LoadFromMemory(const size_t dataSize, const void* pData, Bitmap* pBitmap)
{
	if ((dataSize == 0) || IsNull(pData) || IsNull(pBitmap)) {
		return ERROR_UNEXPECTED_NULL_ARGUMENT;
	}

	bool   isRadiance = false;
	Result ppxres = IsRadianceImage(dataSize, pData, isRadiance);
	if (Failed(ppxres)) {
		return ppxres;
	}

	int            width = 0;
	int            height = 0;
	int            channels = 0;
	int            requiredChannels = 4; // Force to 4 channels to make things easier for the graphics APIs.
	Bitmap::Format format = (isRadiance) ? Bitmap::FORMAT_RGBA_FLOAT : Bitmap::FORMAT_RGBA_UINT8;

	void* pStbData = nullptr;
	if (isRadiance) {
		pStbData = stbi_loadf_from_memory(
			static_cast<const stbi_uc*>(pData),
			static_cast<int>(dataSize),
			&width,
			&height,
			&channels,
			requiredChannels);
	}
	else {
		pStbData = stbi_load_from_memory(
			static_cast<const stbi_uc*>(pData),
			static_cast<int>(dataSize),
			&width,
			&height,
			&channels,
			requiredChannels);
	}

	if (IsNull(pStbData)) {
		return ERROR_IMAGE_FILE_LOAD_FAILED;
	}

	ppxres = Bitmap::Create(width, height, format, static_cast<char*>(pStbData), pBitmap);
	if (!pBitmap->IsOk()) {
		// Something has gone really wrong if this happens
		stbi_image_free(pStbData);
		return ERROR_FAILED;
	}
	// Critical! This marks the memory as needing to be freed later!
	pBitmap->mDataIsFromStbi = true;

	return SUCCESS;
}

#pragma endregion

#pragma region Font

Font::Font()
{
}

Font::~Font()
{
}

void Font::AcquireFontMetrics()
{
	stbtt_GetFontVMetrics(
		&mObject->fontInfo,
		&mObject->ascent,
		&mObject->descent,
		&mObject->lineGap);
}

Result Font::CreateFromFile(const std::filesystem::path& path, Font* pFont)
{
	if (IsNull(pFont)) {
		return ERROR_UNEXPECTED_NULL_ARGUMENT;
	}

	if (!fs::path_exists(path)) {
		return ERROR_PATH_DOES_NOT_EXIST;
	}

	std::ifstream is(path.c_str(), std::ios::binary);
	if (!is.is_open()) {
		return ERROR_BAD_DATA_SOURCE;
	}

	is.seekg(0, std::ios::end);
	size_t size = is.tellg();
	is.seekg(0, std::ios::beg);

	auto object = std::make_shared<Font::Object>();
	if (!object) {
		return ERROR_ALLOCATION_FAILED;
	}

	object->fontData.resize(size);
	is.read(reinterpret_cast<char*>(object->fontData.data()), size);

	int stbres = stbtt_InitFont(&object->fontInfo, object->fontData.data(), 0);
	if (stbres == 0) {
		return Result::ERROR_FONT_PARSE_FAILED;
	}

	pFont->mObject = object;
	pFont->AcquireFontMetrics();

	return SUCCESS;
}

Result Font::CreateFromMemory(size_t size, const char* pData, Font* pFont)
{
	if (IsNull(pFont)) {
		return ERROR_UNEXPECTED_NULL_ARGUMENT;
	}

	if ((size == 0) || IsNull(pData)) {
		return ERROR_BAD_DATA_SOURCE;
	}

	auto object = std::make_shared<Font::Object>();
	if (!object) {
		return ERROR_ALLOCATION_FAILED;
	}

	object->fontData.resize(size);
	std::memcpy(object->fontData.data(), pData, size);

	int stbres = stbtt_InitFont(&object->fontInfo, object->fontData.data(), 0);
	if (stbres == 0) {
		return Result::ERROR_FONT_PARSE_FAILED;
	}

	pFont->mObject = object;
	pFont->AcquireFontMetrics();

	return SUCCESS;
}

float Font::GetScale(float fontSizeInPixels) const
{
	float scale = stbtt_ScaleForPixelHeight(&mObject->fontInfo, fontSizeInPixels);
	return scale;
}

void Font::GetFontMetrics(float fontSizeInPixels, FontMetrics* pMetrics) const
{
	if (IsNull(pMetrics)) {
		return;
	}

	float scale = stbtt_ScaleForPixelHeight(&mObject->fontInfo, fontSizeInPixels);

	int ascent = 0;
	int descent = 0;
	int lineGap = 0;
	stbtt_GetFontVMetrics(
		&mObject->fontInfo,
		&ascent,
		&descent,
		&lineGap);

	pMetrics->ascent = ascent * scale;
	pMetrics->descent = descent * scale;
	pMetrics->lineGap = lineGap * scale;
}

void Font::GetGlyphMetrics(
	float         fontSizeInPixels,
	uint32_t      codepoint,
	float         subpixelShiftX,
	float         subpixelShiftY,
	GlyphMetrics* pMetrics) const
{
	if (IsNull(pMetrics)) {
		return;
	}

	float scale = GetScale(fontSizeInPixels);

	int advanceWidth = 0;
	int leftBearing = 0;
	stbtt_GetCodepointHMetrics(
		&mObject->fontInfo,
		static_cast<int>(codepoint),
		&advanceWidth,
		&leftBearing);
	pMetrics->advance = advanceWidth * scale;
	pMetrics->leftBearing = leftBearing * scale;

	stbtt_GetCodepointBitmapBoxSubpixel(
		&mObject->fontInfo,
		static_cast<int>(codepoint),
		scale,
		scale,
		subpixelShiftX,
		subpixelShiftY,
		&pMetrics->box.x0,
		&pMetrics->box.y0,
		&pMetrics->box.x1,
		&pMetrics->box.y1);
}

void Font::RenderGlyphBitmap(
	float          fontSizeInPixels,
	uint32_t       codepoint,
	float          subpixelShiftX,
	float          subpixelShiftY,
	uint32_t       glyphWidth,
	uint32_t       glyphHeight,
	uint32_t       rowStride,
	unsigned char* pOutput) const
{
	float scale = stbtt_ScaleForPixelHeight(&mObject->fontInfo, fontSizeInPixels);

	stbtt_MakeCodepointBitmapSubpixel(
		&mObject->fontInfo,
		pOutput,
		static_cast<int>(glyphWidth),
		static_cast<int>(glyphHeight),
		static_cast<int>(rowStride),
		scale,
		scale,
		subpixelShiftX,
		subpixelShiftY,
		static_cast<int>(codepoint));
}

// void  Font::GetGlyphBitmap(float fontSizeInPixels)
//{
//     stbtt_MakeCodepointBitmapSubpixel(
//         &mObject->fontInfo,
//         )
// }

// uint2 Font::GetGlyphBounds(float fontSizeInPixels, uint32_t codePoint) const
//{
//     int glyphIndex = stbtt_FindGlyphIndex(&mObject->fontInfo, static_cast<int>(codePoint));
//     if (glyphIndex == 0) {
//         return uint2(0);
//     }
//
//     int advancedWidth   = 0;
//     int leftSideBearing = 0;
//     stbtt_GetGlyphHMetrics(&mObject->fontInfo, glyphIndex, &advancedWidth, &leftSideBearing);
//
//     float scale  = stbtt_ScaleForPixelHeight(&mObject->fontInfo, fontSizeInPixels);
//     float width  = (advancedWidth * scale) + 0.5f;
//     float height = static_cast<float>(mObject->ascent + abs(mObject->descent)) * scale + 0.5f;
//
//     uint2 bounds = uint2(static_cast<uint32_t>(width), static_cast<uint32_t>(height));
//     return bounds;
// }

#pragma endregion

#pragma region Font Inconsolata

namespace imgui {

	const unsigned int kFontInconsolataSize = 97864;

	// clang-format off
	const unsigned char kFontInconsolata[] = {
		0x00,0x01,0x00,0x00,0x00,0x12,0x01,0x00,0x00,0x04,0x00,0x20,0x47,0x44,0x45,0x46,
		0x56,0xb3,0x54,0x99,0x00,0x01,0x56,0x78,0x00,0x00,0x01,0x34,0x47,0x50,0x4f,0x53,
		0x0d,0xda,0x10,0x8a,0x00,0x01,0x57,0xac,0x00,0x00,0x1c,0x92,0x47,0x53,0x55,0x42,
		0x16,0xda,0x4e,0xfc,0x00,0x01,0x74,0x40,0x00,0x00,0x09,0xc4,0x4f,0x53,0x2f,0x32,
		0x5f,0x95,0x23,0x31,0x00,0x01,0x0c,0x94,0x00,0x00,0x00,0x60,0x53,0x54,0x41,0x54,
		0xf5,0xb7,0xdf,0xae,0x00,0x01,0x7e,0x04,0x00,0x00,0x00,0x44,0x63,0x6d,0x61,0x70,
		0x2d,0x65,0xdc,0x7a,0x00,0x01,0x0c,0xf4,0x00,0x00,0x0a,0x40,0x63,0x76,0x74,0x20,
		0x16,0xeb,0x0d,0xba,0x00,0x01,0x29,0x84,0x00,0x00,0x00,0xf0,0x66,0x70,0x67,0x6d,
		0xe2,0x19,0x9e,0x5a,0x00,0x01,0x17,0x34,0x00,0x00,0x0f,0x94,0x67,0x61,0x73,0x70,
		0x00,0x00,0x00,0x10,0x00,0x01,0x56,0x70,0x00,0x00,0x00,0x08,0x67,0x6c,0x79,0x66,
		0x40,0x37,0x2e,0x0f,0x00,0x00,0x01,0x2c,0x00,0x00,0xf4,0x5c,0x68,0x65,0x61,0x64,
		0x19,0x41,0x8d,0x10,0x00,0x00,0xfd,0x30,0x00,0x00,0x00,0x36,0x68,0x68,0x65,0x61,
		0x08,0xbd,0x06,0xc6,0x00,0x01,0x0c,0x70,0x00,0x00,0x00,0x24,0x68,0x6d,0x74,0x78,
		0x09,0x14,0xd3,0xf6,0x00,0x00,0xfd,0x68,0x00,0x00,0x0f,0x08,0x6c,0x6f,0x63,0x61,
		0x2b,0x2c,0xee,0xe5,0x00,0x00,0xf5,0xa8,0x00,0x00,0x07,0x86,0x6d,0x61,0x78,0x70,
		0x07,0x7a,0x10,0xd4,0x00,0x00,0xf5,0x88,0x00,0x00,0x00,0x20,0x6e,0x61,0x6d,0x65,
		0x93,0x7e,0xb0,0xdb,0x00,0x01,0x2a,0x74,0x00,0x00,0x05,0x60,0x70,0x6f,0x73,0x74,
		0xa2,0x18,0xb3,0xb6,0x00,0x01,0x2f,0xd4,0x00,0x00,0x26,0x9a,0x70,0x72,0x65,0x70,
		0x2b,0xfa,0x72,0x3a,0x00,0x01,0x26,0xc8,0x00,0x00,0x02,0xbb,0x00,0x02,0x00,0x10,
		0x00,0x00,0x01,0xe4,0x02,0x7a,0x00,0x03,0x00,0x0a,0x00,0x1b,0x40,0x0d,0x04,0x06,
		0x02,0x01,0x01,0x06,0x07,0x03,0x72,0x0a,0x06,0x08,0x72,0x00,0x2b,0xc4,0x2b,0x11,
		0x39,0x2f,0x33,0x11,0x39,0x30,0x31,0x65,0x23,0x37,0x33,0x27,0x03,0x23,0x13,0x33,
		0x13,0x23,0x01,0x65,0xe2,0x0e,0xc4,0x5c,0xa4,0x45,0xe6,0x08,0xe6,0x48,0xb6,0x36,
		0xee,0xfe,0x26,0x02,0x7a,0xfd,0x86,0x00,0xff,0xff,0x00,0x10,0x00,0x00,0x01,0xe4,
		0x03,0x17,0x06,0x26,0x00,0x01,0x00,0x00,0x01,0x06,0x03,0xa3,0xed,0x00,0x00,0x0b,
		0xb6,0x02,0x0b,0x07,0x01,0x01,0x1a,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x10,
		0x00,0x00,0x01,0xe4,0x03,0x13,0x06,0x26,0x00,0x01,0x00,0x00,0x01,0x06,0x03,0xa7,
		0x00,0x00,0x00,0x0b,0xb6,0x02,0x0f,0x07,0x01,0x01,0x25,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x10,0x00,0x00,0x01,0xe4,0x03,0x86,0x06,0x26,0x00,0x01,0x00,0x00,
		0x00,0x26,0x03,0xa7,0x00,0x00,0x01,0x06,0x03,0xa3,0x0b,0x6f,0x00,0x15,0x40,0x0e,
		0x03,0x1a,0x16,0x01,0x01,0x34,0x56,0x02,0x0f,0x07,0x01,0x01,0x25,0x56,0x00,0x2b,
		0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x10,0xff,0x6d,0x01,0xe4,0x03,0x13,0x06,0x26,
		0x00,0x01,0x00,0x00,0x00,0x26,0x03,0x8a,0x0b,0x00,0x01,0x06,0x03,0xa7,0x00,0x00,
		0x00,0x18,0x40,0x0c,0x03,0x1b,0x07,0x01,0x01,0x25,0x56,0x02,0x11,0x0a,0x01,0x01,
		0xb8,0xff,0xd4,0xb0,0x56,0x00,0x2b,0x34,0x2b,0x34,0xff,0xff,0x00,0x10,0x00,0x00,
		0x01,0xe4,0x03,0xbb,0x06,0x26,0x00,0x01,0x00,0x00,0x00,0x26,0x03,0xa7,0x00,0x00,
		0x01,0x07,0x03,0xa2,0xff,0xf2,0x00,0xa4,0x00,0x15,0x40,0x0e,0x03,0x1a,0x16,0x01,
		0x01,0x69,0x56,0x02,0x0f,0x07,0x01,0x01,0x25,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x10,0x00,0x00,0x01,0xe4,0x03,0xb7,0x06,0x26,0x00,0x01,0x00,0x00,
		0x00,0x26,0x03,0xa7,0x00,0x00,0x01,0x07,0x03,0x85,0x00,0x05,0x00,0xf7,0x00,0x15,
		0x40,0x0e,0x03,0x21,0x16,0x01,0x01,0x33,0x56,0x02,0x0f,0x07,0x01,0x01,0x25,0x56,
		0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x10,0x00,0x00,0x01,0xe4,0x03,0xa2,
		0x06,0x26,0x00,0x01,0x00,0x00,0x00,0x26,0x03,0xa7,0x00,0x00,0x01,0x07,0x03,0xb4,
		0xff,0xf1,0x00,0xf7,0x00,0x15,0x40,0x0e,0x03,0x1e,0x16,0x01,0x01,0x66,0x56,0x02,
		0x0f,0x07,0x01,0x01,0x25,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x10,
		0x00,0x00,0x01,0xe4,0x03,0x17,0x06,0x26,0x00,0x01,0x00,0x00,0x01,0x06,0x03,0xa5,
		0x00,0x00,0x00,0x0b,0xb6,0x02,0x0b,0x07,0x01,0x01,0x15,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x10,0x00,0x00,0x02,0x1a,0x03,0x81,0x06,0x26,0x00,0x01,0x00,0x00,
		0x01,0x06,0x03,0xbd,0xff,0x00,0x00,0x15,0x40,0x0e,0x03,0x13,0x0b,0x01,0x01,0x99,
		0x56,0x02,0x0b,0x07,0x01,0x01,0x15,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x10,0xff,0x6d,0x01,0xe4,0x03,0x17,0x06,0x26,0x00,0x01,0x00,0x00,0x00,0x26,
		0x03,0x8a,0x0b,0x00,0x01,0x06,0x03,0xa5,0x00,0x00,0x00,0x18,0x40,0x0c,0x03,0x17,
		0x07,0x01,0x01,0x15,0x56,0x02,0x11,0x0a,0x01,0x01,0xb8,0xff,0xd4,0xb0,0x56,0x00,
		0x2b,0x34,0x2b,0x34,0xff,0xff,0x00,0x10,0x00,0x00,0x01,0xe4,0x03,0xa1,0x06,0x26,
		0x00,0x01,0x00,0x00,0x01,0x06,0x03,0xbe,0x00,0x00,0x00,0x15,0x40,0x0e,0x03,0x12,
		0x0b,0x01,0x01,0x8f,0x56,0x02,0x0b,0x07,0x01,0x01,0x15,0x56,0x00,0x2b,0x34,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x10,0x00,0x00,0x01,0xe4,0x03,0xa2,0x06,0x26,0x00,0x01,
		0x00,0x00,0x01,0x06,0x03,0xbf,0xfc,0x00,0x00,0x15,0x40,0x0e,0x03,0x19,0x0b,0x01,
		0x01,0x5e,0x56,0x02,0x0b,0x07,0x01,0x01,0x15,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x10,0x00,0x00,0x01,0xe4,0x03,0xa5,0x06,0x26,0x00,0x01,0x00,0x00,
		0x01,0x06,0x03,0xc0,0x00,0x00,0x00,0x15,0x40,0x0e,0x03,0x16,0x0b,0x01,0x01,0xa9,
		0x56,0x02,0x0b,0x07,0x01,0x01,0x15,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x10,0x00,0x00,0x01,0xe4,0x03,0x50,0x06,0x26,0x00,0x01,0x00,0x00,0x01,0x07,
		0x03,0x86,0xff,0xeb,0x00,0xa6,0x00,0x0d,0xb7,0x03,0x02,0x0b,0x07,0x01,0x01,0x27,
		0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x10,0x00,0x00,0x01,0xe4,0x03,0x15,
		0x06,0x26,0x00,0x01,0x00,0x00,0x01,0x06,0x03,0xa0,0xff,0x00,0x00,0x0d,0xb7,0x03,
		0x02,0x0b,0x07,0x01,0x01,0x36,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x10,
		0xff,0x6d,0x01,0xe4,0x02,0x7a,0x06,0x26,0x00,0x01,0x00,0x00,0x01,0x06,0x03,0x8a,
		0x0b,0x00,0x00,0x0e,0xb4,0x02,0x11,0x0a,0x01,0x01,0xb8,0xff,0xd4,0xb0,0x56,0x00,
		0x2b,0x34,0xff,0xff,0x00,0x10,0x00,0x00,0x01,0xe4,0x03,0x17,0x06,0x26,0x00,0x01,
		0x00,0x00,0x01,0x06,0x03,0xa2,0xf2,0x00,0x00,0x0b,0xb6,0x02,0x0b,0x07,0x01,0x01,
		0x1a,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x10,0x00,0x00,0x01,0xe4,0x03,0x66,
		0x06,0x26,0x00,0x01,0x00,0x00,0x01,0x07,0x03,0x85,0x00,0x0f,0x00,0xa6,0x00,0x0b,
		0xb6,0x02,0x12,0x07,0x01,0x01,0x37,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x10,
		0x00,0x00,0x01,0xe4,0x03,0x2a,0x06,0x26,0x00,0x01,0x00,0x00,0x01,0x07,0x03,0x87,
		0xff,0xf8,0x00,0xa6,0x00,0x0b,0xb6,0x02,0x0b,0x07,0x01,0x01,0x3c,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x10,0x00,0x00,0x01,0xe4,0x03,0x13,0x06,0x26,0x00,0x01,
		0x00,0x00,0x01,0x07,0x03,0x84,0x00,0x00,0x00,0xa6,0x00,0x0b,0xb6,0x02,0x0b,0x07,
		0x01,0x01,0x61,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x10,0xff,0x1d,0x01,0xe4,
		0x02,0x7a,0x06,0x26,0x00,0x01,0x00,0x00,0x01,0x07,0x03,0x8e,0x00,0xa5,0x00,0x00,
		0x00,0x0b,0xb6,0x02,0x15,0x0a,0x00,0x00,0x00,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x10,0x00,0x00,0x01,0xe4,0x03,0x1b,0x06,0x26,0x00,0x01,0x00,0x00,0x01,0x06,
		0x03,0xa8,0xff,0x00,0x00,0x10,0xb5,0x03,0x02,0x0b,0x07,0x00,0x00,0xb8,0xff,0xf1,
		0xb0,0x56,0x00,0x2b,0x34,0x34,0xff,0xff,0x00,0x10,0x00,0x00,0x01,0xe4,0x03,0xc3,
		0x06,0x26,0x00,0x01,0x00,0x00,0x00,0x26,0x03,0xa8,0xff,0x00,0x01,0x07,0x03,0xa3,
		0xff,0xed,0x00,0xac,0x00,0x1a,0x40,0x0d,0x04,0x27,0x07,0x01,0x01,0xc6,0x56,0x03,
		0x02,0x0b,0x07,0x00,0x00,0xb8,0xff,0xf1,0xb0,0x56,0x00,0x2b,0x34,0x34,0x2b,0x34,
		0xff,0xff,0x00,0x10,0x00,0x00,0x01,0xe4,0x03,0x1d,0x06,0x26,0x00,0x01,0x00,0x00,
		0x01,0x06,0x03,0xa9,0xff,0x00,0x00,0x0b,0xb6,0x02,0x0f,0x07,0x01,0x01,0x36,0x56,
		0x00,0x2b,0x34,0x00,0x00,0x02,0x00,0x0f,0x00,0x00,0x01,0xef,0x02,0x70,0x00,0x0f,
		0x00,0x13,0x00,0x2b,0x40,0x15,0x10,0x0e,0x05,0x08,0x0e,0x08,0x0e,0x08,0x00,0x13,
		0x04,0x04,0x01,0x02,0x72,0x09,0x0c,0x0c,0x00,0x08,0x72,0x00,0x2b,0x32,0x2f,0x33,
		0x2b,0x32,0x11,0x33,0x11,0x39,0x39,0x2f,0x2f,0x11,0x33,0x11,0x33,0x30,0x31,0x73,
		0x13,0x21,0x15,0x23,0x15,0x33,0x15,0x23,0x15,0x33,0x15,0x23,0x35,0x23,0x07,0x37,
		0x33,0x11,0x23,0x0f,0xc4,0x01,0x1c,0xab,0x91,0x91,0xa9,0xe6,0x82,0x36,0x44,0x74,
		0x0b,0x02,0x70,0x3e,0xcd,0x40,0xe7,0x3e,0xa9,0xa9,0xe3,0x01,0x4f,0x00,0xff,0xff,
		0x00,0x0f,0x00,0x00,0x01,0xef,0x03,0x17,0x06,0x26,0x00,0x1a,0x00,0x00,0x01,0x06,
		0x03,0xa3,0x00,0x00,0x00,0x0b,0xb6,0x02,0x14,0x01,0x01,0x01,0x24,0x56,0x00,0x2b,
		0x34,0x00,0x00,0x03,0x00,0x30,0x00,0x00,0x01,0xc9,0x02,0x6f,0x00,0x15,0x00,0x20,
		0x00,0x2c,0x00,0x1d,0x40,0x0e,0x0b,0x21,0x21,0x20,0x20,0x00,0x2c,0x01,0x02,0x72,
		0x16,0x00,0x08,0x72,0x00,0x2b,0x32,0x2b,0x32,0x11,0x39,0x2f,0x33,0x12,0x39,0x30,
		0x31,0x73,0x11,0x33,0x32,0x1e,0x02,0x15,0x14,0x06,0x06,0x07,0x1e,0x03,0x15,0x14,
		0x0e,0x02,0x23,0x27,0x33,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x23,0x35,0x33,
		0x32,0x36,0x36,0x35,0x34,0x2e,0x02,0x23,0x23,0x30,0xb1,0x36,0x4e,0x33,0x18,0x15,
		0x29,0x1e,0x1a,0x2b,0x1f,0x11,0x1c,0x39,0x58,0x3c,0x6b,0x77,0x2c,0x42,0x25,0x20,
		0x47,0x3d,0x66,0x62,0x37,0x40,0x1c,0x0f,0x20,0x34,0x25,0x6d,0x02,0x6f,0x16,0x28,
		0x38,0x21,0x1d,0x38,0x2a,0x0b,0x09,0x20,0x2b,0x31,0x1a,0x27,0x41,0x2e,0x19,0x3d,
		0x17,0x34,0x2b,0x25,0x39,0x21,0x3b,0x1a,0x2d,0x1c,0x15,0x24,0x1b,0x10,0x00,0x01,
		0x00,0x29,0xff,0xf6,0x01,0xd5,0x02,0x74,0x00,0x29,0x00,0x21,0x40,0x10,0x26,0x25,
		0x25,0x21,0x21,0x29,0x09,0x72,0x11,0x0e,0x10,0x10,0x17,0x0b,0x03,0x72,0x00,0x2b,
		0x32,0x32,0x11,0x33,0x33,0x2b,0x32,0x11,0x33,0x11,0x33,0x30,0x31,0x45,0x22,0x2e,
		0x02,0x35,0x34,0x3e,0x03,0x33,0x32,0x16,0x17,0x07,0x07,0x27,0x36,0x26,0x27,0x26,
		0x26,0x23,0x22,0x0e,0x02,0x15,0x14,0x1e,0x02,0x33,0x32,0x36,0x36,0x37,0x17,0x06,
		0x06,0x23,0x01,0x1d,0x33,0x58,0x43,0x26,0x1c,0x30,0x3e,0x44,0x22,0x44,0x60,0x18,
		0x3c,0x09,0x03,0x03,0x06,0x08,0x19,0x35,0x1d,0x27,0x3f,0x2d,0x17,0x1b,0x2f,0x3f,
		0x24,0x19,0x2f,0x28,0x0e,0x34,0x1e,0x54,0x3d,0x0a,0x25,0x4e,0x78,0x53,0x49,0x6d,
		0x4a,0x2c,0x14,0x43,0x38,0x1c,0x04,0x07,0x08,0x0d,0x0e,0x22,0x17,0x23,0x43,0x60,
		0x3d,0x3b,0x60,0x46,0x26,0x12,0x23,0x17,0x22,0x32,0x34,0x00,0xff,0xff,0x00,0x29,
		0xff,0xf6,0x01,0xd5,0x03,0x17,0x06,0x26,0x00,0x1d,0x00,0x00,0x01,0x06,0x03,0xa3,
		0x01,0x00,0x00,0x0b,0xb6,0x01,0x2a,0x0b,0x01,0x01,0x20,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x29,0xff,0xf6,0x01,0xd5,0x03,0x19,0x06,0x26,0x00,0x1d,0x00,0x00,
		0x01,0x06,0x03,0xa6,0x14,0x00,0x00,0x0b,0xb6,0x01,0x2d,0x0b,0x01,0x01,0x1d,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x29,0xff,0x3b,0x01,0xd5,0x02,0x74,0x06,0x26,
		0x00,0x1d,0x00,0x00,0x01,0x06,0x03,0x8d,0x09,0x00,0x00,0x0b,0xb6,0x01,0x39,0x29,
		0x00,0x00,0x0a,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x29,0xff,0x3b,0x01,0xd5,
		0x03,0x17,0x06,0x26,0x00,0x1d,0x00,0x00,0x00,0x26,0x03,0x8d,0x09,0x00,0x01,0x06,
		0x03,0xa3,0x01,0x00,0x00,0x15,0x40,0x0e,0x02,0x42,0x0b,0x01,0x01,0x20,0x56,0x01,
		0x39,0x29,0x00,0x00,0x0a,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x29,
		0xff,0xf6,0x01,0xd5,0x03,0x17,0x06,0x26,0x00,0x1d,0x00,0x00,0x01,0x06,0x03,0xa5,
		0x14,0x00,0x00,0x0b,0xb6,0x01,0x2a,0x0b,0x01,0x01,0x1b,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x29,0xff,0xf6,0x01,0xd5,0x03,0x1c,0x06,0x26,0x00,0x1d,0x00,0x00,
		0x01,0x06,0x03,0xa1,0x13,0x00,0x00,0x0b,0xb6,0x01,0x2a,0x0b,0x01,0x01,0x41,0x56,
		0x00,0x2b,0x34,0x00,0x00,0x02,0x00,0x36,0xff,0xff,0x01,0xcc,0x02,0x6f,0x00,0x0f,
		0x00,0x1a,0x00,0x10,0xb7,0x1a,0x01,0x02,0x72,0x10,0x00,0x08,0x72,0x00,0x2b,0x32,
		0x2b,0x32,0x30,0x31,0x57,0x11,0x33,0x32,0x16,0x16,0x17,0x1e,0x02,0x15,0x0e,0x03,
		0x23,0x27,0x33,0x32,0x36,0x36,0x27,0x34,0x26,0x26,0x23,0x23,0x36,0x91,0x36,0x4a,
		0x34,0x14,0x15,0x1b,0x0d,0x03,0x20,0x40,0x65,0x49,0x43,0x40,0x48,0x5b,0x2c,0x01,
		0x28,0x55,0x46,0x4b,0x01,0x02,0x70,0x14,0x25,0x1c,0x1c,0x46,0x53,0x31,0x48,0x72,
		0x50,0x2b,0x37,0x3a,0x70,0x50,0x52,0x74,0x3e,0x00,0x00,0x02,0x00,0x1e,0xff,0xff,
		0x01,0xd2,0x02,0x6f,0x00,0x14,0x00,0x23,0x00,0x21,0x40,0x10,0x15,0x00,0x03,0x20,
		0x02,0x20,0x23,0x23,0x00,0x1f,0x05,0x02,0x72,0x00,0x08,0x72,0x00,0x2b,0x2b,0x32,
		0x11,0x39,0x2f,0x33,0x33,0x11,0x33,0x11,0x33,0x30,0x31,0x57,0x11,0x23,0x35,0x33,
		0x11,0x33,0x32,0x1e,0x02,0x17,0x1e,0x02,0x15,0x14,0x0e,0x02,0x23,0x27,0x33,0x32,
		0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x23,0x15,0x33,0x15,0x23,0x4f,0x31,0x31,0x8b,
		0x2f,0x44,0x30,0x22,0x0c,0x09,0x12,0x0c,0x23,0x43,0x61,0x3e,0x3e,0x3c,0x40,0x57,
		0x2d,0x27,0x52,0x40,0x47,0x69,0x69,0x01,0x01,0x2e,0x3a,0x01,0x08,0x14,0x22,0x29,
		0x16,0x10,0x36,0x4d,0x32,0x49,0x74,0x4f,0x2a,0x3a,0x3b,0x70,0x4e,0x50,0x74,0x3e,
		0xcd,0x3a,0xff,0xff,0x00,0x36,0xff,0xff,0x01,0xcc,0x03,0x19,0x06,0x26,0x00,0x24,
		0x00,0x00,0x01,0x06,0x03,0xa6,0xe2,0x00,0x00,0x0b,0xb6,0x02,0x1e,0x01,0x01,0x01,
		0x22,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x1e,0xff,0xff,0x01,0xd2,0x02,0x6f,
		0x06,0x06,0x00,0x25,0x00,0x00,0xff,0xff,0x00,0x36,0xff,0x6d,0x01,0xcc,0x02,0x6f,
		0x06,0x26,0x00,0x24,0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x02,
		0x21,0x00,0x01,0x01,0xb8,0xff,0xd5,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x36,
		0xff,0x65,0x01,0xcc,0x02,0x6f,0x06,0x26,0x00,0x24,0x00,0x00,0x01,0x06,0x03,0x90,
		0x02,0x00,0x00,0x0e,0xb4,0x02,0x1c,0x00,0x01,0x01,0xb8,0xff,0x9e,0xb0,0x56,0x00,
		0x2b,0x34,0x00,0x01,0x00,0x3b,0x00,0x00,0x01,0xb9,0x02,0x70,0x00,0x0b,0x00,0x19,
		0x40,0x0c,0x05,0x08,0x08,0x00,0x04,0x01,0x02,0x72,0x09,0x00,0x08,0x72,0x00,0x2b,
		0x32,0x2b,0x32,0x11,0x39,0x2f,0x33,0x30,0x31,0x73,0x11,0x21,0x15,0x21,0x15,0x21,
		0x15,0x21,0x15,0x21,0x15,0x3b,0x01,0x7e,0xfe,0xc4,0x01,0x05,0xfe,0xfb,0x01,0x39,
		0x02,0x70,0x3e,0xcd,0x40,0xe7,0x3e,0x00,0xff,0xff,0x00,0x3b,0x00,0x00,0x01,0xb9,
		0x03,0x17,0x06,0x26,0x00,0x2a,0x00,0x00,0x01,0x06,0x03,0xa3,0xf6,0x00,0x00,0x0b,
		0xb6,0x01,0x0c,0x01,0x01,0x01,0x24,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x3b,
		0x00,0x00,0x01,0xb9,0x03,0x13,0x06,0x26,0x00,0x2a,0x00,0x00,0x01,0x06,0x03,0xa7,
		0x09,0x00,0x00,0x0b,0xb6,0x01,0x10,0x01,0x01,0x01,0x2f,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x3b,0x00,0x00,0x01,0xb9,0x03,0x19,0x06,0x26,0x00,0x2a,0x00,0x00,
		0x01,0x06,0x03,0xa6,0x09,0x00,0x00,0x0b,0xb6,0x01,0x0f,0x01,0x01,0x01,0x21,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x3b,0xff,0x3b,0x01,0xb9,0x03,0x13,0x06,0x26,
		0x00,0x2a,0x00,0x00,0x00,0x26,0x03,0x8d,0xeb,0x00,0x01,0x06,0x03,0xa7,0x09,0x00,
		0x00,0x15,0x40,0x0e,0x02,0x28,0x01,0x01,0x01,0x2f,0x56,0x01,0x1b,0x00,0x01,0x00,
		0x00,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x3b,0x00,0x00,0x01,0xb9,
		0x03,0x17,0x06,0x26,0x00,0x2a,0x00,0x00,0x01,0x06,0x03,0xa5,0x09,0x00,0x00,0x0b,
		0xb6,0x01,0x0c,0x01,0x01,0x01,0x1f,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x3b,
		0x00,0x00,0x02,0x23,0x03,0x81,0x06,0x26,0x00,0x2a,0x00,0x00,0x01,0x06,0x03,0xbd,
		0x08,0x00,0x00,0x15,0x40,0x0e,0x02,0x13,0x0c,0x01,0x01,0x6f,0x56,0x01,0x0c,0x01,
		0x01,0x01,0x1f,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x3b,0xff,0x6d,
		0x01,0xb9,0x03,0x17,0x06,0x26,0x00,0x2a,0x00,0x00,0x00,0x26,0x03,0x8a,0x0b,0x00,
		0x01,0x06,0x03,0xa5,0x09,0x00,0x00,0x18,0x40,0x0c,0x02,0x18,0x01,0x01,0x01,0x1f,
		0x56,0x01,0x12,0x00,0x01,0x01,0xb8,0xff,0xd4,0xb0,0x56,0x00,0x2b,0x34,0x2b,0x34,
		0xff,0xff,0x00,0x3b,0x00,0x00,0x01,0xb9,0x03,0xa1,0x06,0x26,0x00,0x2a,0x00,0x00,
		0x01,0x06,0x03,0xbe,0x09,0x00,0x00,0x15,0x40,0x0e,0x02,0x13,0x01,0x01,0x01,0xae,
		0x56,0x01,0x0c,0x01,0x01,0x01,0x1f,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x3b,0x00,0x00,0x01,0xcb,0x03,0xa2,0x06,0x26,0x00,0x2a,0x00,0x00,0x01,0x06,
		0x03,0xbf,0x05,0x00,0x00,0x15,0x40,0x0e,0x02,0x1a,0x0c,0x01,0x01,0x5e,0x56,0x01,
		0x0c,0x01,0x01,0x01,0x1f,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x3b,
		0x00,0x00,0x01,0xb9,0x03,0xa5,0x06,0x26,0x00,0x2a,0x00,0x00,0x01,0x06,0x03,0xc0,
		0x09,0x00,0x00,0x15,0x40,0x0e,0x02,0x17,0x01,0x01,0x01,0xc8,0x56,0x01,0x0c,0x01,
		0x01,0x01,0x1f,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x3b,0x00,0x00,
		0x01,0xb9,0x03,0x50,0x06,0x26,0x00,0x2a,0x00,0x00,0x01,0x07,0x03,0x86,0xff,0xf4,
		0x00,0xa6,0x00,0x0d,0xb7,0x02,0x01,0x0c,0x01,0x01,0x01,0x31,0x56,0x00,0x2b,0x34,
		0x34,0x00,0xff,0xff,0x00,0x3b,0x00,0x00,0x01,0xb9,0x03,0x15,0x06,0x26,0x00,0x2a,
		0x00,0x00,0x01,0x06,0x03,0xa0,0x08,0x00,0x00,0x0d,0xb7,0x02,0x01,0x0c,0x01,0x01,
		0x01,0x40,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x3b,0x00,0x00,0x01,0xb9,
		0x03,0x1c,0x06,0x26,0x00,0x2a,0x00,0x00,0x01,0x06,0x03,0xa1,0x08,0x00,0x00,0x0b,
		0xb6,0x01,0x0c,0x01,0x01,0x01,0x45,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x3b,
		0xff,0x6d,0x01,0xb9,0x02,0x70,0x06,0x26,0x00,0x2a,0x00,0x00,0x01,0x06,0x03,0x8a,
		0x0b,0x00,0x00,0x0e,0xb4,0x01,0x12,0x00,0x01,0x01,0xb8,0xff,0xd4,0xb0,0x56,0x00,
		0x2b,0x34,0xff,0xff,0x00,0x3b,0x00,0x00,0x01,0xb9,0x03,0x17,0x06,0x26,0x00,0x2a,
		0x00,0x00,0x01,0x06,0x03,0xa2,0xfb,0x00,0x00,0x0b,0xb6,0x01,0x0c,0x01,0x01,0x01,
		0x24,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x3b,0x00,0x00,0x01,0xb9,0x03,0x66,
		0x06,0x26,0x00,0x2a,0x00,0x00,0x01,0x07,0x03,0x85,0x00,0x18,0x00,0xa6,0x00,0x0b,
		0xb6,0x01,0x13,0x01,0x01,0x01,0x41,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x3b,
		0x00,0x00,0x01,0xb9,0x03,0x2a,0x06,0x26,0x00,0x2a,0x00,0x00,0x01,0x07,0x03,0x87,
		0x00,0x01,0x00,0xa6,0x00,0x0b,0xb6,0x01,0x0c,0x01,0x01,0x01,0x46,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x3b,0x00,0x00,0x01,0xb9,0x03,0x13,0x06,0x26,0x00,0x2a,
		0x00,0x00,0x01,0x07,0x03,0x84,0x00,0x09,0x00,0xa6,0x00,0x0b,0xb6,0x01,0x0c,0x01,
		0x01,0x01,0x6b,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x3b,0x00,0x00,0x01,0xb9,
		0x03,0xb1,0x06,0x26,0x00,0x2a,0x00,0x00,0x00,0x27,0x03,0x84,0x00,0x09,0x00,0xa6,
		0x01,0x07,0x03,0xa3,0xff,0xf6,0x00,0x9a,0x00,0x15,0x40,0x0e,0x02,0x10,0x0c,0x01,
		0x01,0x53,0x56,0x01,0x0c,0x01,0x01,0x01,0x6b,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x3b,0x00,0x00,0x01,0xb9,0x03,0xb1,0x06,0x26,0x00,0x2a,0x00,0x00,
		0x00,0x27,0x03,0x84,0x00,0x09,0x00,0xa6,0x01,0x07,0x03,0xa2,0xff,0xfb,0x00,0x9a,
		0x00,0x15,0x40,0x0e,0x02,0x10,0x0c,0x01,0x01,0x53,0x56,0x01,0x0c,0x01,0x01,0x01,
		0x6b,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x3b,0xff,0x1d,0x01,0xb9,
		0x02,0x70,0x06,0x26,0x00,0x2a,0x00,0x00,0x01,0x06,0x03,0x9f,0x00,0x00,0x00,0x0b,
		0xb6,0x01,0x16,0x00,0x00,0x00,0x00,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x3b,
		0x00,0x00,0x01,0xb9,0x03,0x1d,0x06,0x26,0x00,0x2a,0x00,0x00,0x01,0x06,0x03,0xa9,
		0x08,0x00,0x00,0x0b,0xb6,0x01,0x10,0x01,0x01,0x01,0x40,0x56,0x00,0x2b,0x34,0x00,
		0x00,0x02,0x00,0x47,0xff,0xf5,0x01,0xad,0x02,0x6f,0x00,0x20,0x00,0x27,0x00,0x21,
		0x40,0x11,0x0a,0x27,0x26,0x03,0x0b,0x0b,0x14,0x20,0x21,0x25,0x25,0x22,0x02,0x72,
		0x20,0x09,0x72,0x00,0x2b,0x2b,0x32,0x11,0x33,0x11,0x33,0x39,0x2f,0x17,0x33,0x30,
		0x31,0x45,0x22,0x26,0x26,0x35,0x34,0x3e,0x02,0x33,0x33,0x15,0x26,0x0e,0x02,0x15,
		0x14,0x16,0x16,0x33,0x32,0x36,0x37,0x36,0x36,0x27,0x37,0x17,0x17,0x06,0x06,0x23,
		0x03,0x35,0x21,0x15,0x23,0x17,0x07,0x01,0x0c,0x41,0x58,0x2c,0x1d,0x36,0x4a,0x2d,
		0x41,0x2c,0x48,0x33,0x1c,0x1f,0x3b,0x2a,0x1d,0x26,0x10,0x0b,0x07,0x01,0x05,0x07,
		0x2a,0x20,0x52,0x2f,0xb4,0x01,0x31,0xe3,0xac,0x46,0x0b,0x33,0x53,0x31,0x29,0x48,
		0x37,0x20,0x34,0x02,0x0e,0x22,0x39,0x28,0x26,0x3a,0x20,0x10,0x10,0x0d,0x0d,0x08,
		0x06,0x07,0x36,0x23,0x24,0x02,0x3b,0x3f,0x3f,0xbc,0x04,0x00,0x00,0x01,0x00,0x4e,
		0x00,0x00,0x01,0xb5,0x02,0x70,0x00,0x09,0x00,0x17,0x40,0x0b,0x05,0x08,0x08,0x00,
		0x04,0x01,0x02,0x72,0x00,0x08,0x72,0x00,0x2b,0x2b,0x32,0x11,0x39,0x2f,0x33,0x30,
		0x31,0x73,0x11,0x21,0x15,0x21,0x15,0x33,0x15,0x23,0x11,0x4e,0x01,0x67,0xfe,0xdf,
		0xe9,0xe9,0x02,0x70,0x3d,0xc4,0x3d,0xfe,0xce,0x00,0x00,0x01,0x00,0x23,0xff,0xf6,
		0x01,0xcc,0x02,0x76,0x00,0x30,0x00,0x21,0x40,0x10,0x2b,0x2a,0x2a,0x0a,0x23,0x30,
		0x09,0x72,0x11,0x0e,0x10,0x10,0x18,0x0a,0x03,0x72,0x00,0x2b,0x32,0x32,0x11,0x33,
		0x33,0x2b,0x32,0x12,0x39,0x2f,0x33,0x30,0x31,0x45,0x22,0x26,0x26,0x35,0x26,0x3e,
		0x03,0x33,0x32,0x16,0x16,0x17,0x07,0x07,0x27,0x36,0x26,0x27,0x2e,0x02,0x23,0x22,
		0x0e,0x03,0x15,0x14,0x1e,0x02,0x33,0x32,0x3e,0x02,0x37,0x35,0x23,0x35,0x33,0x15,
		0x06,0x06,0x23,0x01,0x15,0x4a,0x6d,0x3a,0x01,0x1f,0x34,0x40,0x41,0x1b,0x25,0x47,
		0x3b,0x11,0x31,0x08,0x04,0x01,0x07,0x0b,0x0f,0x20,0x25,0x17,0x1b,0x32,0x2a,0x20,
		0x11,0x18,0x2d,0x3f,0x28,0x0e,0x1f,0x1f,0x1e,0x0c,0x71,0xb2,0x2c,0x5c,0x2f,0x0a,
		0x4e,0x8e,0x5e,0x51,0x71,0x4a,0x2a,0x10,0x1b,0x2e,0x20,0x27,0x07,0x06,0x08,0x0d,
		0x0d,0x11,0x16,0x0a,0x0f,0x23,0x3a,0x54,0x39,0x41,0x63,0x44,0x23,0x04,0x09,0x0f,
		0x0a,0x94,0x3d,0xf4,0x20,0x21,0xff,0xff,0x00,0x23,0xff,0xf6,0x01,0xcc,0x03,0x13,
		0x06,0x26,0x00,0x43,0x00,0x00,0x01,0x06,0x03,0xa7,0x18,0x00,0x00,0x0b,0xb6,0x01,
		0x35,0x0a,0x01,0x01,0x29,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x23,0xff,0xf6,
		0x01,0xcc,0x03,0x19,0x06,0x26,0x00,0x43,0x00,0x00,0x01,0x06,0x03,0xa6,0x18,0x00,
		0x00,0x0b,0xb6,0x01,0x34,0x0a,0x01,0x01,0x1b,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x23,0xff,0xf6,0x01,0xcc,0x03,0x17,0x06,0x26,0x00,0x43,0x00,0x00,0x01,0x06,
		0x03,0xa5,0x18,0x00,0x00,0x0b,0xb6,0x01,0x31,0x0a,0x01,0x01,0x19,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x23,0xfe,0xed,0x01,0xcc,0x02,0x76,0x06,0x26,0x00,0x43,
		0x00,0x00,0x01,0x06,0x03,0x8c,0x1e,0x00,0x00,0x0e,0xb4,0x01,0x3d,0x30,0x01,0x01,
		0xb8,0xff,0xea,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x23,0xff,0xf6,0x01,0xcc,
		0x03,0x1c,0x06,0x26,0x00,0x43,0x00,0x00,0x01,0x06,0x03,0xa1,0x17,0x00,0x00,0x0b,
		0xb6,0x01,0x31,0x0a,0x01,0x01,0x3f,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x23,
		0xff,0xf6,0x01,0xcc,0x03,0x13,0x06,0x26,0x00,0x43,0x00,0x00,0x01,0x07,0x03,0x84,
		0x00,0x18,0x00,0xa6,0x00,0x0b,0xb6,0x01,0x31,0x0a,0x01,0x01,0x65,0x56,0x00,0x2b,
		0x34,0x00,0x00,0x01,0x00,0x32,0x00,0x00,0x01,0xc1,0x02,0x6f,0x00,0x15,0x00,0x19,
		0x40,0x0c,0x07,0x13,0x13,0x00,0x11,0x15,0x08,0x72,0x09,0x00,0x02,0x72,0x00,0x2b,
		0x32,0x2b,0x32,0x12,0x39,0x2f,0x33,0x30,0x31,0x53,0x33,0x33,0x15,0x06,0x06,0x15,
		0x15,0x33,0x11,0x33,0x33,0x15,0x06,0x06,0x15,0x11,0x23,0x11,0x23,0x11,0x23,0x32,
		0x48,0x0a,0x06,0x03,0xf4,0x48,0x0a,0x06,0x03,0x4a,0xf3,0x49,0x02,0x6f,0x07,0x06,
		0x0e,0x11,0xde,0x01,0x0a,0x07,0x06,0x0e,0x11,0xfd,0xbd,0x01,0x29,0xfe,0xd7,0x00,
		0x00,0x02,0x00,0x07,0x00,0x00,0x01,0xe7,0x02,0x6f,0x00,0x03,0x00,0x19,0x00,0x20,
		0x40,0x0f,0x17,0x0b,0x00,0x00,0x0b,0x0b,0x04,0x15,0x19,0x08,0x72,0x0d,0x04,0x02,
		0x72,0x00,0x2b,0x32,0x2b,0x32,0x12,0x39,0x2f,0x33,0x7d,0x2f,0x11,0x33,0x30,0x31,
		0x53,0x35,0x21,0x15,0x25,0x33,0x33,0x15,0x06,0x06,0x15,0x15,0x33,0x11,0x33,0x33,
		0x15,0x06,0x06,0x15,0x11,0x23,0x11,0x23,0x11,0x23,0x07,0x01,0xe0,0xfe,0x4b,0x48,
		0x0a,0x06,0x03,0xf4,0x48,0x0a,0x06,0x03,0x4a,0xf3,0x49,0x01,0xf2,0x37,0x37,0x7d,
		0x07,0x06,0x0e,0x11,0xde,0x01,0x0a,0x07,0x06,0x0e,0x11,0xfd,0xbd,0x01,0x29,0xfe,
		0xd7,0x00,0xff,0xff,0x00,0x32,0xff,0x51,0x01,0xc1,0x02,0x6f,0x06,0x26,0x00,0x4a,
		0x00,0x00,0x01,0x06,0x03,0x8f,0x02,0x00,0x00,0x0e,0xb4,0x01,0x16,0x11,0x01,0x01,
		0xb8,0xff,0xc5,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x32,0x00,0x00,0x01,0xc1,
		0x03,0x17,0x06,0x26,0x00,0x4a,0x00,0x00,0x01,0x06,0x03,0xa5,0x00,0x00,0x00,0x0b,
		0xb6,0x01,0x16,0x00,0x01,0x01,0x20,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x32,
		0xff,0x6d,0x01,0xc1,0x02,0x6f,0x06,0x26,0x00,0x4a,0x00,0x00,0x01,0x06,0x03,0x8a,
		0x0b,0x00,0x00,0x0e,0xb4,0x01,0x1c,0x11,0x01,0x01,0xb8,0xff,0xd4,0xb0,0x56,0x00,
		0x2b,0x34,0x00,0x01,0x00,0x51,0x00,0x00,0x01,0x93,0x02,0x6f,0x00,0x0b,0x00,0x19,
		0x40,0x0c,0x08,0x04,0x04,0x05,0x02,0x72,0x01,0x09,0x09,0x00,0x08,0x72,0x00,0x2b,
		0x32,0x11,0x33,0x2b,0x32,0x11,0x33,0x30,0x31,0x73,0x35,0x33,0x11,0x23,0x35,0x21,
		0x15,0x23,0x11,0x33,0x15,0x51,0x7b,0x74,0x01,0x35,0x7b,0x81,0x3b,0x01,0xf9,0x3b,
		0x3b,0xfe,0x06,0x3a,0xff,0xff,0x00,0x51,0x00,0x00,0x01,0x93,0x03,0x17,0x06,0x26,
		0x00,0x4f,0x00,0x00,0x01,0x06,0x03,0xa3,0xe2,0x00,0x00,0x0b,0xb6,0x01,0x0c,0x05,
		0x01,0x01,0x25,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x51,0x00,0x00,0x01,0x93,
		0x03,0x13,0x06,0x26,0x00,0x4f,0x00,0x00,0x01,0x06,0x03,0xa7,0xf5,0x00,0x00,0x0b,
		0xb6,0x01,0x10,0x05,0x01,0x01,0x30,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x51,
		0x00,0x00,0x01,0x93,0x03,0x17,0x06,0x26,0x00,0x4f,0x00,0x00,0x01,0x06,0x03,0xa5,
		0xf5,0x00,0x00,0x0b,0xb6,0x01,0x0c,0x05,0x01,0x01,0x20,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x3f,0x00,0x00,0x01,0x93,0x03,0x50,0x06,0x26,0x00,0x4f,0x00,0x00,
		0x01,0x07,0x03,0x86,0xff,0xe0,0x00,0xa6,0x00,0x0d,0xb7,0x02,0x01,0x0c,0x05,0x01,
		0x01,0x32,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x51,0x00,0x00,0x01,0x93,
		0x03,0x15,0x06,0x26,0x00,0x4f,0x00,0x00,0x01,0x06,0x03,0xa0,0xf4,0x00,0x00,0x0d,
		0xb7,0x02,0x01,0x0c,0x05,0x01,0x01,0x41,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,
		0x00,0x51,0x00,0x00,0x01,0x93,0x03,0xa5,0x06,0x26,0x00,0x4f,0x00,0x00,0x00,0x26,
		0x03,0xa0,0xf4,0x00,0x01,0x07,0x03,0xa3,0xff,0xe0,0x00,0x8e,0x00,0x17,0x40,0x0f,
		0x03,0x24,0x12,0x01,0x00,0x0d,0x56,0x02,0x01,0x0c,0x05,0x01,0x01,0x41,0x56,0x00,
		0x2b,0x34,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x51,0x00,0x00,0x01,0x93,0x03,0x1c,
		0x06,0x26,0x00,0x4f,0x00,0x00,0x01,0x06,0x03,0xa1,0xf4,0x00,0x00,0x0b,0xb6,0x01,
		0x0c,0x05,0x01,0x01,0x46,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x51,0xff,0x6d,
		0x01,0x93,0x02,0x6f,0x06,0x26,0x00,0x4f,0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,
		0x00,0x0e,0xb4,0x01,0x12,0x00,0x01,0x01,0xb8,0xff,0xd4,0xb0,0x56,0x00,0x2b,0x34,
		0xff,0xff,0x00,0x51,0x00,0x00,0x01,0x93,0x03,0x17,0x06,0x26,0x00,0x4f,0x00,0x00,
		0x01,0x06,0x03,0xa2,0xe7,0x00,0x00,0x0b,0xb6,0x01,0x0c,0x05,0x01,0x01,0x25,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x51,0x00,0x00,0x01,0x93,0x03,0x66,0x06,0x26,
		0x00,0x4f,0x00,0x00,0x01,0x07,0x03,0x85,0x00,0x04,0x00,0xa6,0x00,0x0b,0xb6,0x01,
		0x13,0x05,0x01,0x01,0x42,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x51,0x00,0x00,
		0x01,0x93,0x03,0x2a,0x06,0x26,0x00,0x4f,0x00,0x00,0x01,0x07,0x03,0x87,0xff,0xed,
		0x00,0xa6,0x00,0x0b,0xb6,0x01,0x0c,0x05,0x01,0x01,0x47,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x51,0x00,0x00,0x01,0x93,0x03,0x13,0x06,0x26,0x00,0x4f,0x00,0x00,
		0x01,0x07,0x03,0x84,0xff,0xf5,0x00,0xa6,0x00,0x0b,0xb6,0x01,0x0c,0x05,0x01,0x01,
		0x6c,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x51,0xff,0x1d,0x01,0x93,0x02,0x6f,
		0x06,0x26,0x00,0x4f,0x00,0x00,0x01,0x06,0x03,0x8e,0x68,0x00,0x00,0x0b,0xb6,0x01,
		0x16,0x00,0x00,0x00,0x00,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x50,0x00,0x00,
		0x01,0x9a,0x03,0x51,0x06,0x26,0x00,0x4f,0x00,0x00,0x01,0x06,0x03,0xb3,0xeb,0x24,
		0x00,0x0b,0xb6,0x01,0x10,0x05,0x01,0x01,0x75,0x56,0x00,0x2b,0x34,0x00,0x00,0x01,
		0x00,0x31,0xff,0xf5,0x01,0xc9,0x02,0x6f,0x00,0x1c,0x00,0x15,0x40,0x0a,0x0c,0x1c,
		0x09,0x72,0x16,0x12,0x12,0x13,0x02,0x72,0x00,0x2b,0x32,0x11,0x33,0x2b,0x32,0x30,
		0x31,0x57,0x22,0x26,0x27,0x37,0x37,0x17,0x16,0x16,0x17,0x16,0x16,0x33,0x32,0x36,
		0x36,0x35,0x11,0x23,0x35,0x21,0x15,0x23,0x11,0x16,0x0e,0x02,0x23,0xc4,0x2c,0x4a,
		0x1d,0x28,0x07,0x05,0x01,0x07,0x0d,0x11,0x23,0x16,0x22,0x2a,0x14,0x78,0x01,0x1d,
		0x60,0x02,0x1a,0x30,0x3c,0x21,0x0b,0x23,0x22,0x32,0x08,0x04,0x09,0x0e,0x0b,0x0d,
		0x0e,0x1e,0x45,0x3a,0x01,0x64,0x3b,0x3b,0xfe,0x9d,0x3c,0x54,0x35,0x17,0xff,0xff,
		0x00,0x31,0xff,0xf5,0x01,0xe8,0x03,0x17,0x06,0x26,0x00,0x5e,0x00,0x00,0x01,0x06,
		0x03,0xa5,0x50,0x00,0x00,0x0b,0xb6,0x01,0x1d,0x13,0x01,0x01,0x20,0x56,0x00,0x2b,
		0x34,0x00,0x00,0x01,0x00,0x2a,0xff,0xfc,0x01,0xd7,0x02,0x74,0x00,0x15,0x00,0x1a,
		0x40,0x0e,0x01,0x00,0x0b,0x13,0x04,0x03,0x12,0x04,0x02,0x72,0x14,0x03,0x08,0x72,
		0x00,0x2b,0x32,0x2b,0x32,0x12,0x17,0x39,0x30,0x31,0x53,0x07,0x11,0x23,0x11,0x33,
		0x33,0x15,0x06,0x06,0x15,0x15,0x01,0x1e,0x03,0x33,0x33,0x03,0x13,0x07,0xa6,0x31,
		0x4b,0x4a,0x0a,0x06,0x03,0x01,0x04,0x06,0x0c,0x0d,0x0e,0x07,0x1a,0xec,0xfc,0x5a,
		0x01,0x38,0x36,0xfe,0xfe,0x02,0x6f,0x07,0x06,0x0e,0x11,0xf3,0x01,0x24,0x01,0x02,
		0x01,0x01,0xfe,0xf3,0xfe,0x9e,0x04,0x00,0xff,0xff,0x00,0x2a,0xfe,0xed,0x01,0xd7,
		0x02,0x74,0x06,0x26,0x00,0x60,0x00,0x00,0x01,0x06,0x03,0x8c,0x00,0x00,0x00,0x0e,
		0xb4,0x01,0x22,0x03,0x01,0x01,0xb8,0xff,0xe0,0xb0,0x56,0x00,0x2b,0x34,0x00,0x02,
		0x00,0x2a,0xff,0xfc,0x01,0xd7,0x02,0x73,0x00,0x20,0x00,0x24,0x00,0x1e,0x40,0x11,
		0x24,0x12,0x1e,0x07,0x21,0x22,0x04,0x00,0x20,0x12,0x18,0x0c,0x03,0x72,0x00,0x02,
		0x72,0x00,0x2b,0x2b,0x32,0x3f,0x12,0x17,0x39,0x3f,0x30,0x31,0x53,0x33,0x33,0x15,
		0x06,0x06,0x15,0x15,0x3e,0x03,0x33,0x32,0x16,0x17,0x07,0x15,0x23,0x26,0x26,0x27,
		0x22,0x22,0x23,0x22,0x0e,0x03,0x07,0x15,0x23,0x13,0x37,0x01,0x07,0x2a,0x4a,0x0a,
		0x06,0x03,0x30,0x57,0x4d,0x46,0x20,0x09,0x12,0x08,0x01,0x07,0x06,0x0e,0x11,0x01,
		0x01,0x01,0x0a,0x20,0x2e,0x42,0x58,0x3b,0x4b,0x67,0x35,0x01,0x11,0x5a,0x02,0x6f,
		0x07,0x06,0x0e,0x11,0xfd,0x54,0x74,0x46,0x1f,0x02,0x02,0x48,0x0a,0x06,0x08,0x01,
		0x0a,0x21,0x45,0x75,0x59,0xee,0x01,0x56,0x2a,0xfe,0x80,0x04,0x00,0x01,0x00,0x42,
		0x00,0x00,0x01,0xb7,0x02,0x6f,0x00,0x0a,0x00,0x0e,0xb6,0x07,0x0a,0x08,0x72,0x00,
		0x02,0x72,0x00,0x2b,0x2b,0x32,0x30,0x31,0x53,0x33,0x33,0x15,0x06,0x06,0x15,0x11,
		0x21,0x15,0x21,0x42,0x48,0x0a,0x06,0x03,0x01,0x2c,0xfe,0x8b,0x02,0x6f,0x07,0x06,
		0x0e,0x11,0xfd,0xf9,0x3c,0x00,0x00,0x02,0x00,0x42,0xff,0x69,0x01,0xc5,0x02,0x6f,
		0x00,0x1b,0x00,0x25,0x00,0x1d,0x40,0x0e,0x0c,0x00,0x23,0x12,0x13,0x13,0x1d,0x1c,
		0x08,0x72,0x1d,0x02,0x72,0x00,0x00,0x2f,0x2b,0x2b,0x11,0x33,0x11,0x33,0x32,0x11,
		0x33,0x30,0x31,0x45,0x22,0x26,0x27,0x37,0x1e,0x02,0x17,0x1e,0x02,0x33,0x32,0x36,
		0x36,0x35,0x11,0x23,0x35,0x33,0x15,0x31,0x11,0x16,0x0e,0x02,0x27,0x11,0x33,0x14,
		0x06,0x06,0x15,0x11,0x33,0x15,0x01,0x1e,0x2c,0x4a,0x1d,0x2f,0x06,0x04,0x03,0x06,
		0x05,0x17,0x20,0x14,0x20,0x2b,0x16,0x82,0xc7,0x02,0x1a,0x30,0x3c,0xfd,0x52,0x05,
		0x04,0xaa,0x97,0x23,0x22,0x39,0x04,0x0a,0x0b,0x07,0x06,0x0f,0x0b,0x1e,0x45,0x3a,
		0x01,0xf0,0x3b,0x3b,0xfe,0x11,0x3c,0x54,0x34,0x18,0x97,0x02,0x6f,0x07,0x03,0x08,
		0x10,0xfd,0xf0,0x3d,0xff,0xff,0x00,0x42,0x00,0x00,0x01,0xb7,0x03,0x17,0x06,0x26,
		0x00,0x63,0x00,0x00,0x01,0x06,0x03,0xa3,0xbb,0x00,0x00,0x0b,0xb6,0x01,0x0b,0x00,
		0x01,0x01,0x25,0x56,0x00,0x2b,0x34,0x00,0x00,0x02,0x00,0x42,0x00,0x00,0x01,0xb7,
		0x02,0x74,0x00,0x11,0x00,0x1c,0x00,0x15,0x40,0x0b,0x19,0x1c,0x08,0x72,0x12,0x02,
		0x72,0x00,0x0b,0x03,0x72,0x00,0x2b,0xcc,0x2b,0x2b,0x32,0x30,0x31,0x41,0x27,0x36,
		0x36,0x35,0x34,0x26,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x06,0x25,
		0x33,0x33,0x15,0x06,0x06,0x15,0x11,0x21,0x15,0x21,0x01,0x53,0x1c,0x17,0x1d,0x14,
		0x15,0x1b,0x15,0x15,0x21,0x13,0x25,0xfe,0xd2,0x48,0x0a,0x06,0x03,0x01,0x2c,0xfe,
		0x8b,0x01,0x9b,0x18,0x15,0x31,0x0e,0x0b,0x12,0x14,0x0d,0x14,0x1b,0x25,0x1d,0x16,
		0x30,0x34,0xb7,0x07,0x06,0x0e,0x11,0xfd,0xf9,0x3c,0xff,0xff,0x00,0x42,0xfe,0xed,
		0x01,0xb7,0x02,0x6f,0x06,0x26,0x00,0x63,0x00,0x00,0x01,0x06,0x03,0x8c,0x0e,0x00,
		0x00,0x0e,0xb4,0x01,0x17,0x0a,0x01,0x01,0xb8,0xff,0xe0,0xb0,0x56,0x00,0x2b,0x34,
		0xff,0xff,0x00,0x42,0x00,0x00,0x01,0xb7,0x02,0x6f,0x06,0x26,0x00,0x63,0x00,0x00,
		0x01,0x06,0x02,0x22,0x3c,0x00,0x00,0x0e,0xb4,0x01,0x11,0x00,0x02,0x00,0xb8,0xff,
		0x15,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x42,0xff,0x6d,0x01,0xb7,0x02,0x6f,
		0x06,0x26,0x00,0x63,0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x01,
		0x11,0x0a,0x01,0x01,0xb8,0xff,0xd4,0xb0,0x56,0x00,0x2b,0x34,0x00,0x03,0x00,0x42,
		0xff,0x52,0x01,0xb3,0x02,0x8f,0x00,0x08,0x00,0x25,0x00,0x31,0x00,0x1f,0x40,0x10,
		0x2c,0x26,0x26,0x1e,0x1f,0x06,0x72,0x17,0x09,0x01,0x02,0x72,0x06,0x00,0x08,0x72,
		0x00,0x2b,0x32,0x2b,0x2f,0x33,0x2b,0x32,0x32,0x2f,0x33,0x30,0x31,0x73,0x11,0x33,
		0x14,0x06,0x15,0x11,0x33,0x15,0x07,0x22,0x26,0x26,0x27,0x37,0x1e,0x03,0x17,0x1e,
		0x02,0x33,0x32,0x3e,0x02,0x35,0x11,0x23,0x35,0x33,0x11,0x14,0x0e,0x02,0x13,0x22,
		0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x42,0x52,0x09,0xa0,0x33,0x1d,
		0x33,0x2a,0x12,0x2f,0x05,0x04,0x06,0x11,0x13,0x08,0x0f,0x10,0x08,0x17,0x25,0x1c,
		0x0f,0x8c,0xd5,0x1c,0x31,0x42,0x61,0x15,0x1e,0x1d,0x16,0x15,0x1f,0x1f,0x02,0x6f,
		0x0a,0x0f,0x09,0xfd,0xf0,0x3d,0xae,0x0e,0x1d,0x15,0x3e,0x05,0x0c,0x0d,0x0e,0x09,
		0x03,0x05,0x03,0x0f,0x1f,0x32,0x22,0x01,0x7c,0x3b,0xfe,0x4d,0x34,0x49,0x2e,0x17,
		0x02,0xd4,0x1e,0x15,0x16,0x1e,0x1f,0x15,0x15,0x1e,0xff,0xff,0x00,0x42,0xff,0x65,
		0x01,0xb7,0x02,0x6f,0x06,0x26,0x00,0x63,0x00,0x00,0x01,0x06,0x03,0x90,0x02,0x00,
		0x00,0x0e,0xb4,0x01,0x0c,0x0a,0x01,0x01,0xb8,0xff,0x9d,0xb0,0x56,0x00,0x2b,0x34,
		0x00,0x01,0x00,0x14,0x00,0x00,0x01,0xbe,0x02,0x6f,0x00,0x16,0x00,0x18,0x40,0x0d,
		0x01,0x13,0x04,0x0d,0x04,0x00,0x05,0x02,0x72,0x14,0x00,0x08,0x72,0x00,0x2b,0x32,
		0x2b,0x12,0x17,0x39,0x30,0x31,0x73,0x35,0x07,0x35,0x37,0x11,0x33,0x32,0x16,0x15,
		0x14,0x06,0x07,0x11,0x37,0x36,0x36,0x37,0x15,0x07,0x15,0x21,0x15,0x49,0x35,0x35,
		0x51,0x01,0x01,0x08,0x02,0xa6,0x08,0x0d,0x04,0xbf,0x01,0x2c,0xf3,0x11,0x3d,0x12,
		0x01,0x3e,0x01,0x01,0x04,0x09,0x13,0xfe,0xfb,0x36,0x03,0x05,0x02,0x40,0x3d,0xcf,
		0x3c,0x00,0x00,0x01,0x00,0x29,0x00,0x00,0x01,0xcc,0x02,0x70,0x00,0x0c,0x00,0x1a,
		0x40,0x0e,0x0a,0x03,0x0b,0x08,0x04,0x07,0x05,0x02,0x02,0x72,0x07,0x00,0x08,0x72,
		0x00,0x2b,0x32,0x2b,0x32,0x12,0x17,0x39,0x30,0x31,0x73,0x11,0x33,0x13,0x13,0x33,
		0x11,0x23,0x11,0x07,0x23,0x27,0x11,0x29,0x37,0x9a,0x9d,0x35,0x42,0x87,0x1b,0x7e,
		0x02,0x6f,0xfe,0xcf,0x01,0x32,0xfd,0x90,0x01,0xd6,0xfb,0xf8,0xfe,0x2d,0xff,0xff,
		0x00,0x29,0xff,0x6d,0x01,0xcc,0x02,0x70,0x06,0x26,0x00,0x6d,0x00,0x00,0x01,0x06,
		0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x01,0x13,0x07,0x01,0x01,0xb8,0xff,0xd4,0xb0,
		0x56,0x00,0x2b,0x34,0x00,0x01,0x00,0x32,0x00,0x00,0x01,0xc8,0x02,0x6f,0x00,0x0e,
		0x00,0x17,0x40,0x0b,0x0c,0x02,0x01,0x0b,0x0e,0x08,0x72,0x03,0x01,0x02,0x72,0x00,
		0x2b,0x32,0x2b,0x32,0x11,0x39,0x39,0x30,0x31,0x53,0x33,0x01,0x11,0x33,0x33,0x15,
		0x06,0x06,0x15,0x11,0x23,0x01,0x11,0x23,0x32,0x44,0x01,0x06,0x42,0x0a,0x06,0x03,
		0x37,0xfe,0xed,0x43,0x02,0x6f,0xfe,0x32,0x01,0xce,0x07,0x06,0x0e,0x11,0xfd,0xbd,
		0x01,0xea,0xfe,0x16,0xff,0xff,0x00,0x32,0x00,0x00,0x01,0xc8,0x03,0x17,0x06,0x26,
		0x00,0x6f,0x00,0x00,0x01,0x06,0x03,0xa3,0xed,0x00,0x00,0x0b,0xb6,0x01,0x0f,0x00,
		0x01,0x01,0x25,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x32,0x00,0x00,0x01,0xc8,
		0x03,0x19,0x06,0x26,0x00,0x6f,0x00,0x00,0x01,0x06,0x03,0xa6,0x00,0x00,0x00,0x0b,
		0xb6,0x01,0x12,0x03,0x01,0x01,0x22,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x32,
		0xfe,0xed,0x01,0xc8,0x02,0x6f,0x06,0x26,0x00,0x6f,0x00,0x00,0x01,0x06,0x03,0x8c,
		0x0e,0x00,0x00,0x0e,0xb4,0x01,0x1b,0x0b,0x01,0x01,0xb8,0xff,0xe0,0xb0,0x56,0x00,
		0x2b,0x34,0xff,0xff,0x00,0x32,0x00,0x00,0x01,0xc8,0x03,0x1c,0x06,0x26,0x00,0x6f,
		0x00,0x00,0x01,0x06,0x03,0xa1,0xff,0x00,0x00,0x0b,0xb6,0x01,0x0f,0x03,0x01,0x01,
		0x46,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x32,0xff,0x6d,0x01,0xc8,0x02,0x6f,
		0x06,0x26,0x00,0x6f,0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x01,
		0x15,0x0b,0x01,0x01,0xb8,0xff,0xd4,0xb0,0x56,0x00,0x2b,0x34,0x00,0x01,0x00,0x32,
		0xff,0x47,0x01,0xc6,0x02,0x6f,0x00,0x1c,0x00,0x1b,0x40,0x0e,0x16,0x1c,0x17,0x03,
		0x19,0x01,0x1b,0x02,0x72,0x19,0x08,0x72,0x12,0x09,0x00,0x2f,0x33,0x2b,0x2b,0x32,
		0x12,0x17,0x39,0x30,0x31,0x41,0x33,0x14,0x06,0x15,0x11,0x14,0x06,0x06,0x23,0x22,
		0x26,0x27,0x37,0x1e,0x03,0x33,0x32,0x36,0x36,0x37,0x01,0x11,0x23,0x11,0x33,0x01,
		0x01,0x7c,0x4a,0x07,0x25,0x44,0x2f,0x17,0x2c,0x14,0x23,0x07,0x07,0x08,0x11,0x10,
		0x1f,0x23,0x0f,0x01,0xfe,0xf9,0x43,0x44,0x01,0x06,0x02,0x6f,0x06,0x0a,0x0b,0xfd,
		0xac,0x3e,0x52,0x29,0x0c,0x0d,0x3e,0x02,0x08,0x08,0x06,0x1f,0x40,0x31,0x01,0xd4,
		0xfe,0x16,0x02,0x6f,0xfe,0x32,0xff,0xff,0x00,0x32,0xff,0x65,0x01,0xc8,0x02,0x6f,
		0x06,0x26,0x00,0x6f,0x00,0x00,0x01,0x06,0x03,0x90,0x02,0x00,0x00,0x0e,0xb4,0x01,
		0x10,0x0e,0x01,0x01,0xb8,0xff,0x9d,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x32,
		0x00,0x00,0x01,0xc8,0x03,0x1d,0x06,0x26,0x00,0x6f,0x00,0x00,0x01,0x06,0x03,0xa9,
		0xff,0x00,0x00,0x0b,0xb6,0x01,0x13,0x03,0x01,0x01,0x41,0x56,0x00,0x2b,0x34,0x00,
		0x00,0x02,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x02,0x73,0x00,0x0f,0x00,0x1f,0x00,0x10,
		0xb7,0x18,0x08,0x03,0x72,0x10,0x00,0x09,0x72,0x00,0x2b,0x32,0x2b,0x32,0x30,0x31,
		0x57,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,
		0x27,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,
		0xfa,0x47,0x64,0x34,0x34,0x64,0x47,0x48,0x63,0x34,0x34,0x63,0x48,0x30,0x43,0x24,
		0x24,0x43,0x30,0x2f,0x44,0x24,0x24,0x44,0x0b,0x4a,0x8f,0x66,0x63,0x8f,0x4d,0x4d,
		0x8f,0x63,0x66,0x8f,0x4a,0x3d,0x3c,0x73,0x53,0x4f,0x73,0x40,0x40,0x73,0x4f,0x53,
		0x73,0x3c,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0x17,0x06,0x26,0x00,0x78,
		0x00,0x00,0x01,0x06,0x03,0xa3,0xed,0x00,0x00,0x0b,0xb6,0x02,0x20,0x08,0x01,0x01,
		0x21,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0x13,
		0x06,0x26,0x00,0x78,0x00,0x00,0x01,0x06,0x03,0xa7,0x00,0x00,0x00,0x0b,0xb6,0x02,
		0x24,0x08,0x01,0x01,0x2c,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,
		0x01,0xd9,0x03,0x17,0x06,0x26,0x00,0x78,0x00,0x00,0x01,0x06,0x03,0xa5,0x00,0x00,
		0x00,0x0b,0xb6,0x02,0x20,0x08,0x01,0x01,0x1c,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x1b,0xff,0xf5,0x02,0x1a,0x03,0x81,0x06,0x26,0x00,0x78,0x00,0x00,0x01,0x06,
		0x03,0xbd,0xff,0x00,0x00,0x15,0x40,0x0e,0x03,0x27,0x08,0x01,0x01,0x8b,0x56,0x02,
		0x20,0x08,0x01,0x01,0x1c,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x1b,
		0xff,0x6d,0x01,0xd9,0x03,0x17,0x06,0x26,0x00,0x78,0x00,0x00,0x00,0x26,0x03,0x8a,
		0x0b,0x00,0x01,0x06,0x03,0xa5,0x00,0x00,0x00,0x18,0x40,0x0c,0x03,0x2c,0x08,0x01,
		0x01,0x1c,0x56,0x02,0x26,0x00,0x01,0x01,0xb8,0xff,0xdf,0xb0,0x56,0x00,0x2b,0x34,
		0x2b,0x34,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0xa1,0x06,0x26,0x00,0x78,
		0x00,0x00,0x01,0x06,0x03,0xbe,0x00,0x00,0x00,0x15,0x40,0x0e,0x03,0x27,0x08,0x01,
		0x01,0xab,0x56,0x02,0x20,0x08,0x01,0x01,0x1c,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0xa2,0x06,0x26,0x00,0x78,0x00,0x00,
		0x01,0x06,0x03,0xbf,0xfc,0x00,0x00,0x15,0x40,0x0e,0x03,0x2e,0x08,0x01,0x01,0x7a,
		0x56,0x02,0x20,0x08,0x01,0x01,0x1c,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0xa5,0x06,0x26,0x00,0x78,0x00,0x00,0x01,0x06,
		0x03,0xc0,0x00,0x00,0x00,0x15,0x40,0x0e,0x03,0x2b,0x08,0x01,0x01,0xc5,0x56,0x02,
		0x20,0x08,0x01,0x01,0x1c,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x1b,
		0xff,0xf5,0x01,0xd9,0x03,0x50,0x06,0x26,0x00,0x78,0x00,0x00,0x01,0x07,0x03,0x86,
		0xff,0xeb,0x00,0xa6,0x00,0x0d,0xb7,0x03,0x02,0x20,0x08,0x01,0x01,0x2e,0x56,0x00,
		0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0x15,0x06,0x26,
		0x00,0x78,0x00,0x00,0x01,0x06,0x03,0xa0,0xff,0x00,0x00,0x0d,0xb7,0x03,0x02,0x20,
		0x08,0x01,0x01,0x3d,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,
		0x01,0xd9,0x03,0xa1,0x06,0x26,0x00,0x78,0x00,0x00,0x00,0x26,0x03,0xa0,0xff,0x00,
		0x01,0x07,0x03,0x84,0xff,0xfe,0x01,0x34,0x00,0x17,0x40,0x0f,0x04,0x38,0x26,0x01,
		0x01,0x54,0x56,0x03,0x02,0x20,0x08,0x01,0x01,0x3d,0x56,0x00,0x2b,0x34,0x34,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0x83,0x06,0x26,0x00,0x78,
		0x00,0x00,0x00,0x26,0x03,0xa1,0xff,0x00,0x01,0x07,0x03,0x84,0xff,0xfe,0x01,0x16,
		0x00,0x15,0x40,0x0e,0x03,0x2c,0x26,0x01,0x01,0x2f,0x56,0x02,0x20,0x08,0x01,0x01,
		0x42,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0x6d,0x01,0xd9,
		0x02,0x73,0x06,0x26,0x00,0x78,0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,
		0xb4,0x02,0x26,0x00,0x01,0x01,0xb8,0xff,0xdf,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,
		0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0x17,0x06,0x26,0x00,0x78,0x00,0x00,0x01,0x06,
		0x03,0xa2,0xf2,0x00,0x00,0x0b,0xb6,0x02,0x20,0x08,0x01,0x01,0x21,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0x66,0x06,0x26,0x00,0x78,
		0x00,0x00,0x01,0x07,0x03,0x85,0x00,0x0f,0x00,0xa6,0x00,0x0b,0xb6,0x02,0x27,0x08,
		0x01,0x01,0x3e,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,
		0x02,0xa6,0x06,0x26,0x00,0x78,0x00,0x00,0x01,0x06,0x03,0xaa,0xe3,0xd9,0x00,0x0e,
		0xb4,0x02,0x20,0x08,0x01,0x01,0xb8,0xff,0xa4,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,
		0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0x17,0x06,0x26,0x00,0x88,0x00,0x00,0x01,0x06,
		0x03,0xa3,0xed,0x00,0x00,0x0b,0xb6,0x03,0x2a,0x08,0x01,0x01,0x21,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0x6d,0x01,0xd9,0x02,0xa6,0x06,0x26,0x00,0x88,
		0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x03,0x30,0x00,0x01,0x01,
		0xb8,0xff,0xdf,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,
		0x03,0x17,0x06,0x26,0x00,0x88,0x00,0x00,0x01,0x06,0x03,0xa2,0xf2,0x00,0x00,0x0b,
		0xb6,0x03,0x2a,0x08,0x01,0x01,0x21,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x1b,
		0xff,0xf5,0x01,0xd9,0x03,0x66,0x06,0x26,0x00,0x88,0x00,0x00,0x01,0x07,0x03,0x85,
		0x00,0x0f,0x00,0xa6,0x00,0x0b,0xb6,0x03,0x31,0x08,0x01,0x01,0x3e,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0x1d,0x06,0x26,0x00,0x88,
		0x00,0x00,0x01,0x06,0x03,0xa9,0xff,0x00,0x00,0x0b,0xb6,0x03,0x2e,0x08,0x01,0x01,
		0x3d,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0x2a,
		0x06,0x26,0x00,0x78,0x00,0x00,0x01,0x06,0x03,0xa4,0xd8,0x00,0x00,0x0d,0xb7,0x03,
		0x02,0x20,0x08,0x01,0x01,0x12,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x1b,
		0xff,0xf5,0x01,0xd9,0x03,0x2a,0x06,0x26,0x00,0x78,0x00,0x00,0x01,0x07,0x03,0x87,
		0xff,0xf8,0x00,0xa6,0x00,0x0b,0xb6,0x02,0x20,0x08,0x01,0x01,0x43,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0x13,0x06,0x26,0x00,0x78,
		0x00,0x00,0x01,0x07,0x03,0x84,0x00,0x00,0x00,0xa6,0x00,0x0b,0xb6,0x02,0x20,0x08,
		0x01,0x01,0x68,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,
		0x03,0xb1,0x06,0x26,0x00,0x78,0x00,0x00,0x00,0x27,0x03,0x84,0x00,0x00,0x00,0xa6,
		0x01,0x07,0x03,0xa3,0xff,0xed,0x00,0x9a,0x00,0x15,0x40,0x0e,0x03,0x24,0x08,0x01,
		0x01,0xbb,0x56,0x02,0x20,0x08,0x01,0x01,0x68,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0xb1,0x06,0x26,0x00,0x78,0x00,0x00,
		0x00,0x27,0x03,0x84,0x00,0x00,0x00,0xa6,0x01,0x07,0x03,0xa2,0xff,0xf2,0x00,0x9a,
		0x00,0x15,0x40,0x0e,0x03,0x24,0x08,0x01,0x01,0xbb,0x56,0x02,0x20,0x08,0x01,0x01,
		0x68,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0x27,0x01,0xd9,
		0x02,0x73,0x06,0x26,0x00,0x78,0x00,0x00,0x01,0x06,0x03,0x8e,0x26,0x0a,0x00,0x0b,
		0xb6,0x02,0x29,0x00,0x00,0x00,0x26,0x56,0x00,0x2b,0x34,0x00,0x00,0x03,0x00,0x1b,
		0xff,0xd6,0x01,0xd9,0x02,0xaa,0x00,0x03,0x00,0x13,0x00,0x23,0x00,0x1e,0x40,0x0e,
		0x03,0x02,0x02,0x1c,0x0c,0x03,0x72,0x01,0x00,0x00,0x14,0x04,0x09,0x72,0x00,0x2b,
		0x32,0x32,0x7c,0x2f,0x33,0x2b,0x32,0x32,0x2f,0x33,0x30,0x31,0x57,0x27,0x01,0x17,
		0x03,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,
		0x27,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,
		0x55,0x2c,0x01,0x77,0x2a,0xd0,0x47,0x64,0x34,0x34,0x64,0x47,0x48,0x63,0x34,0x34,
		0x63,0x48,0x30,0x43,0x24,0x24,0x43,0x30,0x2f,0x44,0x24,0x24,0x44,0x2a,0x14,0x02,
		0xc0,0x16,0xfd,0x61,0x4a,0x8f,0x66,0x63,0x8f,0x4d,0x4d,0x8f,0x63,0x66,0x8f,0x4a,
		0x3d,0x3c,0x73,0x53,0x4f,0x73,0x40,0x40,0x73,0x4f,0x53,0x73,0x3c,0x00,0xff,0xff,
		0x00,0x1b,0xff,0xd6,0x01,0xd9,0x03,0x17,0x06,0x26,0x00,0x94,0x00,0x00,0x01,0x06,
		0x03,0xa3,0xed,0x00,0x00,0x0b,0xb6,0x03,0x24,0x0c,0x01,0x01,0x21,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0x1d,0x06,0x26,0x00,0x78,
		0x00,0x00,0x01,0x06,0x03,0xa9,0xff,0x00,0x00,0x0b,0xb6,0x02,0x24,0x08,0x01,0x01,
		0x3d,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0xb2,
		0x06,0x26,0x00,0x78,0x00,0x00,0x00,0x26,0x03,0xa9,0xff,0x00,0x01,0x07,0x03,0xa3,
		0xff,0xed,0x00,0x9b,0x00,0x15,0x40,0x0e,0x03,0x38,0x08,0x01,0x01,0xbc,0x56,0x02,
		0x24,0x08,0x01,0x01,0x3d,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x1b,
		0xff,0xf5,0x01,0xd9,0x03,0xb0,0x06,0x26,0x00,0x78,0x00,0x00,0x00,0x26,0x03,0xa9,
		0xff,0x00,0x01,0x07,0x03,0xa0,0xff,0xff,0x00,0x9b,0x00,0x17,0x40,0x0f,0x04,0x03,
		0x38,0x08,0x01,0x01,0xd8,0x56,0x02,0x24,0x08,0x01,0x01,0x3d,0x56,0x00,0x2b,0x34,
		0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,0x01,0xd9,0x03,0xa6,0x06,0x26,
		0x00,0x78,0x00,0x00,0x00,0x27,0x03,0xb4,0xff,0xf6,0x00,0xa6,0x01,0x07,0x03,0x84,
		0xff,0xfb,0x01,0x39,0x00,0x15,0x40,0x0e,0x03,0x38,0x08,0x01,0x01,0xfb,0x56,0x02,
		0x24,0x08,0x01,0x01,0x71,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0x00,0x02,0x00,0x09,
		0xff,0xf9,0x01,0xe4,0x02,0x78,0x00,0x1b,0x00,0x2b,0x00,0x2d,0x40,0x18,0x15,0x18,
		0x08,0x72,0x10,0x0d,0x02,0x72,0x0c,0x23,0x23,0x11,0x14,0x14,0x00,0x09,0x03,0x72,
		0x19,0x1c,0x1c,0x00,0x09,0x72,0x00,0x2b,0x32,0x11,0x39,0x2b,0x11,0x39,0x2f,0x33,
		0x32,0x11,0x39,0x2b,0x32,0x2b,0x32,0x30,0x31,0x57,0x22,0x2e,0x02,0x35,0x34,0x36,
		0x36,0x33,0x32,0x16,0x17,0x35,0x33,0x15,0x23,0x15,0x33,0x15,0x23,0x15,0x33,0x15,
		0x23,0x35,0x06,0x06,0x27,0x32,0x36,0x37,0x11,0x26,0x26,0x23,0x22,0x0e,0x02,0x15,
		0x14,0x16,0x16,0xac,0x25,0x3d,0x2a,0x17,0x27,0x49,0x34,0x15,0x29,0x12,0xe7,0xa9,
		0x8f,0x8f,0xa7,0xe6,0x11,0x28,0x10,0x1a,0x28,0x07,0x0c,0x26,0x1f,0x13,0x24,0x1b,
		0x10,0x19,0x2f,0x07,0x26,0x4f,0x78,0x52,0x6a,0x8e,0x48,0x11,0x14,0x1d,0x3e,0xcd,
		0x40,0xe7,0x3e,0x1f,0x14,0x12,0x3d,0x2a,0x21,0x01,0x64,0x22,0x37,0x19,0x3b,0x65,
		0x4c,0x52,0x74,0x3d,0x00,0x02,0x00,0x3b,0x00,0x00,0x01,0xc8,0x02,0x6f,0x00,0x0d,
		0x00,0x18,0x00,0x17,0x40,0x0b,0x0e,0x0c,0x0c,0x00,0x18,0x01,0x02,0x72,0x00,0x08,
		0x72,0x00,0x2b,0x2b,0x32,0x11,0x39,0x2f,0x33,0x30,0x31,0x73,0x11,0x33,0x32,0x16,
		0x16,0x15,0x14,0x0e,0x02,0x23,0x23,0x11,0x11,0x33,0x32,0x36,0x36,0x35,0x34,0x26,
		0x26,0x23,0x23,0x3b,0xc8,0x46,0x56,0x29,0x16,0x2f,0x48,0x33,0x85,0x7d,0x2e,0x38,
		0x1a,0x1a,0x38,0x2d,0x7e,0x02,0x6f,0x30,0x4f,0x31,0x24,0x3e,0x30,0x1a,0xfe,0xed,
		0x01,0x51,0x1b,0x31,0x20,0x1f,0x32,0x1f,0x00,0x02,0x00,0x3b,0x00,0x00,0x01,0xc8,
		0x02,0x6f,0x00,0x14,0x00,0x1f,0x00,0x1f,0x40,0x0f,0x15,0x13,0x1f,0x09,0x13,0x09,
		0x13,0x09,0x00,0x01,0x02,0x72,0x00,0x08,0x72,0x00,0x2b,0x2b,0x11,0x39,0x39,0x2f,
		0x2f,0x11,0x33,0x11,0x33,0x30,0x31,0x73,0x11,0x33,0x16,0x16,0x15,0x14,0x06,0x07,
		0x15,0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x23,0x23,0x15,0x35,0x33,0x32,0x36,
		0x36,0x35,0x34,0x26,0x26,0x23,0x23,0x3b,0x4e,0x01,0x01,0x08,0x02,0x82,0x46,0x56,
		0x29,0x28,0x54,0x44,0x87,0x87,0x2b,0x35,0x18,0x1a,0x38,0x2d,0x80,0x02,0x6f,0x01,
		0x01,0x01,0x03,0x0d,0x09,0x59,0x30,0x50,0x30,0x30,0x4e,0x2e,0x9e,0xdb,0x1d,0x32,
		0x1e,0x1f,0x32,0x1f,0x00,0x02,0x00,0x1d,0xff,0x6d,0x01,0xd9,0x02,0x76,0x00,0x1e,
		0x00,0x31,0x00,0x19,0x40,0x0c,0x29,0x0e,0x03,0x72,0x1f,0x18,0x05,0x09,0x72,0x1c,
		0x00,0x09,0x00,0x7c,0x3f,0x32,0x2b,0x32,0x32,0x2b,0x32,0x30,0x31,0x45,0x06,0x2e,
		0x02,0x35,0x2e,0x02,0x35,0x34,0x3e,0x02,0x33,0x32,0x1e,0x02,0x07,0x14,0x0e,0x02,
		0x07,0x1e,0x02,0x33,0x37,0x07,0x27,0x32,0x3e,0x02,0x35,0x34,0x2e,0x02,0x23,0x22,
		0x0e,0x02,0x15,0x14,0x16,0x16,0x01,0x91,0x31,0x43,0x29,0x12,0x32,0x5a,0x39,0x2a,
		0x44,0x4d,0x23,0x2a,0x51,0x3f,0x24,0x02,0x17,0x2f,0x45,0x2d,0x02,0x0d,0x1f,0x1c,
		0x51,0x02,0xb8,0x1a,0x34,0x2b,0x1b,0x1d,0x2f,0x35,0x18,0x27,0x3a,0x26,0x13,0x26,
		0x47,0x91,0x02,0x0d,0x22,0x36,0x27,0x07,0x48,0x88,0x64,0x5d,0x7d,0x49,0x1f,0x25,
		0x4d,0x79,0x54,0x45,0x6d,0x50,0x32,0x0a,0x16,0x22,0x13,0x05,0x44,0xc8,0x19,0x39,
		0x5b,0x42,0x54,0x6b,0x3c,0x18,0x29,0x45,0x58,0x30,0x4f,0x79,0x44,0x00,0x00,0x02,
		0x00,0x38,0x00,0x00,0x01,0xd0,0x02,0x6f,0x00,0x0f,0x00,0x19,0x00,0x1d,0x40,0x0e,
		0x0a,0x10,0x10,0x0e,0x0e,0x00,0x19,0x01,0x02,0x72,0x0c,0x00,0x08,0x72,0x00,0x2b,
		0x32,0x2b,0x32,0x11,0x39,0x2f,0x33,0x12,0x39,0x30,0x31,0x73,0x11,0x33,0x32,0x16,
		0x16,0x15,0x14,0x06,0x06,0x07,0x13,0x23,0x03,0x23,0x11,0x11,0x33,0x32,0x36,0x35,
		0x34,0x26,0x26,0x23,0x23,0x38,0xb8,0x4a,0x5b,0x2a,0x1f,0x39,0x27,0x90,0x4e,0x8a,
		0x79,0x79,0x43,0x3c,0x1a,0x38,0x2d,0x79,0x02,0x6f,0x2c,0x50,0x36,0x23,0x46,0x34,
		0x0a,0xfe,0xea,0x01,0x13,0xfe,0xed,0x01,0x51,0x3b,0x31,0x1f,0x33,0x1e,0xff,0xff,
		0x00,0x38,0x00,0x00,0x01,0xd0,0x03,0x17,0x06,0x26,0x00,0x9e,0x00,0x00,0x01,0x06,
		0x03,0xa3,0xed,0x00,0x00,0x0b,0xb6,0x02,0x1a,0x01,0x01,0x01,0x25,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x38,0x00,0x00,0x01,0xd0,0x03,0x19,0x06,0x26,0x00,0x9e,
		0x00,0x00,0x01,0x06,0x03,0xa6,0x00,0x00,0x00,0x0b,0xb6,0x02,0x1d,0x01,0x01,0x01,
		0x22,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x38,0xfe,0xed,0x01,0xd0,0x02,0x6f,
		0x06,0x26,0x00,0x9e,0x00,0x00,0x01,0x06,0x03,0x8c,0x0e,0x00,0x00,0x0e,0xb4,0x02,
		0x26,0x0c,0x01,0x01,0xb8,0xff,0xe0,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x38,
		0x00,0x00,0x01,0xd0,0x03,0x50,0x06,0x26,0x00,0x9e,0x00,0x00,0x01,0x07,0x03,0x86,
		0xff,0xeb,0x00,0xa6,0x00,0x0d,0xb7,0x03,0x02,0x1a,0x01,0x01,0x01,0x32,0x56,0x00,
		0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x38,0xff,0x6d,0x01,0xd0,0x02,0x6f,0x06,0x26,
		0x00,0x9e,0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x02,0x20,0x0c,
		0x01,0x01,0xb8,0xff,0xd4,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x38,0x00,0x00,
		0x01,0xd0,0x03,0x2a,0x06,0x26,0x00,0x9e,0x00,0x00,0x01,0x07,0x03,0x87,0xff,0xf8,
		0x00,0xa6,0x00,0x0b,0xb6,0x02,0x1a,0x01,0x01,0x01,0x47,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x38,0xff,0x65,0x01,0xd0,0x02,0x6f,0x06,0x26,0x00,0x9e,0x00,0x00,
		0x01,0x06,0x03,0x90,0x02,0x00,0x00,0x0e,0xb4,0x02,0x1b,0x00,0x01,0x01,0xb8,0xff,
		0x9d,0xb0,0x56,0x00,0x2b,0x34,0x00,0x01,0x00,0x34,0xff,0xf6,0x01,0xc7,0x02,0x77,
		0x00,0x40,0x00,0x17,0x40,0x0b,0x1b,0x11,0x1f,0x0c,0x40,0x09,0x72,0x2c,0x1f,0x03,
		0x72,0x00,0x2b,0x32,0x2b,0x32,0x11,0x39,0x39,0x30,0x31,0x57,0x22,0x26,0x27,0x37,
		0x37,0x17,0x16,0x16,0x17,0x16,0x16,0x33,0x32,0x3e,0x02,0x35,0x34,0x2e,0x03,0x27,
		0x2e,0x02,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x17,0x07,0x07,0x27,0x26,0x26,
		0x27,0x26,0x26,0x23,0x22,0x0e,0x02,0x15,0x14,0x1e,0x03,0x17,0x1e,0x03,0x15,0x14,
		0x06,0x06,0x23,0xf7,0x3d,0x61,0x25,0x24,0x04,0x07,0x02,0x06,0x0b,0x1a,0x45,0x2c,
		0x1c,0x2f,0x23,0x13,0x07,0x13,0x20,0x32,0x23,0x41,0x4b,0x1f,0x2e,0x55,0x3b,0x22,
		0x3f,0x37,0x15,0x27,0x06,0x06,0x01,0x06,0x0b,0x18,0x36,0x25,0x19,0x27,0x1c,0x0f,
		0x08,0x14,0x23,0x35,0x26,0x2e,0x3d,0x23,0x0f,0x2b,0x5c,0x49,0x0a,0x28,0x27,0x3f,
		0x09,0x04,0x07,0x11,0x0c,0x16,0x1a,0x11,0x1d,0x27,0x16,0x11,0x1c,0x17,0x17,0x1a,
		0x0f,0x19,0x3b,0x42,0x23,0x2e,0x45,0x27,0x13,0x22,0x19,0x34,0x08,0x04,0x08,0x10,
		0x0c,0x17,0x11,0x0e,0x1a,0x21,0x12,0x11,0x1c,0x1a,0x1a,0x1a,0x0f,0x13,0x25,0x29,
		0x30,0x1d,0x2b,0x53,0x36,0x00,0xff,0xff,0x00,0x34,0xff,0xf6,0x01,0xc7,0x03,0x17,
		0x06,0x26,0x00,0xa6,0x00,0x00,0x01,0x06,0x03,0xa3,0xf8,0x00,0x00,0x0b,0xb6,0x01,
		0x41,0x1f,0x01,0x01,0x1d,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x34,0xff,0xf6,
		0x01,0xc7,0x03,0x92,0x06,0x26,0x00,0xa6,0x00,0x00,0x00,0x26,0x03,0xa3,0xf8,0x00,
		0x01,0x06,0x03,0xa1,0x0a,0x76,0x00,0x15,0x40,0x0e,0x02,0x45,0x1f,0x01,0x01,0xb4,
		0x56,0x01,0x41,0x1f,0x01,0x01,0x1d,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x34,0xff,0xf6,0x01,0xc7,0x03,0x19,0x06,0x26,0x00,0xa6,0x00,0x00,0x01,0x06,
		0x03,0xa6,0x0b,0x00,0x00,0x0b,0xb6,0x01,0x44,0x1f,0x01,0x01,0x1a,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x34,0xff,0xf6,0x01,0xc7,0x03,0xba,0x06,0x26,0x00,0xa6,
		0x00,0x00,0x00,0x26,0x03,0xa6,0x0b,0x00,0x01,0x07,0x03,0xa1,0x00,0x0a,0x00,0x9e,
		0x00,0x15,0x40,0x0e,0x02,0x48,0x1f,0x01,0x01,0xdc,0x56,0x01,0x44,0x1f,0x01,0x01,
		0x1a,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x34,0xff,0x3b,0x01,0xc7,
		0x02,0x77,0x06,0x26,0x00,0xa6,0x00,0x00,0x01,0x06,0x03,0x8d,0xe8,0x00,0x00,0x0b,
		0xb6,0x01,0x50,0x40,0x00,0x00,0x0a,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x34,
		0xff,0xf6,0x01,0xc7,0x03,0x17,0x06,0x26,0x00,0xa6,0x00,0x00,0x01,0x06,0x03,0xa5,
		0x0b,0x00,0x00,0x0b,0xb6,0x01,0x41,0x1f,0x01,0x01,0x18,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x34,0xfe,0xed,0x01,0xc7,0x02,0x77,0x06,0x26,0x00,0xa6,0x00,0x00,
		0x01,0x06,0x03,0x8c,0x0b,0x00,0x00,0x0e,0xb4,0x01,0x4d,0x40,0x01,0x01,0xb8,0xff,
		0xea,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x34,0xff,0xf6,0x01,0xc7,0x03,0x1c,
		0x06,0x26,0x00,0xa6,0x00,0x00,0x01,0x06,0x03,0xa1,0x0a,0x00,0x00,0x0b,0xb6,0x01,
		0x41,0x1f,0x01,0x01,0x3e,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x34,0xff,0x6d,
		0x01,0xc7,0x02,0x77,0x06,0x26,0x00,0xa6,0x00,0x00,0x01,0x06,0x03,0x8a,0x08,0x00,
		0x00,0x0e,0xb4,0x01,0x47,0x40,0x01,0x01,0xb8,0xff,0xde,0xb0,0x56,0x00,0x2b,0x34,
		0xff,0xff,0x00,0x34,0xff,0x6d,0x01,0xc7,0x03,0x1c,0x06,0x26,0x00,0xa6,0x00,0x00,
		0x00,0x26,0x03,0x8a,0x08,0x00,0x01,0x06,0x03,0xa1,0x0a,0x00,0x00,0x18,0x40,0x0c,
		0x02,0x4d,0x1f,0x01,0x01,0x3e,0x56,0x01,0x47,0x40,0x01,0x01,0xb8,0xff,0xde,0xb0,
		0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0x01,0x00,0x37,0xff,0xf6,0x01,0xd0,0x02,0x9d,
		0x00,0x33,0x00,0x21,0x40,0x0f,0x2a,0x2b,0x2b,0x13,0x11,0x12,0x12,0x00,0x18,0x25,
		0x01,0x72,0x1f,0x08,0x00,0x00,0x2f,0x32,0x2f,0x2b,0x32,0x11,0x39,0x2f,0x33,0x33,
		0x33,0x11,0x33,0x30,0x31,0x45,0x22,0x26,0x27,0x37,0x1e,0x02,0x33,0x32,0x3e,0x02,
		0x35,0x34,0x26,0x26,0x23,0x23,0x35,0x37,0x34,0x26,0x26,0x23,0x22,0x0e,0x02,0x15,
		0x11,0x23,0x11,0x34,0x3e,0x02,0x33,0x32,0x16,0x16,0x15,0x07,0x27,0x32,0x16,0x16,
		0x15,0x14,0x0e,0x02,0x01,0x1b,0x1f,0x34,0x17,0x16,0x0c,0x1b,0x1a,0x0c,0x19,0x2c,
		0x22,0x13,0x18,0x42,0x40,0x1e,0x8a,0x14,0x2e,0x27,0x17,0x2c,0x24,0x15,0x44,0x21,
		0x37,0x44,0x23,0x3b,0x4d,0x26,0xab,0x09,0x46,0x64,0x36,0x1d,0x32,0x42,0x0a,0x0f,
		0x10,0x38,0x08,0x0b,0x05,0x12,0x23,0x33,0x21,0x1f,0x3d,0x29,0x39,0x79,0x1d,0x32,
		0x1f,0x0e,0x20,0x34,0x26,0xfe,0x25,0x01,0xce,0x3a,0x50,0x30,0x15,0x31,0x50,0x2f,
		0x91,0x20,0x2b,0x58,0x44,0x33,0x48,0x2e,0x16,0x00,0xff,0xff,0x00,0x1b,0xff,0xf5,
		0x01,0xd9,0x02,0x73,0x06,0x06,0x00,0x78,0x00,0x00,0x00,0x01,0x00,0x1f,0x00,0x00,
		0x01,0xcf,0x02,0x70,0x00,0x07,0x00,0x13,0x40,0x09,0x06,0x02,0x02,0x03,0x02,0x72,
		0x00,0x08,0x72,0x00,0x2b,0x2b,0x32,0x11,0x33,0x30,0x31,0x73,0x11,0x23,0x35,0x21,
		0x15,0x23,0x11,0xd0,0xb1,0x01,0xb0,0xb8,0x02,0x31,0x3f,0x3f,0xfd,0xcf,0x00,0x02,
		0x00,0x1f,0x00,0x00,0x01,0xcf,0x02,0x70,0x00,0x07,0x00,0x0b,0x00,0x1a,0x40,0x0c,
		0x09,0x08,0x08,0x00,0x06,0x02,0x02,0x03,0x02,0x72,0x00,0x08,0x00,0x3f,0x2b,0x32,
		0x11,0x33,0x11,0x39,0x2f,0x33,0x30,0x31,0x73,0x11,0x23,0x35,0x21,0x15,0x23,0x11,
		0x03,0x35,0x21,0x15,0xd0,0xb1,0x01,0xb0,0xb8,0xbf,0x01,0x44,0x02,0x31,0x3f,0x3f,
		0xfd,0xcf,0x01,0x1b,0x39,0x39,0xff,0xff,0x00,0x1f,0x00,0x00,0x01,0xcf,0x03,0x19,
		0x06,0x26,0x00,0xb3,0x00,0x00,0x01,0x06,0x03,0xa6,0x00,0x00,0x00,0x0b,0xb6,0x01,
		0x0b,0x03,0x01,0x01,0x21,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x1f,0xff,0x3b,
		0x01,0xcf,0x02,0x70,0x06,0x26,0x00,0xb3,0x00,0x00,0x01,0x06,0x03,0x8d,0xeb,0x00,
		0x00,0x0b,0xb6,0x01,0x17,0x00,0x01,0x00,0x00,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x1f,0xfe,0xed,0x01,0xcf,0x02,0x70,0x06,0x26,0x00,0xb3,0x00,0x00,0x01,0x06,
		0x03,0x8c,0x0e,0x00,0x00,0x0e,0xb4,0x01,0x14,0x00,0x01,0x01,0xb8,0xff,0xe0,0xb0,
		0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x1f,0xff,0x6d,0x01,0xcf,0x02,0x70,0x06,0x26,
		0x00,0xb3,0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x01,0x0e,0x00,
		0x01,0x01,0xb8,0xff,0xd4,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x1f,0xff,0x65,
		0x01,0xcf,0x02,0x70,0x06,0x26,0x00,0xb3,0x00,0x00,0x01,0x06,0x03,0x90,0x02,0x00,
		0x00,0x0e,0xb4,0x01,0x09,0x00,0x01,0x01,0xb8,0xff,0x9d,0xb0,0x56,0x00,0x2b,0x34,
		0x00,0x01,0x00,0x32,0xff,0xf5,0x01,0xc6,0x02,0x6f,0x00,0x18,0x00,0x10,0xb7,0x0e,
		0x18,0x09,0x72,0x13,0x04,0x02,0x72,0x00,0x2b,0x32,0x2b,0x32,0x30,0x31,0x57,0x22,
		0x26,0x35,0x11,0x33,0x33,0x15,0x06,0x06,0x15,0x11,0x14,0x16,0x33,0x32,0x36,0x35,
		0x11,0x33,0x11,0x14,0x06,0x06,0x23,0xfb,0x64,0x65,0x44,0x0a,0x06,0x03,0x3b,0x4a,
		0x4b,0x3c,0x43,0x32,0x5b,0x3e,0x0b,0x77,0x6b,0x01,0x98,0x07,0x06,0x0e,0x11,0xfe,
		0x93,0x4c,0x5a,0x5a,0x4f,0x01,0x96,0xfe,0x6b,0x4f,0x65,0x31,0xff,0xff,0x00,0x32,
		0xff,0xf5,0x01,0xc6,0x03,0x17,0x06,0x26,0x00,0xba,0x00,0x00,0x01,0x06,0x03,0xa3,
		0xed,0x00,0x00,0x0b,0xb6,0x01,0x19,0x04,0x01,0x01,0x25,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x32,0xff,0xf5,0x01,0xc6,0x03,0x13,0x06,0x26,0x00,0xba,0x00,0x00,
		0x01,0x06,0x03,0xa7,0x00,0x00,0x00,0x0b,0xb6,0x01,0x1d,0x12,0x01,0x01,0x30,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x32,0xff,0xf5,0x01,0xc6,0x03,0x17,0x06,0x26,
		0x00,0xba,0x00,0x00,0x01,0x06,0x03,0xa5,0x00,0x00,0x00,0x0b,0xb6,0x01,0x19,0x04,
		0x01,0x01,0x20,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x32,0xff,0xf5,0x01,0xc6,
		0x03,0x50,0x06,0x26,0x00,0xba,0x00,0x00,0x01,0x07,0x03,0x86,0xff,0xeb,0x00,0xa6,
		0x00,0x0d,0xb7,0x02,0x01,0x19,0x04,0x01,0x01,0x32,0x56,0x00,0x2b,0x34,0x34,0x00,
		0xff,0xff,0x00,0x32,0xff,0xf5,0x01,0xc6,0x03,0x15,0x06,0x26,0x00,0xba,0x00,0x00,
		0x01,0x06,0x03,0xa0,0xff,0x00,0x00,0x0d,0xb7,0x02,0x01,0x19,0x04,0x01,0x01,0x41,
		0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x32,0xff,0x6d,0x01,0xc6,0x02,0x6f,
		0x06,0x26,0x00,0xba,0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x01,
		0x1f,0x18,0x01,0x01,0xb8,0xff,0xdf,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x32,
		0xff,0xf5,0x01,0xc6,0x03,0x17,0x06,0x26,0x00,0xba,0x00,0x00,0x01,0x06,0x03,0xa2,
		0xf2,0x00,0x00,0x0b,0xb6,0x01,0x19,0x12,0x01,0x01,0x25,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x32,0xff,0xf5,0x01,0xc6,0x03,0x66,0x06,0x26,0x00,0xba,0x00,0x00,
		0x01,0x07,0x03,0x85,0x00,0x0f,0x00,0xa6,0x00,0x0b,0xb6,0x01,0x20,0x12,0x01,0x01,
		0x42,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x2d,0xff,0xf5,0x01,0xf1,0x02,0xcd,
		0x06,0x26,0x00,0xe7,0x00,0x00,0x01,0x06,0x03,0xaa,0x00,0x00,0x00,0x0e,0xb4,0x01,
		0x19,0x04,0x01,0x01,0xb8,0xff,0xcf,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x2d,
		0xff,0xf5,0x01,0xf1,0x03,0x17,0x06,0x26,0x00,0xc3,0x00,0x00,0x01,0x06,0x03,0xa3,
		0xd2,0x00,0x00,0x0b,0xb6,0x02,0x23,0x04,0x01,0x01,0x25,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x2d,0xff,0x6d,0x01,0xf1,0x02,0xcd,0x06,0x26,0x00,0xc3,0x00,0x00,
		0x01,0x06,0x03,0x8a,0xef,0x00,0x00,0x0e,0xb4,0x02,0x29,0x18,0x01,0x01,0xb8,0xff,
		0xdf,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x2d,0xff,0xf5,0x01,0xf1,0x03,0x17,
		0x06,0x26,0x00,0xc3,0x00,0x00,0x01,0x06,0x03,0xa2,0xd7,0x00,0x00,0x0b,0xb6,0x02,
		0x23,0x12,0x01,0x01,0x25,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x2d,0xff,0xf5,
		0x01,0xf1,0x03,0x66,0x06,0x26,0x00,0xc3,0x00,0x00,0x01,0x07,0x03,0x85,0xff,0xf4,
		0x00,0xa6,0x00,0x0b,0xb6,0x02,0x2a,0x12,0x01,0x01,0x42,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x2d,0xff,0xf5,0x01,0xf1,0x03,0x1d,0x06,0x26,0x00,0xc3,0x00,0x00,
		0x01,0x06,0x03,0xa9,0xe4,0x00,0x00,0x0b,0xb6,0x02,0x27,0x12,0x01,0x01,0x41,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x32,0xff,0xf5,0x01,0xc6,0x03,0x2a,0x06,0x26,
		0x00,0xba,0x00,0x00,0x01,0x06,0x03,0xa4,0xd8,0x00,0x00,0x0d,0xb7,0x02,0x01,0x19,
		0x12,0x01,0x01,0x16,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x32,0xff,0xf5,
		0x01,0xc6,0x03,0x2a,0x06,0x26,0x00,0xba,0x00,0x00,0x01,0x07,0x03,0x87,0xff,0xf8,
		0x00,0xa6,0x00,0x0b,0xb6,0x01,0x19,0x04,0x01,0x01,0x47,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x32,0xff,0xf5,0x01,0xc6,0x03,0x13,0x06,0x26,0x00,0xba,0x00,0x00,
		0x01,0x07,0x03,0x84,0x00,0x00,0x00,0xa6,0x00,0x0b,0xb6,0x01,0x19,0x04,0x01,0x01,
		0x6c,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x32,0xff,0xf5,0x01,0xc6,0x03,0xaf,
		0x06,0x26,0x00,0xba,0x00,0x00,0x00,0x27,0x03,0x84,0x00,0x00,0x00,0xa6,0x01,0x07,
		0x03,0xa0,0xff,0xff,0x00,0x9a,0x00,0x17,0x40,0x0f,0x03,0x02,0x1d,0x1a,0x01,0x01,
		0x37,0x56,0x01,0x19,0x04,0x01,0x01,0x6c,0x56,0x00,0x2b,0x34,0x2b,0x34,0x34,0x00,
		0xff,0xff,0x00,0x32,0xff,0x27,0x01,0xc6,0x02,0x6f,0x06,0x26,0x00,0xba,0x00,0x00,
		0x01,0x06,0x03,0x8e,0x35,0x0a,0x00,0x0b,0xb6,0x01,0x22,0x18,0x00,0x00,0x26,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x32,0xff,0xf5,0x01,0xc6,0x03,0x1b,0x06,0x26,
		0x00,0xba,0x00,0x00,0x01,0x06,0x03,0xa8,0xff,0x00,0x00,0x10,0xb5,0x02,0x01,0x19,
		0x12,0x01,0x00,0xb8,0xff,0xfc,0xb0,0x56,0x00,0x2b,0x34,0x34,0xff,0xff,0x00,0x32,
		0xff,0xf5,0x01,0xc6,0x03,0x1d,0x06,0x26,0x00,0xba,0x00,0x00,0x01,0x06,0x03,0xa9,
		0xff,0x00,0x00,0x0b,0xb6,0x01,0x1d,0x12,0x01,0x01,0x41,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x32,0xff,0xf5,0x01,0xc6,0x03,0xb2,0x06,0x26,0x00,0xba,0x00,0x00,
		0x00,0x26,0x03,0xa9,0xff,0x00,0x01,0x07,0x03,0xa3,0xff,0xed,0x00,0x9b,0x00,0x15,
		0x40,0x0e,0x02,0x31,0x12,0x01,0x01,0xc0,0x56,0x01,0x1d,0x12,0x01,0x01,0x41,0x56,
		0x00,0x2b,0x34,0x2b,0x34,0x00,0x00,0x01,0x00,0x19,0xff,0xfc,0x01,0xde,0x02,0x70,
		0x00,0x06,0x00,0x13,0x40,0x09,0x03,0x00,0x02,0x05,0x02,0x72,0x00,0x08,0x72,0x00,
		0x2b,0x2b,0x32,0x12,0x39,0x30,0x31,0x57,0x03,0x33,0x13,0x13,0x33,0x03,0xed,0xd4,
		0x49,0xa0,0x97,0x45,0xd1,0x04,0x02,0x74,0xfe,0x21,0x01,0xde,0xfd,0x8d,0x00,0x01,
		0x00,0x11,0x00,0x00,0x01,0xe8,0x02,0x6f,0x00,0x0c,0x00,0x1d,0x40,0x0f,0x06,0x03,
		0x0b,0x03,0x04,0x04,0x00,0x08,0x01,0x02,0x72,0x0a,0x00,0x08,0x72,0x00,0x2b,0x32,
		0x2b,0x32,0x12,0x39,0x2f,0x17,0x39,0x30,0x31,0x73,0x03,0x33,0x13,0x13,0x33,0x13,
		0x13,0x33,0x03,0x23,0x03,0x03,0x75,0x64,0x41,0x43,0x64,0x16,0x65,0x39,0x3b,0x63,
		0x1b,0x6b,0x6d,0x02,0x6f,0xfe,0x5b,0x01,0x77,0xfe,0x87,0x01,0xa7,0xfd,0x91,0x01,
		0x97,0xfe,0x69,0x00,0xff,0xff,0x00,0x11,0x00,0x00,0x01,0xe8,0x03,0x17,0x06,0x26,
		0x00,0xd2,0x00,0x00,0x01,0x06,0x03,0xa3,0xf7,0x00,0x00,0x0b,0xb6,0x01,0x0d,0x01,
		0x01,0x01,0x25,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x11,0x00,0x00,0x01,0xe8,
		0x03,0x17,0x06,0x26,0x00,0xd2,0x00,0x00,0x01,0x06,0x03,0xa5,0x0a,0x00,0x00,0x0b,
		0xb6,0x01,0x0d,0x01,0x01,0x01,0x20,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x11,
		0x00,0x00,0x01,0xe8,0x03,0x15,0x06,0x26,0x00,0xd2,0x00,0x00,0x01,0x06,0x03,0xa0,
		0x09,0x00,0x00,0x0d,0xb7,0x02,0x01,0x0d,0x01,0x01,0x01,0x41,0x56,0x00,0x2b,0x34,
		0x34,0x00,0xff,0xff,0x00,0x11,0x00,0x00,0x01,0xe8,0x03,0x17,0x06,0x26,0x00,0xd2,
		0x00,0x00,0x01,0x06,0x03,0xa2,0xfc,0x00,0x00,0x0b,0xb6,0x01,0x0d,0x07,0x01,0x01,
		0x25,0x56,0x00,0x2b,0x34,0x00,0x00,0x01,0x00,0x29,0x00,0x00,0x01,0xd4,0x02,0x70,
		0x00,0x0b,0x00,0x1c,0x40,0x0f,0x0a,0x01,0x07,0x04,0x04,0x00,0x06,0x06,0x02,0x02,
		0x72,0x09,0x00,0x08,0x72,0x00,0x2b,0x32,0x2b,0x32,0x2f,0x11,0x17,0x39,0x30,0x31,
		0x73,0x13,0x03,0x33,0x17,0x37,0x33,0x03,0x13,0x23,0x27,0x07,0x29,0xaa,0xa7,0x4b,
		0x83,0x81,0x46,0x9e,0xb1,0x4f,0x8a,0x86,0x01,0x3e,0x01,0x32,0xed,0xed,0xfe,0xcf,
		0xfe,0xc1,0xf7,0xf7,0x00,0x01,0x00,0x1c,0x00,0x00,0x01,0xd9,0x02,0x6f,0x00,0x08,
		0x00,0x1a,0x40,0x0e,0x08,0x08,0x72,0x07,0x01,0x04,0x03,0x00,0x06,0x02,0x02,0x72,
		0x00,0x08,0x00,0x3f,0x2b,0x32,0x12,0x17,0x39,0x2b,0x30,0x31,0x73,0x35,0x03,0x33,
		0x13,0x13,0x33,0x03,0x15,0xdc,0xc0,0x50,0x99,0x8a,0x4a,0xb1,0xf6,0x01,0x79,0xfe,
		0xd2,0x01,0x2e,0xfe,0x87,0xf6,0xff,0xff,0x00,0x1c,0x00,0x00,0x01,0xd9,0x03,0x17,
		0x06,0x26,0x00,0xd8,0x00,0x00,0x01,0x06,0x03,0xa3,0xed,0x00,0x00,0x0b,0xb6,0x01,
		0x09,0x02,0x01,0x01,0x25,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x1c,0x00,0x00,
		0x01,0xd9,0x03,0x17,0x06,0x26,0x00,0xd8,0x00,0x00,0x01,0x06,0x03,0xa5,0x00,0x00,
		0x00,0x0b,0xb6,0x01,0x09,0x02,0x01,0x01,0x20,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x1c,0x00,0x00,0x01,0xd9,0x03,0x15,0x06,0x26,0x00,0xd8,0x00,0x00,0x01,0x06,
		0x03,0xa0,0xff,0x00,0x00,0x0d,0xb7,0x02,0x01,0x09,0x02,0x01,0x01,0x41,0x56,0x00,
		0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x1c,0x00,0x00,0x01,0xd9,0x03,0x1c,0x06,0x26,
		0x00,0xd8,0x00,0x00,0x01,0x06,0x03,0xa1,0xff,0x00,0x00,0x0b,0xb6,0x01,0x09,0x05,
		0x01,0x01,0x46,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x1c,0xff,0x6d,0x01,0xd9,
		0x02,0x6f,0x06,0x26,0x00,0xd8,0x00,0x00,0x01,0x06,0x03,0x8a,0x13,0x00,0x00,0x0e,
		0xb4,0x01,0x0f,0x00,0x01,0x01,0xb8,0xff,0xd4,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,
		0x00,0x1c,0x00,0x00,0x01,0xd9,0x03,0x17,0x06,0x26,0x00,0xd8,0x00,0x00,0x01,0x06,
		0x03,0xa2,0xf2,0x00,0x00,0x0b,0xb6,0x01,0x09,0x05,0x01,0x01,0x25,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x1c,0x00,0x00,0x01,0xd9,0x03,0x66,0x06,0x26,0x00,0xd8,
		0x00,0x00,0x01,0x07,0x03,0x85,0x00,0x0f,0x00,0xa6,0x00,0x0b,0xb6,0x01,0x10,0x05,
		0x01,0x01,0x42,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x1c,0x00,0x00,0x01,0xd9,
		0x03,0x13,0x06,0x26,0x00,0xd8,0x00,0x00,0x01,0x07,0x03,0x84,0x00,0x00,0x00,0xa6,
		0x00,0x0b,0xb6,0x01,0x09,0x02,0x01,0x01,0x6c,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x1c,0x00,0x00,0x01,0xd9,0x03,0x1d,0x06,0x26,0x00,0xd8,0x00,0x00,0x01,0x06,
		0x03,0xa9,0xff,0x00,0x00,0x0b,0xb6,0x01,0x0d,0x05,0x01,0x01,0x41,0x56,0x00,0x2b,
		0x34,0x00,0x00,0x01,0x00,0x32,0x00,0x00,0x01,0xcf,0x02,0x6f,0x00,0x0e,0x00,0x19,
		0x40,0x0c,0x00,0x06,0x06,0x0e,0x08,0x72,0x05,0x02,0x02,0x03,0x02,0x72,0x00,0x2b,
		0x32,0x11,0x33,0x2b,0x32,0x11,0x33,0x30,0x31,0x77,0x01,0x21,0x35,0x21,0x15,0x01,
		0x21,0x32,0x36,0x37,0x33,0x15,0x15,0x21,0x32,0x01,0x3a,0xfe,0xd2,0x01,0x81,0xfe,
		0xcb,0x01,0x19,0x11,0x0e,0x06,0x07,0xfe,0x63,0x31,0x01,0xff,0x3f,0x31,0xfe,0x00,
		0x04,0x06,0x0a,0x3e,0xff,0xff,0x00,0x32,0x00,0x00,0x01,0xcf,0x03,0x17,0x06,0x26,
		0x00,0xe2,0x00,0x00,0x01,0x06,0x03,0xa3,0xf7,0x00,0x00,0x0b,0xb6,0x01,0x0f,0x03,
		0x01,0x01,0x25,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x32,0x00,0x00,0x01,0xcf,
		0x03,0x19,0x06,0x26,0x00,0xe2,0x00,0x00,0x01,0x06,0x03,0xa6,0x0a,0x00,0x00,0x0b,
		0xb6,0x01,0x12,0x03,0x01,0x01,0x22,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x32,
		0x00,0x00,0x01,0xcf,0x03,0x1c,0x06,0x26,0x00,0xe2,0x00,0x00,0x01,0x06,0x03,0xa1,
		0x09,0x00,0x00,0x0b,0xb6,0x01,0x0f,0x03,0x01,0x01,0x46,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x32,0xff,0x6d,0x01,0xcf,0x02,0x6f,0x06,0x26,0x00,0xe2,0x00,0x00,
		0x01,0x06,0x03,0x8a,0x1f,0x00,0x00,0x0e,0xb4,0x01,0x15,0x0e,0x01,0x01,0xb8,0xff,
		0xd4,0xb0,0x56,0x00,0x2b,0x34,0x00,0x01,0x00,0x2d,0xff,0xf5,0x01,0x99,0x02,0x6f,
		0x00,0x18,0x00,0x10,0xb7,0x0e,0x18,0x09,0x72,0x13,0x04,0x02,0x72,0x00,0x2b,0x32,
		0x2b,0x32,0x30,0x31,0x57,0x22,0x26,0x35,0x11,0x33,0x33,0x15,0x06,0x06,0x15,0x11,
		0x14,0x16,0x33,0x32,0x36,0x35,0x11,0x33,0x11,0x14,0x06,0x06,0x23,0xe2,0x5a,0x5b,
		0x3d,0x09,0x05,0x03,0x35,0x43,0x44,0x35,0x3d,0x2d,0x52,0x38,0x0b,0x77,0x6b,0x01,
		0x98,0x07,0x06,0x0e,0x11,0xfe,0x93,0x4c,0x5a,0x5a,0x4f,0x01,0x96,0xfe,0x6b,0x4f,
		0x65,0x31,0x00,0x01,0x00,0x31,0xff,0xf5,0x01,0xbd,0x01,0xd3,0x00,0x37,0x00,0x27,
		0x40,0x14,0x31,0x0a,0x72,0x0c,0x08,0x08,0x0d,0x11,0x11,0x00,0x24,0x2b,0x07,0x72,
		0x33,0x1b,0x1b,0x00,0x0b,0x72,0x00,0x2b,0x32,0x11,0x33,0x2b,0x32,0x11,0x39,0x2f,
		0x33,0x33,0x11,0x33,0x2b,0x30,0x31,0x57,0x22,0x26,0x35,0x34,0x3e,0x02,0x33,0x32,
		0x16,0x16,0x17,0x17,0x2e,0x02,0x23,0x22,0x0e,0x02,0x15,0x14,0x1e,0x02,0x33,0x32,
		0x3e,0x02,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x07,0x27,0x36,0x36,0x33,0x32,0x1e,
		0x02,0x15,0x15,0x23,0x35,0x0e,0x03,0xd3,0x4e,0x54,0x24,0x3f,0x54,0x2f,0x11,0x23,
		0x27,0x15,0x02,0x12,0x25,0x24,0x11,0x24,0x3c,0x2c,0x18,0x0f,0x1a,0x23,0x15,0x27,
		0x3d,0x2b,0x16,0x20,0x3f,0x31,0x21,0x40,0x1a,0x23,0x20,0x54,0x2f,0x2d,0x4a,0x35,
		0x1d,0x4e,0x0d,0x25,0x2a,0x2c,0x0b,0x47,0x37,0x25,0x3b,0x29,0x16,0x01,0x03,0x03,
		0x37,0x03,0x03,0x02,0x0c,0x18,0x26,0x1b,0x15,0x1d,0x11,0x08,0x19,0x30,0x46,0x2d,
		0x44,0x4c,0x20,0x19,0x1a,0x2e,0x20,0x20,0x16,0x33,0x56,0x41,0xf3,0x46,0x19,0x20,
		0x11,0x07,0xff,0xff,0x00,0x31,0xff,0xf5,0x01,0xbd,0x02,0xaa,0x06,0x26,0x00,0xe8,
		0x00,0x00,0x01,0x06,0x03,0x7d,0xf5,0x00,0x00,0x0b,0xb6,0x01,0x38,0x2b,0x01,0x01,
		0x28,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf5,0x01,0xbd,0x02,0x8e,
		0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,0x03,0x81,0xf8,0x00,0x00,0x0b,0xb6,0x01,
		0x3c,0x2b,0x01,0x01,0x47,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf5,
		0x01,0xbd,0x03,0x2d,0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,0x03,0xb5,0xf8,0x00,
		0x00,0x15,0x40,0x0e,0x02,0x47,0x3c,0x01,0x01,0x64,0x56,0x01,0x3c,0x2b,0x01,0x01,
		0x47,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0x6d,0x01,0xbd,
		0x02,0x8e,0x06,0x26,0x00,0xe8,0x00,0x00,0x00,0x26,0x03,0x8a,0x0b,0x00,0x01,0x06,
		0x03,0x81,0xf8,0x00,0x00,0x18,0x40,0x0c,0x02,0x48,0x2b,0x01,0x01,0x47,0x56,0x01,
		0x3e,0x00,0x01,0x01,0xb8,0xff,0xdf,0xb0,0x56,0x00,0x2b,0x34,0x2b,0x34,0xff,0xff,
		0x00,0x31,0xff,0xf5,0x01,0xbd,0x03,0x2d,0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,
		0x03,0xb6,0xf8,0x00,0x00,0x15,0x40,0x0e,0x02,0x47,0x3c,0x01,0x01,0x64,0x56,0x01,
		0x3c,0x2b,0x01,0x01,0x47,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,
		0xff,0xf5,0x01,0xbd,0x03,0x3f,0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,0x03,0xb7,
		0xf8,0x00,0x00,0x15,0x40,0x0e,0x02,0x4e,0x3c,0x01,0x01,0x70,0x56,0x01,0x3c,0x2b,
		0x01,0x01,0x47,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf5,
		0x01,0xbd,0x03,0x22,0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,0x03,0xb8,0xf4,0x00,
		0x00,0x15,0x40,0x0e,0x02,0x4b,0x3c,0x01,0x01,0x9b,0x56,0x01,0x3c,0x2b,0x01,0x01,
		0x47,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf5,0x01,0xbd,
		0x02,0xad,0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,0x03,0x7f,0x00,0x00,0x00,0x0b,
		0xb6,0x01,0x38,0x2b,0x01,0x01,0x2c,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,
		0xff,0xf5,0x01,0xe6,0x03,0x26,0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,0x03,0xb9,
		0xfa,0x00,0x00,0x15,0x40,0x0e,0x02,0x3f,0x38,0x01,0x01,0x78,0x56,0x01,0x38,0x2b,
		0x01,0x01,0x2c,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0x6d,
		0x01,0xbd,0x02,0xad,0x06,0x26,0x00,0xe8,0x00,0x00,0x00,0x26,0x03,0x8a,0x0b,0x00,
		0x01,0x06,0x03,0x7f,0x00,0x00,0x00,0x18,0x40,0x0c,0x02,0x44,0x2b,0x01,0x01,0x2c,
		0x56,0x01,0x3e,0x00,0x01,0x01,0xb8,0xff,0xdf,0xb0,0x56,0x00,0x2b,0x34,0x2b,0x34,
		0xff,0xff,0x00,0x31,0xff,0xf5,0x01,0xbd,0x03,0x3b,0x06,0x26,0x00,0xe8,0x00,0x00,
		0x01,0x06,0x03,0xba,0xfa,0x00,0x00,0x15,0x40,0x0e,0x02,0x3f,0x38,0x01,0x01,0x8d,
		0x56,0x01,0x38,0x2b,0x01,0x01,0x2c,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x31,0xff,0xf5,0x01,0xc8,0x03,0x24,0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,
		0x03,0xbb,0xff,0x00,0x00,0x15,0x40,0x0e,0x02,0x46,0x38,0x01,0x01,0x70,0x56,0x01,
		0x38,0x2b,0x01,0x01,0x2c,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,
		0xff,0xf5,0x01,0xbd,0x03,0x38,0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,0x03,0xbc,
		0xf8,0x00,0x00,0x15,0x40,0x0e,0x02,0x43,0x38,0x01,0x01,0xcc,0x56,0x01,0x38,0x2b,
		0x01,0x01,0x2c,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf5,
		0x01,0xbd,0x02,0xaa,0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,0x03,0x86,0xeb,0x00,
		0x00,0x0d,0xb7,0x02,0x01,0x38,0x2b,0x01,0x01,0x28,0x56,0x00,0x2b,0x34,0x34,0x00,
		0xff,0xff,0x00,0x31,0xff,0xf5,0x01,0xbd,0x02,0x99,0x06,0x26,0x00,0xe8,0x00,0x00,
		0x01,0x06,0x03,0x7a,0xff,0x00,0x00,0x0d,0xb7,0x02,0x01,0x38,0x2b,0x01,0x01,0x61,
		0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0x6d,0x01,0xbd,0x01,0xd3,
		0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x01,
		0x3e,0x00,0x01,0x01,0xb8,0xff,0xdf,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x31,
		0xff,0xf5,0x01,0xbd,0x02,0xaa,0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,0x03,0x7c,
		0xf5,0x00,0x00,0x0b,0xb6,0x01,0x38,0x2b,0x01,0x01,0x28,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x31,0xff,0xf5,0x01,0xbd,0x02,0xc0,0x06,0x26,0x00,0xe8,0x00,0x00,
		0x01,0x06,0x03,0x85,0x0f,0x00,0x00,0x0b,0xb6,0x01,0x3f,0x2b,0x01,0x01,0x38,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf5,0x01,0xbd,0x02,0x84,0x06,0x26,
		0x00,0xe8,0x00,0x00,0x01,0x06,0x03,0x87,0xf8,0x00,0x00,0x0b,0xb6,0x01,0x38,0x2b,
		0x01,0x01,0x3d,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf5,0x01,0xbd,
		0x02,0x6d,0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,0x03,0x84,0x00,0x00,0x00,0x0b,
		0xb6,0x01,0x38,0x2b,0x01,0x01,0x62,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,
		0xff,0x1d,0x01,0xbd,0x01,0xd3,0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,0x03,0x9f,
		0x00,0x00,0x00,0x0b,0xb6,0x01,0x42,0x32,0x00,0x00,0x00,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x31,0xff,0xf5,0x01,0xbd,0x02,0xb5,0x06,0x26,0x00,0xe8,0x00,0x00,
		0x01,0x06,0x03,0x82,0xf9,0x00,0x00,0x0d,0xb7,0x02,0x01,0x38,0x2b,0x01,0x01,0x32,
		0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf5,0x01,0xbd,0x03,0x96,
		0x06,0x26,0x00,0xe8,0x00,0x00,0x00,0x26,0x03,0x82,0xf9,0x00,0x01,0x07,0x03,0x7d,
		0xff,0xf5,0x00,0xec,0x00,0x17,0x40,0x0f,0x03,0x54,0x40,0x01,0x01,0x32,0x56,0x02,
		0x01,0x38,0x2b,0x01,0x01,0x32,0x56,0x00,0x2b,0x34,0x34,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x31,0xff,0xf5,0x01,0xbd,0x02,0xab,0x06,0x26,0x00,0xe8,0x00,0x00,0x01,0x06,
		0x03,0x83,0xf6,0x00,0x00,0x0b,0xb6,0x01,0x3c,0x2b,0x01,0x01,0x6b,0x56,0x00,0x2b,
		0x34,0x00,0x00,0x03,0x00,0x0a,0xff,0xf5,0x01,0xee,0x01,0xd3,0x00,0x37,0x00,0x43,
		0x00,0x4c,0x00,0x39,0x40,0x1c,0x45,0x44,0x44,0x22,0x09,0x3c,0x3c,0x21,0x22,0x22,
		0x00,0x49,0x1c,0x1c,0x18,0x0d,0x14,0x07,0x72,0x34,0x38,0x38,0x28,0x30,0x30,0x00,
		0x0b,0x72,0x00,0x2b,0x32,0x11,0x33,0x32,0x11,0x33,0x2b,0x32,0x32,0x32,0x11,0x33,
		0x11,0x39,0x2f,0x33,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x30,0x31,0x57,0x22,0x26,
		0x26,0x35,0x34,0x3e,0x02,0x37,0x34,0x26,0x26,0x23,0x22,0x06,0x07,0x27,0x36,0x36,
		0x33,0x32,0x16,0x16,0x17,0x3e,0x02,0x33,0x32,0x16,0x16,0x15,0x15,0x07,0x15,0x14,
		0x1e,0x02,0x33,0x32,0x36,0x36,0x37,0x17,0x06,0x06,0x23,0x22,0x26,0x26,0x27,0x0e,
		0x02,0x27,0x32,0x36,0x36,0x35,0x0e,0x02,0x15,0x14,0x16,0x16,0x37,0x37,0x34,0x26,
		0x26,0x23,0x22,0x06,0x06,0x8e,0x2f,0x3a,0x1b,0x1b,0x34,0x50,0x34,0x10,0x23,0x1c,
		0x16,0x26,0x10,0x23,0x16,0x39,0x25,0x18,0x2b,0x22,0x0a,0x0c,0x21,0x27,0x14,0x2e,
		0x38,0x1a,0xd0,0x0e,0x1c,0x26,0x18,0x10,0x1a,0x16,0x09,0x23,0x16,0x39,0x23,0x19,
		0x2f,0x27,0x0e,0x0b,0x23,0x2b,0x16,0x24,0x20,0x09,0x35,0x41,0x1d,0x10,0x20,0xa0,
		0x96,0x0e,0x1f,0x19,0x19,0x24,0x13,0x0b,0x24,0x3d,0x25,0x24,0x39,0x27,0x16,0x02,
		0x2c,0x3a,0x1e,0x15,0x16,0x2c,0x1c,0x1b,0x0f,0x1b,0x14,0x14,0x1b,0x0f,0x30,0x59,
		0x3e,0x26,0x07,0x30,0x1d,0x2f,0x22,0x12,0x08,0x11,0x0c,0x2a,0x1a,0x1b,0x11,0x1f,
		0x15,0x15,0x1f,0x11,0x3d,0x2e,0x4d,0x2e,0x02,0x13,0x29,0x23,0x1c,0x1f,0x0d,0xe5,
		0x05,0x2a,0x39,0x1c,0x1f,0x3a,0xff,0xff,0x00,0x0a,0xff,0xf5,0x01,0xee,0x02,0xaa,
		0x06,0x26,0x01,0x01,0x00,0x00,0x01,0x06,0x03,0x7d,0x00,0x00,0x00,0x0b,0xb6,0x03,
		0x4d,0x14,0x01,0x01,0x28,0x56,0x00,0x2b,0x34,0x00,0x00,0x02,0x00,0x3c,0xff,0xf5,
		0x01,0xc9,0x02,0x99,0x00,0x1d,0x00,0x31,0x00,0x21,0x40,0x12,0x04,0x31,0x31,0x1d,
		0x0b,0x72,0x0e,0x28,0x28,0x13,0x07,0x72,0x07,0x00,0x72,0x06,0x0a,0x72,0x00,0x2b,
		0x2b,0x2b,0x32,0x11,0x33,0x2b,0x32,0x11,0x33,0x30,0x31,0x45,0x22,0x26,0x26,0x27,
		0x07,0x23,0x11,0x33,0x33,0x15,0x06,0x06,0x15,0x15,0x3e,0x03,0x33,0x32,0x1e,0x02,
		0x15,0x14,0x0e,0x02,0x23,0x27,0x32,0x3e,0x02,0x35,0x34,0x2e,0x02,0x23,0x22,0x06,
		0x06,0x15,0x14,0x1e,0x02,0x33,0x01,0x0a,0x1c,0x32,0x29,0x10,0x19,0x2e,0x48,0x0a,
		0x06,0x03,0x0b,0x1e,0x24,0x28,0x13,0x2a,0x45,0x32,0x1b,0x20,0x37,0x44,0x24,0x09,
		0x18,0x2d,0x24,0x15,0x12,0x21,0x2e,0x1b,0x25,0x39,0x20,0x0e,0x1d,0x2f,0x22,0x0b,
		0x11,0x20,0x16,0x3c,0x02,0x99,0x07,0x06,0x0e,0x11,0xea,0x12,0x1e,0x16,0x0b,0x1d,
		0x3b,0x58,0x3b,0x3d,0x5c,0x3d,0x1e,0x40,0x12,0x29,0x44,0x31,0x2d,0x43,0x2c,0x15,
		0x2d,0x51,0x35,0x27,0x40,0x2e,0x19,0x00,0x00,0x03,0x00,0x1b,0xff,0xf5,0x01,0xd9,
		0x02,0x73,0x00,0x0f,0x00,0x1f,0x00,0x2b,0x00,0x19,0x40,0x0c,0x26,0x20,0x20,0x00,
		0x18,0x08,0x05,0x72,0x10,0x00,0x0d,0x72,0x00,0x2b,0x32,0x2b,0x32,0x12,0x39,0x2f,
		0x33,0x30,0x31,0x57,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x15,
		0x14,0x06,0x06,0x27,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x15,
		0x14,0x16,0x16,0x37,0x22,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0xfa,
		0x47,0x64,0x34,0x34,0x64,0x47,0x48,0x63,0x34,0x34,0x63,0x48,0x30,0x43,0x24,0x24,
		0x43,0x30,0x2f,0x44,0x24,0x24,0x44,0x31,0x12,0x1a,0x1a,0x12,0x13,0x1a,0x1a,0x0b,
		0x4a,0x8f,0x66,0x63,0x8f,0x4d,0x4d,0x8f,0x63,0x66,0x8f,0x4a,0x3d,0x3c,0x73,0x53,
		0x4f,0x73,0x40,0x40,0x73,0x4f,0x53,0x73,0x3c,0xda,0x1a,0x12,0x13,0x1a,0x1b,0x12,
		0x12,0x1a,0x00,0x01,0x00,0x38,0xff,0xf5,0x01,0xc9,0x01,0xd2,0x00,0x28,0x00,0x13,
		0x40,0x09,0x20,0x28,0x16,0x0a,0x07,0x72,0x28,0x0b,0x72,0x00,0x2b,0x2b,0x32,0x11,
		0x33,0x30,0x31,0x45,0x22,0x2e,0x02,0x35,0x34,0x3e,0x02,0x33,0x32,0x16,0x17,0x07,
		0x07,0x27,0x34,0x26,0x27,0x26,0x26,0x23,0x22,0x0e,0x02,0x15,0x14,0x1e,0x02,0x33,
		0x32,0x36,0x36,0x37,0x17,0x06,0x06,0x23,0x01,0x1d,0x32,0x54,0x3d,0x22,0x22,0x3d,
		0x54,0x31,0x38,0x59,0x1c,0x2d,0x07,0x05,0x07,0x0c,0x16,0x32,0x21,0x1d,0x34,0x29,
		0x18,0x18,0x2a,0x3b,0x22,0x17,0x2a,0x26,0x10,0x2a,0x22,0x53,0x30,0x0b,0x24,0x40,
		0x57,0x34,0x33,0x57,0x40,0x24,0x2d,0x28,0x2c,0x07,0x05,0x08,0x0e,0x0c,0x14,0x10,
		0x18,0x2d,0x40,0x27,0x27,0x41,0x30,0x1b,0x0d,0x19,0x12,0x31,0x24,0x24,0xff,0xff,
		0x00,0x38,0xff,0xf5,0x01,0xc9,0x02,0xaa,0x06,0x26,0x01,0x05,0x00,0x00,0x01,0x06,
		0x03,0x7d,0x19,0x00,0x00,0x0b,0xb6,0x01,0x29,0x0a,0x01,0x01,0x29,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x38,0xff,0xf5,0x01,0xc9,0x02,0xb0,0x06,0x26,0x01,0x05,
		0x00,0x00,0x01,0x06,0x03,0x80,0x1e,0x00,0x00,0x0b,0xb6,0x01,0x2e,0x0a,0x01,0x01,
		0x30,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x38,0xff,0x3b,0x01,0xc9,0x01,0xd2,
		0x06,0x26,0x01,0x05,0x00,0x00,0x01,0x06,0x03,0x8d,0x0f,0x00,0x00,0x0b,0xb6,0x01,
		0x38,0x28,0x00,0x00,0x0b,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x38,0xff,0x3b,
		0x01,0xc9,0x02,0xaa,0x06,0x26,0x01,0x05,0x00,0x00,0x00,0x26,0x03,0x8d,0x0f,0x00,
		0x01,0x06,0x03,0x7d,0x19,0x00,0x00,0x15,0x40,0x0e,0x02,0x41,0x0a,0x01,0x01,0x29,
		0x56,0x01,0x38,0x28,0x00,0x00,0x0b,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x38,0xff,0xf5,0x01,0xc9,0x02,0xad,0x06,0x26,0x01,0x05,0x00,0x00,0x01,0x06,
		0x03,0x7f,0x24,0x00,0x00,0x0b,0xb6,0x01,0x29,0x0a,0x01,0x01,0x2d,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x38,0xff,0xf5,0x01,0xc9,0x02,0x90,0x06,0x26,0x01,0x05,
		0x00,0x00,0x01,0x06,0x03,0x7b,0x1f,0x00,0x00,0x0b,0xb6,0x01,0x29,0x0a,0x01,0x01,
		0x57,0x56,0x00,0x2b,0x34,0x00,0x00,0x02,0x00,0x2d,0xff,0xf6,0x01,0xc1,0x02,0x99,
		0x00,0x22,0x00,0x35,0x00,0x21,0x40,0x12,0x1e,0x35,0x35,0x22,0x0b,0x72,0x1a,0x0a,
		0x72,0x0f,0x00,0x72,0x0e,0x2c,0x2c,0x0a,0x07,0x72,0x00,0x2b,0x32,0x11,0x33,0x2b,
		0x2b,0x2b,0x32,0x11,0x33,0x30,0x31,0x57,0x22,0x2e,0x02,0x35,0x34,0x3e,0x02,0x33,
		0x32,0x16,0x16,0x17,0x11,0x33,0x33,0x15,0x06,0x06,0x15,0x13,0x14,0x16,0x17,0x23,
		0x2e,0x02,0x35,0x0e,0x02,0x23,0x37,0x32,0x3e,0x02,0x35,0x34,0x26,0x26,0x23,0x22,
		0x0e,0x02,0x15,0x14,0x16,0x16,0x33,0xea,0x23,0x43,0x37,0x20,0x22,0x38,0x44,0x23,
		0x20,0x33,0x27,0x0b,0x42,0x0a,0x06,0x03,0x01,0x03,0x07,0x47,0x05,0x04,0x01,0x0e,
		0x28,0x32,0x1e,0x0b,0x21,0x2e,0x1c,0x0d,0x1a,0x38,0x2c,0x1e,0x2f,0x1f,0x10,0x1e,
		0x3a,0x2a,0x0a,0x1e,0x3c,0x5c,0x3d,0x3f,0x59,0x39,0x1b,0x14,0x23,0x18,0x01,0x13,
		0x07,0x06,0x0e,0x11,0xfd,0xda,0x12,0x23,0x12,0x0c,0x18,0x17,0x0c,0x18,0x25,0x14,
		0x3f,0x1b,0x31,0x41,0x25,0x33,0x51,0x2f,0x17,0x2c,0x3d,0x26,0x39,0x56,0x30,0x00,
		0x00,0x02,0x00,0x28,0xff,0xf4,0x01,0xcc,0x02,0xa0,0x00,0x28,0x00,0x3d,0x00,0x1d,
		0x40,0x0f,0x11,0x1f,0x14,0x1c,0x04,0x19,0x19,0x34,0x0a,0x07,0x72,0x29,0x00,0x0b,
		0x72,0x00,0x2b,0x32,0x2b,0x32,0x32,0x7c,0x2f,0x17,0x39,0x30,0x31,0x45,0x22,0x2e,
		0x02,0x35,0x34,0x3e,0x02,0x33,0x32,0x16,0x16,0x17,0x26,0x26,0x27,0x07,0x27,0x37,
		0x2e,0x02,0x27,0x37,0x16,0x16,0x17,0x37,0x17,0x07,0x1e,0x03,0x15,0x14,0x0e,0x02,
		0x27,0x32,0x3e,0x02,0x35,0x34,0x2e,0x03,0x23,0x22,0x0e,0x02,0x15,0x14,0x1e,0x02,
		0x01,0x00,0x2b,0x4e,0x3d,0x22,0x22,0x3a,0x48,0x26,0x1a,0x2d,0x28,0x10,0x10,0x2a,
		0x1c,0x80,0x12,0x68,0x0f,0x21,0x23,0x13,0x51,0x17,0x2b,0x15,0x6c,0x11,0x55,0x1c,
		0x2a,0x1d,0x0e,0x1b,0x33,0x4c,0x32,0x19,0x2f,0x25,0x16,0x10,0x1a,0x23,0x26,0x13,
		0x18,0x31,0x27,0x18,0x16,0x26,0x32,0x0c,0x23,0x3f,0x56,0x33,0x32,0x58,0x44,0x26,
		0x0b,0x17,0x12,0x26,0x45,0x1e,0x24,0x30,0x1c,0x0d,0x16,0x15,0x08,0x10,0x0d,0x1e,
		0x13,0x1d,0x2c,0x19,0x20,0x47,0x50,0x57,0x2f,0x3c,0x62,0x45,0x26,0x3e,0x15,0x2d,
		0x44,0x30,0x27,0x3a,0x28,0x19,0x0c,0x16,0x2c,0x41,0x2b,0x29,0x43,0x30,0x1a,0x00,
		0x00,0x03,0x00,0x23,0xff,0xf6,0x01,0xde,0x02,0x9c,0x00,0x21,0x00,0x34,0x00,0x47,
		0x00,0x23,0x40,0x11,0x1d,0x34,0x34,0x21,0x0b,0x19,0x0a,0x3c,0x35,0x35,0x0e,0x00,
		0x0d,0x2a,0x2a,0x0a,0x07,0x00,0x3f,0x33,0x11,0x33,0x3f,0x33,0x2f,0xcc,0x3f,0x3f,
		0x33,0x11,0x33,0x30,0x31,0x57,0x22,0x2e,0x02,0x35,0x34,0x3e,0x02,0x33,0x32,0x16,
		0x17,0x11,0x33,0x33,0x15,0x06,0x06,0x15,0x11,0x14,0x16,0x17,0x23,0x2e,0x02,0x35,
		0x0e,0x02,0x23,0x37,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x0e,0x02,0x15,
		0x14,0x1e,0x02,0x33,0x13,0x32,0x16,0x15,0x14,0x06,0x06,0x07,0x27,0x3e,0x02,0x35,
		0x34,0x26,0x26,0x35,0x34,0x36,0xb7,0x1c,0x35,0x2a,0x19,0x19,0x2c,0x36,0x1e,0x25,
		0x35,0x0c,0x3d,0x0a,0x06,0x03,0x02,0x06,0x3f,0x04,0x04,0x02,0x0a,0x1f,0x27,0x18,
		0x0c,0x20,0x28,0x13,0x15,0x29,0x20,0x17,0x24,0x18,0x0c,0x0e,0x19,0x25,0x16,0xee,
		0x12,0x1b,0x14,0x20,0x11,0x1d,0x0a,0x12,0x0c,0x10,0x11,0x18,0x0a,0x1a,0x38,0x5e,
		0x43,0x43,0x5b,0x36,0x18,0x27,0x24,0x01,0x0f,0x07,0x06,0x0e,0x11,0xfd,0xda,0x12,
		0x23,0x12,0x0b,0x15,0x16,0x0c,0x16,0x23,0x13,0x3e,0x2a,0x50,0x39,0x3a,0x4f,0x29,
		0x14,0x28,0x3e,0x2b,0x33,0x49,0x2e,0x16,0x02,0x68,0x1e,0x16,0x14,0x35,0x36,0x16,
		0x15,0x0c,0x19,0x1b,0x0e,0x0a,0x0f,0x14,0x11,0x0e,0x1a,0x00,0xff,0xff,0x00,0x2d,
		0xff,0xf6,0x01,0xf4,0x02,0x99,0x06,0x26,0x01,0x0c,0x00,0x00,0x01,0x07,0x03,0x91,
		0x00,0x6d,0x00,0xea,0x00,0x0b,0xb6,0x02,0x36,0x0a,0x01,0x01,0x33,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x2d,0xff,0x6d,0x01,0xc1,0x02,0x99,0x06,0x26,0x01,0x0c,
		0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x02,0x3c,0x1a,0x01,0x01,
		0xb8,0xff,0xd4,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x2d,0xff,0x65,0x01,0xc1,
		0x02,0x99,0x06,0x26,0x01,0x0c,0x00,0x00,0x01,0x06,0x03,0x90,0x02,0x00,0x00,0x0e,
		0xb4,0x02,0x37,0x1a,0x01,0x01,0xb8,0xff,0x9d,0xb0,0x56,0x00,0x2b,0x34,0x00,0x02,
		0x00,0x31,0xff,0xf6,0x01,0xbd,0x01,0xd4,0x00,0x20,0x00,0x2b,0x00,0x1b,0x40,0x0d,
		0x18,0x00,0x13,0x21,0x21,0x00,0x27,0x0a,0x07,0x72,0x00,0x0b,0x72,0x00,0x2b,0x2b,
		0x32,0x11,0x39,0x2f,0x33,0x11,0x33,0x30,0x31,0x45,0x22,0x2e,0x02,0x35,0x34,0x3e,
		0x02,0x33,0x32,0x1e,0x02,0x15,0x14,0x06,0x07,0x21,0x1e,0x03,0x33,0x32,0x36,0x36,
		0x37,0x17,0x0e,0x02,0x03,0x33,0x34,0x2e,0x02,0x23,0x22,0x0e,0x02,0x01,0x10,0x32,
		0x52,0x3b,0x20,0x21,0x39,0x4d,0x2b,0x27,0x44,0x32,0x1d,0x01,0x01,0xfe,0xbb,0x02,
		0x1a,0x2a,0x37,0x1f,0x18,0x2a,0x25,0x0f,0x28,0x13,0x31,0x3a,0xb9,0xfb,0x11,0x1f,
		0x2b,0x1b,0x18,0x2b,0x24,0x19,0x0a,0x1f,0x3c,0x59,0x39,0x3a,0x5a,0x3d,0x20,0x1a,
		0x35,0x52,0x38,0x08,0x11,0x08,0x2c,0x41,0x29,0x14,0x0b,0x17,0x11,0x27,0x17,0x20,
		0x0f,0x01,0x1c,0x20,0x33,0x25,0x13,0x10,0x23,0x34,0xff,0xff,0x00,0x31,0xff,0xf6,
		0x01,0xbd,0x02,0xaa,0x06,0x26,0x01,0x12,0x00,0x00,0x01,0x06,0x03,0x7d,0xff,0x00,
		0x00,0x0b,0xb6,0x02,0x2c,0x0a,0x01,0x01,0x27,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x31,0xff,0xf6,0x01,0xbd,0x02,0x8e,0x06,0x26,0x01,0x12,0x00,0x00,0x01,0x06,
		0x03,0x81,0x02,0x00,0x00,0x0b,0xb6,0x02,0x30,0x0a,0x01,0x01,0x46,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf6,0x01,0xbd,0x02,0xb0,0x06,0x26,0x01,0x12,
		0x00,0x00,0x01,0x06,0x03,0x80,0x04,0x00,0x00,0x0b,0xb6,0x02,0x31,0x0a,0x01,0x01,
		0x2e,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0x3b,0x01,0xbd,0x02,0x8e,
		0x06,0x26,0x01,0x12,0x00,0x00,0x00,0x26,0x03,0x8d,0x09,0x00,0x01,0x06,0x03,0x81,
		0x02,0x00,0x00,0x15,0x40,0x0e,0x03,0x48,0x0a,0x01,0x01,0x46,0x56,0x02,0x3b,0x00,
		0x00,0x00,0x0a,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf6,
		0x01,0xbd,0x02,0xad,0x06,0x26,0x01,0x12,0x00,0x00,0x01,0x06,0x03,0x7f,0x0a,0x00,
		0x00,0x0b,0xb6,0x02,0x2c,0x0a,0x01,0x01,0x2b,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x31,0xff,0xf6,0x01,0xf0,0x03,0x26,0x06,0x26,0x01,0x12,0x00,0x00,0x01,0x06,
		0x03,0xb9,0x04,0x00,0x00,0x15,0x40,0x0e,0x03,0x33,0x2c,0x01,0x01,0x78,0x56,0x02,
		0x2c,0x0a,0x01,0x01,0x2b,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,
		0xff,0x6d,0x01,0xbd,0x02,0xad,0x06,0x26,0x01,0x12,0x00,0x00,0x00,0x26,0x03,0x8a,
		0x29,0x00,0x01,0x06,0x03,0x7f,0x0a,0x00,0x00,0x18,0x40,0x0c,0x03,0x38,0x0a,0x01,
		0x01,0x2b,0x56,0x02,0x32,0x00,0x01,0x01,0xb8,0xff,0xde,0xb0,0x56,0x00,0x2b,0x34,
		0x2b,0x34,0xff,0xff,0x00,0x31,0xff,0xf6,0x01,0xbd,0x03,0x3b,0x06,0x26,0x01,0x12,
		0x00,0x00,0x01,0x06,0x03,0xba,0x04,0x00,0x00,0x15,0x40,0x0e,0x03,0x33,0x2c,0x01,
		0x01,0x8d,0x56,0x02,0x2c,0x0a,0x01,0x01,0x2b,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x31,0xff,0xf6,0x01,0xd2,0x03,0x24,0x06,0x26,0x01,0x12,0x00,0x00,
		0x01,0x06,0x03,0xbb,0x09,0x00,0x00,0x15,0x40,0x0e,0x03,0x3a,0x2c,0x01,0x01,0x70,
		0x56,0x02,0x2c,0x0a,0x01,0x01,0x2b,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x31,0xff,0xf6,0x01,0xbd,0x03,0x38,0x06,0x26,0x01,0x12,0x00,0x00,0x01,0x06,
		0x03,0xbc,0x02,0x00,0x00,0x15,0x40,0x0e,0x03,0x37,0x2c,0x01,0x01,0xcc,0x56,0x02,
		0x2c,0x0a,0x01,0x01,0x2b,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,
		0xff,0xf6,0x01,0xbd,0x02,0xaa,0x06,0x26,0x01,0x12,0x00,0x00,0x01,0x06,0x03,0x86,
		0xf5,0x00,0x00,0x0d,0xb7,0x03,0x02,0x2c,0x0a,0x01,0x01,0x27,0x56,0x00,0x2b,0x34,
		0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf6,0x01,0xbd,0x02,0x99,0x06,0x26,0x01,0x12,
		0x00,0x00,0x01,0x06,0x03,0x7a,0x09,0x00,0x00,0x0d,0xb7,0x03,0x02,0x2c,0x0a,0x01,
		0x01,0x60,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf6,0x01,0xbd,
		0x02,0x90,0x06,0x26,0x01,0x12,0x00,0x00,0x01,0x06,0x03,0x7b,0x05,0x00,0x00,0x0b,
		0xb6,0x02,0x2c,0x0a,0x01,0x01,0x55,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,
		0xff,0x6d,0x01,0xbd,0x01,0xd4,0x06,0x26,0x01,0x12,0x00,0x00,0x01,0x06,0x03,0x8a,
		0x29,0x00,0x00,0x0e,0xb4,0x02,0x32,0x00,0x01,0x01,0xb8,0xff,0xde,0xb0,0x56,0x00,
		0x2b,0x34,0xff,0xff,0x00,0x31,0xff,0xf6,0x01,0xbd,0x02,0xaa,0x06,0x26,0x01,0x12,
		0x00,0x00,0x01,0x06,0x03,0x7c,0xff,0x00,0x00,0x0b,0xb6,0x02,0x2c,0x0a,0x01,0x01,
		0x27,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf6,0x01,0xbd,0x02,0xc0,
		0x06,0x26,0x01,0x12,0x00,0x00,0x01,0x06,0x03,0x85,0x19,0x00,0x00,0x0b,0xb6,0x02,
		0x33,0x0a,0x01,0x01,0x37,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf6,
		0x01,0xbd,0x02,0x84,0x06,0x26,0x01,0x12,0x00,0x00,0x01,0x06,0x03,0x87,0x02,0x00,
		0x00,0x0b,0xb6,0x02,0x2c,0x0a,0x01,0x01,0x3c,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x31,0xff,0xf6,0x01,0xbd,0x02,0x6d,0x06,0x26,0x01,0x12,0x00,0x00,0x01,0x06,
		0x03,0x84,0x0a,0x00,0x00,0x0b,0xb6,0x02,0x2c,0x0a,0x01,0x01,0x61,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf6,0x01,0xbd,0x03,0x44,0x06,0x26,0x01,0x12,
		0x00,0x00,0x00,0x26,0x03,0x84,0x0a,0x00,0x01,0x07,0x03,0x7d,0xff,0xff,0x00,0x9a,
		0x00,0x15,0x40,0x0e,0x03,0x30,0x2c,0x01,0x01,0x60,0x56,0x02,0x2c,0x0a,0x01,0x01,
		0x61,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x31,0xff,0xf6,0x01,0xbd,
		0x03,0x44,0x06,0x26,0x01,0x12,0x00,0x00,0x00,0x26,0x03,0x84,0x0a,0x00,0x01,0x07,
		0x03,0x7c,0xff,0xff,0x00,0x9a,0x00,0x15,0x40,0x0e,0x03,0x30,0x2c,0x01,0x01,0x60,
		0x56,0x02,0x2c,0x0a,0x01,0x01,0x61,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x31,0xff,0x2c,0x01,0xbd,0x01,0xd4,0x06,0x26,0x01,0x12,0x00,0x00,0x01,0x06,
		0x03,0x9f,0xeb,0x0f,0x00,0x0b,0xb6,0x02,0x35,0x00,0x00,0x00,0x2a,0x56,0x00,0x2b,
		0x34,0x00,0x00,0x02,0x00,0x2d,0xff,0xf8,0x01,0xc5,0x01,0xd3,0x00,0x16,0x00,0x37,
		0x00,0x1d,0x40,0x0e,0x08,0x27,0x27,0x2f,0x2f,0x00,0x1f,0x0f,0x06,0x72,0x17,0x00,
		0x0b,0x72,0x00,0x2b,0x32,0x2b,0x32,0x11,0x39,0x2f,0x33,0x12,0x39,0x30,0x31,0x57,
		0x2e,0x02,0x35,0x34,0x36,0x36,0x37,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,
		0x16,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x06,
		0x06,0x15,0x14,0x16,0x16,0x33,0x32,0x32,0x37,0x15,0x2e,0x02,0x23,0x22,0x0e,0x02,
		0x15,0x14,0x16,0x16,0xec,0x38,0x57,0x30,0x16,0x27,0x1b,0x1d,0x1f,0x2d,0x4e,0x30,
		0x3f,0x5e,0x34,0x36,0x62,0x41,0x2b,0x3f,0x23,0x21,0x3d,0x2a,0x1f,0x28,0x14,0x11,
		0x28,0x22,0x06,0x0c,0x06,0x06,0x0c,0x0b,0x07,0x17,0x27,0x1c,0x10,0x1e,0x33,0x08,
		0x01,0x28,0x45,0x29,0x1c,0x2d,0x1e,0x06,0x11,0x2f,0x1c,0x24,0x37,0x20,0x3d,0x6b,
		0x46,0x45,0x6c,0x3c,0x3c,0x2a,0x4f,0x39,0x34,0x50,0x2d,0x12,0x1e,0x14,0x12,0x1c,
		0x10,0x01,0x43,0x01,0x01,0x01,0x09,0x14,0x1c,0x14,0x19,0x27,0x15,0x00,0xff,0xff,
		0x00,0x31,0xff,0xf6,0x01,0xbd,0x02,0xab,0x06,0x26,0x01,0x12,0x00,0x00,0x01,0x06,
		0x03,0x83,0x00,0x00,0x00,0x0b,0xb6,0x02,0x30,0x0a,0x01,0x01,0x6a,0x56,0x00,0x2b,
		0x34,0x00,0x00,0x02,0x00,0x37,0xff,0xf5,0x01,0xc3,0x01,0xd3,0x00,0x20,0x00,0x2b,
		0x00,0x19,0x40,0x0c,0x12,0x22,0x22,0x00,0x27,0x0a,0x0b,0x72,0x18,0x00,0x07,0x72,
		0x00,0x2b,0x32,0x2b,0x32,0x12,0x39,0x2f,0x33,0x30,0x31,0x53,0x32,0x1e,0x02,0x15,
		0x14,0x0e,0x02,0x23,0x22,0x2e,0x02,0x35,0x34,0x36,0x37,0x21,0x2e,0x03,0x23,0x22,
		0x06,0x06,0x07,0x27,0x3e,0x02,0x13,0x23,0x14,0x1e,0x02,0x33,0x32,0x3e,0x02,0xe4,
		0x32,0x52,0x3b,0x20,0x21,0x39,0x4c,0x2c,0x27,0x44,0x32,0x1d,0x01,0x01,0x01,0x45,
		0x02,0x1a,0x2a,0x37,0x1f,0x17,0x2b,0x24,0x10,0x28,0x14,0x30,0x3a,0xb9,0xfb,0x11,
		0x1f,0x2b,0x1b,0x18,0x2b,0x24,0x19,0x01,0xd3,0x1f,0x3c,0x59,0x39,0x3a,0x5a,0x3d,
		0x20,0x1a,0x35,0x52,0x38,0x08,0x11,0x08,0x2c,0x41,0x29,0x14,0x0b,0x17,0x11,0x27,
		0x18,0x1f,0x0f,0xfe,0xe4,0x20,0x33,0x25,0x13,0x10,0x23,0x34,0xff,0xff,0x00,0x5b,
		0xff,0x4f,0x01,0xc1,0x01,0xc9,0x04,0x07,0x00,0x41,0x00,0x14,0xff,0x5a,0x00,0x01,
		0x00,0x3f,0x00,0x00,0x01,0xd9,0x02,0x9f,0x00,0x1e,0x00,0x1b,0x40,0x0e,0x1e,0x0a,
		0x72,0x01,0x1c,0x1c,0x02,0x19,0x06,0x72,0x14,0x08,0x01,0x72,0x00,0x2b,0x32,0x2b,
		0x32,0x32,0x11,0x33,0x2b,0x30,0x31,0x53,0x23,0x35,0x33,0x35,0x34,0x36,0x36,0x33,
		0x32,0x16,0x17,0x07,0x07,0x27,0x26,0x26,0x27,0x26,0x26,0x23,0x22,0x06,0x06,0x15,
		0x15,0x33,0x15,0x23,0x11,0x23,0xa2,0x63,0x63,0x2b,0x4c,0x31,0x2b,0x4b,0x19,0x26,
		0x06,0x06,0x01,0x06,0x0b,0x10,0x20,0x19,0x1d,0x2e,0x1a,0x96,0x96,0x45,0x01,0x90,
		0x39,0x26,0x3d,0x4e,0x25,0x1f,0x20,0x35,0x08,0x04,0x08,0x10,0x0c,0x0e,0x0c,0x17,
		0x33,0x2c,0x26,0x39,0xfe,0x70,0x00,0x04,0x00,0x26,0xff,0x54,0x01,0xdb,0x01,0xda,
		0x00,0x36,0x00,0x46,0x00,0x56,0x00,0x5e,0x00,0x3d,0x40,0x22,0x57,0x5c,0x5c,0x5b,
		0x25,0x24,0x47,0x47,0x37,0x4f,0x3f,0x29,0x21,0x2d,0x09,0x0a,0x1b,0x17,0x07,0x37,
		0x37,0x00,0x58,0x5b,0x3f,0x07,0x72,0x5b,0x07,0x72,0x13,0x00,0x0f,0x72,0x00,0x2b,
		0x32,0x2b,0x2b,0x11,0x33,0x12,0x39,0x2f,0x17,0x39,0x11,0x33,0x11,0x33,0x12,0x39,
		0x39,0x11,0x33,0x11,0x33,0x30,0x31,0x57,0x22,0x2e,0x02,0x35,0x34,0x36,0x36,0x37,
		0x17,0x0e,0x02,0x15,0x14,0x1e,0x02,0x33,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,
		0x22,0x2e,0x03,0x35,0x34,0x36,0x37,0x17,0x0e,0x02,0x15,0x14,0x16,0x16,0x33,0x32,
		0x1e,0x02,0x15,0x14,0x0e,0x02,0x03,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,
		0x16,0x16,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,
		0x06,0x06,0x15,0x14,0x16,0x16,0x37,0x27,0x36,0x36,0x17,0x17,0x26,0x06,0xf7,0x30,
		0x4d,0x37,0x1d,0x18,0x27,0x17,0x1e,0x12,0x16,0x0a,0x14,0x25,0x35,0x22,0x2e,0x39,
		0x1c,0x10,0x32,0x33,0x23,0x3a,0x2e,0x1f,0x10,0x1d,0x19,0x22,0x0a,0x0c,0x05,0x19,
		0x3e,0x35,0x35,0x42,0x23,0x0e,0x15,0x2e,0x4c,0x4c,0x31,0x48,0x27,0x27,0x48,0x31,
		0x32,0x47,0x27,0x27,0x47,0x32,0x1d,0x2d,0x1a,0x1a,0x2d,0x1d,0x1d,0x2d,0x1a,0x1a,
		0x2d,0xa2,0x1c,0x1d,0x3f,0x2b,0x09,0x21,0x3a,0xac,0x0f,0x1d,0x2c,0x1e,0x1c,0x2c,
		0x1d,0x07,0x12,0x0b,0x16,0x1d,0x14,0x11,0x1b,0x12,0x0a,0x13,0x21,0x15,0x16,0x1c,
		0x0e,0x06,0x0e,0x15,0x1e,0x14,0x1a,0x30,0x16,0x1b,0x0b,0x11,0x0f,0x09,0x10,0x14,
		0x09,0x11,0x20,0x2a,0x19,0x1b,0x31,0x27,0x17,0x01,0x47,0x2b,0x49,0x2c,0x2c,0x48,
		0x2b,0x2b,0x48,0x2c,0x2c,0x49,0x2b,0x3c,0x1b,0x2e,0x1b,0x1c,0x2d,0x1b,0x1b,0x2d,
		0x1c,0x1b,0x2e,0x1b,0xa8,0x21,0x1d,0x1b,0x03,0x3b,0x03,0x0a,0xff,0xff,0x00,0x26,
		0xff,0x54,0x01,0xdb,0x02,0x86,0x06,0x26,0x01,0x2d,0x00,0x00,0x01,0x06,0x03,0x9a,
		0x09,0x00,0x00,0x0b,0xb6,0x04,0x5f,0x3f,0x01,0x01,0x32,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x26,0xff,0x54,0x01,0xdb,0x02,0xb0,0x06,0x26,0x01,0x2d,0x00,0x00,
		0x01,0x06,0x03,0x80,0xe2,0x00,0x00,0x0b,0xb6,0x04,0x64,0x3f,0x01,0x01,0x28,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x26,0xff,0x54,0x01,0xdb,0x02,0xad,0x06,0x26,
		0x01,0x2d,0x00,0x00,0x01,0x06,0x03,0x7f,0xe8,0x00,0x00,0x0b,0xb6,0x04,0x5f,0x3f,
		0x01,0x01,0x25,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x26,0xff,0x54,0x01,0xdb,
		0x03,0x2b,0x06,0x26,0x01,0x2d,0x00,0x00,0x01,0x06,0x03,0x88,0xf6,0xf6,0x00,0x0b,
		0xb6,0x04,0x6b,0x3f,0x01,0x01,0x42,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x26,
		0xff,0x54,0x01,0xdb,0x02,0x90,0x06,0x26,0x01,0x2d,0x00,0x00,0x01,0x06,0x03,0x7b,
		0xe3,0x00,0x00,0x0b,0xb6,0x04,0x5f,0x3f,0x01,0x01,0x4f,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x26,0xff,0x54,0x01,0xdb,0x02,0x6d,0x06,0x26,0x01,0x2d,0x00,0x00,
		0x01,0x06,0x03,0x84,0xe8,0x00,0x00,0x0b,0xb6,0x04,0x5f,0x3f,0x01,0x01,0x5b,0x56,
		0x00,0x2b,0x34,0x00,0x00,0x01,0x00,0x49,0x00,0x00,0x01,0xb0,0x02,0x99,0x00,0x1e,
		0x00,0x19,0x40,0x0d,0x11,0x1e,0x0a,0x72,0x07,0x16,0x16,0x0b,0x07,0x72,0x00,0x00,
		0x72,0x00,0x2b,0x2b,0x32,0x11,0x33,0x2b,0x32,0x30,0x31,0x53,0x33,0x33,0x15,0x06,
		0x06,0x15,0x15,0x3e,0x02,0x33,0x32,0x16,0x16,0x15,0x11,0x23,0x11,0x34,0x26,0x26,
		0x23,0x22,0x0e,0x03,0x15,0x11,0x23,0x49,0x45,0x0a,0x06,0x03,0x12,0x31,0x37,0x1c,
		0x29,0x3f,0x23,0x46,0x16,0x26,0x18,0x12,0x26,0x23,0x1c,0x10,0x46,0x02,0x99,0x07,
		0x06,0x0e,0x11,0xf5,0x1c,0x29,0x17,0x26,0x54,0x45,0xfe,0xeb,0x01,0x13,0x30,0x39,
		0x19,0x0c,0x18,0x23,0x2c,0x1b,0xfe,0xf9,0xff,0xff,0x00,0x00,0x00,0x00,0x01,0xb0,
		0x02,0x99,0x06,0x26,0x01,0x34,0x00,0x00,0x01,0x07,0x03,0x91,0xff,0x87,0x00,0xea,
		0x00,0x0b,0xb6,0x01,0x1f,0x0b,0x01,0x01,0x34,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x49,0xff,0x51,0x01,0xb0,0x02,0x99,0x06,0x26,0x01,0x34,0x00,0x00,0x01,0x06,
		0x03,0x8f,0x02,0x00,0x00,0x0e,0xb4,0x01,0x1f,0x11,0x01,0x01,0xb8,0xff,0xc5,0xb0,
		0x56,0x00,0x2b,0x34,0xff,0xff,0xff,0xd8,0x00,0x00,0x01,0xb0,0x03,0x41,0x06,0x26,
		0x01,0x34,0x00,0x00,0x01,0x07,0x03,0xa5,0xff,0x7c,0x00,0x2a,0x00,0x0b,0xb6,0x01,
		0x1f,0x00,0x01,0x01,0x20,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x49,0xff,0x6d,
		0x01,0xb0,0x02,0x99,0x06,0x26,0x01,0x34,0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,
		0x00,0x0e,0xb4,0x01,0x25,0x11,0x01,0x01,0xb8,0xff,0xd4,0xb0,0x56,0x00,0x2b,0x34,
		0xff,0xff,0x00,0x64,0x00,0x00,0x01,0x8c,0x02,0x90,0x06,0x26,0x01,0x3a,0x00,0x00,
		0x01,0x06,0x03,0x7b,0xfb,0x00,0x00,0x0b,0xb6,0x01,0x0a,0x05,0x00,0x01,0x60,0x56,
		0x00,0x2b,0x34,0x00,0x00,0x01,0x00,0x64,0x00,0x00,0x01,0x8c,0x01,0xc9,0x00,0x09,
		0x00,0x17,0x40,0x0b,0x07,0x01,0x01,0x00,0x04,0x05,0x06,0x72,0x00,0x0a,0x72,0x00,
		0x2b,0x2b,0x32,0x11,0x33,0x11,0x33,0x30,0x31,0x73,0x35,0x33,0x11,0x23,0x35,0x33,
		0x11,0x33,0x15,0x64,0x75,0x6f,0xb7,0x6b,0x3a,0x01,0x55,0x3a,0xfe,0x71,0x3a,0x00,
		0xff,0xff,0x00,0x64,0x00,0x00,0x01,0x8c,0x02,0xb9,0x06,0x26,0x01,0x3a,0x00,0x00,
		0x01,0x06,0x03,0x96,0xf8,0x00,0x00,0x0b,0xb6,0x01,0x0a,0x05,0x01,0x01,0x41,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x64,0x00,0x00,0x01,0x8c,0x02,0x8e,0x06,0x26,
		0x01,0x3a,0x00,0x00,0x01,0x06,0x03,0x81,0xf8,0x00,0x00,0x0b,0xb6,0x01,0x0e,0x05,
		0x01,0x01,0x51,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x63,0x00,0x00,0x01,0x91,
		0x02,0xad,0x06,0x26,0x01,0x3a,0x00,0x00,0x01,0x06,0x03,0x7f,0x00,0x00,0x00,0x0b,
		0xb6,0x01,0x0a,0x05,0x01,0x01,0x36,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x4a,
		0x00,0x00,0x01,0x8c,0x02,0xaa,0x06,0x26,0x01,0x3a,0x00,0x00,0x01,0x06,0x03,0x86,
		0xeb,0x00,0x00,0x0d,0xb7,0x02,0x01,0x0a,0x05,0x01,0x01,0x32,0x56,0x00,0x2b,0x34,
		0x34,0x00,0xff,0xff,0x00,0x64,0x00,0x00,0x01,0x8c,0x02,0x99,0x06,0x26,0x01,0x3a,
		0x00,0x00,0x01,0x06,0x03,0x93,0xf8,0x00,0x00,0x0d,0xb7,0x02,0x01,0x0a,0x05,0x01,
		0x01,0x6b,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x64,0x00,0x00,0x01,0x8c,
		0x03,0x3e,0x06,0x26,0x01,0x3a,0x00,0x00,0x00,0x26,0x03,0x7a,0xff,0x00,0x01,0x07,
		0x03,0x7d,0xff,0xf6,0x00,0x94,0x00,0x1a,0xb4,0x03,0x22,0x10,0x01,0x00,0xb8,0xff,
		0xf6,0x40,0x09,0x56,0x02,0x01,0x0a,0x05,0x01,0x01,0x6b,0x56,0x00,0x2b,0x34,0x34,
		0x2b,0x34,0xff,0xff,0x00,0x64,0x00,0x00,0x01,0x8c,0x02,0x90,0x06,0x26,0x01,0x3a,
		0x00,0x00,0x01,0x06,0x03,0x7b,0xfb,0x00,0x00,0x0b,0xb6,0x01,0x0a,0x05,0x01,0x01,
		0x60,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x64,0xff,0x6d,0x01,0x8c,0x02,0x90,
		0x06,0x26,0x01,0x39,0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x02,
		0x1c,0x00,0x01,0x01,0xb8,0xff,0xd4,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x64,
		0x00,0x00,0x01,0x8c,0x02,0xaa,0x06,0x26,0x01,0x3a,0x00,0x00,0x01,0x06,0x03,0x7c,
		0xf5,0x00,0x00,0x0b,0xb6,0x01,0x0a,0x05,0x01,0x01,0x32,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x64,0x00,0x00,0x01,0x8c,0x02,0xc0,0x06,0x26,0x01,0x3a,0x00,0x00,
		0x01,0x06,0x03,0x85,0x0f,0x00,0x00,0x0b,0xb6,0x01,0x11,0x05,0x01,0x01,0x42,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x64,0x00,0x00,0x01,0x8c,0x02,0x84,0x06,0x26,
		0x01,0x3a,0x00,0x00,0x01,0x06,0x03,0x87,0xf8,0x00,0x00,0x0b,0xb6,0x01,0x0a,0x05,
		0x01,0x01,0x47,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x64,0x00,0x00,0x01,0x8c,
		0x02,0x6d,0x06,0x26,0x01,0x3a,0x00,0x00,0x01,0x06,0x03,0x84,0x00,0x00,0x00,0x0b,
		0xb6,0x01,0x0a,0x05,0x01,0x01,0x6c,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x64,
		0xff,0x1d,0x01,0x8c,0x02,0x90,0x06,0x26,0x01,0x3a,0x00,0x00,0x00,0x26,0x03,0x7b,
		0xfb,0x00,0x01,0x06,0x03,0x8e,0x61,0x00,0x00,0x15,0x40,0x0e,0x02,0x20,0x00,0x00,
		0x00,0x00,0x56,0x01,0x0a,0x05,0x01,0x01,0x60,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x64,0x00,0x00,0x01,0x8c,0x02,0xab,0x06,0x26,0x01,0x3a,0x00,0x00,
		0x01,0x06,0x03,0xb4,0xf6,0x00,0x00,0x0b,0xb6,0x01,0x0e,0x05,0x01,0x01,0x75,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x30,0xff,0x52,0x01,0x7b,0x02,0x90,0x06,0x26,
		0x01,0x4a,0x00,0x00,0x01,0x06,0x03,0x7b,0x49,0x00,0x00,0x0b,0xb6,0x01,0x1a,0x13,
		0x01,0x01,0x60,0x56,0x00,0x2b,0x34,0x00,0x00,0x01,0x00,0x30,0xff,0x52,0x01,0x71,
		0x01,0xc9,0x00,0x19,0x00,0x13,0x40,0x09,0x0c,0x19,0x12,0x13,0x06,0x72,0x19,0x0f,
		0x72,0x00,0x2b,0x2b,0x32,0x11,0x33,0x30,0x31,0x57,0x22,0x26,0x27,0x37,0x37,0x17,
		0x16,0x16,0x17,0x16,0x16,0x33,0x32,0x36,0x36,0x35,0x11,0x23,0x35,0x33,0x11,0x14,
		0x06,0x06,0x23,0xc2,0x2b,0x4d,0x1a,0x28,0x06,0x06,0x02,0x06,0x0b,0x0e,0x25,0x17,
		0x1e,0x2f,0x1a,0xaa,0xf3,0x30,0x4f,0x30,0xae,0x20,0x20,0x36,0x08,0x04,0x08,0x0f,
		0x0c,0x0b,0x0e,0x1b,0x39,0x2e,0x01,0x7c,0x3b,0xfe,0x4d,0x45,0x57,0x28,0xff,0xff,
		0x00,0x30,0xff,0x52,0x01,0xdf,0x02,0xad,0x06,0x26,0x01,0x4a,0x00,0x00,0x01,0x06,
		0x03,0x7f,0x4e,0x00,0x00,0x0b,0xb6,0x01,0x1a,0x13,0x01,0x01,0x36,0x56,0x00,0x2b,
		0x34,0x00,0x00,0x01,0x00,0x42,0xff,0xfc,0x01,0xdf,0x02,0x99,0x00,0x15,0x00,0x1c,
		0x40,0x10,0x01,0x00,0x0b,0x13,0x04,0x03,0x12,0x06,0x72,0x04,0x00,0x72,0x14,0x03,
		0x0a,0x72,0x00,0x2b,0x32,0x2b,0x2b,0x12,0x17,0x39,0x30,0x31,0x77,0x07,0x15,0x23,
		0x11,0x33,0x33,0x15,0x06,0x06,0x15,0x11,0x37,0x1e,0x03,0x33,0x33,0x07,0x13,0x07,
		0xc7,0x3c,0x49,0x48,0x0a,0x06,0x03,0xe5,0x06,0x0c,0x0d,0x0f,0x07,0x1a,0xc0,0xe0,
		0x5d,0xe5,0x38,0xad,0x02,0x99,0x07,0x06,0x0e,0x11,0xfe,0x8a,0xd4,0x01,0x02,0x01,
		0x01,0xb5,0xfe,0xef,0x04,0x00,0xff,0xff,0x00,0x42,0xfe,0xed,0x01,0xdf,0x02,0x99,
		0x06,0x26,0x01,0x4c,0x00,0x00,0x01,0x06,0x03,0x8c,0x0e,0x00,0x00,0x0e,0xb4,0x01,
		0x22,0x03,0x01,0x01,0xb8,0xff,0xe0,0xb0,0x56,0x00,0x2b,0x34,0x00,0x01,0x00,0x42,
		0xff,0xfc,0x01,0xdf,0x01,0xcb,0x00,0x15,0x00,0x22,0x40,0x12,0x0c,0x12,0x12,0x01,
		0x00,0x0b,0x13,0x04,0x03,0x04,0x06,0x72,0x15,0x14,0x14,0x03,0x0a,0x72,0x00,0x2b,
		0x32,0x2f,0x33,0x2b,0x12,0x17,0x39,0x33,0x2f,0x33,0x30,0x31,0x77,0x07,0x15,0x23,
		0x11,0x33,0x33,0x15,0x06,0x06,0x15,0x15,0x37,0x1e,0x03,0x33,0x33,0x07,0x13,0x07,
		0xc7,0x3c,0x49,0x48,0x0a,0x06,0x03,0xe5,0x06,0x0c,0x0d,0x0f,0x07,0x1a,0xc0,0xe0,
		0x5d,0xe5,0x38,0xad,0x01,0xc9,0x07,0x06,0x0e,0x11,0xa6,0xd4,0x01,0x02,0x01,0x01,
		0xb5,0xfe,0xef,0x04,0x00,0x01,0x00,0x4f,0x00,0x00,0x01,0xa5,0x02,0x99,0x00,0x09,
		0x00,0x15,0x40,0x0a,0x04,0x05,0x00,0x72,0x07,0x01,0x01,0x00,0x0a,0x72,0x00,0x2b,
		0x32,0x11,0x33,0x2b,0x32,0x30,0x31,0x73,0x35,0x33,0x11,0x23,0x35,0x33,0x11,0x33,
		0x15,0x4f,0x87,0x81,0xca,0x86,0x3a,0x02,0x25,0x3a,0xfd,0xa1,0x3a,0x00,0xff,0xff,
		0x00,0x4f,0x00,0x00,0x01,0xa5,0x03,0x41,0x06,0x26,0x01,0x4f,0x00,0x00,0x01,0x06,
		0x03,0xa3,0xed,0x2a,0x00,0x0b,0xb6,0x01,0x0a,0x05,0x01,0x01,0x25,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x4f,0x00,0x00,0x01,0xc9,0x02,0x9f,0x06,0x26,0x01,0x4f,
		0x00,0x00,0x01,0x07,0x03,0x6f,0x00,0xa4,0x00,0x00,0x00,0x0b,0xb6,0x01,0x17,0x05,
		0x00,0x00,0x06,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x4f,0xfe,0xed,0x01,0xa5,
		0x02,0x99,0x06,0x26,0x01,0x4f,0x00,0x00,0x01,0x06,0x03,0x8c,0x0e,0x00,0x00,0x0e,
		0xb4,0x01,0x16,0x00,0x01,0x01,0xb8,0xff,0xe0,0xb0,0x56,0x00,0x2b,0x34,0x00,0x02,
		0x00,0x45,0x00,0x00,0x01,0xc0,0x02,0x99,0x00,0x09,0x00,0x15,0x00,0x1d,0x40,0x0e,
		0x10,0x0a,0x0a,0x00,0x04,0x05,0x00,0x72,0x07,0x01,0x01,0x00,0x0a,0x72,0x00,0x2b,
		0x32,0x11,0x33,0x2b,0x32,0x12,0x39,0x2f,0x33,0x30,0x31,0x73,0x35,0x33,0x11,0x23,
		0x35,0x33,0x11,0x33,0x15,0x03,0x22,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,
		0x06,0x45,0x73,0x6d,0xb6,0x9a,0x17,0x19,0x22,0x24,0x17,0x17,0x25,0x23,0x3a,0x02,
		0x25,0x3a,0xfd,0xa1,0x3a,0x01,0x12,0x21,0x18,0x18,0x21,0x21,0x18,0x17,0x22,0x00,
		0xff,0xff,0x00,0x4f,0xff,0x6d,0x01,0xa5,0x02,0x99,0x06,0x26,0x01,0x4f,0x00,0x00,
		0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x01,0x10,0x00,0x01,0x01,0xb8,0xff,
		0xd4,0xb0,0x56,0x00,0x2b,0x34,0x00,0x03,0x00,0x13,0xff,0x52,0x01,0xb2,0x02,0x99,
		0x00,0x19,0x00,0x23,0x00,0x2f,0x00,0x25,0x40,0x14,0x1e,0x1f,0x00,0x72,0x21,0x1b,
		0x1b,0x1a,0x0a,0x72,0x2a,0x24,0x12,0x13,0x06,0x72,0x0c,0x00,0x0f,0x72,0x00,0x2b,
		0x32,0x2b,0x32,0xce,0x32,0x2b,0x32,0x11,0x33,0x2b,0x32,0x30,0x31,0x57,0x22,0x26,
		0x27,0x37,0x1e,0x03,0x17,0x16,0x16,0x33,0x32,0x36,0x36,0x35,0x11,0x23,0x35,0x33,
		0x11,0x14,0x0e,0x02,0x25,0x35,0x33,0x11,0x23,0x35,0x33,0x11,0x33,0x15,0x13,0x22,
		0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0xf8,0x2c,0x46,0x1a,0x2f,0x05,
		0x04,0x06,0x11,0x13,0x0b,0x17,0x0d,0x1e,0x2f,0x1a,0x8c,0xd5,0x1c,0x31,0x42,0xfe,
		0xf5,0x41,0x3b,0x84,0x7c,0x65,0x15,0x1e,0x1d,0x16,0x15,0x1f,0x1f,0xae,0x20,0x20,
		0x3e,0x05,0x0c,0x0d,0x0e,0x09,0x05,0x06,0x1b,0x39,0x2e,0x01,0x7c,0x3b,0xfe,0x4d,
		0x34,0x49,0x2e,0x17,0xac,0x3a,0x02,0x25,0x3a,0xfd,0xa1,0x3a,0x02,0x29,0x1e,0x15,
		0x16,0x1e,0x1f,0x15,0x15,0x1e,0xff,0xff,0x00,0x4f,0xff,0x65,0x01,0xa5,0x02,0x99,
		0x06,0x26,0x01,0x4f,0x00,0x00,0x01,0x06,0x03,0x90,0x02,0x00,0x00,0x0e,0xb4,0x01,
		0x0b,0x00,0x01,0x01,0xb8,0xff,0x9d,0xb0,0x56,0x00,0x2b,0x34,0x00,0x01,0x00,0x4f,
		0x00,0x00,0x01,0xa5,0x02,0x99,0x00,0x11,0x00,0x1e,0x40,0x10,0x03,0x0e,0x06,0x0b,
		0x04,0x00,0x08,0x09,0x00,0x72,0x0f,0x01,0x01,0x00,0x0a,0x72,0x00,0x2b,0x32,0x11,
		0x33,0x2b,0x32,0x12,0x17,0x39,0x30,0x31,0x73,0x35,0x33,0x35,0x07,0x35,0x37,0x11,
		0x23,0x35,0x33,0x11,0x37,0x15,0x07,0x15,0x33,0x15,0x4f,0x87,0x4f,0x4f,0x81,0xca,
		0x5b,0x5b,0x86,0x3a,0xdd,0x1b,0x42,0x1b,0x01,0x06,0x3a,0xfe,0xd9,0x21,0x45,0x1f,
		0xf5,0x3a,0x00,0x01,0x00,0x26,0x00,0x00,0x01,0xd6,0x01,0xd4,0x00,0x2b,0x00,0x25,
		0x40,0x13,0x03,0x25,0x0b,0x1b,0x1b,0x0f,0x0f,0x25,0x07,0x07,0x72,0x01,0x06,0x72,
		0x21,0x16,0x00,0x0a,0x72,0x00,0x2b,0x32,0x32,0x2b,0x2b,0x32,0x32,0x11,0x33,0x11,
		0x33,0x11,0x33,0x30,0x31,0x73,0x11,0x33,0x15,0x3e,0x02,0x33,0x32,0x16,0x16,0x17,
		0x3e,0x02,0x33,0x32,0x1e,0x02,0x07,0x11,0x23,0x11,0x34,0x26,0x26,0x23,0x22,0x06,
		0x06,0x15,0x11,0x23,0x11,0x34,0x26,0x23,0x22,0x0e,0x02,0x15,0x11,0x26,0x42,0x0b,
		0x1d,0x23,0x12,0x14,0x22,0x17,0x04,0x09,0x1f,0x29,0x16,0x17,0x22,0x16,0x0a,0x01,
		0x42,0x0b,0x14,0x0c,0x13,0x21,0x15,0x43,0x15,0x1d,0x0b,0x17,0x14,0x0c,0x01,0xc9,
		0x2d,0x11,0x19,0x0e,0x11,0x1e,0x14,0x14,0x1e,0x11,0x12,0x1f,0x2b,0x19,0xfe,0xa1,
		0x01,0x44,0x2a,0x26,0x0b,0x23,0x34,0x1a,0xfe,0xd2,0x01,0x3e,0x39,0x26,0x0f,0x1b,
		0x28,0x1a,0xfe,0xcf,0xff,0xff,0x00,0x26,0xff,0x6d,0x01,0xd6,0x01,0xd4,0x06,0x26,
		0x01,0x58,0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x01,0x32,0x21,
		0x01,0x01,0xb8,0xff,0xd4,0xb0,0x56,0x00,0x2b,0x34,0x00,0x01,0x00,0x48,0x00,0x00,
		0x01,0xaf,0x01,0xd4,0x00,0x18,0x00,0x19,0x40,0x0d,0x03,0x12,0x12,0x07,0x07,0x72,
		0x01,0x06,0x72,0x0d,0x00,0x0a,0x72,0x00,0x2b,0x32,0x2b,0x2b,0x32,0x11,0x33,0x30,
		0x31,0x73,0x11,0x33,0x15,0x3e,0x02,0x33,0x32,0x16,0x16,0x15,0x11,0x23,0x11,0x34,
		0x26,0x26,0x23,0x22,0x0e,0x02,0x15,0x11,0x48,0x46,0x12,0x30,0x3a,0x1f,0x26,0x3c,
		0x24,0x46,0x16,0x26,0x18,0x17,0x2f,0x28,0x19,0x01,0xc9,0x51,0x1c,0x29,0x17,0x26,
		0x54,0x45,0xfe,0xeb,0x01,0x13,0x30,0x39,0x19,0x14,0x25,0x34,0x21,0xfe,0xf9,0x00,
		0xff,0xff,0x00,0x48,0x00,0x00,0x01,0xaf,0x02,0xaa,0x06,0x26,0x01,0x5a,0x00,0x00,
		0x01,0x06,0x03,0x7d,0x04,0x00,0x00,0x0b,0xb6,0x01,0x19,0x07,0x01,0x01,0x27,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x48,0x00,0x00,0x01,0xaf,0x02,0xb0,0x06,0x26,
		0x01,0x5a,0x00,0x00,0x01,0x06,0x03,0x80,0x09,0x00,0x00,0x0b,0xb6,0x01,0x1e,0x07,
		0x01,0x01,0x2e,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x48,0xfe,0xed,0x01,0xaf,
		0x01,0xd4,0x06,0x26,0x01,0x5a,0x00,0x00,0x01,0x06,0x03,0x8c,0x18,0x00,0x00,0x0e,
		0xb4,0x01,0x25,0x0d,0x01,0x01,0xb8,0xff,0xe0,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,
		0x00,0x48,0x00,0x00,0x01,0xaf,0x02,0x90,0x06,0x26,0x01,0x5a,0x00,0x00,0x01,0x06,
		0x03,0x7b,0x0a,0x00,0x00,0x0b,0xb6,0x01,0x19,0x07,0x01,0x01,0x55,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x48,0xff,0x6d,0x01,0xaf,0x01,0xd4,0x06,0x26,0x01,0x5a,
		0x00,0x00,0x01,0x06,0x03,0x8a,0x15,0x00,0x00,0x0e,0xb4,0x01,0x1f,0x0d,0x01,0x01,
		0xb8,0xff,0xd4,0xb0,0x56,0x00,0x2b,0x34,0x00,0x01,0x00,0x44,0xff,0x50,0x01,0xb0,
		0x01,0xd4,0x00,0x2d,0x00,0x1d,0x40,0x10,0x1e,0x13,0x13,0x23,0x07,0x72,0x1c,0x06,
		0x72,0x1b,0x0a,0x72,0x09,0x00,0x0f,0x72,0x00,0x2b,0x32,0x2b,0x2b,0x2b,0x32,0x11,
		0x33,0x30,0x31,0x45,0x22,0x26,0x27,0x37,0x1e,0x03,0x33,0x32,0x36,0x36,0x35,0x35,
		0x34,0x2e,0x02,0x23,0x22,0x0e,0x03,0x15,0x11,0x23,0x11,0x33,0x15,0x3e,0x03,0x33,
		0x32,0x1e,0x02,0x15,0x15,0x14,0x0e,0x02,0x01,0x06,0x1a,0x31,0x16,0x22,0x03,0x05,
		0x0c,0x18,0x15,0x21,0x2b,0x15,0x0d,0x17,0x1e,0x12,0x13,0x26,0x23,0x1b,0x10,0x4a,
		0x4a,0x0d,0x22,0x27,0x2a,0x15,0x1e,0x34,0x26,0x15,0x1a,0x2e,0x3e,0xb0,0x11,0x11,
		0x43,0x01,0x0a,0x0d,0x0a,0x22,0x45,0x33,0xe6,0x24,0x32,0x1e,0x0e,0x0d,0x18,0x23,
		0x2c,0x1a,0xfe,0xf9,0x01,0xc9,0x51,0x15,0x22,0x18,0x0d,0x15,0x2d,0x49,0x34,0xdd,
		0x3d,0x58,0x38,0x1b,0xff,0xff,0x00,0x48,0xff,0x65,0x01,0xaf,0x01,0xd4,0x06,0x26,
		0x01,0x5a,0x00,0x00,0x01,0x06,0x03,0x90,0x0c,0x00,0x00,0x0e,0xb4,0x01,0x1a,0x00,
		0x01,0x01,0xb8,0xff,0x9d,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x48,0x00,0x00,
		0x01,0xb4,0x02,0xab,0x06,0x26,0x01,0x5a,0x00,0x00,0x01,0x06,0x03,0x83,0x05,0x00,
		0x00,0x0b,0xb6,0x01,0x1d,0x07,0x01,0x01,0x6a,0x56,0x00,0x2b,0x34,0x00,0x00,0x02,
		0x00,0x27,0xff,0xf8,0x01,0xcd,0x01,0xd3,0x00,0x0f,0x00,0x1f,0x00,0x13,0x40,0x09,
		0x10,0x00,0x18,0x08,0x07,0x72,0x00,0x0b,0x72,0x00,0x2b,0x2b,0x32,0x11,0x33,0x30,
		0x31,0x57,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x06,
		0x06,0x27,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x14,0x16,
		0x16,0xfa,0x3e,0x5f,0x36,0x36,0x5f,0x3e,0x3e,0x5f,0x36,0x36,0x5f,0x3e,0x28,0x3c,
		0x23,0x23,0x3c,0x28,0x27,0x3d,0x23,0x23,0x3d,0x08,0x3d,0x6b,0x45,0x46,0x6b,0x3d,
		0x3d,0x6b,0x46,0x45,0x6b,0x3d,0x3c,0x2e,0x50,0x34,0x34,0x50,0x2d,0x2d,0x50,0x34,
		0x34,0x50,0x2e,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,0x02,0xaa,0x06,0x26,
		0x01,0x63,0x00,0x00,0x01,0x06,0x03,0x7d,0xf5,0x00,0x00,0x0b,0xb6,0x02,0x20,0x08,
		0x01,0x01,0x28,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,
		0x02,0x8e,0x06,0x26,0x01,0x63,0x00,0x00,0x01,0x06,0x03,0x81,0xf8,0x00,0x00,0x0b,
		0xb6,0x02,0x24,0x08,0x01,0x01,0x47,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x27,
		0xff,0xf8,0x01,0xcd,0x02,0xad,0x06,0x26,0x01,0x63,0x00,0x00,0x01,0x06,0x03,0x7f,
		0x00,0x00,0x00,0x0b,0xb6,0x02,0x20,0x08,0x01,0x01,0x2c,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xe6,0x03,0x26,0x06,0x26,0x01,0x63,0x00,0x00,
		0x01,0x06,0x03,0xb9,0xfa,0x00,0x00,0x15,0x40,0x0e,0x03,0x27,0x20,0x01,0x01,0x78,
		0x56,0x02,0x20,0x08,0x01,0x01,0x2c,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x27,0xff,0x6d,0x01,0xcd,0x02,0xad,0x06,0x26,0x01,0x63,0x00,0x00,0x00,0x26,
		0x03,0x8a,0x0b,0x00,0x01,0x06,0x03,0x7f,0x00,0x00,0x00,0x18,0x40,0x0c,0x03,0x2c,
		0x08,0x01,0x01,0x2c,0x56,0x02,0x26,0x00,0x01,0x01,0xb8,0xff,0xdc,0xb0,0x56,0x00,
		0x2b,0x34,0x2b,0x34,0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,0x03,0x3b,0x06,0x26,
		0x01,0x63,0x00,0x00,0x01,0x06,0x03,0xba,0xfa,0x00,0x00,0x15,0x40,0x0e,0x03,0x27,
		0x20,0x01,0x01,0x8d,0x56,0x02,0x20,0x08,0x01,0x01,0x2c,0x56,0x00,0x2b,0x34,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,0x03,0x24,0x06,0x26,0x01,0x63,
		0x00,0x00,0x01,0x06,0x03,0xbb,0xff,0x00,0x00,0x15,0x40,0x0e,0x03,0x2e,0x20,0x01,
		0x01,0x70,0x56,0x02,0x20,0x08,0x01,0x01,0x2c,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,0x03,0x38,0x06,0x26,0x01,0x63,0x00,0x00,
		0x01,0x06,0x03,0xbc,0xf8,0x00,0x00,0x15,0x40,0x0e,0x03,0x2b,0x20,0x01,0x01,0xcc,
		0x56,0x02,0x20,0x08,0x01,0x01,0x2c,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x27,0xff,0xf8,0x01,0xcd,0x02,0xaa,0x06,0x26,0x01,0x63,0x00,0x00,0x01,0x06,
		0x03,0x86,0xeb,0x00,0x00,0x0d,0xb7,0x03,0x02,0x20,0x08,0x01,0x01,0x28,0x56,0x00,
		0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,0x02,0x99,0x06,0x26,
		0x01,0x63,0x00,0x00,0x01,0x06,0x03,0x7a,0xff,0x00,0x00,0x0d,0xb7,0x03,0x02,0x20,
		0x08,0x01,0x01,0x61,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,
		0x01,0xcd,0x03,0x01,0x06,0x26,0x01,0x63,0x00,0x00,0x00,0x26,0x03,0x7a,0xff,0x00,
		0x01,0x07,0x03,0x84,0x00,0x01,0x00,0x94,0x00,0x17,0x40,0x0f,0x04,0x38,0x26,0x01,
		0x01,0x30,0x56,0x03,0x02,0x20,0x08,0x01,0x01,0x61,0x56,0x00,0x2b,0x34,0x34,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,0x03,0x01,0x06,0x26,0x01,0x63,
		0x00,0x00,0x00,0x26,0x03,0x7b,0xfb,0x00,0x01,0x07,0x03,0x84,0x00,0x00,0x00,0x94,
		0x00,0x15,0x40,0x0e,0x03,0x2c,0x26,0x01,0x01,0x39,0x56,0x02,0x20,0x08,0x01,0x01,
		0x56,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x27,0xff,0x6d,0x01,0xcd,
		0x01,0xd3,0x06,0x26,0x01,0x63,0x00,0x00,0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,
		0xb4,0x02,0x26,0x00,0x01,0x01,0xb8,0xff,0xdc,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,
		0x00,0x27,0xff,0xf8,0x01,0xcd,0x02,0xaa,0x06,0x26,0x01,0x63,0x00,0x00,0x01,0x06,
		0x03,0x7c,0xf5,0x00,0x00,0x0b,0xb6,0x02,0x20,0x08,0x01,0x01,0x28,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,0x02,0xc0,0x06,0x26,0x01,0x63,
		0x00,0x00,0x01,0x06,0x03,0x85,0x0f,0x00,0x00,0x0b,0xb6,0x02,0x27,0x08,0x01,0x01,
		0x38,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,0x02,0x08,
		0x06,0x26,0x01,0x63,0x00,0x00,0x01,0x06,0x03,0x89,0xdb,0xeb,0x00,0x0e,0xb4,0x02,
		0x24,0x08,0x01,0x01,0xb8,0xff,0xb0,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x27,
		0xff,0xf8,0x01,0xcd,0x02,0xaa,0x06,0x26,0x01,0x73,0x00,0x00,0x01,0x06,0x03,0x7d,
		0xf5,0x00,0x00,0x0b,0xb6,0x03,0x29,0x08,0x01,0x01,0x28,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x27,0xff,0x6d,0x01,0xcd,0x02,0x08,0x06,0x26,0x01,0x73,0x00,0x00,
		0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x03,0x2f,0x00,0x01,0x01,0xb8,0xff,
		0xdc,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,0x02,0xaa,
		0x06,0x26,0x01,0x73,0x00,0x00,0x01,0x06,0x03,0x7c,0xf5,0x00,0x00,0x0b,0xb6,0x03,
		0x29,0x08,0x01,0x01,0x28,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,
		0x01,0xcd,0x02,0xc0,0x06,0x26,0x01,0x73,0x00,0x00,0x01,0x06,0x03,0x85,0x0f,0x00,
		0x00,0x0b,0xb6,0x03,0x30,0x08,0x01,0x01,0x38,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x27,0xff,0xf8,0x01,0xcd,0x02,0xab,0x06,0x26,0x01,0x73,0x00,0x00,0x01,0x06,
		0x03,0x83,0xf6,0x00,0x00,0x0b,0xb6,0x03,0x2d,0x08,0x01,0x01,0x6b,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,0x02,0xbb,0x06,0x26,0x01,0x63,
		0x00,0x00,0x01,0x06,0x03,0x7e,0x0b,0x00,0x00,0x0d,0xb7,0x03,0x02,0x20,0x08,0x01,
		0x01,0x37,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,
		0x02,0x84,0x06,0x26,0x01,0x63,0x00,0x00,0x01,0x06,0x03,0x87,0xf8,0x00,0x00,0x0b,
		0xb6,0x02,0x20,0x08,0x01,0x01,0x3d,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x27,
		0xff,0xf8,0x01,0xcd,0x02,0x6d,0x06,0x26,0x01,0x63,0x00,0x00,0x01,0x06,0x03,0x84,
		0x00,0x00,0x00,0x0b,0xb6,0x02,0x20,0x08,0x01,0x01,0x62,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,0x03,0x44,0x06,0x26,0x01,0x63,0x00,0x00,
		0x00,0x26,0x03,0x84,0x00,0x00,0x01,0x07,0x03,0x7d,0xff,0xf5,0x00,0x9a,0x00,0x15,
		0x40,0x0e,0x03,0x24,0x21,0x01,0x01,0x28,0x56,0x02,0x20,0x08,0x01,0x01,0x62,0x56,
		0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,0x03,0x44,
		0x06,0x26,0x01,0x63,0x00,0x00,0x00,0x26,0x03,0x84,0x00,0x00,0x01,0x07,0x03,0x7c,
		0xff,0xf5,0x00,0x9a,0x00,0x15,0x40,0x0e,0x03,0x24,0x21,0x01,0x01,0x28,0x56,0x02,
		0x20,0x08,0x01,0x01,0x62,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x27,
		0xff,0x27,0x01,0xcd,0x01,0xd3,0x06,0x26,0x01,0x63,0x00,0x00,0x00,0x06,0x03,0x8e,
		0x25,0x0a,0x00,0x03,0x00,0x27,0xff,0xc1,0x01,0xcd,0x02,0x07,0x00,0x03,0x00,0x13,
		0x00,0x23,0x00,0x1e,0x40,0x0e,0x03,0x02,0x02,0x1c,0x0c,0x07,0x72,0x01,0x00,0x00,
		0x14,0x04,0x0b,0x72,0x00,0x2b,0x32,0x32,0x7c,0x2f,0x33,0x2b,0x32,0x32,0x2f,0x33,
		0x30,0x31,0x57,0x27,0x01,0x17,0x03,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,
		0x16,0x16,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,
		0x06,0x06,0x15,0x14,0x16,0x16,0x79,0x33,0x01,0x2e,0x36,0xb0,0x3e,0x5f,0x36,0x36,
		0x5f,0x3e,0x3e,0x5f,0x36,0x36,0x5f,0x3e,0x28,0x3c,0x23,0x23,0x3c,0x28,0x27,0x3d,
		0x23,0x23,0x3d,0x3f,0x1b,0x02,0x2b,0x1c,0xfe,0x0d,0x3d,0x6b,0x45,0x46,0x6b,0x3d,
		0x3d,0x6b,0x46,0x45,0x6b,0x3d,0x3c,0x2e,0x50,0x34,0x34,0x50,0x2d,0x2d,0x50,0x34,
		0x34,0x50,0x2e,0x00,0xff,0xff,0x00,0x27,0xff,0xc1,0x01,0xcd,0x02,0xaa,0x06,0x26,
		0x01,0x7f,0x00,0x00,0x01,0x06,0x03,0x7d,0xf5,0x00,0x00,0x0b,0xb6,0x03,0x24,0x0c,
		0x01,0x01,0x28,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,
		0x02,0xab,0x06,0x26,0x01,0x63,0x00,0x00,0x01,0x06,0x03,0x83,0xf6,0x00,0x00,0x0b,
		0xb6,0x02,0x24,0x08,0x01,0x01,0x6b,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x27,
		0xff,0xf8,0x01,0xcd,0x03,0x5d,0x06,0x26,0x01,0x63,0x00,0x00,0x00,0x26,0x03,0x83,
		0xf6,0x00,0x01,0x07,0x03,0x7d,0xff,0xf5,0x00,0xb3,0x00,0x15,0x40,0x0e,0x03,0x38,
		0x30,0x01,0x00,0x03,0x56,0x02,0x24,0x08,0x01,0x01,0x6b,0x56,0x00,0x2b,0x34,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,0x01,0xcd,0x03,0x4c,0x06,0x26,0x01,0x63,
		0x00,0x00,0x00,0x26,0x03,0x83,0xf6,0x00,0x01,0x07,0x03,0x7a,0xff,0xff,0x00,0xb3,
		0x00,0x17,0x40,0x0f,0x04,0x03,0x38,0x30,0x01,0x01,0x3c,0x56,0x02,0x24,0x08,0x01,
		0x01,0x6b,0x56,0x00,0x2b,0x34,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x27,0xff,0xf8,
		0x01,0xcd,0x03,0x20,0x06,0x26,0x01,0x63,0x00,0x00,0x00,0x26,0x03,0x83,0xf6,0x00,
		0x01,0x07,0x03,0x84,0x00,0x00,0x00,0xb3,0x00,0x15,0x40,0x0e,0x03,0x38,0x30,0x01,
		0x01,0x3d,0x56,0x02,0x24,0x08,0x01,0x01,0x6b,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,
		0x00,0x03,0x00,0x06,0xff,0xf4,0x01,0xee,0x01,0xd2,0x00,0x25,0x00,0x42,0x00,0x4b,
		0x00,0x2f,0x40,0x17,0x48,0x15,0x15,0x26,0x1f,0x1f,0x00,0x43,0x1b,0x00,0x1b,0x00,
		0x1b,0x06,0x3b,0x12,0x0f,0x07,0x72,0x03,0x06,0x0b,0x72,0x00,0x2b,0x32,0x2b,0x32,
		0x32,0x11,0x39,0x39,0x2f,0x2f,0x11,0x33,0x11,0x33,0x11,0x33,0x32,0x11,0x33,0x30,
		0x31,0x45,0x22,0x26,0x27,0x06,0x06,0x23,0x22,0x2e,0x02,0x35,0x34,0x36,0x36,0x33,
		0x32,0x16,0x17,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x15,0x23,0x1e,0x02,0x33,0x32,
		0x36,0x37,0x17,0x06,0x06,0x27,0x32,0x3e,0x02,0x35,0x34,0x26,0x27,0x2e,0x02,0x35,
		0x34,0x36,0x36,0x35,0x34,0x2e,0x02,0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,0x37,
		0x33,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x01,0x74,0x22,0x3c,0x19,0x16,0x31,0x1c,
		0x19,0x34,0x2c,0x1b,0x2c,0x47,0x28,0x1e,0x2f,0x11,0x14,0x32,0x1f,0x2a,0x3c,0x20,
		0xe4,0x02,0x17,0x2c,0x20,0x1f,0x30,0x11,0x23,0x1a,0x3d,0xf4,0x0a,0x12,0x0e,0x08,
		0x01,0x02,0x04,0x04,0x02,0x04,0x05,0x07,0x0d,0x12,0x0a,0x17,0x2c,0x1c,0x18,0x2b,
		0x82,0xa8,0x10,0x24,0x1d,0x1a,0x27,0x16,0x0c,0x15,0x14,0x14,0x14,0x15,0x35,0x5d,
		0x48,0x58,0x68,0x2e,0x17,0x17,0x17,0x17,0x29,0x51,0x3d,0x3e,0x47,0x4c,0x1b,0x13,
		0x13,0x2b,0x1b,0x1b,0x3e,0x05,0x0b,0x0e,0x09,0x02,0x0b,0x0a,0x18,0x2c,0x28,0x12,
		0x27,0x33,0x1e,0x04,0x09,0x10,0x0c,0x07,0x21,0x49,0x3d,0x40,0x54,0x29,0xe4,0x30,
		0x3a,0x1b,0x1f,0x3b,0x00,0x02,0x00,0x3c,0xff,0x59,0x01,0xcf,0x01,0xd3,0x00,0x16,
		0x00,0x2a,0x00,0x21,0x40,0x12,0x15,0x17,0x17,0x11,0x0b,0x72,0x03,0x20,0x20,0x07,
		0x07,0x72,0x01,0x06,0x72,0x00,0x0e,0x72,0x00,0x2b,0x2b,0x2b,0x32,0x11,0x33,0x2b,
		0x32,0x11,0x33,0x30,0x31,0x57,0x11,0x33,0x15,0x3e,0x02,0x33,0x32,0x1e,0x02,0x15,
		0x14,0x0e,0x02,0x23,0x22,0x26,0x26,0x27,0x15,0x37,0x32,0x3e,0x02,0x35,0x34,0x26,
		0x26,0x27,0x26,0x0e,0x02,0x15,0x1e,0x04,0x3c,0x49,0x0b,0x29,0x37,0x20,0x26,0x45,
		0x35,0x1f,0x21,0x37,0x45,0x24,0x1b,0x33,0x2a,0x10,0x7c,0x18,0x2e,0x26,0x16,0x1c,
		0x35,0x26,0x1c,0x31,0x26,0x15,0x01,0x0c,0x16,0x1e,0x26,0xa7,0x02,0x70,0x5a,0x23,
		0x2c,0x15,0x1d,0x3a,0x58,0x3c,0x3c,0x5c,0x3d,0x1f,0x11,0x21,0x16,0xe3,0xdb,0x11,
		0x28,0x45,0x33,0x37,0x4d,0x2a,0x02,0x02,0x14,0x2e,0x4b,0x35,0x20,0x34,0x27,0x19,
		0x0d,0x00,0x00,0x02,0x00,0x3c,0xff,0x59,0x01,0xcf,0x02,0x99,0x00,0x1b,0x00,0x30,
		0x00,0x21,0x40,0x12,0x19,0x1c,0x1c,0x15,0x0b,0x72,0x1b,0x0e,0x72,0x07,0x25,0x25,
		0x0b,0x07,0x72,0x00,0x00,0x72,0x00,0x2b,0x2b,0x32,0x11,0x33,0x2b,0x2b,0x32,0x11,
		0x33,0x30,0x31,0x53,0x33,0x33,0x15,0x06,0x06,0x15,0x15,0x3e,0x02,0x33,0x32,0x1e,
		0x02,0x15,0x14,0x0e,0x02,0x23,0x22,0x26,0x26,0x27,0x15,0x23,0x37,0x32,0x3e,0x02,
		0x35,0x34,0x26,0x26,0x27,0x26,0x0e,0x02,0x15,0x1e,0x04,0x33,0x3c,0x48,0x0a,0x06,
		0x03,0x0b,0x29,0x37,0x20,0x26,0x45,0x35,0x1f,0x21,0x37,0x45,0x24,0x1b,0x33,0x2a,
		0x10,0x4a,0xc6,0x18,0x2e,0x26,0x16,0x1c,0x35,0x26,0x1c,0x31,0x26,0x15,0x01,0x0c,
		0x16,0x1e,0x26,0x16,0x02,0x99,0x07,0x06,0x0e,0x11,0xfe,0x23,0x2c,0x15,0x1d,0x3a,
		0x58,0x3c,0x3c,0x5c,0x3d,0x1f,0x11,0x21,0x16,0xe3,0xdb,0x11,0x28,0x45,0x33,0x37,
		0x4d,0x2a,0x02,0x02,0x14,0x2e,0x4b,0x35,0x20,0x34,0x27,0x19,0x0d,0x00,0x00,0x02,
		0x00,0x2a,0xff,0x59,0x01,0xba,0x01,0xd5,0x00,0x17,0x00,0x2b,0x00,0x21,0x40,0x12,
		0x17,0x0e,0x72,0x16,0x06,0x72,0x14,0x22,0x22,0x0f,0x07,0x72,0x01,0x18,0x18,0x05,
		0x0b,0x72,0x00,0x2b,0x32,0x11,0x33,0x2b,0x32,0x11,0x33,0x2b,0x2b,0x30,0x31,0x45,
		0x35,0x0e,0x02,0x23,0x22,0x2e,0x02,0x35,0x34,0x3e,0x02,0x33,0x32,0x1e,0x02,0x17,
		0x35,0x33,0x11,0x27,0x32,0x3e,0x02,0x35,0x34,0x2e,0x02,0x23,0x22,0x0e,0x02,0x15,
		0x14,0x1e,0x02,0x01,0x72,0x0e,0x2b,0x35,0x1e,0x27,0x45,0x33,0x1d,0x20,0x37,0x49,
		0x29,0x18,0x28,0x21,0x19,0x09,0x44,0xc7,0x1a,0x2d,0x23,0x13,0x11,0x20,0x2a,0x1a,
		0x1c,0x32,0x25,0x15,0x12,0x22,0x2f,0xa7,0xf0,0x19,0x26,0x14,0x23,0x3f,0x58,0x36,
		0x39,0x58,0x3e,0x20,0x0b,0x14,0x1e,0x12,0x43,0xfd,0x90,0xdc,0x15,0x2d,0x48,0x32,
		0x2f,0x41,0x27,0x12,0x15,0x2b,0x43,0x2e,0x2a,0x42,0x2f,0x19,0x00,0x01,0x00,0x77,
		0xff,0xff,0x01,0xca,0x01,0xd4,0x00,0x1b,0x00,0x1b,0x40,0x0e,0x1b,0x0a,0x72,0x03,
		0x02,0x02,0x14,0x14,0x08,0x07,0x72,0x00,0x06,0x72,0x00,0x2b,0x2b,0x32,0x11,0x33,
		0x11,0x33,0x2b,0x30,0x31,0x53,0x33,0x07,0x27,0x3e,0x03,0x33,0x32,0x16,0x17,0x07,
		0x07,0x27,0x26,0x26,0x27,0x26,0x26,0x23,0x22,0x0e,0x02,0x15,0x15,0x23,0x77,0x4b,
		0x03,0x09,0x06,0x1e,0x2a,0x32,0x1b,0x24,0x3d,0x18,0x20,0x04,0x07,0x02,0x08,0x0d,
		0x10,0x1b,0x11,0x19,0x32,0x29,0x18,0x49,0x01,0xc9,0x85,0x0f,0x1f,0x30,0x21,0x11,
		0x19,0x19,0x38,0x09,0x04,0x08,0x0e,0x0a,0x0a,0x07,0x13,0x28,0x3e,0x2b,0xf3,0x00,
		0xff,0xff,0x00,0x77,0xff,0xff,0x01,0xca,0x02,0xaa,0x06,0x26,0x01,0x89,0x00,0x00,
		0x01,0x06,0x03,0x7d,0x1d,0x00,0x00,0x0b,0xb6,0x01,0x1c,0x08,0x01,0x01,0x27,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x77,0xff,0xff,0x01,0xca,0x02,0xb0,0x06,0x26,
		0x01,0x89,0x00,0x00,0x01,0x06,0x03,0x80,0x22,0x00,0x00,0x0b,0xb6,0x01,0x21,0x08,
		0x01,0x01,0x2e,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x77,0xfe,0xed,0x01,0xca,
		0x01,0xd4,0x06,0x26,0x01,0x89,0x00,0x00,0x01,0x06,0x03,0x8c,0x22,0x00,0x00,0x0e,
		0xb4,0x01,0x28,0x1b,0x01,0x01,0xb8,0xff,0xe1,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,
		0x00,0x72,0xff,0xff,0x01,0xca,0x02,0xaa,0x06,0x26,0x01,0x89,0x00,0x00,0x01,0x06,
		0x03,0x86,0x13,0x00,0x00,0x0d,0xb7,0x02,0x01,0x1c,0x00,0x01,0x01,0x32,0x56,0x00,
		0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x77,0xff,0x6d,0x01,0xca,0x01,0xd4,0x06,0x26,
		0x01,0x89,0x00,0x00,0x01,0x06,0x03,0x8a,0x1f,0x00,0x00,0x0e,0xb4,0x01,0x22,0x1b,
		0x01,0x01,0xb8,0xff,0xd5,0xb0,0x56,0x00,0x2b,0x34,0x00,0x01,0x00,0x19,0xff,0x4f,
		0x01,0xe8,0x01,0xca,0x00,0x2e,0x00,0x19,0x40,0x0d,0x22,0x2e,0x0f,0x72,0x1c,0x06,
		0x72,0x06,0x16,0x16,0x0a,0x0b,0x72,0x00,0x2b,0x32,0x11,0x33,0x2b,0x2b,0x32,0x30,
		0x31,0x45,0x22,0x2e,0x02,0x35,0x37,0x0e,0x02,0x23,0x22,0x26,0x27,0x37,0x37,0x17,
		0x16,0x16,0x17,0x16,0x16,0x33,0x32,0x3e,0x02,0x35,0x35,0x33,0x11,0x14,0x16,0x16,
		0x33,0x32,0x36,0x36,0x37,0x3e,0x02,0x37,0x17,0x06,0x06,0x23,0x01,0x8c,0x16,0x2d,
		0x26,0x17,0x01,0x0c,0x2a,0x35,0x1d,0x20,0x32,0x1a,0x1e,0x04,0x06,0x03,0x07,0x0c,
		0x0b,0x18,0x10,0x17,0x2e,0x26,0x17,0x49,0x12,0x1e,0x12,0x07,0x0d,0x0e,0x07,0x05,
		0x04,0x03,0x03,0x19,0x10,0x2e,0x1e,0xb1,0x0d,0x1f,0x34,0x28,0x7f,0x1f,0x2c,0x16,
		0x19,0x19,0x38,0x09,0x03,0x08,0x10,0x0b,0x08,0x07,0x13,0x28,0x3e,0x2b,0xf3,0xfe,
		0x0d,0x18,0x21,0x11,0x02,0x05,0x04,0x03,0x07,0x08,0x02,0x37,0x12,0x14,0xff,0xff,
		0x00,0x77,0xff,0xff,0x01,0xca,0x02,0x84,0x06,0x26,0x01,0x89,0x00,0x00,0x01,0x06,
		0x03,0x87,0x20,0x00,0x00,0x0b,0xb6,0x01,0x1c,0x00,0x01,0x01,0x47,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x77,0xff,0x65,0x01,0xca,0x01,0xd4,0x06,0x26,0x01,0x89,
		0x00,0x00,0x01,0x06,0x03,0x90,0x16,0x00,0x00,0x0e,0xb4,0x01,0x1d,0x1b,0x01,0x01,
		0xb8,0xff,0x9e,0xb0,0x56,0x00,0x2b,0x34,0x00,0x02,0x00,0x23,0xff,0xff,0x01,0xca,
		0x01,0xd4,0x00,0x03,0x00,0x1f,0x00,0x1f,0x40,0x0f,0x01,0x00,0x00,0x1e,0x07,0x06,
		0x06,0x18,0x18,0x0c,0x07,0x72,0x04,0x06,0x72,0x00,0x2b,0x2b,0x32,0x11,0x33,0x11,
		0x33,0x2f,0x39,0x2f,0x33,0x30,0x31,0x77,0x35,0x21,0x15,0x03,0x33,0x07,0x27,0x3e,
		0x03,0x33,0x32,0x16,0x17,0x07,0x07,0x27,0x26,0x26,0x27,0x26,0x26,0x23,0x22,0x0e,
		0x02,0x15,0x15,0x23,0x23,0x01,0x0e,0xba,0x4b,0x03,0x09,0x06,0x1e,0x2a,0x32,0x1b,
		0x24,0x3d,0x18,0x20,0x04,0x07,0x02,0x08,0x0d,0x10,0x1b,0x11,0x19,0x32,0x29,0x18,
		0x49,0xac,0x39,0x39,0x01,0x1d,0x85,0x0f,0x1f,0x30,0x21,0x11,0x19,0x19,0x38,0x09,
		0x04,0x08,0x0e,0x0a,0x0a,0x07,0x13,0x28,0x3e,0x2b,0xf3,0x00,0x00,0x01,0x00,0x39,
		0xff,0xf6,0x01,0xb8,0x01,0xd4,0x00,0x3b,0x00,0x1a,0x40,0x0e,0x11,0x37,0x1a,0x2f,
		0x04,0x3b,0x2c,0x1e,0x07,0x72,0x0d,0x3b,0x0b,0x72,0x00,0x2b,0x32,0x2b,0x32,0x12,
		0x17,0x39,0x30,0x31,0x57,0x22,0x26,0x26,0x27,0x37,0x37,0x17,0x16,0x16,0x17,0x16,
		0x16,0x33,0x32,0x36,0x36,0x35,0x34,0x2e,0x02,0x27,0x2e,0x02,0x35,0x34,0x36,0x36,
		0x33,0x32,0x1e,0x02,0x17,0x07,0x07,0x27,0x26,0x26,0x27,0x26,0x26,0x23,0x22,0x06,
		0x15,0x14,0x16,0x16,0x17,0x1e,0x02,0x15,0x14,0x06,0x06,0x23,0xfb,0x26,0x45,0x3d,
		0x1a,0x28,0x06,0x06,0x02,0x05,0x0b,0x15,0x3b,0x2e,0x25,0x33,0x1c,0x0c,0x1b,0x2c,
		0x20,0x34,0x4e,0x2a,0x26,0x4b,0x37,0x20,0x34,0x2c,0x25,0x11,0x29,0x07,0x05,0x01,
		0x07,0x0b,0x17,0x3a,0x1b,0x28,0x3a,0x15,0x38,0x34,0x39,0x45,0x1f,0x29,0x54,0x40,
		0x0a,0x10,0x20,0x18,0x44,0x09,0x04,0x08,0x11,0x0c,0x15,0x1b,0x12,0x21,0x16,0x0f,
		0x17,0x14,0x14,0x0a,0x0f,0x28,0x35,0x22,0x23,0x33,0x1d,0x09,0x12,0x1b,0x12,0x32,
		0x08,0x05,0x08,0x0f,0x0b,0x12,0x13,0x1c,0x1d,0x0f,0x1d,0x1d,0x0f,0x12,0x25,0x30,
		0x21,0x26,0x42,0x27,0xff,0xff,0x00,0x39,0xff,0xf6,0x01,0xb8,0x02,0xaa,0x06,0x26,
		0x01,0x93,0x00,0x00,0x01,0x06,0x03,0x7d,0x00,0x00,0x00,0x0b,0xb6,0x01,0x3c,0x1e,
		0x01,0x01,0x27,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x39,0xff,0xf6,0x01,0xb8,
		0x03,0x28,0x06,0x26,0x01,0x93,0x00,0x00,0x00,0x26,0x03,0x7d,0x00,0x00,0x01,0x07,
		0x03,0x7b,0x00,0x19,0x00,0x98,0x00,0x15,0x40,0x0e,0x02,0x40,0x3e,0x01,0x01,0x17,
		0x56,0x01,0x3c,0x1e,0x01,0x01,0x27,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x39,0xff,0xf6,0x01,0xb8,0x02,0xb0,0x06,0x26,0x01,0x93,0x00,0x00,0x01,0x06,
		0x03,0x80,0x00,0x00,0x00,0x0b,0xb6,0x01,0x41,0x1e,0x01,0x01,0x2e,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x39,0xff,0xf6,0x01,0xb8,0x03,0x23,0x06,0x26,0x01,0x93,
		0x00,0x00,0x00,0x26,0x03,0x80,0x00,0x00,0x01,0x07,0x03,0x7b,0x00,0x01,0x00,0x93,
		0x00,0x15,0x40,0x0e,0x02,0x43,0x3c,0x01,0x00,0x0c,0x56,0x01,0x41,0x1e,0x01,0x01,
		0x2e,0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0xff,0xff,0x00,0x39,0xff,0x3b,0x01,0xb8,
		0x01,0xd4,0x06,0x26,0x01,0x93,0x00,0x00,0x01,0x06,0x03,0x8d,0x00,0x00,0x00,0x0b,
		0xb6,0x01,0x4b,0x3b,0x00,0x00,0x0a,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x39,
		0xff,0xf6,0x01,0xb8,0x02,0xad,0x06,0x26,0x01,0x93,0x00,0x00,0x01,0x06,0x03,0x7f,
		0x00,0x00,0x00,0x0b,0xb6,0x01,0x3c,0x1e,0x01,0x01,0x2b,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x39,0xfe,0xed,0x01,0xb8,0x01,0xd4,0x06,0x26,0x01,0x93,0x00,0x00,
		0x01,0x06,0x03,0x8c,0x00,0x00,0x00,0x0e,0xb4,0x01,0x48,0x3b,0x01,0x01,0xb8,0xff,
		0xea,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x39,0xff,0xf6,0x01,0xb8,0x02,0x90,
		0x06,0x26,0x01,0x93,0x00,0x00,0x01,0x06,0x03,0x7b,0x00,0x00,0x00,0x0b,0xb6,0x01,
		0x3c,0x1e,0x01,0x01,0x55,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x39,0xff,0x6d,
		0x01,0xb8,0x01,0xd4,0x06,0x26,0x01,0x93,0x00,0x00,0x01,0x06,0x03,0x8a,0x00,0x00,
		0x00,0x0e,0xb4,0x01,0x42,0x3b,0x01,0x01,0xb8,0xff,0xde,0xb0,0x56,0x00,0x2b,0x34,
		0xff,0xff,0x00,0x39,0xff,0x6d,0x01,0xb8,0x02,0x90,0x06,0x26,0x01,0x93,0x00,0x00,
		0x00,0x26,0x03,0x8a,0x00,0x00,0x01,0x06,0x03,0x7b,0x00,0x00,0x00,0x18,0x40,0x0c,
		0x02,0x48,0x1e,0x01,0x01,0x55,0x56,0x01,0x42,0x3b,0x01,0x01,0xb8,0xff,0xde,0xb0,
		0x56,0x00,0x2b,0x34,0x2b,0x34,0x00,0x01,0x00,0x37,0xff,0xf6,0x01,0xd0,0x02,0x9d,
		0x00,0x3a,0x00,0x21,0x40,0x11,0x32,0x13,0x13,0x12,0x12,0x00,0x1f,0x2a,0x01,0x72,
		0x25,0x0a,0x72,0x07,0x00,0x0b,0x72,0x00,0x2b,0x32,0x2b,0x2b,0x32,0x11,0x39,0x2f,
		0x33,0x12,0x39,0x30,0x31,0x45,0x22,0x26,0x27,0x37,0x16,0x16,0x33,0x32,0x3e,0x02,
		0x35,0x34,0x2e,0x02,0x23,0x23,0x35,0x33,0x32,0x3e,0x03,0x35,0x34,0x2e,0x02,0x23,
		0x22,0x06,0x06,0x15,0x11,0x23,0x11,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x14,
		0x06,0x06,0x07,0x1e,0x03,0x15,0x14,0x06,0x06,0x01,0x19,0x1d,0x34,0x17,0x23,0x0f,
		0x24,0x16,0x15,0x29,0x20,0x13,0x12,0x26,0x3a,0x28,0x1e,0x24,0x0f,0x1d,0x1a,0x14,
		0x0c,0x11,0x1e,0x28,0x18,0x26,0x35,0x1b,0x44,0x2d,0x4f,0x34,0x36,0x55,0x32,0x13,
		0x23,0x19,0x1d,0x2d,0x20,0x11,0x2d,0x52,0x0a,0x0f,0x10,0x38,0x0c,0x0c,0x15,0x26,
		0x33,0x1e,0x1b,0x30,0x23,0x14,0x39,0x09,0x12,0x1a,0x23,0x16,0x1a,0x2b,0x22,0x12,
		0x2f,0x53,0x38,0xfe,0x57,0x01,0xa7,0x53,0x6d,0x36,0x31,0x50,0x2f,0x1c,0x34,0x29,
		0x0d,0x09,0x22,0x2f,0x38,0x20,0x35,0x57,0x33,0x00,0x00,0x02,0x00,0x46,0xff,0xf9,
		0x01,0xbc,0x02,0x48,0x00,0x1a,0x00,0x1e,0x00,0x19,0x40,0x0d,0x1e,0x00,0x08,0x01,
		0x08,0x80,0x1b,0x06,0x72,0x13,0x1a,0x0b,0x72,0x00,0x2b,0x32,0x2b,0x1a,0xcc,0x5d,
		0x33,0x30,0x31,0x45,0x22,0x2e,0x02,0x37,0x13,0x37,0x37,0x17,0x06,0x06,0x07,0x07,
		0x17,0x07,0x06,0x16,0x16,0x33,0x32,0x36,0x37,0x17,0x06,0x06,0x23,0x03,0x21,0x15,
		0x21,0x01,0x2b,0x2c,0x38,0x1e,0x09,0x02,0x0c,0x4b,0x0a,0x01,0x05,0x07,0x02,0x09,
		0x03,0x07,0x03,0x0e,0x24,0x1e,0x21,0x33,0x1c,0x16,0x22,0x48,0x27,0xe5,0x01,0x49,
		0xfe,0xb7,0x07,0x1e,0x3f,0x60,0x42,0x01,0x46,0x09,0x01,0x07,0x07,0x0e,0x11,0x71,
		0x12,0xa5,0x4c,0x53,0x1f,0x1a,0x14,0x39,0x19,0x18,0x01,0xd0,0x3b,0x00,0x00,0x03,
		0x00,0x3d,0xff,0xf9,0x01,0xbc,0x02,0x48,0x00,0x03,0x00,0x1e,0x00,0x22,0x00,0x21,
		0x40,0x11,0x00,0x01,0x01,0x22,0x22,0x00,0x0c,0x01,0x0c,0x80,0x1f,0x06,0x72,0x17,
		0x1e,0x0b,0x72,0x00,0x2b,0x32,0x2b,0x1a,0xcc,0x5d,0x33,0x11,0x33,0x2f,0x33,0x30,
		0x31,0x77,0x35,0x21,0x15,0x07,0x22,0x2e,0x02,0x37,0x13,0x37,0x37,0x17,0x06,0x06,
		0x07,0x07,0x17,0x07,0x06,0x16,0x16,0x33,0x32,0x36,0x37,0x17,0x06,0x06,0x23,0x03,
		0x21,0x15,0x21,0x3d,0x01,0x49,0x5b,0x2c,0x38,0x1e,0x09,0x02,0x0c,0x4b,0x0a,0x01,
		0x05,0x07,0x02,0x09,0x03,0x07,0x03,0x0e,0x24,0x1e,0x21,0x33,0x1c,0x16,0x22,0x48,
		0x27,0xe5,0x01,0x49,0xfe,0xb7,0xdc,0x39,0x39,0xe3,0x1e,0x3f,0x60,0x42,0x01,0x46,
		0x09,0x01,0x07,0x07,0x0e,0x11,0x71,0x12,0xa5,0x4c,0x53,0x1f,0x1a,0x14,0x39,0x19,
		0x18,0x01,0xd0,0x3b,0xff,0xff,0x00,0x46,0xff,0xf9,0x01,0xd3,0x02,0xc2,0x06,0x26,
		0x01,0x9f,0x00,0x00,0x01,0x07,0x03,0x6f,0x00,0xae,0x00,0x23,0x00,0x0e,0xb4,0x02,
		0x1f,0x08,0x01,0x01,0xb8,0xff,0xa1,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x46,
		0xff,0x3b,0x01,0xbc,0x02,0x48,0x06,0x26,0x01,0x9f,0x00,0x00,0x01,0x06,0x03,0x8d,
		0xeb,0x00,0x00,0x0b,0xb6,0x02,0x2e,0x1a,0x01,0x00,0x07,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x46,0xfe,0xed,0x01,0xbc,0x02,0x48,0x06,0x26,0x01,0x9f,0x00,0x00,
		0x01,0x06,0x03,0x8c,0x0e,0x00,0x00,0x0e,0xb4,0x02,0x2b,0x1a,0x01,0x01,0xb8,0xff,
		0xe7,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x46,0xff,0xf9,0x01,0xbc,0x03,0x17,
		0x06,0x26,0x01,0x9f,0x00,0x00,0x01,0x06,0x03,0x7a,0xf0,0x7e,0x00,0x0d,0xb7,0x03,
		0x02,0x1f,0x08,0x01,0x01,0x6a,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x46,
		0xff,0x6d,0x01,0xbc,0x02,0x48,0x06,0x26,0x01,0x9f,0x00,0x00,0x01,0x06,0x03,0x8a,
		0x0b,0x00,0x00,0x0e,0xb4,0x02,0x25,0x1a,0x01,0x01,0xb8,0xff,0xdb,0xb0,0x56,0x00,
		0x2b,0x34,0xff,0xff,0x00,0x46,0xff,0x65,0x01,0xbc,0x02,0x48,0x06,0x26,0x01,0x9f,
		0x00,0x00,0x01,0x06,0x03,0x90,0x02,0x00,0x00,0x0e,0xb4,0x02,0x20,0x1a,0x01,0x00,
		0xb8,0xff,0xa4,0xb0,0x56,0x00,0x2b,0x34,0x00,0x01,0x00,0x40,0xff,0xf5,0x01,0xba,
		0x01,0xc9,0x00,0x22,0x00,0x19,0x40,0x0d,0x1a,0x0a,0x72,0x15,0x07,0x06,0x72,0x1e,
		0x0e,0x0e,0x00,0x0b,0x72,0x00,0x2b,0x32,0x11,0x33,0x2b,0x32,0x2b,0x30,0x31,0x57,
		0x22,0x2e,0x03,0x35,0x37,0x33,0x15,0x14,0x1e,0x02,0x33,0x32,0x3e,0x02,0x35,0x35,
		0x33,0x11,0x14,0x16,0x17,0x23,0x2e,0x02,0x35,0x0e,0x03,0xdd,0x1b,0x30,0x27,0x1c,
		0x0f,0x01,0x46,0x10,0x1d,0x26,0x15,0x18,0x2c,0x23,0x14,0x46,0x03,0x07,0x45,0x05,
		0x04,0x01,0x0b,0x1e,0x25,0x29,0x0b,0x10,0x21,0x32,0x46,0x2c,0xff,0xff,0x2b,0x3c,
		0x24,0x10,0x13,0x26,0x3c,0x29,0xfc,0xfe,0x7e,0x12,0x23,0x12,0x0c,0x17,0x18,0x0b,
		0x13,0x1e,0x15,0x0b,0xff,0xff,0x00,0x40,0xff,0xf5,0x01,0xba,0x02,0xaa,0x06,0x26,
		0x01,0xa7,0x00,0x00,0x01,0x06,0x03,0x7d,0xf5,0x00,0x00,0x0b,0xb6,0x01,0x23,0x14,
		0x01,0x01,0x32,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x40,0xff,0xf5,0x01,0xba,
		0x02,0x8e,0x06,0x26,0x01,0xa7,0x00,0x00,0x01,0x06,0x03,0x81,0xf8,0x00,0x00,0x0b,
		0xb6,0x01,0x27,0x14,0x01,0x01,0x51,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x40,
		0xff,0xf5,0x01,0xba,0x02,0xad,0x06,0x26,0x01,0xa7,0x00,0x00,0x01,0x06,0x03,0x7f,
		0x00,0x00,0x00,0x0b,0xb6,0x01,0x23,0x07,0x01,0x01,0x36,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x40,0xff,0xf5,0x01,0xba,0x02,0xaa,0x06,0x26,0x01,0xa7,0x00,0x00,
		0x01,0x06,0x03,0x86,0xeb,0x00,0x00,0x0d,0xb7,0x02,0x01,0x23,0x07,0x01,0x01,0x32,
		0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x40,0xff,0xf5,0x01,0xba,0x02,0x99,
		0x06,0x26,0x01,0xa7,0x00,0x00,0x01,0x06,0x03,0x7a,0xff,0x00,0x00,0x0d,0xb7,0x02,
		0x01,0x23,0x07,0x01,0x01,0x6b,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x40,
		0xff,0x6d,0x01,0xba,0x01,0xc9,0x06,0x26,0x01,0xa7,0x00,0x00,0x01,0x06,0x03,0x8a,
		0xf8,0x00,0x00,0x0e,0xb4,0x01,0x29,0x00,0x01,0x01,0xb8,0xff,0xdf,0xb0,0x56,0x00,
		0x2b,0x34,0xff,0xff,0x00,0x40,0xff,0xf5,0x01,0xba,0x02,0xaa,0x06,0x26,0x01,0xa7,
		0x00,0x00,0x01,0x06,0x03,0x7c,0xf5,0x00,0x00,0x0b,0xb6,0x01,0x23,0x14,0x01,0x01,
		0x32,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x40,0xff,0xf5,0x01,0xba,0x02,0xc0,
		0x06,0x26,0x01,0xa7,0x00,0x00,0x01,0x06,0x03,0x85,0x0f,0x00,0x00,0x0b,0xb6,0x01,
		0x2a,0x14,0x01,0x01,0x42,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x28,0xff,0xf5,
		0x01,0xdb,0x02,0x1d,0x06,0x26,0x01,0xd4,0x00,0x00,0x01,0x06,0x03,0x89,0xf1,0x00,
		0x00,0x0e,0xb4,0x01,0x27,0x07,0x01,0x01,0xb8,0xff,0xcf,0xb0,0x56,0x00,0x2b,0x34,
		0xff,0xff,0x00,0x28,0xff,0xf5,0x01,0xdb,0x02,0xaa,0x06,0x26,0x01,0xb0,0x00,0x00,
		0x01,0x06,0x03,0x7d,0xe1,0x00,0x00,0x0b,0xb6,0x02,0x2c,0x14,0x01,0x01,0x32,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x28,0xff,0x6d,0x01,0xdb,0x02,0x1d,0x06,0x26,
		0x01,0xb0,0x00,0x00,0x01,0x06,0x03,0x8a,0xed,0x00,0x00,0x0e,0xb4,0x02,0x32,0x00,
		0x01,0x01,0xb8,0xff,0xdf,0xb0,0x56,0x00,0x2b,0x34,0xff,0xff,0x00,0x28,0xff,0xf5,
		0x01,0xdb,0x02,0xaa,0x06,0x26,0x01,0xb0,0x00,0x00,0x01,0x06,0x03,0x7c,0xe1,0x00,
		0x00,0x0b,0xb6,0x02,0x2c,0x14,0x01,0x01,0x32,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x28,0xff,0xf5,0x01,0xdb,0x02,0xc0,0x06,0x26,0x01,0xb0,0x00,0x00,0x01,0x06,
		0x03,0x85,0xfb,0x00,0x00,0x0b,0xb6,0x02,0x33,0x14,0x01,0x01,0x42,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x28,0xff,0xf5,0x01,0xdb,0x02,0xab,0x06,0x26,0x01,0xb0,
		0x00,0x00,0x01,0x06,0x03,0xb4,0xe2,0x00,0x00,0x0b,0xb6,0x02,0x30,0x14,0x01,0x01,
		0x75,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x40,0xff,0xf5,0x01,0xbb,0x02,0xbb,
		0x06,0x26,0x01,0xa7,0x00,0x00,0x01,0x06,0x03,0x7e,0x0b,0x00,0x00,0x0d,0xb7,0x02,
		0x01,0x23,0x14,0x01,0x01,0x41,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x40,
		0xff,0xf5,0x01,0xba,0x02,0x84,0x06,0x26,0x01,0xa7,0x00,0x00,0x01,0x06,0x03,0x87,
		0xf8,0x00,0x00,0x0b,0xb6,0x01,0x23,0x07,0x01,0x01,0x47,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x40,0xff,0xf5,0x01,0xba,0x02,0x6d,0x06,0x26,0x01,0xa7,0x00,0x00,
		0x01,0x06,0x03,0x84,0x00,0x00,0x00,0x0b,0xb6,0x01,0x23,0x07,0x01,0x01,0x6c,0x56,
		0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x40,0xff,0xf5,0x01,0xba,0x03,0x33,0x06,0x26,
		0x01,0xa7,0x00,0x00,0x00,0x26,0x03,0x84,0x00,0x00,0x01,0x07,0x03,0x7a,0xff,0xff,
		0x00,0x9a,0x00,0x17,0x40,0x0f,0x03,0x02,0x27,0x24,0x01,0x01,0x61,0x56,0x01,0x23,
		0x07,0x01,0x01,0x6c,0x56,0x00,0x2b,0x34,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x40,
		0xff,0x1d,0x01,0xba,0x01,0xc9,0x06,0x26,0x01,0xa7,0x00,0x00,0x01,0x07,0x03,0x8e,
		0x00,0x81,0x00,0x00,0x00,0x0b,0xb6,0x01,0x2c,0x1a,0x00,0x00,0x11,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x40,0xff,0xf5,0x01,0xba,0x02,0xb5,0x06,0x26,0x01,0xa7,
		0x00,0x00,0x01,0x06,0x03,0x82,0xf9,0x00,0x00,0x0d,0xb7,0x02,0x01,0x23,0x14,0x01,
		0x01,0x3c,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x40,0xff,0xf5,0x01,0xba,
		0x02,0xab,0x06,0x26,0x01,0xa7,0x00,0x00,0x01,0x06,0x03,0x83,0xf6,0x00,0x00,0x0b,
		0xb6,0x01,0x27,0x14,0x01,0x01,0x75,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x40,
		0xff,0xf5,0x01,0xba,0x03,0x5d,0x06,0x26,0x01,0xa7,0x00,0x00,0x00,0x26,0x03,0x83,
		0xf6,0x00,0x01,0x07,0x03,0x7d,0xff,0xf5,0x00,0xb3,0x00,0x15,0x40,0x0e,0x02,0x3b,
		0x33,0x01,0x00,0x03,0x56,0x01,0x27,0x14,0x01,0x01,0x75,0x56,0x00,0x2b,0x34,0x2b,
		0x34,0x00,0x00,0x01,0x00,0x28,0x00,0x00,0x01,0xc7,0x01,0xc9,0x00,0x0d,0x00,0x15,
		0x40,0x0a,0x04,0x03,0x00,0x09,0x01,0x06,0x72,0x00,0x0a,0x72,0x00,0x2b,0x2b,0x32,
		0x12,0x39,0x39,0x30,0x31,0x73,0x03,0x33,0x13,0x23,0x37,0x36,0x36,0x37,0x33,0x06,
		0x06,0x07,0x03,0xdd,0xb5,0x48,0x94,0x0e,0x51,0x18,0x1d,0x07,0x44,0x08,0x22,0x19,
		0x6f,0x01,0xc9,0xfe,0x89,0xba,0x37,0x5e,0x28,0x2a,0x64,0x3a,0xfe,0xff,0x00,0x01,
		0x00,0x10,0xff,0xff,0x01,0xe1,0x01,0xc9,0x00,0x14,0x00,0x1b,0x40,0x0e,0x03,0x06,
		0x13,0x03,0x00,0x0d,0x04,0x01,0x06,0x72,0x12,0x00,0x0a,0x72,0x00,0x2b,0x32,0x2b,
		0xcc,0x33,0x12,0x17,0x39,0x30,0x31,0x57,0x03,0x33,0x13,0x13,0x33,0x13,0x3e,0x03,
		0x35,0x35,0x33,0x0e,0x02,0x07,0x23,0x03,0x03,0x6c,0x5c,0x3f,0x4a,0x4e,0x2c,0x61,
		0x0d,0x11,0x09,0x03,0x43,0x0a,0x17,0x1b,0x10,0x44,0x54,0x50,0x01,0x01,0xca,0xfe,
		0x91,0x01,0x44,0xfe,0xbd,0x59,0x72,0x49,0x32,0x19,0x0f,0x4d,0x99,0x98,0x4c,0x01,
		0x28,0xfe,0xd8,0x00,0xff,0xff,0x00,0x10,0xff,0xff,0x01,0xe1,0x02,0xaa,0x06,0x26,
		0x01,0xbf,0x00,0x00,0x01,0x06,0x03,0x7d,0xf5,0x00,0x00,0x0b,0xb6,0x01,0x15,0x0c,
		0x01,0x01,0x32,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x10,0xff,0xff,0x01,0xe1,
		0x02,0xad,0x06,0x26,0x01,0xbf,0x00,0x00,0x01,0x06,0x03,0x7f,0x00,0x00,0x00,0x0b,
		0xb6,0x01,0x15,0x01,0x01,0x01,0x36,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x10,
		0xff,0xff,0x01,0xe1,0x02,0x99,0x06,0x26,0x01,0xbf,0x00,0x00,0x01,0x06,0x03,0x7a,
		0xff,0x00,0x00,0x0d,0xb7,0x02,0x01,0x15,0x01,0x01,0x01,0x6b,0x56,0x00,0x2b,0x34,
		0x34,0x00,0xff,0xff,0x00,0x10,0xff,0xff,0x01,0xe1,0x02,0xaa,0x06,0x26,0x01,0xbf,
		0x00,0x00,0x01,0x06,0x03,0x7c,0xf5,0x00,0x00,0x0b,0xb6,0x01,0x15,0x0c,0x01,0x01,
		0x32,0x56,0x00,0x2b,0x34,0x00,0x00,0x01,0x00,0x2f,0x00,0x00,0x01,0xc8,0x01,0xc9,
		0x00,0x0b,0x00,0x1a,0x40,0x0e,0x0a,0x01,0x07,0x04,0x04,0x00,0x06,0x02,0x06,0x72,
		0x09,0x00,0x0a,0x72,0x00,0x2b,0x32,0x2b,0x32,0x12,0x17,0x39,0x30,0x31,0x73,0x37,
		0x27,0x33,0x17,0x37,0x33,0x07,0x17,0x23,0x27,0x07,0x2f,0xa1,0x9e,0x4f,0x77,0x72,
		0x4a,0x94,0xa8,0x52,0x7e,0x77,0xe8,0xe1,0xa9,0xa9,0xde,0xeb,0xb2,0xb2,0x00,0x02,
		0x00,0x16,0xff,0x52,0x01,0xbb,0x01,0xc9,0x00,0x1c,0x00,0x20,0x00,0x1a,0x40,0x0e,
		0x19,0x20,0x10,0x1f,0x04,0x1c,0x15,0x1d,0x06,0x72,0x0c,0x1c,0x0f,0x72,0x00,0x2b,
		0x32,0x2b,0x32,0x12,0x17,0x39,0x30,0x31,0x57,0x22,0x26,0x27,0x37,0x37,0x17,0x16,
		0x16,0x17,0x16,0x16,0x33,0x32,0x36,0x36,0x37,0x13,0x36,0x36,0x37,0x33,0x06,0x06,
		0x07,0x03,0x06,0x06,0x23,0x03,0x33,0x13,0x07,0x7f,0x20,0x35,0x14,0x1f,0x06,0x06,
		0x02,0x0a,0x0e,0x09,0x14,0x0b,0x1b,0x25,0x1c,0x0d,0x57,0x0f,0x1c,0x05,0x48,0x07,
		0x1e,0x11,0x72,0x18,0x4b,0x31,0x51,0x4b,0x94,0x20,0xae,0x14,0x13,0x31,0x09,0x04,
		0x08,0x0b,0x09,0x03,0x03,0x1a,0x36,0x29,0x01,0x0d,0x2e,0x5a,0x2e,0x2e,0x5e,0x2f,
		0xfe,0xbe,0x43,0x37,0x02,0x77,0xfe,0x83,0x59,0x00,0xff,0xff,0x00,0x16,0xff,0x52,
		0x01,0xbb,0x02,0xaa,0x06,0x26,0x01,0xc5,0x00,0x00,0x01,0x06,0x03,0x7d,0xf8,0x00,
		0x00,0x0b,0xb6,0x02,0x21,0x14,0x01,0x01,0x32,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x16,0xff,0x52,0x01,0xbb,0x02,0xad,0x06,0x26,0x01,0xc5,0x00,0x00,0x01,0x06,
		0x03,0x7f,0x03,0x00,0x00,0x0b,0xb6,0x02,0x21,0x1d,0x01,0x01,0x36,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x16,0xff,0x52,0x01,0xbb,0x02,0x99,0x06,0x26,0x01,0xc5,
		0x00,0x00,0x01,0x06,0x03,0x7a,0x02,0x00,0x00,0x0d,0xb7,0x03,0x02,0x21,0x1d,0x01,
		0x01,0x6b,0x56,0x00,0x2b,0x34,0x34,0x00,0xff,0xff,0x00,0x16,0xff,0x52,0x01,0xbb,
		0x02,0x90,0x06,0x26,0x01,0xc5,0x00,0x00,0x01,0x06,0x03,0x7b,0xfe,0x00,0x00,0x0b,
		0xb6,0x02,0x21,0x14,0x01,0x01,0x60,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x16,
		0xff,0x52,0x01,0xbb,0x01,0xc9,0x06,0x26,0x01,0xc5,0x00,0x00,0x01,0x07,0x03,0x8a,
		0x00,0x83,0x00,0x00,0x00,0x0b,0xb6,0x02,0x21,0x1c,0x01,0x01,0x1b,0x56,0x00,0x2b,
		0x34,0x00,0xff,0xff,0x00,0x16,0xff,0x52,0x01,0xbb,0x02,0xaa,0x06,0x26,0x01,0xc5,
		0x00,0x00,0x01,0x06,0x03,0x7c,0xf8,0x00,0x00,0x0b,0xb6,0x02,0x21,0x14,0x01,0x01,
		0x32,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x16,0xff,0x52,0x01,0xbb,0x02,0xc0,
		0x06,0x26,0x01,0xc5,0x00,0x00,0x01,0x06,0x03,0x85,0x12,0x00,0x00,0x0b,0xb6,0x02,
		0x28,0x14,0x01,0x01,0x42,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x16,0xff,0x52,
		0x01,0xbb,0x02,0x6d,0x06,0x26,0x01,0xc5,0x00,0x00,0x01,0x06,0x03,0x84,0x03,0x00,
		0x00,0x0b,0xb6,0x02,0x21,0x1d,0x01,0x01,0x6c,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,
		0x00,0x16,0xff,0x52,0x01,0xbb,0x02,0xab,0x06,0x26,0x01,0xc5,0x00,0x00,0x01,0x06,
		0x03,0x83,0xf9,0x00,0x00,0x0b,0xb6,0x02,0x25,0x14,0x01,0x01,0x75,0x56,0x00,0x2b,
		0x34,0x00,0x00,0x01,0x00,0x32,0x00,0x00,0x01,0xc2,0x01,0xc9,0x00,0x0e,0x00,0x19,
		0x40,0x0c,0x00,0x06,0x06,0x0e,0x0a,0x72,0x05,0x02,0x02,0x03,0x06,0x72,0x00,0x2b,
		0x32,0x11,0x33,0x2b,0x32,0x11,0x33,0x30,0x31,0x77,0x01,0x21,0x35,0x21,0x15,0x01,
		0x21,0x32,0x36,0x37,0x33,0x15,0x15,0x21,0x32,0x01,0x1b,0xfe,0xfa,0x01,0x63,0xfe,
		0xea,0x01,0x02,0x11,0x0e,0x06,0x07,0xfe,0x70,0x31,0x01,0x59,0x3f,0x31,0xfe,0xa6,
		0x04,0x06,0x0a,0x3e,0xff,0xff,0x00,0x32,0x00,0x00,0x01,0xc2,0x02,0xaa,0x06,0x26,
		0x01,0xcf,0x00,0x00,0x01,0x06,0x03,0x7d,0xf5,0x00,0x00,0x0b,0xb6,0x01,0x0f,0x03,
		0x01,0x01,0x32,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x32,0x00,0x00,0x01,0xc2,
		0x02,0xb0,0x06,0x26,0x01,0xcf,0x00,0x00,0x01,0x06,0x03,0x80,0xfa,0x00,0x00,0x0b,
		0xb6,0x01,0x14,0x03,0x01,0x01,0x39,0x56,0x00,0x2b,0x34,0x00,0xff,0xff,0x00,0x32,
		0x00,0x00,0x01,0xc2,0x02,0x90,0x06,0x26,0x01,0xcf,0x00,0x00,0x01,0x06,0x03,0x94,
		0x00,0x00,0x00,0x0b,0xb6,0x01,0x0f,0x03,0x01,0x01,0x60,0x56,0x00,0x2b,0x34,0x00,
		0xff,0xff,0x00,0x32,0xff,0x6d,0x01,0xc2,0x01,0xc9,0x06,0x26,0x01,0xcf,0x00,0x00,
		0x01,0x06,0x03,0x8a,0x0b,0x00,0x00,0x0e,0xb4,0x01,0x15,0x0e,0x01,0x01,0xb8,0xff,
		0xd4,0xb0,0x56,0x00,0x2b,0x34,0x00,0x01,0x00,0x28,0xff,0xf5,0x01,0x8f,0x01,0xc9,
		0x00,0x22,0x00,0x18,0x40,0x0c,0x1a,0x0a,0x15,0x07,0x06,0x72,0x1e,0x0e,0x0e,0x00,
		0x0b,0x72,0x00,0x2b,0x32,0x11,0x33,0x2b,0x32,0x3f,0x30,0x31,0x57,0x22,0x2e,0x03,
		0x35,0x37,0x33,0x15,0x14,0x1e,0x02,0x33,0x32,0x3e,0x02,0x35,0x35,0x33,0x11,0x14,
		0x16,0x17,0x23,0x2e,0x02,0x35,0x0e,0x03,0xbd,0x1a,0x2e,0x25,0x1a,0x0e,0x01,0x42,
		0x10,0x1b,0x24,0x14,0x17,0x2a,0x21,0x13,0x42,0x03,0x07,0x42,0x04,0x04,0x01,0x0a,
		0x1d,0x23,0x28,0x0b,0x10,0x21,0x32,0x46,0x2c,0xff,0xff,0x2b,0x3c,0x24,0x10,0x13,
		0x26,0x3c,0x29,0xfc,0xfe,0x7e,0x12,0x23,0x12,0x0c,0x17,0x18,0x0b,0x13,0x1e,0x15,
		0x0b,0x00,0x00,0x02,0x00,0x4c,0x00,0x9d,0x01,0xa9,0x02,0x74,0x00,0x33,0x00,0x37,
		0x00,0x2c,0x40,0x14,0x37,0x34,0x34,0x00,0x2f,0x18,0x18,0x00,0x10,0x07,0x07,0x00,
		0x2e,0x2e,0x00,0x00,0x21,0x28,0x03,0x72,0x00,0x2b,0x32,0x32,0x2f,0x33,0x2f,0x11,
		0x39,0x2f,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x7d,0x2f,0x33,0x30,0x31,0x53,0x22,
		0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x17,0x17,0x2e,0x02,0x23,0x22,0x06,
		0x06,0x15,0x14,0x16,0x16,0x33,0x32,0x3e,0x02,0x35,0x34,0x26,0x26,0x23,0x22,0x06,
		0x07,0x27,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x15,0x23,0x35,0x0e,0x03,0x07,0x21,
		0x15,0x21,0xdb,0x39,0x3e,0x2d,0x4f,0x32,0x0b,0x18,0x1a,0x0e,0x01,0x0b,0x1a,0x19,
		0x0b,0x24,0x33,0x1c,0x11,0x1e,0x12,0x1b,0x29,0x1c,0x0f,0x15,0x2b,0x21,0x18,0x2c,
		0x14,0x1f,0x19,0x3f,0x23,0x2d,0x43,0x25,0x41,0x0a,0x19,0x1e,0x1e,0x9e,0x01,0x5d,
		0xfe,0xa3,0x01,0x02,0x38,0x2b,0x27,0x38,0x1e,0x01,0x02,0x02,0x2f,0x02,0x02,0x01,
		0x10,0x20,0x19,0x14,0x19,0x0a,0x12,0x23,0x35,0x23,0x32,0x38,0x17,0x11,0x14,0x27,
		0x1a,0x17,0x1e,0x49,0x42,0xc0,0x32,0x12,0x17,0x0d,0x05,0x2f,0x36,0x00,0x00,0x03,
		0x00,0x4c,0x00,0x9d,0x01,0xa9,0x02,0x74,0x00,0x0f,0x00,0x1f,0x00,0x23,0x00,0x18,
		0x40,0x0a,0x23,0x20,0x20,0x10,0x00,0x00,0x18,0x08,0x03,0x72,0x00,0x2b,0x32,0x32,
		0x2f,0x33,0x33,0x7d,0x2f,0x33,0x30,0x31,0x53,0x22,0x26,0x26,0x35,0x34,0x36,0x36,
		0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x36,0x35,0x34,0x26,0x26,
		0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,0x07,0x21,0x15,0x21,0xfa,0x2d,0x47,0x29,
		0x29,0x47,0x2d,0x2e,0x46,0x29,0x29,0x46,0x2e,0x1c,0x29,0x18,0x18,0x2a,0x1b,0x1b,
		0x2a,0x18,0x18,0x2a,0x93,0x01,0x5d,0xfe,0xa3,0x01,0x04,0x2e,0x53,0x37,0x37,0x53,
		0x2e,0x2e,0x53,0x37,0x37,0x53,0x2e,0x34,0x21,0x3c,0x28,0x28,0x3b,0x21,0x21,0x3b,
		0x28,0x28,0x3c,0x21,0x65,0x36,0xff,0xff,0x00,0x48,0x00,0x00,0x01,0xaf,0x01,0xd4,
		0x06,0x06,0x01,0x5a,0x00,0x00,0x00,0x02,0x00,0x32,0x00,0x00,0x01,0xd0,0x02,0x6f,
		0x00,0x0c,0x00,0x14,0x00,0x22,0x40,0x10,0x12,0x0d,0x0d,0x0b,0x0f,0x0f,0x10,0x02,
		0x72,0x14,0x0a,0x00,0x01,0x01,0x09,0x08,0x00,0x3f,0x33,0x11,0x33,0x33,0x33,0x2b,
		0x32,0x11,0x33,0x33,0x11,0x33,0x30,0x31,0x77,0x27,0x21,0x32,0x36,0x37,0x33,0x15,
		0x15,0x21,0x35,0x01,0x33,0x17,0x17,0x21,0x35,0x21,0x15,0x01,0x23,0x58,0x19,0x01,
		0x64,0x11,0x0e,0x06,0x07,0xfe,0x63,0x01,0x16,0x30,0x33,0x1a,0xfe,0x6f,0x01,0x9c,
		0xfe,0xf4,0x32,0x15,0x15,0x04,0x06,0x0a,0x2a,0x31,0x02,0x39,0x11,0x15,0x2b,0x31,
		0xfd,0xd1,0x00,0x03,0x00,0x39,0xff,0xf5,0x01,0xbb,0x02,0x73,0x00,0x03,0x00,0x13,
		0x00,0x23,0x00,0x1d,0x40,0x0e,0x02,0x01,0x01,0x1c,0x0c,0x05,0x72,0x00,0x03,0x03,
		0x14,0x04,0x0d,0x72,0x00,0x2b,0x32,0x32,0x11,0x33,0x2b,0x32,0x32,0x11,0x33,0x30,
		0x31,0x77,0x01,0x17,0x01,0x17,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,
		0x16,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x06,
		0x06,0x15,0x14,0x16,0x16,0x6b,0x01,0x0b,0x17,0xfe,0xf5,0x78,0x3e,0x56,0x2d,0x2d,
		0x56,0x3e,0x3e,0x56,0x2d,0x2d,0x56,0x3e,0x26,0x36,0x1d,0x1d,0x36,0x26,0x26,0x36,
		0x1d,0x1d,0x36,0x9a,0x01,0x57,0x2f,0xfe,0xad,0x7a,0x4a,0x8f,0x66,0x63,0x8f,0x4d,
		0x4d,0x8f,0x63,0x66,0x8f,0x4a,0x3d,0x3c,0x73,0x53,0x4f,0x73,0x40,0x40,0x73,0x4f,
		0x53,0x73,0x3c,0x00,0x00,0x01,0x00,0x58,0x00,0x00,0x01,0x2c,0x02,0x70,0x00,0x06,
		0x00,0x17,0x40,0x0b,0x06,0x0c,0x72,0x02,0x03,0x03,0x01,0x01,0x04,0x04,0x72,0x00,
		0x2b,0x32,0x11,0x33,0x11,0x33,0x2b,0x30,0x31,0x73,0x11,0x07,0x27,0x37,0x33,0x11,
		0xe6,0x7e,0x10,0xa3,0x31,0x02,0x19,0x25,0x27,0x55,0xfd,0x90,0x00,0x01,0x00,0x3a,
		0x00,0x00,0x01,0xb7,0x02,0x73,0x00,0x2b,0x00,0x15,0x40,0x0a,0x00,0x23,0x23,0x2b,
		0x0c,0x72,0x0b,0x19,0x05,0x72,0x00,0x2b,0x32,0x2b,0x32,0x11,0x33,0x30,0x31,0x77,
		0x3e,0x04,0x35,0x34,0x2e,0x02,0x23,0x22,0x06,0x06,0x07,0x06,0x06,0x17,0x07,0x27,
		0x27,0x3e,0x02,0x33,0x32,0x16,0x16,0x15,0x14,0x0e,0x03,0x07,0x33,0x32,0x36,0x37,
		0x33,0x15,0x15,0x21,0x49,0x36,0x5a,0x47,0x32,0x1a,0x10,0x1d,0x27,0x16,0x18,0x2c,
		0x28,0x11,0x09,0x04,0x01,0x04,0x08,0x33,0x14,0x3c,0x4c,0x2b,0x35,0x50,0x2e,0x1e,
		0x34,0x46,0x4f,0x2a,0xe8,0x11,0x0e,0x06,0x07,0xfe,0x92,0x38,0x37,0x5a,0x4d,0x45,
		0x43,0x25,0x20,0x2c,0x1b,0x0c,0x0e,0x1b,0x16,0x0e,0x0f,0x08,0x05,0x05,0x28,0x27,
		0x36,0x1c,0x2b,0x50,0x37,0x29,0x4d,0x4a,0x4a,0x4f,0x2b,0x04,0x06,0x0a,0x3d,0x00,
		0x00,0x01,0x00,0x45,0xff,0xf5,0x01,0xab,0x02,0x73,0x00,0x38,0x00,0x1d,0x40,0x0e,
		0x30,0x16,0x16,0x15,0x15,0x28,0x0c,0x38,0x0d,0x72,0x20,0x28,0x05,0x72,0x00,0x2b,
		0x32,0x2b,0x32,0x11,0x39,0x2f,0x33,0x12,0x39,0x30,0x31,0x57,0x22,0x26,0x27,0x37,
		0x37,0x17,0x16,0x16,0x17,0x16,0x16,0x33,0x32,0x36,0x36,0x35,0x34,0x2e,0x02,0x07,
		0x35,0x32,0x3e,0x02,0x35,0x34,0x2e,0x02,0x23,0x22,0x06,0x06,0x07,0x27,0x36,0x36,
		0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x07,0x1e,0x02,0x15,0x14,0x06,0x06,0x23,
		0xf0,0x31,0x5a,0x20,0x2e,0x07,0x05,0x01,0x06,0x0b,0x11,0x2c,0x1f,0x28,0x34,0x1a,
		0x19,0x2e,0x40,0x28,0x30,0x3d,0x21,0x0c,0x0d,0x17,0x21,0x14,0x14,0x27,0x25,0x12,
		0x2a,0x22,0x51,0x28,0x33,0x48,0x27,0x15,0x2c,0x21,0x23,0x36,0x1e,0x2b,0x53,0x3d,
		0x0b,0x24,0x23,0x37,0x08,0x05,0x08,0x0f,0x0c,0x0f,0x13,0x20,0x39,0x24,0x24,0x32,
		0x1d,0x0b,0x04,0x38,0x14,0x22,0x2d,0x18,0x15,0x22,0x18,0x0d,0x09,0x14,0x11,0x2a,
		0x23,0x1d,0x27,0x46,0x2e,0x20,0x39,0x2a,0x0b,0x0b,0x2b,0x3e,0x2b,0x31,0x53,0x32,
		0x00,0x02,0x00,0x30,0x00,0x00,0x01,0xd8,0x02,0x70,0x00,0x0a,0x00,0x0d,0x00,0x21,
		0x40,0x10,0x03,0x0b,0x0b,0x06,0x06,0x02,0x0d,0x09,0x09,0x04,0x0a,0x0c,0x72,0x04,
		0x04,0x72,0x00,0x2b,0x2b,0x12,0x39,0x2f,0x39,0x33,0x33,0x11,0x33,0x11,0x33,0x30,
		0x31,0x61,0x35,0x21,0x35,0x01,0x33,0x11,0x33,0x15,0x23,0x15,0x25,0x33,0x11,0x01,
		0x3e,0xfe,0xf2,0x01,0x1d,0x3b,0x50,0x50,0xfe,0xf9,0xbd,0x99,0x33,0x01,0xa4,0xfe,
		0x63,0x3b,0x98,0xd4,0x01,0x1e,0x00,0x01,0x00,0x40,0xff,0xf5,0x01,0xbd,0x02,0x6f,
		0x00,0x2d,0x00,0x1d,0x40,0x0e,0x20,0x16,0x16,0x24,0x24,0x1c,0x0c,0x2d,0x0d,0x72,
		0x1f,0x1c,0x04,0x72,0x00,0x2b,0x32,0x2b,0x32,0x12,0x39,0x2f,0x33,0x12,0x39,0x30,
		0x31,0x57,0x22,0x26,0x27,0x37,0x37,0x17,0x06,0x16,0x17,0x16,0x16,0x33,0x32,0x3e,
		0x02,0x35,0x34,0x2e,0x02,0x23,0x22,0x06,0x06,0x07,0x27,0x13,0x21,0x15,0x21,0x07,
		0x3e,0x02,0x33,0x32,0x1e,0x02,0x15,0x14,0x06,0x06,0x23,0xf9,0x39,0x61,0x1f,0x38,
		0x08,0x04,0x01,0x07,0x0a,0x14,0x31,0x24,0x18,0x2c,0x21,0x14,0x14,0x23,0x2e,0x1b,
		0x15,0x2b,0x25,0x10,0x2c,0x15,0x01,0x3c,0xfe,0xff,0x0a,0x11,0x21,0x23,0x11,0x29,
		0x44,0x33,0x1c,0x34,0x58,0x38,0x0b,0x32,0x2e,0x2a,0x06,0x05,0x08,0x0e,0x0d,0x16,
		0x15,0x15,0x26,0x38,0x22,0x23,0x37,0x26,0x14,0x0e,0x1a,0x13,0x12,0x01,0x3d,0x3f,
		0xb3,0x08,0x0b,0x05,0x1d,0x37,0x4d,0x30,0x40,0x5d,0x32,0x00,0x00,0x02,0x00,0x43,
		0xff,0xf6,0x01,0xb7,0x02,0x76,0x00,0x28,0x00,0x3d,0x00,0x1d,0x40,0x0e,0x1b,0x33,
		0x33,0x1f,0x1f,0x08,0x3d,0x28,0x0d,0x72,0x15,0x08,0x05,0x72,0x00,0x2b,0x32,0x2b,
		0x32,0x12,0x39,0x2f,0x33,0x11,0x33,0x30,0x31,0x45,0x22,0x26,0x26,0x35,0x34,0x36,
		0x36,0x33,0x32,0x16,0x17,0x07,0x07,0x27,0x26,0x26,0x27,0x2e,0x02,0x23,0x22,0x0e,
		0x03,0x07,0x3e,0x02,0x33,0x32,0x1e,0x02,0x15,0x14,0x06,0x06,0x23,0x37,0x32,0x3e,
		0x02,0x35,0x34,0x2e,0x02,0x23,0x22,0x0e,0x02,0x07,0x06,0x1e,0x02,0x33,0x01,0x05,
		0x3e,0x57,0x2d,0x37,0x63,0x42,0x27,0x45,0x1d,0x2c,0x07,0x05,0x01,0x07,0x0d,0x08,
		0x12,0x14,0x0c,0x10,0x28,0x28,0x23,0x15,0x01,0x0e,0x2a,0x32,0x1a,0x23,0x3e,0x2f,
		0x1b,0x30,0x50,0x32,0x03,0x15,0x27,0x1e,0x11,0x13,0x20,0x27,0x13,0x12,0x23,0x20,
		0x1b,0x0a,0x04,0x0d,0x21,0x32,0x20,0x0a,0x48,0x84,0x5a,0x70,0x9a,0x50,0x1c,0x1d,
		0x32,0x08,0x05,0x08,0x0e,0x0b,0x06,0x06,0x03,0x0c,0x1e,0x36,0x55,0x3c,0x18,0x21,
		0x12,0x1d,0x36,0x4b,0x2e,0x3e,0x5e,0x34,0x3e,0x13,0x24,0x36,0x24,0x26,0x36,0x23,
		0x11,0x0d,0x17,0x1e,0x12,0x22,0x48,0x3d,0x26,0x00,0x00,0x01,0x00,0x4f,0x00,0x00,
		0x01,0xb0,0x02,0x6f,0x00,0x0d,0x00,0x13,0x40,0x09,0x08,0x05,0x05,0x06,0x04,0x72,
		0x00,0x0c,0x72,0x00,0x2b,0x2b,0x32,0x11,0x33,0x30,0x31,0x73,0x3e,0x02,0x37,0x21,
		0x35,0x21,0x15,0x0e,0x03,0x07,0x9b,0x1d,0x3d,0x41,0x23,0xfe,0xf6,0x01,0x61,0x1c,
		0x36,0x32,0x2d,0x15,0x60,0xb9,0xb8,0x5c,0x42,0x27,0x48,0x90,0x92,0x93,0x4b,0x00,
		0x00,0x03,0x00,0x3c,0xff,0xf6,0x01,0xb9,0x02,0x77,0x00,0x21,0x00,0x33,0x00,0x45,
		0x00,0x1a,0x40,0x0e,0x2b,0x08,0x19,0x34,0x04,0x00,0x3d,0x10,0x05,0x72,0x22,0x00,
		0x0d,0x72,0x00,0x2b,0x32,0x2b,0x32,0x12,0x17,0x39,0x30,0x31,0x57,0x22,0x26,0x26,
		0x35,0x34,0x36,0x36,0x37,0x2e,0x02,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x15,
		0x14,0x0e,0x02,0x07,0x1e,0x03,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x36,0x35,0x34,
		0x2e,0x02,0x27,0x0e,0x03,0x15,0x14,0x16,0x16,0x13,0x3e,0x03,0x35,0x34,0x26,0x26,
		0x23,0x22,0x06,0x06,0x15,0x14,0x1e,0x02,0xfa,0x3b,0x55,0x2e,0x1f,0x38,0x26,0x1c,
		0x2b,0x18,0x25,0x49,0x37,0x3a,0x48,0x23,0x0e,0x1a,0x24,0x17,0x1b,0x2c,0x20,0x11,
		0x2f,0x55,0x39,0x27,0x34,0x1b,0x13,0x23,0x31,0x1e,0x16,0x27,0x1c,0x10,0x1c,0x36,
		0x35,0x12,0x1f,0x17,0x0d,0x16,0x2c,0x21,0x21,0x2a,0x15,0x11,0x1e,0x28,0x0a,0x2d,
		0x4c,0x2e,0x24,0x42,0x37,0x11,0x0f,0x2d,0x38,0x1e,0x2b,0x45,0x2a,0x28,0x43,0x29,
		0x16,0x2c,0x27,0x21,0x0c,0x0c,0x25,0x2d,0x33,0x1b,0x31,0x4d,0x2d,0x3f,0x1d,0x31,
		0x1e,0x17,0x2b,0x25,0x1e,0x09,0x09,0x1d,0x25,0x29,0x17,0x1e,0x32,0x1f,0x01,0x31,
		0x0a,0x1c,0x20,0x23,0x12,0x18,0x29,0x1a,0x19,0x28,0x17,0x17,0x24,0x1d,0x1a,0x00,
		0x00,0x01,0x00,0x44,0xff,0xf6,0x01,0xb7,0x02,0x73,0x00,0x3a,0x00,0x19,0x40,0x0c,
		0x1f,0x28,0x28,0x32,0x0c,0x3a,0x0d,0x72,0x15,0x32,0x05,0x72,0x00,0x2b,0x32,0x2b,
		0x32,0x12,0x39,0x2f,0x33,0x30,0x31,0x57,0x22,0x26,0x27,0x37,0x37,0x17,0x16,0x16,
		0x17,0x16,0x16,0x33,0x32,0x3e,0x02,0x35,0x34,0x26,0x26,0x23,0x22,0x0e,0x02,0x15,
		0x14,0x1e,0x02,0x33,0x32,0x36,0x36,0x37,0x17,0x0e,0x02,0x23,0x22,0x2e,0x02,0x35,
		0x34,0x3e,0x02,0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x07,0xe4,0x2e,0x4a,0x1d,
		0x2b,0x07,0x05,0x01,0x08,0x0c,0x0e,0x20,0x15,0x28,0x39,0x24,0x11,0x1a,0x36,0x2a,
		0x19,0x2a,0x1f,0x10,0x12,0x20,0x29,0x17,0x23,0x31,0x28,0x12,0x05,0x13,0x2a,0x35,
		0x22,0x27,0x42,0x31,0x1b,0x1c,0x31,0x41,0x25,0x3b,0x56,0x2f,0x33,0x5e,0x42,0x0a,
		0x1d,0x1c,0x31,0x08,0x05,0x08,0x0d,0x0b,0x09,0x08,0x2e,0x4e,0x60,0x32,0x53,0x6d,
		0x36,0x13,0x25,0x34,0x21,0x1e,0x2f,0x21,0x12,0x10,0x24,0x1d,0x47,0x15,0x20,0x12,
		0x1b,0x32,0x45,0x2a,0x2c,0x4a,0x37,0x1e,0x44,0x77,0x4d,0x7e,0xa4,0x51,0x02,0x00,
		0x00,0x03,0x00,0x39,0xff,0xf5,0x01,0xbb,0x02,0x73,0x00,0x0b,0x00,0x1b,0x00,0x2b,
		0x00,0x19,0x40,0x0c,0x06,0x00,0x00,0x0c,0x24,0x14,0x05,0x72,0x1c,0x0c,0x0d,0x72,
		0x00,0x2b,0x32,0x2b,0x32,0x12,0x39,0x2f,0x33,0x30,0x31,0x53,0x22,0x26,0x35,0x34,
		0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x03,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,
		0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,
		0x22,0x06,0x06,0x15,0x14,0x16,0x16,0xfa,0x19,0x22,0x24,0x17,0x17,0x25,0x23,0x19,
		0x3e,0x56,0x2d,0x2d,0x56,0x3e,0x3e,0x56,0x2d,0x2d,0x56,0x3e,0x26,0x36,0x1d,0x1d,
		0x36,0x26,0x26,0x36,0x1d,0x1d,0x36,0x01,0x00,0x21,0x18,0x18,0x21,0x21,0x18,0x17,
		0x22,0xfe,0xf5,0x4a,0x8f,0x66,0x63,0x8f,0x4d,0x4d,0x8f,0x63,0x66,0x8f,0x4a,0x3d,
		0x3c,0x73,0x53,0x4f,0x73,0x40,0x40,0x73,0x4f,0x53,0x73,0x3c,0x00,0x02,0x00,0x39,
		0xff,0xf5,0x01,0xbb,0x02,0x73,0x00,0x0f,0x00,0x1f,0x00,0x10,0xb7,0x18,0x08,0x05,
		0x72,0x10,0x00,0x0d,0x72,0x00,0x2b,0x32,0x2b,0x32,0x30,0x31,0x57,0x22,0x26,0x26,
		0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x36,
		0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,0xfa,0x3e,0x56,0x2d,
		0x2d,0x56,0x3e,0x3e,0x56,0x2d,0x2d,0x56,0x3e,0x26,0x36,0x1d,0x1d,0x36,0x26,0x26,
		0x36,0x1d,0x1d,0x36,0x0b,0x4a,0x8f,0x66,0x63,0x8f,0x4d,0x4d,0x8f,0x63,0x66,0x8f,
		0x4a,0x3d,0x3c,0x73,0x53,0x4f,0x73,0x40,0x40,0x73,0x4f,0x53,0x73,0x3c,0xff,0xff,
		0x00,0x72,0xff,0xf3,0x01,0x82,0x01,0x80,0x06,0x07,0x02,0x03,0x00,0x00,0xff,0x04,
		0xff,0xff,0x00,0x88,0xff,0xef,0x01,0x20,0x01,0x72,0x06,0x07,0x02,0x04,0x00,0x00,
		0xfe,0xf9,0xff,0xff,0x00,0x73,0xff,0xf9,0x01,0x7d,0x01,0x7f,0x06,0x07,0x02,0x05,
		0x00,0x00,0xff,0x03,0xff,0xff,0x00,0x79,0xff,0xea,0x01,0x76,0x01,0x77,0x06,0x07,
		0x02,0x06,0x00,0x00,0xfe,0xfb,0xff,0xff,0x00,0x6e,0xff,0xfa,0x01,0x92,0x01,0x7d,
		0x06,0x07,0x02,0x07,0x00,0x00,0xff,0x04,0xff,0xff,0x00,0x79,0xff,0xf3,0x01,0x83,
		0x01,0x7c,0x06,0x07,0x02,0x08,0x00,0x00,0xff,0x04,0xff,0xff,0x00,0x7a,0xff,0xf4,
		0x01,0x7e,0x01,0x81,0x06,0x07,0x02,0x09,0x00,0x00,0xff,0x04,0xff,0xff,0x00,0x82,
		0xff,0xfa,0x01,0x79,0x01,0x7c,0x06,0x07,0x02,0x0a,0x00,0x00,0xff,0x04,0xff,0xff,
		0x00,0x75,0xff,0xf4,0x01,0x80,0x01,0x82,0x06,0x07,0x02,0x0b,0x00,0x00,0xff,0x04,
		0xff,0xff,0x00,0x79,0xff,0xf4,0x01,0x7d,0x01,0x80,0x06,0x07,0x02,0x0c,0x00,0x00,
		0xff,0x04,0xff,0xff,0x00,0x72,0xff,0xf3,0x01,0x82,0x01,0x80,0x06,0x06,0x01,0xe5,
		0x00,0x00,0xff,0xff,0x00,0x88,0xff,0xef,0x01,0x20,0x01,0x72,0x06,0x06,0x01,0xe6,
		0x00,0x00,0xff,0xff,0x00,0x73,0xff,0xf9,0x01,0x7d,0x01,0x7f,0x06,0x07,0x02,0x05,
		0x00,0x00,0xff,0x03,0xff,0xff,0x00,0x79,0xff,0xd7,0x01,0x76,0x01,0x64,0x06,0x07,
		0x02,0x06,0x00,0x00,0xfe,0xe8,0xff,0xff,0x00,0x6e,0xff,0xfa,0x01,0x92,0x01,0x7d,
		0x06,0x07,0x02,0x07,0x00,0x00,0xff,0x04,0xff,0xff,0x00,0x79,0xff,0xf3,0x01,0x83,
		0x01,0x7c,0x06,0x06,0x01,0xea,0x00,0x00,0xff,0xff,0x00,0x7a,0xff,0xf4,0x01,0x7e,
		0x01,0x81,0x06,0x06,0x01,0xeb,0x00,0x00,0xff,0xff,0x00,0x82,0xff,0xfa,0x01,0x79,
		0x01,0x7c,0x06,0x06,0x01,0xec,0x00,0x00,0xff,0xff,0x00,0x75,0xff,0xf4,0x01,0x80,
		0x01,0x82,0x06,0x06,0x01,0xed,0x00,0x00,0xff,0xff,0x00,0x79,0xff,0xf4,0x01,0x7d,
		0x01,0x80,0x06,0x06,0x01,0xee,0x00,0x00,0xff,0xff,0x00,0x72,0x00,0xef,0x01,0x82,
		0x02,0x7c,0x06,0x06,0x02,0x03,0x00,0x00,0xff,0xff,0x00,0x88,0x00,0xf6,0x01,0x20,
		0x02,0x79,0x06,0x06,0x02,0x04,0x00,0x00,0xff,0xff,0x00,0x73,0x00,0xf6,0x01,0x7d,
		0x02,0x7c,0x06,0x06,0x02,0x05,0x00,0x00,0xff,0xff,0x00,0x79,0x00,0xef,0x01,0x76,
		0x02,0x7c,0x06,0x06,0x02,0x06,0x00,0x00,0xff,0xff,0x00,0x6e,0x00,0xf6,0x01,0x92,
		0x02,0x79,0x06,0x06,0x02,0x07,0x00,0x00,0xff,0xff,0x00,0x79,0x00,0xef,0x01,0x83,
		0x02,0x78,0x06,0x06,0x02,0x08,0x00,0x00,0xff,0xff,0x00,0x7a,0x00,0xf0,0x01,0x7e,
		0x02,0x7d,0x06,0x06,0x02,0x09,0x00,0x00,0xff,0xff,0x00,0x82,0x00,0xf6,0x01,0x79,
		0x02,0x78,0x06,0x06,0x02,0x0a,0x00,0x00,0xff,0xff,0x00,0x75,0x00,0xf0,0x01,0x80,
		0x02,0x7e,0x06,0x06,0x02,0x0b,0x00,0x00,0xff,0xff,0x00,0x79,0x00,0xf0,0x01,0x7d,
		0x02,0x7c,0x06,0x06,0x02,0x0c,0x00,0x00,0x00,0x03,0x00,0x72,0x00,0xef,0x01,0x82,
		0x02,0x7c,0x00,0x03,0x00,0x13,0x00,0x21,0x00,0x17,0x40,0x0c,0x03,0x00,0x02,0x01,
		0x04,0x14,0x04,0x77,0x1b,0x0c,0x05,0x72,0x00,0x2b,0x32,0xe4,0x32,0x17,0x39,0x30,
		0x31,0x53,0x37,0x17,0x07,0x17,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,
		0x16,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,
		0x15,0x14,0x16,0x98,0xb6,0x0f,0xb6,0x53,0x2b,0x3d,0x20,0x20,0x3d,0x2b,0x2b,0x3d,
		0x20,0x20,0x3d,0x2b,0x27,0x2b,0x13,0x25,0x1a,0x1a,0x25,0x13,0x2b,0x01,0x5d,0xce,
		0x24,0xcc,0x4c,0x2e,0x59,0x3f,0x3e,0x59,0x30,0x30,0x59,0x3e,0x3f,0x59,0x2e,0x2d,
		0x50,0x49,0x2f,0x45,0x25,0x25,0x45,0x2f,0x49,0x50,0x00,0x01,0x00,0x88,0x00,0xf6,
		0x01,0x20,0x02,0x79,0x00,0x06,0x00,0x16,0x40,0x0a,0x03,0x02,0x02,0x01,0x01,0x00,
		0x77,0x04,0x04,0x72,0x00,0x2b,0xed,0x33,0x11,0x33,0x11,0x33,0x30,0x31,0x77,0x11,
		0x07,0x27,0x37,0x33,0x11,0xe8,0x53,0x0d,0x6f,0x29,0xf6,0x01,0x44,0x18,0x21,0x36,
		0xfe,0x7d,0x00,0x01,0x00,0x73,0x00,0xf6,0x01,0x7d,0x02,0x7c,0x00,0x26,0x00,0x14,
		0x40,0x09,0x00,0x1e,0x1e,0x26,0x77,0x09,0x15,0x05,0x72,0x00,0x2b,0x32,0xe4,0x32,
		0x11,0x33,0x30,0x31,0x53,0x3e,0x03,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x07,0x06,
		0x06,0x17,0x07,0x27,0x27,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x0e,0x02,0x07,
		0x33,0x32,0x36,0x37,0x33,0x15,0x15,0x23,0x7e,0x2f,0x49,0x33,0x1b,0x12,0x20,0x14,
		0x14,0x25,0x0f,0x0a,0x07,0x01,0x04,0x08,0x27,0x16,0x48,0x2d,0x24,0x39,0x20,0x1c,
		0x30,0x3f,0x24,0x85,0x11,0x0e,0x06,0x07,0xff,0x01,0x1f,0x2b,0x41,0x35,0x32,0x1b,
		0x18,0x1c,0x0c,0x0c,0x0c,0x0d,0x0e,0x08,0x05,0x06,0x1f,0x23,0x27,0x1b,0x31,0x23,
		0x1f,0x38,0x37,0x3a,0x21,0x04,0x06,0x0a,0x2e,0x00,0x00,0x01,0x00,0x79,0x00,0xef,
		0x01,0x76,0x02,0x7c,0x00,0x32,0x00,0x1d,0x40,0x0e,0x2a,0x14,0x14,0x13,0x13,0x24,
		0x32,0x0c,0x1d,0x32,0x77,0x24,0x05,0x72,0x00,0x2b,0xe4,0x33,0x3f,0x12,0x39,0x2f,
		0x33,0x12,0x39,0x30,0x31,0x77,0x22,0x26,0x27,0x37,0x37,0x17,0x16,0x16,0x17,0x16,
		0x16,0x33,0x32,0x36,0x35,0x34,0x26,0x26,0x07,0x35,0x32,0x3e,0x02,0x35,0x34,0x26,
		0x26,0x23,0x22,0x06,0x07,0x27,0x36,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x07,0x1e,
		0x02,0x15,0x14,0x06,0x06,0x23,0xf2,0x23,0x40,0x16,0x21,0x07,0x05,0x01,0x08,0x0d,
		0x0b,0x19,0x10,0x26,0x28,0x1d,0x35,0x25,0x20,0x29,0x18,0x09,0x10,0x1b,0x12,0x15,
		0x27,0x11,0x22,0x17,0x3b,0x1d,0x35,0x40,0x22,0x1f,0x16,0x23,0x15,0x1f,0x3a,0x2b,
		0xef,0x17,0x16,0x28,0x08,0x05,0x08,0x0c,0x0b,0x05,0x07,0x28,0x1f,0x1c,0x20,0x0d,
		0x03,0x2b,0x0a,0x13,0x1a,0x0e,0x11,0x17,0x0d,0x0d,0x10,0x21,0x17,0x13,0x36,0x2b,
		0x1f,0x2f,0x0a,0x07,0x19,0x27,0x1b,0x20,0x34,0x1e,0x00,0x02,0x00,0x6e,0x00,0xf6,
		0x01,0x92,0x02,0x79,0x00,0x0a,0x00,0x0d,0x00,0x1f,0x40,0x0e,0x03,0x06,0x06,0x0c,
		0x0c,0x09,0x0d,0x04,0x01,0x01,0x00,0x77,0x04,0x05,0x00,0x3f,0xed,0x39,0x2f,0x12,
		0x39,0x33,0x33,0x11,0x33,0x11,0x33,0x30,0x31,0x65,0x35,0x23,0x35,0x13,0x33,0x15,
		0x33,0x15,0x23,0x15,0x27,0x33,0x35,0x01,0x22,0xb4,0xc0,0x2c,0x38,0x38,0xad,0x76,
		0xf6,0x5d,0x25,0x01,0x01,0xf9,0x2e,0x5c,0x8a,0x9f,0x00,0x01,0x00,0x79,0x00,0xef,
		0x01,0x83,0x02,0x78,0x00,0x2a,0x00,0x17,0x40,0x0a,0x0c,0x1e,0x14,0x21,0x21,0x2a,
		0x77,0x1d,0x1a,0x05,0x00,0x3f,0x33,0xe4,0x39,0x2f,0x33,0x33,0x32,0x30,0x31,0x77,
		0x22,0x26,0x27,0x37,0x37,0x17,0x06,0x16,0x17,0x16,0x16,0x33,0x32,0x36,0x36,0x35,
		0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x07,0x27,0x37,0x33,0x15,0x23,0x07,0x36,0x36,
		0x33,0x32,0x1e,0x02,0x15,0x14,0x06,0x06,0x23,0xfa,0x28,0x45,0x14,0x29,0x08,0x04,
		0x01,0x09,0x0c,0x0b,0x1d,0x12,0x15,0x25,0x16,0x16,0x26,0x18,0x0e,0x1c,0x19,0x0a,
		0x23,0x0e,0xdc,0xad,0x06,0x0f,0x24,0x11,0x1c,0x2f,0x22,0x13,0x24,0x3e,0x27,0xef,
		0x1f,0x1d,0x20,0x07,0x06,0x08,0x0c,0x0c,0x07,0x08,0x14,0x26,0x1a,0x1b,0x26,0x14,
		0x08,0x0f,0x0b,0x0c,0xc8,0x2e,0x66,0x08,0x07,0x11,0x22,0x30,0x1e,0x29,0x3b,0x1f,
		0x00,0x02,0x00,0x7a,0x00,0xf0,0x01,0x7e,0x02,0x7d,0x00,0x24,0x00,0x36,0x00,0x16,
		0x40,0x0a,0x2e,0x1c,0x1c,0x36,0x24,0x77,0x13,0x07,0x05,0x72,0x00,0x2b,0x32,0xe4,
		0x32,0x39,0x2f,0x33,0x30,0x31,0x65,0x22,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,
		0x17,0x07,0x07,0x27,0x26,0x26,0x27,0x26,0x26,0x23,0x22,0x0e,0x02,0x07,0x3e,0x02,
		0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x23,0x37,0x32,0x36,0x36,0x35,0x34,0x2e,
		0x02,0x23,0x22,0x06,0x06,0x07,0x06,0x16,0x16,0x33,0x01,0x01,0x41,0x46,0x26,0x45,
		0x2e,0x1b,0x32,0x15,0x20,0x07,0x05,0x01,0x0b,0x0e,0x06,0x0c,0x07,0x0e,0x22,0x1f,
		0x15,0x02,0x0a,0x1c,0x21,0x11,0x21,0x35,0x20,0x21,0x38,0x24,0x02,0x13,0x1f,0x14,
		0x0d,0x15,0x19,0x0c,0x0f,0x1e,0x1a,0x09,0x02,0x12,0x27,0x1a,0xf0,0x63,0x53,0x45,
		0x60,0x32,0x11,0x13,0x24,0x08,0x05,0x08,0x09,0x08,0x02,0x01,0x0a,0x1d,0x35,0x2a,
		0x0d,0x13,0x0a,0x1f,0x38,0x28,0x26,0x3c,0x21,0x2e,0x14,0x25,0x1b,0x15,0x1f,0x14,
		0x0a,0x0d,0x15,0x0e,0x1d,0x36,0x23,0x00,0x00,0x01,0x00,0x82,0x00,0xf6,0x01,0x79,
		0x02,0x78,0x00,0x0c,0x00,0x11,0xb7,0x08,0x05,0x05,0x00,0x77,0x06,0x04,0x72,0x00,
		0x2b,0xe4,0x33,0x11,0x33,0x30,0x31,0x77,0x3e,0x02,0x37,0x23,0x35,0x33,0x15,0x0e,
		0x02,0x07,0xb4,0x14,0x2a,0x2d,0x17,0xb4,0xf7,0x1a,0x30,0x2c,0x13,0xf6,0x3a,0x71,
		0x6f,0x37,0x31,0x1e,0x3a,0x75,0x77,0x3e,0x00,0x03,0x00,0x75,0x00,0xf0,0x01,0x80,
		0x02,0x7e,0x00,0x1c,0x00,0x2c,0x00,0x3c,0x00,0x17,0x40,0x0c,0x07,0x2d,0x15,0x25,
		0x04,0x1d,0x00,0x77,0x35,0x0e,0x05,0x72,0x00,0x2b,0x32,0xe4,0x32,0x17,0x39,0x30,
		0x31,0x77,0x22,0x26,0x35,0x34,0x36,0x36,0x37,0x2e,0x02,0x35,0x34,0x36,0x33,0x32,
		0x16,0x15,0x14,0x06,0x06,0x07,0x1e,0x02,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x36,
		0x35,0x34,0x26,0x26,0x27,0x0e,0x02,0x15,0x14,0x16,0x16,0x37,0x3e,0x02,0x35,0x34,
		0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,0xfa,0x3d,0x48,0x14,0x25,0x19,
		0x13,0x1c,0x0f,0x3c,0x39,0x3b,0x39,0x0f,0x1c,0x14,0x18,0x22,0x13,0x21,0x3c,0x28,
		0x19,0x23,0x12,0x16,0x28,0x1b,0x13,0x1f,0x12,0x14,0x23,0x23,0x10,0x18,0x0f,0x0f,
		0x1d,0x15,0x14,0x1d,0x0e,0x14,0x21,0xf0,0x3c,0x2c,0x18,0x28,0x21,0x0b,0x09,0x1c,
		0x21,0x12,0x29,0x39,0x37,0x27,0x13,0x23,0x1d,0x0a,0x0a,0x20,0x27,0x17,0x1f,0x30,
		0x1c,0x2f,0x10,0x1c,0x11,0x12,0x20,0x19,0x07,0x08,0x18,0x1e,0x12,0x12,0x1d,0x10,
		0xb6,0x09,0x16,0x1b,0x0e,0x0e,0x17,0x0e,0x0e,0x16,0x0d,0x12,0x1a,0x14,0x00,0x01,
		0x00,0x79,0x00,0xf0,0x01,0x7d,0x02,0x7c,0x00,0x32,0x00,0x14,0x40,0x09,0x1c,0x24,
		0x24,0x32,0x77,0x14,0x2c,0x05,0x72,0x00,0x2b,0x32,0xe4,0x39,0x2f,0x33,0x30,0x31,
		0x77,0x22,0x26,0x27,0x37,0x37,0x17,0x16,0x16,0x17,0x16,0x16,0x33,0x32,0x36,0x36,
		0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,0x33,0x32,0x36,0x36,
		0x37,0x17,0x06,0x06,0x23,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x15,
		0x14,0x06,0x07,0xea,0x1f,0x36,0x16,0x20,0x07,0x05,0x01,0x0b,0x0d,0x08,0x10,0x0a,
		0x22,0x2b,0x16,0x11,0x24,0x1b,0x16,0x22,0x13,0x15,0x22,0x14,0x16,0x20,0x1b,0x0b,
		0x05,0x12,0x30,0x21,0x24,0x39,0x21,0x22,0x3b,0x23,0x3f,0x45,0x4d,0x46,0xf0,0x10,
		0x13,0x27,0x08,0x05,0x08,0x0a,0x09,0x02,0x03,0x2c,0x48,0x29,0x34,0x41,0x1f,0x13,
		0x25,0x1b,0x17,0x21,0x11,0x09,0x15,0x11,0x33,0x13,0x17,0x1e,0x36,0x24,0x25,0x3a,
		0x21,0x5c,0x4d,0x72,0x70,0x01,0x00,0x01,0x00,0x4c,0xff,0xd6,0x01,0xb5,0x02,0x99,
		0x00,0x03,0x00,0x0c,0xb3,0x03,0x02,0x01,0x00,0x00,0x2f,0x32,0x2f,0x33,0x30,0x31,
		0x57,0x27,0x01,0x17,0x7b,0x2f,0x01,0x39,0x30,0x2a,0x1a,0x02,0xa9,0x1b,0x00,0x03,
		0x00,0x12,0xff,0xba,0x01,0xe5,0x02,0xae,0x00,0x06,0x00,0x24,0x00,0x28,0x00,0x37,
		0x40,0x19,0x26,0x25,0x25,0x07,0x08,0x22,0x22,0x07,0x11,0x19,0x19,0x07,0x28,0x27,
		0x27,0x04,0x02,0x01,0x01,0x03,0x03,0x04,0x00,0x00,0x04,0x00,0x2f,0x33,0x2f,0x11,
		0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x2f,0x33,0x2f,0x33,0x2f,0x33,0x11,0x33,0x11,
		0x33,0x11,0x33,0x2f,0x33,0x30,0x31,0x53,0x35,0x07,0x27,0x37,0x33,0x11,0x13,0x35,
		0x3e,0x03,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x07,0x27,0x36,0x36,0x33,0x32,
		0x16,0x16,0x15,0x14,0x0e,0x02,0x07,0x33,0x15,0x25,0x27,0x01,0x17,0x5d,0x40,0x0b,
		0x58,0x25,0x89,0x26,0x3a,0x27,0x15,0x0e,0x18,0x10,0x10,0x1c,0x17,0x09,0x22,0x11,
		0x3a,0x23,0x1d,0x2e,0x1b,0x15,0x24,0x31,0x1c,0x87,0xfe,0x96,0x2f,0x01,0x39,0x30,
		0x01,0x7c,0xfc,0x14,0x1f,0x2b,0xfe,0xce,0xfe,0x3e,0x24,0x23,0x33,0x28,0x26,0x15,
		0x11,0x14,0x09,0x09,0x13,0x10,0x1b,0x1c,0x1f,0x15,0x28,0x1b,0x19,0x2b,0x29,0x2d,
		0x1a,0x29,0x1c,0x1a,0x02,0xa9,0x1b,0x00,0x00,0x04,0x00,0x12,0xff,0xba,0x01,0xea,
		0x02,0xae,0x00,0x06,0x00,0x11,0x00,0x14,0x00,0x18,0x00,0x41,0x40,0x1e,0x16,0x15,
		0x15,0x07,0x0d,0x0a,0x13,0x13,0x10,0x14,0x0b,0x08,0x08,0x07,0x0b,0x0b,0x07,0x18,
		0x17,0x17,0x04,0x02,0x01,0x01,0x03,0x03,0x04,0x00,0x00,0x04,0x00,0x2f,0x33,0x2f,
		0x11,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x2f,0x33,0x2f,0x33,0x2f,0x12,0x39,0x2f,
		0x12,0x39,0x33,0x33,0x11,0x33,0x33,0x11,0x33,0x2f,0x33,0x30,0x31,0x53,0x35,0x07,
		0x27,0x37,0x33,0x11,0x13,0x35,0x23,0x35,0x37,0x33,0x15,0x33,0x15,0x23,0x15,0x27,
		0x33,0x35,0x05,0x27,0x01,0x17,0x5d,0x40,0x0b,0x58,0x25,0xfd,0x8b,0x96,0x26,0x2d,
		0x2d,0x85,0x55,0xfe,0xee,0x2f,0x01,0x39,0x30,0x01,0x7c,0xfc,0x14,0x1f,0x2b,0xfe,
		0xce,0xfe,0x3e,0x49,0x20,0xc9,0xc2,0x28,0x48,0x70,0x74,0xc8,0x1a,0x02,0xa9,0x1b,
		0x00,0x04,0x00,0x05,0xff,0xba,0x01,0xea,0x02,0xb1,0x00,0x30,0x00,0x3b,0x00,0x3e,
		0x00,0x42,0x00,0x3d,0x40,0x1d,0x40,0x3f,0x3f,0x3b,0x33,0x36,0x36,0x39,0x39,0x3c,
		0x3d,0x34,0x31,0x31,0x3b,0x34,0x34,0x3b,0x42,0x41,0x41,0x13,0x2a,0x14,0x03,0x24,
		0x30,0x30,0x24,0x00,0x2f,0x33,0x2f,0x12,0x17,0x39,0x32,0x2f,0x33,0x2f,0x33,0x2f,
		0x12,0x39,0x2f,0x12,0x39,0x33,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x2f,0x33,0x30,
		0x31,0x53,0x22,0x26,0x27,0x37,0x37,0x17,0x16,0x16,0x17,0x16,0x16,0x33,0x32,0x36,
		0x35,0x34,0x26,0x26,0x07,0x35,0x32,0x3e,0x02,0x35,0x34,0x26,0x26,0x23,0x22,0x06,
		0x07,0x27,0x36,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x07,0x16,0x16,0x15,0x14,0x06,
		0x23,0x01,0x23,0x35,0x37,0x33,0x15,0x33,0x15,0x23,0x15,0x23,0x37,0x35,0x07,0x07,
		0x27,0x01,0x17,0x67,0x1c,0x35,0x11,0x1c,0x07,0x05,0x01,0x0a,0x0d,0x06,0x10,0x0a,
		0x1d,0x1e,0x16,0x29,0x1d,0x19,0x20,0x12,0x08,0x0c,0x15,0x0e,0x10,0x1f,0x0e,0x1d,
		0x13,0x30,0x17,0x2c,0x34,0x1c,0x17,0x19,0x24,0x38,0x33,0x01,0x25,0x8b,0x96,0x26,
		0x2d,0x2d,0x31,0x01,0x55,0xbd,0x2f,0x01,0x39,0x30,0x01,0x76,0x12,0x12,0x24,0x08,
		0x04,0x08,0x0c,0x0a,0x03,0x03,0x1d,0x17,0x16,0x19,0x09,0x03,0x26,0x07,0x0f,0x12,
		0x0a,0x0d,0x12,0x0a,0x0a,0x0d,0x1d,0x13,0x10,0x2b,0x23,0x19,0x24,0x08,0x07,0x26,
		0x21,0x25,0x35,0xfe,0x8d,0x20,0xc9,0xc2,0x28,0x48,0x70,0x74,0x74,0x54,0x1a,0x02,
		0xa9,0x1b,0xff,0xff,0x00,0x72,0xff,0xe9,0x01,0x82,0x01,0x76,0x06,0x07,0x02,0x14,
		0x00,0x00,0xfe,0xfa,0xff,0xff,0x00,0x72,0xff,0xe9,0x01,0x82,0x01,0x76,0x06,0x07,
		0x02,0x14,0x00,0x00,0xfe,0xfa,0xff,0xff,0x00,0x72,0x00,0xef,0x01,0x82,0x02,0x7c,
		0x06,0x06,0x02,0x14,0x00,0x00,0x00,0x02,0x00,0x72,0x00,0xef,0x01,0x82,0x02,0x7c,
		0x00,0x0f,0x00,0x1d,0x00,0x0f,0xb6,0x10,0x00,0x77,0x17,0x08,0x05,0x72,0x00,0x2b,
		0x32,0xe4,0x32,0x30,0x31,0x77,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,
		0x16,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,
		0x15,0x14,0x16,0xfa,0x2b,0x3d,0x20,0x20,0x3d,0x2b,0x2b,0x3d,0x20,0x20,0x3d,0x2b,
		0x27,0x2b,0x13,0x25,0x1a,0x1a,0x25,0x13,0x2b,0xef,0x2e,0x59,0x3f,0x3e,0x59,0x30,
		0x30,0x59,0x3e,0x3f,0x59,0x2e,0x2d,0x50,0x49,0x2f,0x45,0x25,0x25,0x45,0x2f,0x49,
		0x50,0x00,0xff,0xff,0x00,0x72,0xff,0xf3,0x01,0x82,0x01,0x80,0x06,0x07,0x02,0x18,
		0x00,0x00,0xff,0x04,0xff,0xff,0x00,0x72,0xff,0xf3,0x01,0x82,0x01,0x80,0x06,0x06,
		0x02,0x15,0x00,0x00,0xff,0xff,0x00,0x72,0x00,0xef,0x01,0x82,0x02,0x7c,0x06,0x06,
		0x02,0x18,0x00,0x00,0x00,0x03,0x00,0x72,0x00,0xef,0x01,0x82,0x02,0x7c,0x00,0x0b,
		0x00,0x1b,0x00,0x29,0x00,0x16,0x40,0x0a,0x06,0x00,0x00,0x1c,0x0c,0x77,0x23,0x14,
		0x05,0x72,0x00,0x2b,0x32,0xe4,0x32,0x39,0x2f,0x33,0x30,0x31,0x53,0x22,0x26,0x35,
		0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x07,0x22,0x26,0x26,0x35,0x34,0x36,0x36,
		0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x35,0x34,0x26,0x26,0x23,
		0x22,0x06,0x06,0x15,0x14,0x16,0xfd,0x0f,0x15,0x16,0x0e,0x0d,0x17,0x15,0x12,0x2b,
		0x3d,0x20,0x20,0x3d,0x2b,0x2b,0x3d,0x20,0x20,0x3d,0x2b,0x27,0x2b,0x13,0x25,0x1a,
		0x1a,0x25,0x13,0x2b,0x01,0x9f,0x14,0x0f,0x0e,0x14,0x14,0x0e,0x0e,0x15,0xb0,0x2e,
		0x59,0x3f,0x3e,0x59,0x30,0x30,0x59,0x3e,0x3f,0x59,0x2e,0x2d,0x50,0x49,0x2f,0x45,
		0x25,0x25,0x45,0x2f,0x49,0x50,0x00,0x01,0x00,0xb4,0xff,0xf5,0x01,0x27,0x00,0x67,
		0x00,0x0b,0x00,0x0a,0xb3,0x06,0x00,0x0b,0x72,0x00,0x2b,0x32,0x30,0x31,0x57,0x22,
		0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0xee,0x18,0x22,0x22,0x18,0x17,
		0x22,0x22,0x0b,0x22,0x17,0x17,0x22,0x22,0x17,0x17,0x22,0x00,0x00,0x01,0x00,0xa5,
		0xff,0x58,0x01,0x32,0x00,0x67,0x00,0x13,0x00,0x0a,0xb2,0x00,0xc0,0x0c,0x00,0x2f,
		0x1a,0xcc,0x30,0x31,0x57,0x27,0x36,0x36,0x35,0x34,0x2e,0x02,0x35,0x34,0x36,0x33,
		0x32,0x16,0x15,0x14,0x0e,0x02,0xc7,0x22,0x1c,0x25,0x0f,0x15,0x0f,0x21,0x1a,0x1a,
		0x2a,0x0d,0x1b,0x28,0xa8,0x1e,0x1a,0x3c,0x13,0x0a,0x11,0x10,0x15,0x0d,0x19,0x22,
		0x2e,0x25,0x14,0x2b,0x2f,0x33,0x00,0x02,0x00,0xb3,0xff,0xf5,0x01,0x2a,0x01,0xa7,
		0x00,0x0b,0x00,0x17,0x00,0x0e,0xb5,0x12,0x0c,0x0b,0x72,0x00,0x06,0x00,0x2f,0x33,
		0x2b,0x32,0x30,0x31,0x53,0x22,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,
		0x03,0x22,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0xee,0x17,0x24,0x24,
		0x17,0x17,0x25,0x24,0x18,0x19,0x22,0x24,0x17,0x17,0x25,0x23,0x01,0x34,0x22,0x17,
		0x18,0x22,0x22,0x18,0x17,0x22,0xfe,0xc1,0x21,0x18,0x18,0x22,0x22,0x18,0x17,0x22,
		0x00,0x02,0x00,0xa5,0xff,0x58,0x01,0x32,0x01,0xa7,0x00,0x13,0x00,0x1f,0x00,0x0e,
		0xb4,0x14,0x1a,0x00,0xc0,0x0d,0x00,0x2f,0x1a,0xcc,0x2f,0x33,0x30,0x31,0x57,0x27,
		0x36,0x36,0x35,0x34,0x2e,0x02,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x15,0x14,0x06,
		0x06,0x13,0x22,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0xc7,0x22,0x1c,
		0x25,0x0f,0x15,0x0f,0x0f,0x1b,0x11,0x1a,0x2a,0x18,0x2f,0x03,0x17,0x24,0x24,0x17,
		0x17,0x25,0x24,0xa8,0x1e,0x1a,0x3c,0x13,0x0a,0x11,0x10,0x15,0x0d,0x11,0x1a,0x10,
		0x2e,0x25,0x1a,0x3c,0x41,0x01,0xb7,0x22,0x17,0x18,0x22,0x22,0x18,0x17,0x22,0x00,
		0x00,0x03,0x00,0x08,0xff,0xf5,0x01,0xd5,0x00,0x67,0x00,0x0b,0x00,0x17,0x00,0x23,
		0x00,0x19,0x40,0x0b,0x18,0x0c,0x0c,0x1e,0x12,0x12,0x06,0x06,0x00,0x0b,0x72,0x00,
		0x2b,0x32,0x11,0x33,0x11,0x33,0x32,0x11,0x33,0x30,0x31,0x57,0x22,0x26,0x35,0x34,
		0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x33,0x22,0x26,0x35,0x34,0x36,0x33,0x32,0x16,
		0x15,0x14,0x06,0x33,0x22,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x42,
		0x18,0x22,0x22,0x18,0x17,0x22,0x22,0x95,0x18,0x22,0x22,0x18,0x17,0x22,0x22,0x97,
		0x18,0x22,0x22,0x18,0x17,0x22,0x22,0x0b,0x22,0x17,0x17,0x22,0x22,0x17,0x17,0x22,
		0x22,0x17,0x17,0x22,0x22,0x17,0x17,0x22,0x22,0x17,0x17,0x22,0x22,0x17,0x17,0x22,
		0x00,0x02,0x00,0xb4,0xff,0xf5,0x01,0x2b,0x02,0x9c,0x00,0x0a,0x00,0x16,0x00,0x14,
		0x40,0x09,0x00,0x11,0x11,0x0b,0x0b,0x72,0x05,0x01,0x72,0x00,0x2b,0x2b,0x32,0x7c,
		0x10,0xce,0x30,0x31,0x77,0x03,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x03,0x07,
		0x22,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0xd7,0x19,0x0c,0x17,0x10,
		0x10,0x16,0x0d,0x1b,0x1a,0x18,0x23,0x23,0x18,0x18,0x24,0x24,0xc2,0x01,0x90,0x18,
		0x21,0x11,0x11,0x25,0x1e,0xfe,0x7a,0xcd,0x22,0x18,0x18,0x24,0x24,0x18,0x17,0x23,
		0x00,0x02,0x00,0xb4,0xff,0xaf,0x01,0x2b,0x02,0x56,0x00,0x0a,0x00,0x16,0x00,0x0f,
		0xb4,0x00,0x11,0x11,0x0b,0x06,0x00,0x2f,0x2f,0x33,0x7c,0x10,0xce,0x30,0x31,0x53,
		0x33,0x13,0x14,0x06,0x06,0x23,0x22,0x26,0x26,0x35,0x13,0x32,0x16,0x15,0x14,0x06,
		0x23,0x22,0x26,0x35,0x34,0x36,0xd7,0x32,0x1b,0x0d,0x16,0x10,0x10,0x17,0x0c,0x31,
		0x18,0x24,0x24,0x18,0x18,0x23,0x23,0x01,0x89,0xfe,0x7a,0x1e,0x25,0x11,0x11,0x22,
		0x17,0x02,0x5d,0x23,0x17,0x18,0x24,0x24,0x18,0x18,0x22,0x00,0x00,0x02,0x00,0x40,
		0xff,0xf5,0x01,0xb2,0x02,0x99,0x00,0x26,0x00,0x32,0x00,0x17,0x40,0x0b,0x26,0x26,
		0x2d,0x2d,0x27,0x0b,0x72,0x0c,0x19,0x01,0x72,0x00,0x2b,0x32,0x2b,0x32,0x11,0x33,
		0x2f,0x30,0x31,0x77,0x34,0x3e,0x04,0x35,0x34,0x2e,0x02,0x23,0x22,0x06,0x07,0x06,
		0x06,0x17,0x07,0x27,0x27,0x3e,0x02,0x33,0x32,0x16,0x16,0x15,0x14,0x0e,0x04,0x15,
		0x15,0x23,0x17,0x22,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0xe2,0x14,
		0x20,0x23,0x20,0x14,0x10,0x1e,0x29,0x18,0x26,0x39,0x17,0x0a,0x05,0x01,0x04,0x08,
		0x2e,0x16,0x33,0x47,0x31,0x35,0x50,0x2c,0x15,0x20,0x24,0x20,0x15,0x42,0x23,0x18,
		0x22,0x22,0x18,0x17,0x22,0x22,0xe2,0x25,0x32,0x26,0x22,0x24,0x31,0x22,0x17,0x24,
		0x1b,0x0e,0x16,0x18,0x0d,0x0e,0x08,0x06,0x06,0x26,0x21,0x2e,0x19,0x26,0x46,0x30,
		0x28,0x39,0x29,0x22,0x23,0x2c,0x20,0x29,0xc4,0x22,0x17,0x17,0x22,0x22,0x17,0x17,
		0x22,0x00,0x00,0x02,0x00,0x40,0xff,0x85,0x01,0xb2,0x02,0x29,0x00,0x26,0x00,0x33,
		0x00,0x12,0xb6,0x25,0x25,0x2d,0x2d,0x27,0x0c,0x19,0x00,0x2f,0x33,0x2f,0x33,0x11,
		0x33,0x2f,0x30,0x31,0x41,0x14,0x0e,0x04,0x15,0x14,0x1e,0x02,0x33,0x32,0x36,0x37,
		0x36,0x36,0x27,0x37,0x17,0x17,0x0e,0x02,0x23,0x22,0x26,0x26,0x35,0x34,0x3e,0x04,
		0x35,0x35,0x33,0x27,0x32,0x16,0x15,0x14,0x06,0x23,0x22,0x26,0x35,0x34,0x36,0x33,
		0x01,0x10,0x14,0x20,0x23,0x20,0x14,0x10,0x1e,0x29,0x18,0x26,0x3a,0x16,0x0a,0x05,
		0x01,0x04,0x08,0x2e,0x15,0x34,0x46,0x32,0x35,0x50,0x2c,0x15,0x20,0x24,0x20,0x15,
		0x42,0x23,0x18,0x22,0x22,0x18,0x17,0x22,0x22,0x17,0x01,0x3c,0x24,0x33,0x26,0x22,
		0x24,0x30,0x23,0x16,0x25,0x1b,0x0e,0x16,0x18,0x0d,0x0e,0x08,0x06,0x06,0x26,0x20,
		0x2f,0x19,0x26,0x46,0x30,0x29,0x38,0x29,0x22,0x23,0x2d,0x1f,0x29,0xc4,0x22,0x17,
		0x17,0x22,0x22,0x17,0x17,0x22,0x00,0x01,0x00,0xb3,0x01,0x12,0x01,0x2a,0x01,0x84,
		0x00,0x0b,0x00,0x08,0xb1,0x06,0x00,0x00,0x2f,0x32,0x30,0x31,0x53,0x22,0x26,0x35,
		0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0xee,0x19,0x22,0x24,0x17,0x17,0x25,0x23,
		0x01,0x12,0x21,0x18,0x18,0x21,0x21,0x18,0x17,0x22,0x00,0x01,0x00,0xa5,0x00,0xd5,
		0x01,0x4f,0x01,0x7c,0x00,0x0f,0x00,0x08,0xb1,0x08,0x00,0x00,0x2f,0x32,0x30,0x31,
		0x77,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,
		0xfa,0x17,0x27,0x17,0x18,0x27,0x16,0x17,0x27,0x17,0x17,0x26,0xd5,0x17,0x26,0x16,
		0x18,0x26,0x16,0x17,0x26,0x17,0x16,0x26,0x17,0x00,0x00,0x01,0x00,0x29,0x00,0x7b,
		0x01,0xca,0x02,0x18,0x00,0x0e,0x00,0x1b,0x40,0x0f,0x02,0x05,0x08,0x0e,0x0b,0x03,
		0x04,0x0a,0x09,0x09,0x06,0x0d,0x00,0x00,0x06,0x00,0x2f,0x33,0x2f,0x32,0x11,0x17,
		0x39,0x30,0x31,0x77,0x27,0x37,0x27,0x37,0x17,0x27,0x33,0x07,0x37,0x17,0x07,0x17,
		0x07,0x27,0x8a,0x36,0x82,0xad,0x1a,0xa2,0x10,0x4e,0x12,0x9f,0x1a,0xab,0x7e,0x37,
		0x6c,0x7b,0x2c,0x96,0x35,0x41,0x4c,0xb1,0xb1,0x48,0x3d,0x34,0x97,0x2b,0xa6,0x00,
		0x00,0x01,0x00,0xc8,0xff,0x7e,0x01,0x4e,0x00,0x8b,0x00,0x10,0x00,0x0e,0xb4,0x01,
		0x00,0xc0,0x08,0x09,0x00,0x2f,0x33,0x1a,0xce,0x32,0x30,0x31,0x57,0x35,0x32,0x36,
		0x35,0x34,0x26,0x26,0x23,0x35,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0xc8,0x21,0x29,
		0x12,0x21,0x17,0x27,0x3c,0x23,0x22,0x3d,0x82,0x37,0x30,0x20,0x15,0x25,0x17,0x35,
		0x25,0x3d,0x25,0x24,0x3d,0x25,0x00,0x02,0x00,0x19,0x00,0x0a,0x01,0xdc,0x02,0x72,
		0x00,0x1b,0x00,0x1f,0x00,0x41,0x40,0x1f,0x13,0x0f,0x0f,0x0c,0x16,0x1f,0x1f,0x09,
		0x09,0x0c,0x17,0x1c,0x1c,0x08,0x08,0x05,0x1a,0x02,0x02,0x05,0x0c,0x05,0x0c,0x05,
		0x04,0x12,0x0d,0x02,0x72,0x00,0x04,0x00,0x2f,0x33,0x2b,0x32,0x12,0x39,0x39,0x2f,
		0x2f,0x11,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x11,
		0x33,0x11,0x33,0x11,0x33,0x30,0x31,0x65,0x37,0x23,0x07,0x07,0x37,0x23,0x37,0x33,
		0x37,0x23,0x37,0x33,0x37,0x37,0x07,0x33,0x37,0x37,0x07,0x33,0x07,0x23,0x07,0x33,
		0x07,0x23,0x07,0x27,0x33,0x37,0x23,0x01,0x0e,0x16,0x6f,0x15,0x3b,0x15,0x61,0x04,
		0x63,0x14,0x6d,0x03,0x6f,0x14,0x3d,0x15,0x6e,0x14,0x3e,0x14,0x5b,0x06,0x5b,0x15,
		0x63,0x05,0x63,0x16,0x90,0x6e,0x15,0x6f,0x0a,0xb7,0xb3,0x01,0xb2,0x2d,0xab,0x2e,
		0xab,0x02,0xab,0xa7,0x01,0xa6,0x2f,0xa9,0x2d,0xb6,0xe0,0xaa,0x00,0x01,0x00,0x40,
		0xff,0xd6,0x01,0xb5,0x02,0x99,0x00,0x03,0x00,0x0c,0xb3,0x03,0x02,0x01,0x00,0x00,
		0x2f,0x32,0x2f,0x33,0x30,0x31,0x57,0x27,0x01,0x17,0x7b,0x3b,0x01,0x39,0x3c,0x2a,
		0x1d,0x02,0xa6,0x1f,0x00,0x01,0x00,0x40,0xff,0xd6,0x01,0xb5,0x02,0x99,0x00,0x03,
		0x00,0x0c,0xb3,0x01,0x02,0x03,0x00,0x00,0x2f,0x32,0x2f,0x33,0x30,0x31,0x45,0x01,
		0x37,0x01,0x01,0x7a,0xfe,0xc6,0x3b,0x01,0x3a,0x2a,0x02,0xa4,0x1f,0xfd,0x5a,0x00,
		0xff,0xff,0x00,0xb3,0x01,0x12,0x01,0x2a,0x01,0x84,0x06,0x06,0x02,0x22,0x00,0x00,
		0x00,0x01,0x00,0x29,0x00,0xb7,0x01,0xca,0x02,0x54,0x00,0x0e,0x00,0x1b,0x40,0x10,
		0x02,0x05,0x08,0x0e,0x0b,0x03,0x04,0x0a,0x09,0x09,0x0d,0x00,0x00,0x06,0x02,0x72,
		0x00,0x2b,0x32,0x2f,0x33,0x17,0x39,0x30,0x31,0x77,0x27,0x37,0x27,0x37,0x17,0x27,
		0x33,0x07,0x37,0x17,0x07,0x17,0x07,0x27,0x8a,0x36,0x82,0xad,0x1a,0xa2,0x10,0x4e,
		0x12,0x9f,0x1a,0xab,0x7e,0x37,0x6c,0xb7,0x2c,0x96,0x35,0x41,0x4c,0xb1,0xb1,0x48,
		0x3d,0x34,0x97,0x2b,0xa6,0x00,0x00,0x01,0x00,0x7a,0xff,0x98,0x01,0x9e,0x02,0xdf,
		0x00,0x13,0x00,0x0c,0xb3,0x09,0x08,0x13,0x00,0x00,0x2f,0x32,0x2f,0x33,0x30,0x31,
		0x45,0x2e,0x02,0x35,0x34,0x36,0x36,0x37,0x17,0x0e,0x03,0x15,0x14,0x1e,0x02,0x17,
		0x01,0x8b,0x53,0x7b,0x43,0x42,0x78,0x51,0x13,0x30,0x4f,0x39,0x1f,0x1f,0x3a,0x51,
		0x33,0x68,0x27,0x83,0xa5,0x59,0x59,0xa1,0x7f,0x26,0x3e,0x1a,0x4c,0x5c,0x6a,0x38,
		0x38,0x6a,0x5f,0x4d,0x1b,0x00,0x00,0x01,0x00,0x72,0xff,0x98,0x01,0x96,0x02,0xdf,
		0x00,0x13,0x00,0x0c,0xb3,0x0b,0x0c,0x01,0x00,0x00,0x2f,0x32,0x2f,0x33,0x30,0x31,
		0x57,0x27,0x3e,0x03,0x35,0x34,0x2e,0x02,0x27,0x37,0x1e,0x02,0x15,0x14,0x06,0x06,
		0x85,0x13,0x33,0x51,0x3a,0x1f,0x1f,0x39,0x4f,0x30,0x13,0x51,0x78,0x42,0x43,0x7b,
		0x68,0x3c,0x1b,0x4d,0x5f,0x6a,0x38,0x38,0x6a,0x5c,0x4c,0x1a,0x3e,0x26,0x7f,0xa1,
		0x59,0x59,0xa5,0x83,0x00,0x01,0x00,0x35,0xff,0xa1,0x01,0x98,0x02,0xbd,0x00,0x2b,
		0x00,0x17,0x40,0x09,0x20,0x0b,0x0b,0x0a,0x0a,0x18,0x15,0x29,0x00,0x00,0x2f,0x32,
		0x2f,0x33,0x39,0x2f,0x33,0x12,0x39,0x30,0x31,0x45,0x22,0x26,0x26,0x37,0x37,0x34,
		0x26,0x26,0x23,0x23,0x35,0x33,0x32,0x36,0x36,0x35,0x27,0x34,0x36,0x36,0x33,0x33,
		0x15,0x23,0x22,0x06,0x15,0x17,0x14,0x06,0x06,0x07,0x1e,0x02,0x15,0x07,0x14,0x16,
		0x16,0x33,0x33,0x15,0x01,0x73,0x48,0x60,0x2f,0x03,0x04,0x15,0x28,0x1d,0x14,0x13,
		0x1f,0x29,0x15,0x02,0x29,0x51,0x3c,0x3f,0x52,0x2e,0x2f,0x02,0x13,0x27,0x1d,0x1d,
		0x25,0x13,0x03,0x1a,0x38,0x2c,0x33,0x5f,0x1d,0x4c,0x46,0x64,0x2c,0x31,0x13,0x38,
		0x16,0x2f,0x26,0x48,0x3a,0x4d,0x27,0x39,0x35,0x35,0x46,0x25,0x39,0x29,0x0d,0x09,
		0x29,0x3e,0x2b,0x54,0x2d,0x35,0x16,0x38,0x00,0x01,0x00,0x36,0xff,0xa1,0x01,0x99,
		0x02,0xbd,0x00,0x2b,0x00,0x19,0x40,0x0a,0x0c,0x20,0x20,0x23,0x23,0x01,0x15,0x16,
		0x02,0x01,0x00,0x2f,0x33,0x2f,0x33,0x12,0x39,0x2f,0x33,0x12,0x39,0x30,0x31,0x57,
		0x23,0x35,0x33,0x32,0x36,0x36,0x35,0x27,0x34,0x36,0x36,0x37,0x2e,0x02,0x35,0x37,
		0x34,0x26,0x23,0x23,0x35,0x33,0x32,0x16,0x16,0x15,0x07,0x14,0x16,0x16,0x33,0x33,
		0x15,0x23,0x22,0x06,0x06,0x15,0x17,0x16,0x06,0x06,0x5b,0x24,0x33,0x2d,0x37,0x1a,
		0x03,0x13,0x26,0x1c,0x1d,0x27,0x13,0x02,0x2e,0x2f,0x52,0x3f,0x3d,0x50,0x29,0x02,
		0x15,0x2a,0x1e,0x13,0x14,0x1c,0x29,0x15,0x04,0x03,0x2e,0x61,0x5f,0x38,0x16,0x35,
		0x2d,0x54,0x2b,0x3e,0x29,0x09,0x0d,0x29,0x39,0x25,0x46,0x35,0x35,0x39,0x27,0x4d,
		0x3a,0x48,0x26,0x2f,0x16,0x38,0x13,0x31,0x2c,0x64,0x46,0x4c,0x1d,0x00,0x00,0x01,
		0x00,0x83,0xff,0xa7,0x01,0xa2,0x02,0x9e,0x00,0x07,0x00,0x0c,0xb3,0x04,0x01,0x05,
		0x00,0x00,0x2f,0x32,0x2f,0x33,0x30,0x31,0x57,0x11,0x21,0x15,0x23,0x11,0x33,0x15,
		0x83,0x01,0x1e,0xde,0xdf,0x59,0x02,0xf7,0x3c,0xfd,0x7e,0x39,0x00,0x01,0x00,0x83,
		0xff,0xa7,0x01,0xa2,0x02,0x9e,0x00,0x07,0x00,0x0c,0xb3,0x05,0x06,0x02,0x01,0x00,
		0x2f,0x33,0x2f,0x33,0x30,0x31,0x45,0x21,0x35,0x33,0x11,0x23,0x35,0x21,0x01,0xa2,
		0xfe,0xe1,0xdf,0xde,0x01,0x1e,0x59,0x39,0x02,0x82,0x3c,0x00,0x00,0x01,0x00,0x6f,
		0x01,0x19,0x01,0x87,0x01,0x5c,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x32,
		0x30,0x31,0x53,0x35,0x21,0x15,0x6f,0x01,0x18,0x01,0x19,0x43,0x43,0x00,0xff,0xff,
		0x00,0x6f,0x01,0x19,0x01,0x87,0x01,0x5c,0x06,0x06,0x02,0x31,0x00,0x00,0x00,0x01,
		0x00,0x47,0x01,0x19,0x01,0xaf,0x01,0x5c,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,
		0x2f,0x32,0x30,0x31,0x53,0x35,0x21,0x15,0x47,0x01,0x68,0x01,0x19,0x43,0x43,0x00,
		0x00,0x01,0x00,0x0a,0x01,0x19,0x01,0xea,0x01,0x5c,0x00,0x03,0x00,0x08,0xb1,0x01,
		0x00,0x00,0x2f,0x32,0x30,0x31,0x53,0x35,0x21,0x15,0x0a,0x01,0xe0,0x01,0x19,0x43,
		0x43,0x00,0xff,0xff,0x00,0x47,0x01,0x19,0x01,0xaf,0x01,0x5c,0x06,0x06,0x02,0x33,
		0x00,0x00,0xff,0xff,0x00,0x0a,0x01,0x19,0x01,0xea,0x01,0x5c,0x06,0x06,0x02,0x34,
		0x00,0x00,0xff,0xff,0x00,0x6f,0x01,0x19,0x01,0x87,0x01,0x5c,0x06,0x06,0x02,0x31,
		0x00,0x00,0x00,0x01,0x00,0x23,0xff,0xb0,0x01,0xd2,0xff,0xed,0x00,0x03,0x00,0x08,
		0xb1,0x01,0x00,0x00,0x2f,0x32,0x30,0x31,0x57,0x35,0x21,0x15,0x23,0x01,0xaf,0x50,
		0x3d,0x3d,0xff,0xff,0x00,0xa5,0xff,0x5b,0x01,0x32,0x00,0x6a,0x06,0x07,0x02,0x3e,
		0x00,0x00,0xfd,0xec,0x00,0x02,0x00,0x3c,0xff,0x5b,0x01,0x9b,0x00,0x6a,0x00,0x13,
		0x00,0x27,0x00,0x14,0xb7,0x15,0x14,0x14,0x01,0x00,0xc0,0x21,0x0d,0x00,0x2f,0x33,
		0x1a,0xcc,0x32,0x32,0x11,0x33,0x30,0x31,0x57,0x27,0x3e,0x02,0x35,0x34,0x2e,0x02,
		0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x06,0x17,0x27,0x3e,0x02,0x35,0x34,
		0x2e,0x02,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x06,0x5e,0x22,0x13,0x1d,
		0x11,0x0f,0x15,0x0f,0x21,0x1a,0x1a,0x2a,0x18,0x2f,0xae,0x22,0x13,0x1d,0x11,0x0f,
		0x15,0x0f,0x21,0x1a,0x1a,0x2a,0x18,0x2f,0xa5,0x1e,0x12,0x27,0x24,0x0c,0x0b,0x11,
		0x10,0x14,0x0d,0x19,0x22,0x2e,0x25,0x1a,0x3c,0x41,0x25,0x1e,0x12,0x27,0x24,0x0c,
		0x0b,0x11,0x10,0x14,0x0d,0x19,0x22,0x2e,0x25,0x1a,0x3c,0x41,0x00,0x02,0x00,0x50,
		0x01,0x6f,0x01,0xaa,0x02,0x7e,0x00,0x13,0x00,0x27,0x00,0x17,0x40,0x0a,0x15,0x14,
		0x14,0x21,0x0d,0xc0,0x01,0x00,0x03,0x72,0x00,0x2b,0x32,0x1a,0xcc,0x32,0x33,0x11,
		0x33,0x30,0x31,0x53,0x17,0x0e,0x02,0x15,0x14,0x1e,0x02,0x15,0x14,0x06,0x23,0x22,
		0x26,0x35,0x34,0x36,0x36,0x37,0x17,0x0e,0x02,0x15,0x14,0x1e,0x02,0x15,0x14,0x06,
		0x23,0x22,0x26,0x35,0x34,0x36,0x36,0xbb,0x22,0x12,0x1e,0x11,0x0f,0x15,0x0f,0x21,
		0x1a,0x1a,0x2a,0x18,0x30,0xf0,0x22,0x12,0x1e,0x11,0x0f,0x15,0x0f,0x21,0x1a,0x1a,
		0x2a,0x18,0x30,0x02,0x7e,0x1e,0x11,0x28,0x23,0x0d,0x0a,0x12,0x10,0x14,0x0d,0x19,
		0x22,0x2e,0x25,0x1b,0x3b,0x42,0x24,0x1e,0x11,0x28,0x23,0x0d,0x0a,0x12,0x10,0x14,
		0x0d,0x19,0x22,0x2e,0x25,0x1b,0x3b,0x42,0x00,0x02,0x00,0x52,0x01,0x6f,0x01,0xac,
		0x02,0x7e,0x00,0x13,0x00,0x27,0x00,0x17,0x40,0x0a,0x01,0x00,0x00,0x15,0x14,0xc0,
		0x0d,0x21,0x03,0x72,0x00,0x2b,0x32,0x1a,0xcc,0x32,0x32,0x11,0x33,0x30,0x31,0x41,
		0x27,0x3e,0x02,0x35,0x34,0x2e,0x02,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,
		0x06,0x07,0x27,0x3e,0x02,0x35,0x34,0x2e,0x02,0x35,0x34,0x36,0x33,0x32,0x16,0x15,
		0x14,0x06,0x06,0x01,0x41,0x22,0x13,0x1d,0x11,0x0f,0x15,0x0f,0x21,0x1a,0x1a,0x2a,
		0x18,0x2f,0xf1,0x22,0x13,0x1d,0x11,0x0f,0x15,0x0f,0x21,0x1a,0x1a,0x2a,0x18,0x2f,
		0x01,0x6f,0x1e,0x12,0x27,0x24,0x0c,0x0b,0x11,0x10,0x14,0x0d,0x19,0x22,0x2e,0x25,
		0x1a,0x3c,0x41,0x25,0x1e,0x12,0x27,0x24,0x0c,0x0b,0x11,0x10,0x14,0x0d,0x19,0x22,
		0x2e,0x25,0x1a,0x3c,0x41,0x00,0x00,0x01,0x00,0xb4,0x01,0x6f,0x01,0x41,0x02,0x7e,
		0x00,0x13,0x00,0x0e,0xb5,0x01,0x0d,0xc0,0x00,0x03,0x72,0x00,0x2b,0x1a,0xcc,0x33,
		0x30,0x31,0x41,0x17,0x0e,0x02,0x15,0x14,0x1e,0x02,0x15,0x14,0x06,0x23,0x22,0x26,
		0x35,0x34,0x36,0x36,0x01,0x1f,0x22,0x12,0x1e,0x11,0x0f,0x15,0x0f,0x21,0x1a,0x1a,
		0x2a,0x18,0x2f,0x02,0x7e,0x1e,0x11,0x28,0x23,0x0d,0x0a,0x12,0x10,0x14,0x0d,0x19,
		0x22,0x2e,0x25,0x1b,0x3b,0x42,0x00,0x01,0x00,0xa5,0x01,0x6f,0x01,0x32,0x02,0x7e,
		0x00,0x13,0x00,0x0e,0xb5,0x01,0x00,0xc0,0x0d,0x03,0x72,0x00,0x2b,0x1a,0xcc,0x32,
		0x30,0x31,0x53,0x27,0x3e,0x02,0x35,0x34,0x2e,0x02,0x35,0x34,0x36,0x33,0x32,0x16,
		0x15,0x14,0x06,0x06,0xc7,0x22,0x13,0x1d,0x11,0x0f,0x15,0x0f,0x21,0x1a,0x1a,0x2a,
		0x18,0x2f,0x01,0x6f,0x1e,0x12,0x27,0x24,0x0c,0x0b,0x11,0x10,0x14,0x0d,0x19,0x22,
		0x2e,0x25,0x1a,0x3c,0x41,0x00,0x00,0x02,0x00,0x43,0x00,0x3d,0x01,0xbe,0x01,0x90,
		0x00,0x06,0x00,0x0d,0x00,0x0c,0xb3,0x07,0x0a,0x03,0x00,0x00,0x2f,0x2f,0x33,0x32,
		0x30,0x31,0x77,0x27,0x35,0x37,0x17,0x07,0x17,0x17,0x27,0x35,0x37,0x17,0x07,0x17,
		0xe1,0x9e,0x98,0x27,0x79,0x80,0x8d,0x9d,0x97,0x27,0x79,0x80,0x3d,0xa9,0x17,0x93,
		0x29,0x76,0x8c,0x28,0xa9,0x17,0x93,0x29,0x76,0x8c,0x00,0x02,0x00,0x48,0x00,0x3d,
		0x01,0xc3,0x01,0x90,0x00,0x06,0x00,0x0d,0x00,0x0c,0xb3,0x07,0x0b,0x04,0x00,0x00,
		0x2f,0x2f,0x33,0x32,0x30,0x31,0x65,0x27,0x37,0x27,0x37,0x17,0x15,0x05,0x27,0x37,
		0x27,0x37,0x17,0x15,0x01,0x25,0x28,0x80,0x79,0x27,0x98,0xfe,0xad,0x28,0x80,0x79,
		0x27,0x97,0x3d,0x28,0x8c,0x76,0x29,0x93,0x17,0xa9,0x28,0x8c,0x76,0x29,0x93,0x17,
		0x00,0x01,0x00,0x91,0x00,0x3d,0x01,0x57,0x01,0x90,0x00,0x06,0x00,0x08,0xb1,0x03,
		0x00,0x00,0x2f,0x2f,0x30,0x31,0x65,0x27,0x35,0x37,0x17,0x07,0x17,0x01,0x2f,0x9e,
		0x98,0x27,0x79,0x80,0x3d,0xa9,0x17,0x93,0x29,0x76,0x8c,0x00,0x00,0x01,0x00,0x91,
		0x00,0x3d,0x01,0x57,0x01,0x90,0x00,0x06,0x00,0x08,0xb1,0x04,0x00,0x00,0x2f,0x2f,
		0x30,0x31,0x77,0x27,0x37,0x27,0x37,0x17,0x15,0xb9,0x28,0x80,0x79,0x27,0x98,0x3d,
		0x28,0x8c,0x76,0x29,0x93,0x17,0xff,0xff,0x00,0x87,0x01,0x97,0x01,0x6d,0x02,0x99,
		0x04,0x26,0x02,0x44,0xb5,0x00,0x00,0x06,0x02,0x44,0x4b,0x00,0x00,0x01,0x00,0xd2,
		0x01,0x97,0x01,0x22,0x02,0x99,0x00,0x0b,0x00,0x08,0xb1,0x07,0x00,0x00,0x2f,0xcd,
		0x30,0x31,0x53,0x33,0x14,0x0e,0x02,0x07,0x23,0x2e,0x03,0xd2,0x50,0x02,0x05,0x06,
		0x03,0x30,0x03,0x06,0x05,0x02,0x02,0x99,0x3c,0x48,0x31,0x2d,0x20,0x20,0x2d,0x30,
		0x49,0x00,0xff,0xff,0x00,0x71,0x01,0x99,0x01,0x83,0x02,0x99,0x04,0x26,0x02,0x46,
		0xa3,0x00,0x00,0x06,0x02,0x46,0x44,0x00,0x00,0x01,0x00,0xce,0x01,0x99,0x01,0x3f,
		0x02,0x99,0x00,0x0f,0x00,0x0a,0xb2,0x01,0x00,0x09,0x00,0x2f,0xcd,0x32,0x30,0x31,
		0x41,0x27,0x3e,0x02,0x34,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x06,0x01,
		0x05,0x37,0x0b,0x0b,0x03,0x16,0x16,0x15,0x17,0x0c,0x19,0x01,0x99,0x10,0x22,0x36,
		0x2b,0x25,0x12,0x1b,0x1b,0x1a,0x1a,0x18,0x35,0x48,0x00,0x02,0x00,0x2c,0x00,0x16,
		0x03,0xa8,0x02,0x6a,0x00,0x06,0x00,0x0a,0x00,0x1b,0x40,0x0c,0x06,0x02,0x05,0x03,
		0x03,0x04,0x04,0x08,0x08,0x01,0x00,0x07,0x00,0x2f,0x33,0x32,0x33,0x11,0x33,0x11,
		0x33,0x17,0x39,0x30,0x31,0x65,0x35,0x25,0x25,0x35,0x01,0x15,0x05,0x35,0x21,0x15,
		0x01,0xad,0x01,0xa6,0xfe,0x5a,0x01,0xfb,0xfc,0x84,0x02,0x65,0x16,0x47,0xe3,0xe3,
		0x47,0xfe,0xf2,0x38,0x02,0x3d,0x3d,0x00,0x00,0x04,0x00,0x2d,0xff,0x82,0x05,0xaf,
		0x02,0x49,0x00,0x03,0x00,0x07,0x00,0x0b,0x00,0x0f,0x00,0x29,0x40,0x12,0x01,0x00,
		0x00,0x0c,0x0c,0x0d,0x0d,0x08,0x03,0x02,0x02,0x05,0x05,0x04,0x04,0x09,0x09,0x08,
		0x00,0x2f,0x33,0x11,0x33,0x2f,0x33,0x11,0x33,0x2f,0x33,0x11,0x33,0x2f,0x33,0x11,
		0x33,0x2f,0x32,0x30,0x31,0x45,0x27,0x01,0x17,0x05,0x35,0x21,0x15,0x05,0x35,0x21,
		0x15,0x05,0x35,0x21,0x15,0x02,0x69,0x35,0x01,0x3c,0x36,0xfc,0x87,0x05,0x82,0xfb,
		0x28,0x04,0x2e,0xfb,0x28,0x05,0x82,0x7e,0x1a,0x02,0xad,0x1c,0xa7,0x3d,0x3d,0xbf,
		0x3d,0x3d,0xbe,0x3d,0x3d,0x00,0x00,0x02,0x00,0x29,0xff,0xb9,0x01,0xd5,0x02,0xa3,
		0x00,0x03,0x00,0x2d,0x00,0x15,0x40,0x0a,0x25,0x00,0x2d,0x0d,0x72,0x1b,0x01,0x0f,
		0x05,0x72,0x00,0x2b,0xcd,0x33,0x2b,0xcd,0x33,0x30,0x31,0x57,0x11,0x33,0x11,0x27,
		0x22,0x2e,0x02,0x35,0x34,0x3e,0x03,0x33,0x32,0x16,0x17,0x07,0x07,0x27,0x36,0x26,
		0x27,0x26,0x26,0x23,0x22,0x0e,0x02,0x15,0x14,0x1e,0x02,0x33,0x32,0x36,0x36,0x37,
		0x17,0x06,0x06,0x23,0xf5,0x39,0x11,0x33,0x58,0x43,0x26,0x1c,0x30,0x3e,0x44,0x22,
		0x44,0x60,0x18,0x3c,0x09,0x03,0x03,0x06,0x08,0x19,0x35,0x1d,0x27,0x3f,0x2d,0x17,
		0x1b,0x2f,0x3f,0x24,0x19,0x2f,0x28,0x0e,0x34,0x1e,0x54,0x3d,0x47,0x02,0xea,0xfd,
		0x16,0x3d,0x25,0x4e,0x78,0x53,0x49,0x6d,0x4a,0x2c,0x14,0x43,0x38,0x1c,0x04,0x07,
		0x08,0x0d,0x0e,0x22,0x17,0x23,0x43,0x60,0x3d,0x3b,0x60,0x46,0x26,0x12,0x23,0x17,
		0x22,0x32,0x34,0x00,0x00,0x02,0x00,0x38,0xff,0xb7,0x01,0xc9,0x02,0x6f,0x00,0x03,
		0x00,0x2c,0x00,0x19,0x40,0x0a,0x24,0x2c,0x00,0x00,0x2c,0x1a,0x0e,0x02,0x02,0x0e,
		0x00,0x2f,0x33,0x2f,0x11,0x33,0x2f,0x33,0x2f,0x11,0x33,0x30,0x31,0x57,0x23,0x13,
		0x33,0x03,0x22,0x2e,0x02,0x35,0x34,0x3e,0x02,0x33,0x32,0x16,0x17,0x07,0x07,0x27,
		0x34,0x26,0x27,0x26,0x26,0x23,0x22,0x0e,0x02,0x15,0x14,0x1e,0x02,0x33,0x32,0x36,
		0x36,0x37,0x17,0x06,0x06,0x23,0xf6,0x34,0x5f,0x31,0x35,0x32,0x54,0x3d,0x22,0x22,
		0x3d,0x54,0x31,0x38,0x59,0x1c,0x2d,0x07,0x05,0x07,0x0c,0x16,0x32,0x21,0x1d,0x34,
		0x29,0x18,0x18,0x2a,0x3b,0x22,0x17,0x2a,0x26,0x10,0x2a,0x22,0x53,0x30,0x49,0x02,
		0xb8,0xfd,0xb1,0x24,0x40,0x57,0x34,0x33,0x57,0x40,0x24,0x2d,0x28,0x2c,0x07,0x05,
		0x08,0x0e,0x0c,0x14,0x10,0x18,0x2d,0x40,0x27,0x27,0x41,0x30,0x1b,0x0d,0x19,0x12,
		0x31,0x24,0x24,0x00,0x00,0x03,0x00,0x29,0xff,0xb9,0x01,0xd5,0x02,0xa3,0x00,0x03,
		0x00,0x07,0x00,0x31,0x00,0x19,0x40,0x0c,0x07,0x03,0x29,0x31,0x0d,0x72,0x01,0x05,
		0x1f,0x13,0x05,0x72,0x00,0x2b,0x32,0xce,0x32,0x2b,0x32,0xce,0x32,0x30,0x31,0x57,
		0x13,0x33,0x03,0x23,0x13,0x33,0x03,0x37,0x22,0x2e,0x02,0x35,0x34,0x3e,0x03,0x33,
		0x32,0x16,0x17,0x07,0x07,0x27,0x36,0x26,0x27,0x26,0x26,0x23,0x22,0x0e,0x02,0x15,
		0x14,0x1e,0x02,0x33,0x32,0x36,0x36,0x37,0x17,0x06,0x06,0x23,0xac,0xc8,0x25,0xc8,
		0x6a,0xc8,0x25,0xc8,0x91,0x33,0x58,0x43,0x26,0x1c,0x30,0x3e,0x44,0x22,0x44,0x60,
		0x18,0x3c,0x09,0x03,0x03,0x06,0x08,0x19,0x35,0x1d,0x27,0x3f,0x2d,0x17,0x1b,0x2f,
		0x3f,0x24,0x19,0x2f,0x28,0x0e,0x34,0x1e,0x54,0x3d,0x47,0x02,0xea,0xfd,0x16,0x02,
		0xea,0xfd,0x16,0x3d,0x25,0x4e,0x78,0x53,0x49,0x6d,0x4a,0x2c,0x14,0x43,0x38,0x1c,
		0x04,0x07,0x08,0x0d,0x0e,0x22,0x17,0x23,0x43,0x60,0x3d,0x3b,0x60,0x46,0x26,0x12,
		0x23,0x17,0x22,0x32,0x34,0x00,0x00,0x02,0x00,0x44,0x00,0xa4,0x01,0xb0,0x02,0x0f,
		0x00,0x23,0x00,0x33,0x00,0x0c,0xb3,0x24,0x20,0x2c,0x0e,0x00,0x2f,0x33,0x2f,0x33,
		0x30,0x31,0x77,0x27,0x37,0x26,0x26,0x35,0x34,0x36,0x37,0x27,0x37,0x17,0x36,0x36,
		0x33,0x32,0x16,0x17,0x37,0x17,0x07,0x16,0x16,0x15,0x14,0x06,0x07,0x17,0x07,0x27,
		0x06,0x06,0x23,0x22,0x26,0x27,0x37,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,
		0x06,0x06,0x15,0x14,0x16,0x16,0x68,0x24,0x38,0x0e,0x0e,0x0e,0x0f,0x39,0x24,0x38,
		0x14,0x2e,0x19,0x17,0x2d,0x15,0x38,0x24,0x38,0x0f,0x0f,0x0f,0x0e,0x37,0x24,0x37,
		0x14,0x2e,0x18,0x19,0x2e,0x15,0x5b,0x21,0x2d,0x17,0x17,0x2d,0x21,0x1f,0x2d,0x18,
		0x17,0x2d,0xa4,0x23,0x39,0x14,0x2e,0x17,0x18,0x2e,0x14,0x39,0x23,0x38,0x0e,0x0f,
		0x0e,0x0e,0x37,0x23,0x37,0x15,0x2e,0x19,0x19,0x2e,0x14,0x37,0x23,0x37,0x0f,0x0e,
		0x0f,0x0f,0x19,0x1c,0x2e,0x1a,0x1c,0x2d,0x1c,0x1c,0x2d,0x1c,0x1b,0x2d,0x1c,0x00,
		0x00,0x03,0x00,0x3c,0xff,0xd1,0x01,0xcc,0x02,0x8b,0x00,0x36,0x00,0x3f,0x00,0x48,
		0x00,0x42,0x40,0x26,0x2c,0x41,0x41,0x16,0x23,0x24,0x24,0x3b,0x31,0x3f,0x0e,0x2d,
		0x40,0x12,0x45,0x08,0x01,0x1f,0x17,0x0f,0x16,0x1f,0x16,0x7f,0x16,0x03,0x16,0x04,
		0x05,0x06,0x06,0x37,0x0d,0x0d,0x35,0x00,0x01,0x0c,0x00,0x3f,0xcd,0x33,0x33,0x11,
		0x33,0x33,0x11,0x33,0x3f,0x5d,0xcd,0x33,0x12,0x17,0x39,0x33,0x11,0x33,0x11,0x33,
		0x11,0x33,0x30,0x31,0x57,0x35,0x2e,0x02,0x27,0x37,0x16,0x14,0x17,0x1e,0x02,0x17,
		0x35,0x2e,0x02,0x35,0x34,0x36,0x36,0x37,0x35,0x33,0x16,0x14,0x15,0x14,0x06,0x07,
		0x15,0x1e,0x02,0x17,0x07,0x26,0x26,0x27,0x2e,0x03,0x27,0x15,0x1e,0x02,0x15,0x14,
		0x06,0x06,0x07,0x15,0x35,0x3e,0x02,0x35,0x34,0x26,0x26,0x27,0x27,0x35,0x0e,0x02,
		0x15,0x14,0x16,0x16,0xeb,0x24,0x3f,0x35,0x17,0x2b,0x04,0x03,0x11,0x26,0x2d,0x19,
		0x34,0x45,0x23,0x28,0x46,0x2e,0x40,0x01,0x06,0x01,0x20,0x35,0x2e,0x12,0x2b,0x05,
		0x01,0x05,0x09,0x14,0x18,0x1b,0x0f,0x3a,0x49,0x24,0x28,0x4b,0x34,0x20,0x2e,0x18,
		0x15,0x2d,0x24,0x3a,0x1e,0x28,0x14,0x14,0x28,0x2f,0x3d,0x03,0x13,0x22,0x18,0x3c,
		0x03,0x0e,0x04,0x12,0x19,0x0f,0x03,0xdc,0x12,0x2b,0x39,0x24,0x25,0x3d,0x29,0x06,
		0x3c,0x01,0x01,0x01,0x02,0x09,0x07,0x26,0x03,0x14,0x20,0x16,0x36,0x02,0x0e,0x05,
		0x0a,0x11,0x0c,0x09,0x03,0xc1,0x12,0x2a,0x39,0x2a,0x25,0x47,0x32,0x07,0x3f,0x79,
		0x06,0x1f,0x2b,0x17,0x18,0x22,0x1b,0x0b,0x58,0xad,0x03,0x18,0x21,0x14,0x13,0x21,
		0x1d,0x00,0x00,0x04,0x00,0x41,0x00,0x00,0x01,0xb9,0x02,0x7f,0x00,0x03,0x00,0x25,
		0x00,0x37,0x00,0x3b,0x00,0x25,0x40,0x10,0x13,0x38,0x38,0x3b,0x3b,0x2e,0x0e,0x0e,
		0x37,0x1d,0x1d,0x25,0x80,0x00,0x03,0x0c,0x00,0x3f,0x33,0x1a,0xcc,0x32,0x2f,0x32,
		0x32,0x2f,0x33,0x33,0x7c,0x2f,0x33,0x11,0x33,0x30,0x31,0x77,0x21,0x15,0x21,0x37,
		0x22,0x2e,0x02,0x35,0x34,0x3e,0x02,0x33,0x32,0x16,0x16,0x17,0x35,0x33,0x33,0x15,
		0x06,0x15,0x13,0x14,0x16,0x17,0x23,0x2e,0x02,0x35,0x0e,0x02,0x23,0x37,0x32,0x36,
		0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x0e,0x02,0x15,0x14,0x16,0x16,0x33,0x03,0x21,
		0x15,0x21,0x5c,0x01,0x41,0xfe,0xbf,0x7c,0x1c,0x35,0x2c,0x1a,0x1b,0x2d,0x36,0x1c,
		0x1a,0x29,0x1f,0x09,0x35,0x08,0x08,0x01,0x02,0x06,0x39,0x04,0x03,0x01,0x0b,0x20,
		0x28,0x18,0x09,0x23,0x2a,0x13,0x15,0x2c,0x24,0x18,0x25,0x19,0x0d,0x18,0x2e,0x22,
		0x36,0x01,0x0e,0xfe,0xf2,0x36,0x36,0x63,0x18,0x30,0x49,0x31,0x32,0x48,0x2e,0x15,
		0x10,0x1c,0x13,0xdc,0x06,0x07,0x16,0xfe,0x48,0x0e,0x1d,0x0e,0x0a,0x13,0x13,0x09,
		0x13,0x1e,0x10,0x32,0x27,0x41,0x27,0x29,0x40,0x26,0x13,0x23,0x31,0x1e,0x2e,0x45,
		0x26,0x01,0xa4,0x36,0x00,0x01,0x00,0x21,0xff,0xf5,0x01,0xd0,0x02,0x74,0x00,0x37,
		0x00,0x2f,0x40,0x17,0x22,0x0e,0x0e,0x25,0x0b,0x2c,0x04,0x04,0x29,0x07,0x0b,0x07,
		0x0b,0x07,0x00,0x1d,0x13,0x05,0x72,0x30,0x00,0x0d,0x72,0x00,0x2b,0x32,0x2b,0x32,
		0x12,0x39,0x39,0x2f,0x2f,0x11,0x33,0x33,0x11,0x33,0x11,0x33,0x33,0x11,0x33,0x30,
		0x31,0x45,0x22,0x26,0x26,0x27,0x23,0x37,0x33,0x34,0x34,0x36,0x37,0x23,0x37,0x33,
		0x3e,0x03,0x33,0x32,0x16,0x17,0x07,0x2e,0x04,0x23,0x22,0x0e,0x02,0x07,0x33,0x07,
		0x23,0x06,0x06,0x14,0x15,0x33,0x07,0x23,0x1e,0x02,0x33,0x32,0x36,0x36,0x37,0x17,
		0x06,0x06,0x01,0x43,0x3a,0x62,0x42,0x0a,0x3a,0x0d,0x28,0x01,0x01,0x37,0x0d,0x33,
		0x0c,0x30,0x40,0x48,0x24,0x29,0x44,0x1a,0x19,0x09,0x0a,0x0c,0x14,0x22,0x1d,0x1c,
		0x34,0x2d,0x20,0x09,0xf7,0x16,0xea,0x01,0x01,0xce,0x17,0xb1,0x0a,0x30,0x48,0x2b,
		0x15,0x25,0x22,0x0f,0x1d,0x1d,0x46,0x0b,0x34,0x66,0x4b,0x3a,0x0a,0x1d,0x1e,0x0b,
		0x3a,0x3b,0x51,0x33,0x17,0x1b,0x1b,0x44,0x05,0x11,0x12,0x0f,0x0a,0x13,0x26,0x3b,
		0x29,0x3a,0x0b,0x15,0x1c,0x14,0x3a,0x37,0x4c,0x26,0x09,0x13,0x0d,0x32,0x19,0x1a,
		0x00,0x01,0x00,0x12,0xff,0x51,0x01,0xe0,0x02,0xa1,0x00,0x2e,0x00,0x1f,0x40,0x0f,
		0x2a,0x0f,0x0f,0x27,0x10,0x10,0x00,0x22,0x16,0x01,0x72,0x09,0x00,0x0f,0x72,0x00,
		0x2b,0x32,0x2b,0x32,0x11,0x39,0x2f,0x33,0x33,0x11,0x33,0x30,0x31,0x57,0x22,0x26,
		0x27,0x37,0x1e,0x03,0x33,0x32,0x36,0x36,0x37,0x13,0x23,0x35,0x33,0x37,0x3e,0x02,
		0x33,0x32,0x16,0x17,0x07,0x22,0x26,0x27,0x2e,0x03,0x23,0x22,0x06,0x06,0x07,0x07,
		0x33,0x15,0x23,0x03,0x0e,0x02,0x64,0x19,0x28,0x11,0x29,0x03,0x05,0x08,0x12,0x10,
		0x13,0x1d,0x13,0x03,0x16,0x79,0x7d,0x07,0x06,0x28,0x42,0x2c,0x22,0x38,0x16,0x21,
		0x04,0x04,0x01,0x02,0x0d,0x13,0x17,0x0c,0x18,0x25,0x17,0x04,0x06,0x7b,0x80,0x18,
		0x06,0x29,0x3d,0xaf,0x12,0x11,0x40,0x01,0x0a,0x0c,0x09,0x1e,0x3d,0x2c,0x01,0x2b,
		0x39,0x5c,0x45,0x57,0x2a,0x1b,0x1a,0x42,0x05,0x05,0x0c,0x13,0x0e,0x07,0x18,0x41,
		0x3e,0x52,0x39,0xfe,0xd2,0x49,0x58,0x26,0xff,0xff,0x00,0x15,0x00,0x00,0x01,0xb5,
		0x02,0x70,0x06,0x26,0x00,0x42,0x00,0x00,0x01,0x07,0x03,0x91,0xff,0x9c,0xff,0x74,
		0x00,0x0b,0xb6,0x01,0x0a,0x00,0x01,0x01,0x92,0x56,0x00,0x2b,0x34,0x00,0x00,0x02,
		0x00,0x23,0xff,0xb9,0x01,0xcc,0x02,0xa3,0x00,0x03,0x00,0x2f,0x00,0x1d,0x40,0x0e,
		0x2a,0x2b,0x2b,0x04,0x1a,0x01,0x0e,0x05,0x72,0x24,0x00,0x04,0x0d,0x72,0x00,0x2b,
		0xcd,0x33,0x2b,0xcd,0x33,0x12,0x39,0x2f,0x33,0x30,0x31,0x57,0x11,0x33,0x11,0x27,
		0x22,0x26,0x26,0x35,0x26,0x3e,0x03,0x33,0x32,0x1e,0x02,0x17,0x07,0x2e,0x04,0x23,
		0x22,0x0e,0x03,0x15,0x14,0x16,0x16,0x33,0x32,0x36,0x36,0x37,0x35,0x23,0x35,0x33,
		0x15,0x06,0x06,0xe8,0x39,0x0c,0x4a,0x6d,0x3a,0x01,0x1f,0x34,0x3e,0x3e,0x19,0x2b,
		0x3d,0x2b,0x1f,0x0d,0x26,0x06,0x0b,0x11,0x1f,0x32,0x27,0x17,0x2f,0x29,0x20,0x12,
		0x2d,0x4e,0x31,0x16,0x28,0x27,0x11,0x3f,0x80,0x2c,0x5c,0x47,0x02,0xea,0xfd,0x16,
		0x3d,0x4e,0x8e,0x5e,0x51,0x71,0x4a,0x29,0x11,0x0f,0x1c,0x26,0x18,0x2d,0x03,0x14,
		0x19,0x18,0x10,0x0f,0x23,0x3a,0x54,0x39,0x57,0x77,0x3d,0x09,0x11,0x0c,0x94,0x3d,
		0xf4,0x20,0x21,0x00,0x00,0x03,0x00,0x0e,0xff,0xfc,0x01,0xeb,0x02,0x74,0x00,0x03,
		0x00,0x07,0x00,0x1d,0x00,0x28,0x40,0x13,0x02,0x03,0x03,0x05,0x1b,0x13,0x0c,0x08,
		0x09,0x04,0x04,0x0b,0x1a,0x0c,0x04,0x72,0x1c,0x0b,0x0c,0x00,0x3f,0x33,0x2b,0x32,
		0x12,0x39,0x2f,0x39,0x39,0x12,0x39,0x39,0x33,0x33,0x11,0x33,0x30,0x31,0x53,0x35,
		0x33,0x15,0x21,0x35,0x33,0x15,0x17,0x07,0x11,0x23,0x11,0x33,0x33,0x15,0x06,0x06,
		0x15,0x15,0x01,0x1e,0x03,0x33,0x33,0x03,0x13,0x07,0xc2,0xff,0xfe,0x4d,0x55,0x57,
		0x31,0x4b,0x4a,0x0a,0x06,0x03,0x01,0x04,0x06,0x0c,0x0d,0x0e,0x07,0x1a,0xec,0xfc,
		0x5a,0x01,0x47,0x33,0x33,0x33,0x33,0x0f,0x36,0xfe,0xfe,0x02,0x6f,0x07,0x06,0x0e,
		0x11,0xf3,0x01,0x24,0x01,0x02,0x01,0x01,0xfe,0xf3,0xfe,0x9e,0x04,0x00,0xff,0xff,
		0x00,0x27,0xff,0xf1,0x01,0xd6,0x02,0x6f,0x06,0x06,0x02,0x64,0x00,0x00,0x00,0x03,
		0x00,0x19,0x00,0x00,0x01,0xbb,0x02,0x6f,0x00,0x03,0x00,0x07,0x00,0x1b,0x00,0x30,
		0x40,0x16,0x02,0x03,0x03,0x01,0x00,0x07,0x06,0x06,0x04,0x05,0x00,0x00,0x05,0x08,
		0x09,0x04,0x72,0x15,0x15,0x0f,0x08,0x0c,0x00,0x3f,0x33,0x33,0x2f,0x2b,0x12,0x39,
		0x39,0x2f,0x7d,0x2f,0x33,0x33,0x18,0x2f,0x33,0x11,0x33,0x33,0x2f,0x33,0x30,0x31,
		0x53,0x35,0x25,0x15,0x05,0x35,0x25,0x15,0x01,0x11,0x33,0x14,0x06,0x06,0x15,0x11,
		0x32,0x3e,0x03,0x35,0x33,0x14,0x0e,0x02,0x23,0x19,0x01,0x55,0xfe,0xab,0x01,0x55,
		0xfe,0xfc,0x52,0x05,0x04,0x22,0x3e,0x33,0x25,0x15,0x3b,0x26,0x46,0x61,0x3b,0x01,
		0x6f,0x3d,0x78,0x3d,0xed,0x3d,0x78,0x3d,0xfe,0x8e,0x02,0x6f,0x06,0x09,0x0a,0x09,
		0xfd,0xf0,0x09,0x17,0x26,0x3b,0x28,0x3b,0x57,0x38,0x1c,0x00,0x00,0x02,0x00,0x32,
		0x00,0x00,0x01,0xc6,0x02,0x99,0x00,0x03,0x00,0x1d,0x00,0x17,0x40,0x09,0x00,0x00,
		0x04,0x19,0x19,0x09,0x0f,0x01,0x04,0x00,0x2f,0xcd,0x33,0x2f,0x33,0x11,0x12,0x39,
		0x2f,0x30,0x31,0x77,0x11,0x33,0x11,0x03,0x32,0x16,0x16,0x15,0x11,0x23,0x11,0x34,
		0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x11,0x14,0x16,0x16,0x15,0x23,0x11,0x34,0x36,
		0x36,0xd9,0x43,0x21,0x3e,0x5b,0x32,0x43,0x1a,0x3b,0x32,0x31,0x3b,0x19,0x04,0x03,
		0x4c,0x2d,0x5a,0x63,0x02,0x36,0xfd,0xca,0x01,0xe5,0x31,0x65,0x4f,0xfe,0x9d,0x01,
		0x64,0x35,0x4b,0x29,0x29,0x4a,0x33,0xfe,0xb9,0x09,0x0b,0x08,0x04,0x01,0x66,0x48,
		0x65,0x35,0x00,0x02,0x00,0x0e,0x00,0x00,0x01,0xe9,0x02,0x6f,0x00,0x03,0x00,0x12,
		0x00,0x21,0x40,0x10,0x03,0x01,0x06,0x12,0x10,0x00,0x00,0x04,0x0f,0x12,0x0c,0x72,
		0x07,0x04,0x04,0x72,0x00,0x2b,0x32,0x2b,0x32,0x12,0x39,0x2f,0x39,0x12,0x39,0x33,
		0x33,0x30,0x31,0x53,0x21,0x15,0x21,0x13,0x33,0x13,0x11,0x33,0x33,0x15,0x06,0x06,
		0x15,0x11,0x23,0x03,0x11,0x23,0x0e,0x01,0xdb,0xfe,0x25,0x37,0x3d,0xec,0x3b,0x09,
		0x05,0x03,0x31,0xf8,0x3c,0x01,0x46,0x33,0x01,0x5c,0xfe,0x32,0x01,0xce,0x07,0x06,
		0x0e,0x11,0xfd,0xbd,0x01,0xea,0xfe,0x16,0x00,0x05,0x00,0x36,0xff,0xf2,0x01,0xeb,
		0x02,0x6f,0x00,0x0c,0x00,0x28,0x00,0x2c,0x00,0x61,0x00,0x6c,0x00,0x39,0x40,0x1b,
		0x54,0x48,0x2d,0x39,0x2d,0x16,0x16,0x29,0x29,0x2c,0x2c,0x21,0x21,0x0d,0x28,0x0d,
		0x28,0x0c,0x61,0x2d,0x0d,0x2d,0x0c,0x0c,0x6b,0x00,0x04,0x00,0x3f,0x32,0x3f,0x33,
		0x3f,0x33,0x11,0x33,0x3f,0x33,0x33,0x11,0x33,0x2f,0x33,0x11,0x33,0x7c,0x2f,0x11,
		0x33,0x18,0x10,0xc4,0x32,0x30,0x31,0x53,0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,
		0x23,0x23,0x11,0x23,0x17,0x22,0x26,0x26,0x37,0x37,0x35,0x35,0x37,0x37,0x17,0x06,
		0x06,0x1d,0x02,0x07,0x06,0x16,0x16,0x33,0x32,0x36,0x37,0x17,0x06,0x06,0x23,0x03,
		0x33,0x07,0x23,0x05,0x22,0x26,0x27,0x37,0x37,0x17,0x16,0x16,0x17,0x16,0x16,0x33,
		0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x27,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,
		0x16,0x17,0x07,0x07,0x27,0x26,0x26,0x27,0x26,0x26,0x23,0x22,0x06,0x15,0x14,0x16,
		0x17,0x1e,0x02,0x15,0x14,0x06,0x23,0x01,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,
		0x23,0x15,0x36,0x4b,0x31,0x3e,0x1f,0x1e,0x3c,0x2f,0x17,0x39,0xc5,0x1e,0x23,0x0d,
		0x02,0x05,0x34,0x0a,0x01,0x04,0x07,0x05,0x01,0x04,0x0e,0x0d,0x0d,0x1b,0x13,0x10,
		0x12,0x28,0x17,0x75,0xa2,0x08,0xa1,0x01,0x06,0x20,0x36,0x15,0x1d,0x04,0x06,0x03,
		0x05,0x0a,0x09,0x18,0x12,0x10,0x16,0x0b,0x09,0x16,0x15,0x2a,0x2c,0x17,0x28,0x19,
		0x21,0x30,0x13,0x1e,0x06,0x06,0x01,0x07,0x0b,0x09,0x11,0x0b,0x15,0x11,0x19,0x1d,
		0x1e,0x25,0x11,0x38,0x2e,0xfe,0xf9,0x20,0x26,0x12,0x12,0x26,0x1f,0x10,0x02,0x6f,
		0x29,0x44,0x28,0x2d,0x48,0x2a,0xfe,0xc5,0x0c,0x1c,0x3a,0x2e,0x79,0x06,0x3a,0x0a,
		0x02,0x07,0x07,0x0f,0x11,0x17,0x06,0x73,0x24,0x27,0x0f,0x0f,0x10,0x2f,0x10,0x11,
		0x01,0x0f,0x30,0xe1,0x18,0x17,0x35,0x09,0x03,0x08,0x12,0x0d,0x08,0x09,0x08,0x0d,
		0x09,0x09,0x10,0x0f,0x07,0x0e,0x24,0x1f,0x17,0x1f,0x11,0x16,0x19,0x28,0x08,0x04,
		0x08,0x0f,0x0c,0x06,0x04,0x0d,0x0b,0x0c,0x10,0x0b,0x0b,0x18,0x1c,0x14,0x27,0x30,
		0x01,0x7d,0x19,0x30,0x20,0x19,0x2b,0x1b,0xc8,0x00,0x00,0x04,0x00,0x0d,0x00,0x00,
		0x01,0xf2,0x02,0x6f,0x00,0x07,0x00,0x0f,0x00,0x1d,0x00,0x28,0x00,0x25,0x40,0x10,
		0x1c,0x1e,0x40,0x08,0x09,0x80,0x00,0x01,0x01,0x28,0x28,0x11,0x04,0x72,0x10,0x0c,
		0x00,0x3f,0x2b,0x32,0x11,0x33,0x7d,0x2f,0x33,0x1a,0x18,0xde,0x32,0x1a,0x7c,0xcc,
		0x32,0x30,0x31,0x53,0x35,0x21,0x15,0x23,0x23,0x21,0x23,0x07,0x35,0x21,0x15,0x23,
		0x23,0x21,0x23,0x03,0x11,0x33,0x32,0x16,0x16,0x15,0x14,0x0e,0x02,0x23,0x23,0x11,
		0x11,0x33,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x23,0x0d,0x01,0xe5,0x4f,0x10,
		0xfe,0xd6,0x0b,0x51,0x01,0xe5,0x50,0x0f,0xfe,0xd2,0x0d,0x1d,0xc8,0x46,0x56,0x29,
		0x16,0x2f,0x48,0x33,0x85,0x7d,0x2e,0x38,0x1a,0x1a,0x38,0x2d,0x7e,0x01,0xd2,0x29,
		0x29,0x51,0x29,0x29,0xfe,0x7f,0x02,0x6f,0x30,0x4f,0x31,0x24,0x3e,0x30,0x1a,0xfe,
		0xed,0x01,0x51,0x1b,0x31,0x20,0x1f,0x32,0x1f,0x00,0x00,0x04,0x00,0x13,0x00,0x00,
		0x01,0xd2,0x02,0x6f,0x00,0x03,0x00,0x07,0x00,0x15,0x00,0x20,0x00,0x20,0x40,0x0f,
		0x04,0x05,0x02,0x03,0x03,0x16,0x14,0x14,0x08,0x20,0x09,0x04,0x72,0x08,0x0c,0x00,
		0x3f,0x2b,0x32,0x12,0x39,0x2f,0x33,0x33,0x11,0x33,0xcc,0x32,0x30,0x31,0x53,0x35,
		0x33,0x15,0x07,0x35,0x21,0x15,0x07,0x11,0x33,0x32,0x16,0x16,0x15,0x14,0x0e,0x02,
		0x23,0x23,0x11,0x11,0x33,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x23,0x13,0x5d,
		0x5d,0x01,0x18,0xe6,0xc8,0x46,0x56,0x29,0x16,0x2f,0x48,0x33,0x85,0x7d,0x2e,0x38,
		0x1a,0x1a,0x38,0x2d,0x7e,0x01,0x13,0x3e,0x3e,0x76,0x3e,0x3e,0x9d,0x02,0x6f,0x30,
		0x4f,0x31,0x24,0x3e,0x30,0x1a,0xfe,0xed,0x01,0x51,0x1b,0x31,0x20,0x1f,0x32,0x1f,
		0x00,0x03,0x00,0x33,0x00,0x00,0x01,0xce,0x02,0x6f,0x00,0x18,0x00,0x1c,0x00,0x20,
		0x00,0x20,0x40,0x0f,0x14,0x18,0x18,0x00,0x1e,0x80,0x09,0x19,0x19,0x0c,0x1a,0x04,
		0x72,0x16,0x0c,0x00,0x3f,0x2b,0x32,0x32,0x11,0x33,0x1a,0xde,0xcc,0x32,0x11,0x33,
		0x30,0x31,0x53,0x33,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x23,0x35,0x17,0x32,
		0x16,0x16,0x15,0x14,0x06,0x06,0x07,0x13,0x23,0x03,0x23,0x03,0x35,0x21,0x15,0x05,
		0x35,0x21,0x15,0x34,0x88,0x2d,0x38,0x1a,0x1a,0x38,0x2d,0x89,0x81,0x4a,0x5b,0x2a,
		0x1f,0x39,0x27,0x90,0x4e,0x8a,0x88,0x01,0x01,0x9b,0xfe,0x65,0x01,0x9b,0x01,0x51,
		0x1b,0x31,0x20,0x1f,0x33,0x1e,0x42,0x1e,0x27,0x47,0x30,0x21,0x42,0x31,0x09,0xfe,
		0xea,0x01,0x13,0x01,0x1f,0x3d,0x3d,0x97,0x3d,0x3d,0x00,0x01,0x00,0x27,0xff,0xf1,
		0x01,0xd6,0x02,0x6f,0x00,0x3d,0x00,0x2b,0x40,0x16,0x0b,0x20,0x20,0x08,0x23,0x23,
		0x12,0x2f,0x36,0x0d,0x72,0x19,0x12,0x04,0x72,0x2a,0x3b,0x3b,0x01,0x00,0x0d,0x72,
		0x00,0x2b,0x32,0x32,0x11,0x33,0x2b,0x32,0x2b,0x32,0x11,0x39,0x2f,0x33,0x33,0x11,
		0x33,0x30,0x31,0x57,0x27,0x3e,0x02,0x35,0x34,0x26,0x27,0x23,0x35,0x33,0x26,0x26,
		0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x17,0x07,0x26,0x26,0x23,0x22,0x06,0x06,0x15,
		0x14,0x16,0x17,0x33,0x15,0x23,0x16,0x16,0x15,0x14,0x06,0x06,0x07,0x36,0x1e,0x02,
		0x33,0x32,0x36,0x37,0x17,0x06,0x06,0x23,0x22,0x2e,0x02,0x23,0x22,0x06,0x41,0x1a,
		0x29,0x2f,0x15,0x07,0x08,0x42,0x34,0x04,0x03,0x30,0x50,0x30,0x25,0x41,0x1c,0x2c,
		0x11,0x2a,0x2d,0x1b,0x29,0x17,0x04,0x04,0x82,0x74,0x07,0x06,0x08,0x10,0x0c,0x1b,
		0x34,0x30,0x2e,0x16,0x13,0x23,0x11,0x1a,0x1a,0x34,0x1a,0x0e,0x2d,0x36,0x34,0x15,
		0x16,0x3a,0x08,0x39,0x14,0x2c,0x3e,0x2f,0x13,0x31,0x1f,0x39,0x11,0x20,0x0f,0x37,
		0x51,0x2d,0x19,0x1a,0x37,0x14,0x1d,0x1e,0x37,0x26,0x0d,0x20,0x14,0x39,0x1c,0x31,
		0x14,0x19,0x2f,0x2a,0x14,0x03,0x0b,0x11,0x0e,0x0e,0x0e,0x34,0x15,0x15,0x0e,0x11,
		0x0e,0x13,0x00,0x02,0x00,0x0e,0x00,0x00,0x01,0xe9,0x02,0x6f,0x00,0x03,0x00,0x10,
		0x00,0x26,0x40,0x12,0x01,0x0f,0x05,0x07,0x0a,0x04,0x00,0x00,0x04,0x0b,0x08,0x08,
		0x05,0x04,0x72,0x0e,0x04,0x0c,0x00,0x3f,0x33,0x2b,0x32,0x2f,0x32,0x11,0x39,0x2f,
		0x12,0x39,0x39,0x12,0x39,0x33,0x30,0x31,0x53,0x35,0x21,0x15,0x01,0x03,0x33,0x13,
		0x13,0x33,0x13,0x13,0x33,0x03,0x23,0x03,0x03,0x0e,0x01,0xdb,0xfe,0x95,0x5a,0x3b,
		0x3c,0x5a,0x14,0x5b,0x33,0x35,0x59,0x18,0x60,0x63,0x01,0x1e,0x28,0x28,0xfe,0xe2,
		0x02,0x6f,0xfe,0x5b,0x01,0x77,0xfe,0x87,0x01,0xa7,0xfd,0x91,0x01,0x97,0xfe,0x69,
		0x00,0x05,0x00,0x24,0x00,0x00,0x01,0xd2,0x02,0x70,0x00,0x03,0x00,0x07,0x00,0x0b,
		0x00,0x0f,0x00,0x18,0x00,0x35,0x40,0x1a,0x07,0x01,0x01,0x04,0x02,0x0f,0x09,0x09,
		0x0c,0x0a,0x12,0x18,0x15,0x03,0x13,0x02,0x0a,0x02,0x0a,0x11,0x16,0x13,0x04,0x72,
		0x11,0x0c,0x00,0x3f,0x2b,0x32,0x12,0x39,0x39,0x2f,0x7c,0x2f,0x12,0x17,0x39,0x11,
		0x33,0x33,0x11,0x33,0x11,0x33,0x33,0x11,0x33,0x30,0x31,0x77,0x23,0x35,0x3b,0x02,
		0x15,0x23,0x07,0x23,0x35,0x3b,0x02,0x15,0x23,0x17,0x23,0x11,0x03,0x33,0x13,0x13,
		0x33,0x03,0xee,0x9a,0x9a,0x28,0x94,0x94,0x28,0x9a,0x9a,0x28,0x94,0x94,0x0e,0x44,
		0xbc,0x4e,0x91,0x85,0x4a,0xae,0xd9,0x39,0x39,0x77,0x38,0x38,0x62,0x01,0x27,0x01,
		0x49,0xfe,0xfb,0x01,0x04,0xfe,0xb8,0x00,0x00,0x01,0x00,0x29,0x00,0x88,0x01,0xca,
		0x02,0x25,0x00,0x0e,0x00,0x1b,0x40,0x0f,0x02,0x05,0x08,0x0e,0x0b,0x03,0x04,0x0a,
		0x09,0x09,0x06,0x0d,0x00,0x00,0x06,0x00,0x2f,0x33,0x2f,0x32,0x11,0x17,0x39,0x30,
		0x31,0x77,0x27,0x37,0x27,0x37,0x17,0x27,0x33,0x07,0x37,0x17,0x07,0x17,0x07,0x27,
		0x8a,0x36,0x82,0xad,0x1a,0xa2,0x10,0x4e,0x12,0x9f,0x1a,0xab,0x7e,0x37,0x6c,0x88,
		0x2c,0x96,0x35,0x41,0x4c,0xb1,0xb1,0x48,0x3d,0x34,0x97,0x2b,0xa6,0x00,0x00,0x01,
		0x00,0x8e,0x00,0xa5,0x01,0x64,0x01,0x72,0x00,0x0f,0x00,0x08,0xb1,0x08,0x00,0x00,
		0x2f,0x32,0x30,0x31,0x77,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,
		0x15,0x14,0x06,0x06,0xf8,0x1d,0x30,0x1d,0x1e,0x30,0x1c,0x1b,0x32,0x1f,0x1d,0x31,
		0xa5,0x1b,0x2f,0x1d,0x1d,0x2e,0x1b,0x1b,0x2e,0x1d,0x1c,0x2f,0x1c,0x00,0x00,0x01,
		0x00,0x33,0xff,0x66,0x01,0xad,0x03,0x09,0x00,0x03,0x00,0x0c,0xb3,0x03,0x02,0x01,
		0x00,0x00,0x2f,0x32,0x2f,0x33,0x30,0x31,0x57,0x27,0x01,0x17,0x65,0x32,0x01,0x48,
		0x32,0x9a,0x14,0x03,0x8f,0x15,0x00,0x02,0x00,0x28,0x00,0x04,0x01,0xbd,0x01,0xc5,
		0x00,0x15,0x00,0x19,0x00,0x14,0xb6,0x18,0x19,0x19,0x0b,0x08,0x13,0x00,0x00,0x2f,
		0x32,0x7c,0x2f,0x33,0x39,0x18,0x2f,0x33,0x30,0x31,0x65,0x22,0x26,0x26,0x35,0x34,
		0x36,0x36,0x33,0x33,0x15,0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,0x33,0x33,0x15,
		0x25,0x27,0x21,0x15,0x01,0x0e,0x47,0x68,0x37,0x39,0x67,0x44,0xb1,0xa1,0x41,0x5b,
		0x2f,0x2d,0x5a,0x44,0xa1,0xfe,0x85,0x01,0x01,0x7c,0x04,0x35,0x64,0x44,0x45,0x66,
		0x39,0x28,0x2c,0x53,0x3d,0x3c,0x51,0x28,0x28,0xca,0x28,0x28,0xff,0xff,0x00,0x2d,
		0x01,0x23,0x01,0xc8,0x01,0x60,0x06,0x06,0x02,0x6d,0x00,0x00,0x00,0x01,0x00,0x2d,
		0x00,0x68,0x01,0xc8,0x02,0x0b,0x00,0x0b,0x00,0x14,0xb7,0x07,0x05,0x04,0x04,0x0a,
		0x00,0xc0,0x01,0x00,0x2f,0x1a,0xcd,0x33,0x33,0x10,0xcd,0x33,0x30,0x31,0x77,0x35,
		0x23,0x35,0x33,0x35,0x33,0x15,0x33,0x15,0x23,0x15,0xde,0xb1,0xb1,0x3f,0xab,0xab,
		0x68,0xbb,0x3d,0xab,0xab,0x3d,0xbb,0x00,0x00,0x01,0x00,0x2d,0x01,0x23,0x01,0xc8,
		0x01,0x60,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x32,0x30,0x31,0x53,0x35,
		0x21,0x15,0x2d,0x01,0x9b,0x01,0x23,0x3d,0x3d,0x00,0x00,0x01,0x00,0x55,0x00,0x91,
		0x01,0xae,0x01,0xf7,0x00,0x0b,0x00,0x16,0x40,0x0a,0x01,0x04,0x0a,0x07,0x04,0x02,
		0x08,0x06,0x02,0x00,0x00,0x2f,0x32,0x2f,0x33,0x12,0x17,0x39,0x30,0x31,0x65,0x27,
		0x07,0x27,0x37,0x27,0x37,0x17,0x37,0x17,0x07,0x17,0x01,0x7d,0x7f,0x7d,0x2c,0x7e,
		0x7e,0x2f,0x7c,0x7e,0x30,0x82,0x7f,0x91,0x85,0x81,0x2c,0x83,0x85,0x2e,0x83,0x83,
		0x2c,0x86,0x86,0x00,0x00,0x03,0x00,0x47,0x00,0x68,0x01,0xaf,0x02,0x0a,0x00,0x03,
		0x00,0x0f,0x00,0x1b,0x00,0x17,0x40,0x09,0x10,0x16,0x01,0x80,0x0a,0x04,0x04,0x00,
		0x01,0x00,0x2f,0x33,0x33,0x2f,0x33,0x1a,0x10,0xcc,0x32,0x30,0x31,0x53,0x35,0x21,
		0x15,0x27,0x22,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x03,0x22,0x26,
		0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x47,0x01,0x68,0xb0,0x12,0x1a,0x1b,
		0x11,0x13,0x1a,0x1a,0x12,0x12,0x1c,0x1d,0x11,0x11,0x1b,0x1a,0x01,0x19,0x43,0x43,
		0x97,0x1a,0x12,0x13,0x1b,0x1c,0x12,0x12,0x1a,0xfe,0xb8,0x19,0x13,0x14,0x1a,0x1c,
		0x12,0x12,0x1a,0x00,0x00,0x02,0x00,0x2d,0x00,0xb6,0x01,0xc8,0x01,0xc2,0x00,0x03,
		0x00,0x07,0x00,0x0e,0xb4,0x04,0x05,0x05,0x01,0x00,0x00,0x2f,0x32,0x32,0x2f,0x33,
		0x30,0x31,0x53,0x35,0x21,0x15,0x05,0x35,0x21,0x15,0x2d,0x01,0x9b,0xfe,0x65,0x01,
		0x9b,0x01,0x85,0x3d,0x3d,0xcf,0x3d,0x3d,0x00,0x03,0x00,0x2d,0x00,0x24,0x01,0xc8,
		0x02,0x55,0x00,0x03,0x00,0x07,0x00,0x0b,0x00,0x21,0x40,0x0e,0x03,0x02,0x02,0x08,
		0x08,0x09,0x09,0x04,0x01,0x00,0x00,0x05,0x05,0x04,0x00,0x2f,0x33,0x11,0x33,0x2f,
		0x32,0x11,0x33,0x2f,0x33,0x11,0x33,0x2f,0x33,0x30,0x31,0x41,0x17,0x01,0x27,0x03,
		0x35,0x21,0x15,0x05,0x35,0x21,0x15,0x01,0x7f,0x2b,0xfe,0xcb,0x2b,0x1d,0x01,0x9b,
		0xfe,0x65,0x01,0x9b,0x02,0x55,0x19,0xfd,0xe8,0x18,0x01,0x49,0x3d,0x3d,0xcf,0x3d,
		0x3d,0x00,0x00,0x01,0x00,0x28,0x00,0x2f,0x01,0xd2,0x02,0x37,0x00,0x06,0x00,0x12,
		0xb7,0x06,0x02,0x05,0x03,0x03,0x04,0x01,0x00,0x00,0x2f,0x32,0x2f,0x33,0x17,0x39,
		0x30,0x31,0x77,0x35,0x25,0x25,0x35,0x05,0x15,0x28,0x01,0x5d,0xfe,0xa5,0x01,0xa8,
		0x2f,0x4c,0xc4,0xb1,0x47,0xdf,0x30,0x00,0x00,0x01,0x00,0x23,0x00,0x2f,0x01,0xcd,
		0x02,0x37,0x00,0x06,0x00,0x12,0xb7,0x01,0x05,0x02,0x03,0x04,0x03,0x06,0x00,0x00,
		0x2f,0x32,0x2f,0x33,0x17,0x39,0x30,0x31,0x65,0x25,0x35,0x25,0x15,0x05,0x05,0x01,
		0xcd,0xfe,0x56,0x01,0xa7,0xfe,0xa5,0x01,0x5e,0x2f,0xf9,0x30,0xdf,0x47,0xb1,0xc4,
		0x00,0x02,0x00,0x23,0x00,0x11,0x01,0xca,0x02,0x0f,0x00,0x06,0x00,0x0a,0x00,0x1b,
		0x40,0x0c,0x06,0x02,0x05,0x03,0x03,0x04,0x04,0x01,0x00,0x80,0x09,0x08,0x00,0x2f,
		0x33,0x1a,0xce,0x32,0x32,0x2f,0x33,0x17,0x39,0x30,0x31,0x77,0x35,0x25,0x25,0x35,
		0x05,0x15,0x03,0x21,0x35,0x21,0x23,0x01,0x5b,0xfe,0xa5,0x01,0xa7,0x0b,0xfe,0x65,
		0x01,0x9b,0x6b,0x42,0x9c,0x7f,0x47,0xad,0x30,0xfe,0xdf,0x3f,0x00,0x02,0x00,0x23,
		0x00,0x11,0x01,0xca,0x02,0x0f,0x00,0x06,0x00,0x0a,0x00,0x1b,0x40,0x0c,0x01,0x05,
		0x02,0x03,0x04,0x03,0x03,0x06,0x00,0x80,0x08,0x07,0x00,0x2f,0x33,0x1a,0xcc,0x32,
		0x32,0x2f,0x33,0x17,0x39,0x30,0x31,0x65,0x25,0x35,0x25,0x15,0x0d,0x02,0x35,0x21,
		0x15,0x01,0xca,0xfe,0x59,0x01,0xa7,0xfe,0xa5,0x01,0x5b,0xfe,0x64,0x01,0x9b,0x6b,
		0xc7,0x30,0xad,0x47,0x7f,0x9c,0x9c,0x3f,0x3f,0x00,0x00,0x02,0x00,0x2d,0x00,0x11,
		0x01,0xc9,0x02,0x3f,0x00,0x0b,0x00,0x0f,0x00,0x1d,0x40,0x0c,0x07,0x05,0x04,0x04,
		0x01,0x0c,0x0d,0x0d,0x00,0xc0,0x0a,0x01,0x00,0x2f,0x33,0x1a,0xcd,0x32,0x2f,0x33,
		0x11,0x33,0x10,0xcd,0x33,0x30,0x31,0x77,0x35,0x23,0x35,0x33,0x35,0x33,0x15,0x33,
		0x15,0x23,0x15,0x07,0x35,0x21,0x15,0xde,0xb1,0xb1,0x3f,0xab,0xab,0xef,0x01,0x9b,
		0x9b,0xbc,0x3d,0xab,0xab,0x3d,0xbc,0x8a,0x3f,0x3f,0xff,0xff,0x00,0x47,0x00,0xba,
		0x01,0xcd,0x01,0xd1,0x06,0x26,0x02,0x78,0x00,0x5a,0x02,0x06,0x02,0x78,0x00,0xb0,
		0x00,0x01,0x00,0x47,0x01,0x0a,0x01,0xcd,0x01,0x77,0x00,0x19,0x00,0x1c,0x40,0x0c,
		0x16,0x15,0x15,0x05,0x0d,0x80,0x09,0x08,0x08,0x12,0x00,0x12,0x00,0x3f,0x32,0x32,
		0x11,0x33,0x1a,0xcd,0x32,0x32,0x11,0x33,0x30,0x31,0x41,0x22,0x2e,0x02,0x23,0x22,
		0x06,0x07,0x27,0x3e,0x02,0x33,0x32,0x1e,0x02,0x33,0x32,0x36,0x37,0x17,0x0e,0x02,
		0x01,0x5c,0x1a,0x28,0x21,0x21,0x14,0x17,0x24,0x11,0x31,0x0b,0x21,0x30,0x1f,0x1a,
		0x26,0x20,0x21,0x15,0x16,0x1e,0x13,0x2e,0x11,0x22,0x25,0x01,0x0a,0x10,0x16,0x10,
		0x14,0x1b,0x16,0x17,0x24,0x15,0x10,0x16,0x10,0x14,0x1c,0x1c,0x1c,0x21,0x0e,0x00,
		0x00,0x01,0x00,0x5b,0x00,0x9d,0x01,0x9e,0x01,0x5b,0x00,0x05,0x00,0x0a,0xb2,0x02,
		0x00,0x03,0x00,0x2f,0xcc,0x33,0x30,0x31,0x65,0x35,0x21,0x35,0x21,0x15,0x01,0x5e,
		0xfe,0xfd,0x01,0x43,0x9d,0x7f,0x3f,0xbe,0x00,0x01,0x00,0x5d,0x01,0x57,0x01,0x93,
		0x02,0x6f,0x00,0x06,0x00,0x17,0x40,0x0a,0x06,0x00,0x02,0x02,0x72,0x04,0x05,0x05,
		0x01,0x00,0x00,0x2f,0x32,0x32,0x11,0x33,0x2b,0x12,0x39,0x30,0x31,0x53,0x27,0x13,
		0x33,0x17,0x07,0x27,0x8f,0x32,0x99,0x16,0x87,0x35,0x61,0x01,0x57,0x18,0x01,0x00,
		0xff,0x19,0xaf,0x00,0x00,0x03,0x00,0x0a,0x00,0xae,0x01,0xec,0x01,0xaf,0x00,0x1b,
		0x00,0x2a,0x00,0x3a,0x00,0x27,0x40,0x12,0x2f,0x18,0x18,0x07,0x33,0x1c,0x15,0x04,
		0x0a,0x1f,0x12,0x12,0x0a,0x37,0x04,0x04,0x27,0x0a,0x00,0x2f,0x33,0x33,0x11,0x33,
		0x11,0x33,0x7c,0x2f,0x33,0x12,0x17,0x39,0x33,0x11,0x33,0x30,0x31,0x41,0x14,0x06,
		0x06,0x23,0x22,0x26,0x27,0x06,0x06,0x23,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,
		0x32,0x16,0x17,0x36,0x36,0x33,0x32,0x16,0x16,0x05,0x26,0x26,0x23,0x22,0x06,0x06,
		0x15,0x14,0x16,0x16,0x33,0x32,0x36,0x36,0x37,0x34,0x26,0x26,0x23,0x22,0x06,0x06,
		0x07,0x1e,0x02,0x33,0x32,0x36,0x36,0x01,0xec,0x1f,0x37,0x24,0x24,0x3b,0x19,0x1a,
		0x3a,0x22,0x23,0x37,0x20,0x20,0x37,0x23,0x23,0x3c,0x19,0x18,0x3a,0x25,0x23,0x37,
		0x1f,0xfe,0xee,0x14,0x28,0x18,0x13,0x1d,0x10,0x10,0x1d,0x13,0x13,0x1d,0x19,0xe1,
		0x10,0x1c,0x13,0x11,0x1e,0x19,0x0d,0x0d,0x1a,0x1d,0x10,0x14,0x1d,0x0f,0x01,0x2e,
		0x24,0x3a,0x22,0x26,0x29,0x28,0x27,0x21,0x3a,0x25,0x25,0x3a,0x22,0x23,0x2c,0x29,
		0x26,0x20,0x3a,0x26,0x27,0x1f,0x12,0x1f,0x15,0x14,0x20,0x12,0x11,0x1f,0x15,0x15,
		0x20,0x11,0x0f,0x1f,0x18,0x17,0x20,0x0f,0x12,0x20,0x00,0x03,0x00,0x0d,0x00,0x68,
		0x01,0xe9,0x02,0x26,0x00,0x03,0x00,0x17,0x00,0x2b,0x00,0x17,0x40,0x09,0x03,0x02,
		0x02,0x22,0x0e,0x01,0x00,0x18,0x04,0x00,0x2f,0x33,0x33,0x32,0x2f,0x33,0x33,0x11,
		0x33,0x30,0x31,0x77,0x27,0x01,0x17,0x03,0x22,0x2e,0x02,0x35,0x34,0x3e,0x02,0x33,
		0x32,0x1e,0x02,0x15,0x14,0x0e,0x02,0x27,0x32,0x3e,0x02,0x35,0x34,0x2e,0x02,0x23,
		0x22,0x0e,0x02,0x15,0x14,0x1e,0x02,0x27,0x1a,0x01,0xc3,0x19,0xef,0x2d,0x4f,0x3d,
		0x22,0x22,0x3d,0x4f,0x2d,0x2d,0x50,0x3d,0x23,0x23,0x3d,0x50,0x2d,0x23,0x3c,0x2d,
		0x1a,0x1a,0x2d,0x3c,0x23,0x22,0x3c,0x2d,0x19,0x19,0x2d,0x3c,0x68,0x1c,0x01,0xa2,
		0x1c,0xfe,0x60,0x22,0x3d,0x50,0x2d,0x2d,0x50,0x3c,0x22,0x22,0x3c,0x50,0x2d,0x2d,
		0x50,0x3d,0x22,0x36,0x1a,0x2e,0x3c,0x22,0x22,0x3b,0x2d,0x1a,0x1a,0x2d,0x3b,0x22,
		0x22,0x3c,0x2e,0x1a,0x00,0x01,0x00,0x49,0xff,0x10,0x01,0xb4,0x02,0xf8,0x00,0x1f,
		0x00,0x0c,0xb3,0x17,0x10,0x07,0x00,0x00,0x2f,0x32,0x2f,0x33,0x30,0x31,0x57,0x22,
		0x26,0x27,0x35,0x16,0x16,0x33,0x32,0x36,0x36,0x35,0x11,0x34,0x36,0x36,0x33,0x32,
		0x16,0x17,0x15,0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x11,0x14,0x06,0x06,0x90,0x14,
		0x22,0x11,0x0e,0x1e,0x12,0x1a,0x26,0x15,0x23,0x43,0x31,0x14,0x20,0x0d,0x0d,0x20,
		0x0e,0x1b,0x26,0x14,0x25,0x43,0xf0,0x06,0x07,0x3e,0x06,0x07,0x19,0x36,0x2c,0x02,
		0x75,0x40,0x52,0x28,0x07,0x05,0x3d,0x05,0x06,0x17,0x39,0x34,0xfd,0x8c,0x3d,0x4f,
		0x26,0x00,0x00,0x01,0x00,0x14,0x00,0x00,0x01,0xe8,0x02,0xa3,0x00,0x29,0x00,0x1f,
		0x40,0x0f,0x00,0x16,0x01,0x72,0x09,0x22,0x22,0x1e,0x1e,0x21,0x21,0x0c,0x0b,0x12,
		0x72,0x00,0x2b,0x32,0x32,0x11,0x33,0x11,0x33,0x11,0x33,0x2b,0x32,0x30,0x31,0x41,
		0x22,0x06,0x06,0x15,0x14,0x1e,0x02,0x17,0x15,0x23,0x35,0x33,0x2e,0x03,0x35,0x34,
		0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x07,0x33,0x15,0x23,0x35,0x3e,
		0x02,0x35,0x34,0x26,0x26,0x01,0x00,0x34,0x4c,0x29,0x15,0x25,0x31,0x1b,0xb4,0x73,
		0x1d,0x31,0x25,0x15,0x39,0x6a,0x49,0x47,0x68,0x39,0x22,0x3d,0x29,0x74,0xb6,0x2e,
		0x3c,0x1e,0x28,0x4a,0x02,0x60,0x3c,0x75,0x57,0x30,0x56,0x48,0x35,0x10,0x45,0x43,
		0x13,0x37,0x49,0x58,0x33,0x6b,0x8f,0x48,0x47,0x8f,0x6d,0x43,0x6f,0x52,0x19,0x43,
		0x45,0x17,0x50,0x6c,0x3f,0x59,0x75,0x3b,0x00,0x02,0x00,0x20,0x00,0x01,0x01,0xd3,
		0x02,0x99,0x00,0x05,0x00,0x09,0x00,0x19,0x40,0x0c,0x04,0x01,0x09,0x09,0x07,0x00,
		0x03,0x12,0x72,0x00,0x01,0x72,0x00,0x2b,0x2b,0x11,0x39,0x32,0x11,0x33,0x33,0x30,
		0x31,0x41,0x13,0x15,0x21,0x35,0x13,0x13,0x03,0x31,0x03,0x01,0x26,0xad,0xfe,0x4d,
		0xaf,0xbc,0x90,0x93,0x02,0x99,0xfd,0x95,0x2d,0x2e,0x02,0x6a,0xfd,0xa3,0x02,0x22,
		0xfd,0xde,0x00,0x01,0x00,0x36,0xff,0x42,0x01,0xbf,0x02,0x6f,0x00,0x0b,0x00,0x10,
		0xb6,0x08,0x00,0x0a,0x01,0x02,0x72,0x00,0x00,0x2f,0x2b,0x32,0x11,0x33,0x30,0x31,
		0x57,0x11,0x21,0x14,0x06,0x06,0x07,0x11,0x23,0x11,0x23,0x11,0x36,0x01,0x89,0x03,
		0x02,0x01,0x47,0xf3,0xbe,0x03,0x2d,0x04,0x08,0x06,0x04,0xfc,0xe9,0x02,0xf2,0xfd,
		0x0e,0x00,0x00,0x01,0x00,0x27,0xff,0x55,0x01,0xcd,0x02,0x9c,0x00,0x0d,0x00,0x1d,
		0x40,0x0c,0x08,0x03,0x07,0x07,0x09,0x02,0x04,0x0a,0x01,0x0b,0x0b,0x00,0x00,0x2f,
		0x32,0x11,0x33,0x33,0x2f,0x39,0x39,0x33,0x11,0x33,0x33,0x30,0x31,0x57,0x35,0x13,
		0x03,0x35,0x21,0x15,0x21,0x37,0x13,0x03,0x27,0x21,0x15,0x27,0xc3,0xc3,0x01,0xa6,
		0xfe,0x90,0x17,0xc1,0xc7,0x16,0x01,0x75,0xab,0x33,0x01,0x71,0x01,0x6a,0x39,0x3b,
		0x08,0xfe,0x92,0xfe,0x8e,0x07,0x3b,0x00,0x00,0x01,0x00,0x0c,0xff,0xf9,0x01,0xea,
		0x02,0xa3,0x00,0x08,0x00,0x10,0xb6,0x03,0x02,0x02,0x06,0x00,0x13,0x72,0x00,0x2b,
		0x2f,0x39,0x2f,0x33,0x30,0x31,0x57,0x03,0x23,0x35,0x33,0x13,0x13,0x33,0x03,0xd0,
		0x6b,0x59,0x7e,0x5f,0xc7,0x3a,0xe6,0x07,0x01,0x23,0x37,0xfe,0xfd,0x02,0x53,0xfd,
		0x56,0x00,0x00,0x01,0x00,0x18,0xff,0x59,0x01,0xee,0x01,0xc9,0x00,0x32,0x00,0x1c,
		0x40,0x0e,0x32,0x2d,0x0e,0x0e,0x29,0x0b,0x72,0x19,0x21,0x0b,0x13,0x07,0x06,0x72,
		0x00,0x2b,0x32,0x3f,0x33,0x2b,0x32,0x11,0x33,0x2f,0x30,0x31,0x57,0x34,0x3e,0x03,
		0x35,0x35,0x33,0x11,0x14,0x1e,0x02,0x33,0x32,0x36,0x36,0x35,0x11,0x33,0x11,0x14,
		0x16,0x16,0x33,0x32,0x36,0x37,0x37,0x17,0x06,0x06,0x23,0x22,0x26,0x26,0x27,0x0e,
		0x02,0x23,0x22,0x26,0x26,0x27,0x1c,0x02,0x06,0x15,0x18,0x04,0x06,0x06,0x04,0x42,
		0x10,0x1b,0x23,0x13,0x21,0x2d,0x17,0x40,0x09,0x12,0x0d,0x0e,0x1d,0x06,0x06,0x1b,
		0x13,0x2b,0x1a,0x15,0x24,0x16,0x03,0x0b,0x28,0x2f,0x19,0x18,0x2d,0x23,0x0a,0x01,
		0xa7,0x11,0x48,0x5a,0x5c,0x4c,0x16,0xff,0xfe,0xf1,0x2a,0x37,0x20,0x0e,0x25,0x43,
		0x2d,0x01,0x09,0xfe,0xab,0x17,0x1f,0x0f,0x18,0x0d,0x0c,0x33,0x1c,0x1b,0x15,0x23,
		0x15,0x1a,0x22,0x11,0x0f,0x20,0x17,0x1c,0x39,0x39,0x38,0x1d,0x00,0x02,0x00,0x1f,
		0xff,0xf5,0x01,0xd5,0x02,0x95,0x00,0x24,0x00,0x38,0x00,0x17,0x40,0x0c,0x14,0x1b,
		0x01,0x72,0x2f,0x09,0x06,0x72,0x25,0x00,0x0b,0x72,0x00,0x2b,0x32,0x2b,0x32,0x2b,
		0x32,0x30,0x31,0x57,0x22,0x26,0x26,0x27,0x26,0x3e,0x02,0x33,0x32,0x16,0x16,0x17,
		0x36,0x26,0x27,0x2e,0x02,0x23,0x22,0x06,0x07,0x27,0x36,0x36,0x33,0x32,0x16,0x16,
		0x17,0x16,0x0e,0x03,0x27,0x32,0x3e,0x02,0x37,0x2e,0x03,0x23,0x22,0x0e,0x02,0x17,
		0x1e,0x03,0xe0,0x3a,0x4f,0x2c,0x06,0x06,0x13,0x32,0x54,0x3b,0x21,0x36,0x2d,0x11,
		0x02,0x03,0x02,0x06,0x22,0x40,0x34,0x1c,0x3f,0x18,0x07,0x1e,0x3f,0x1d,0x4a,0x5f,
		0x35,0x08,0x06,0x07,0x1e,0x39,0x59,0x3c,0x2a,0x3c,0x26,0x14,0x03,0x0c,0x1b,0x21,
		0x24,0x15,0x2b,0x3d,0x23,0x0d,0x04,0x03,0x13,0x1e,0x27,0x0b,0x2e,0x52,0x34,0x31,
		0x63,0x53,0x32,0x14,0x26,0x1c,0x0e,0x1d,0x0d,0x36,0x54,0x30,0x0e,0x0e,0x3b,0x0d,
		0x0b,0x3b,0x6e,0x4c,0x37,0x76,0x6f,0x5a,0x35,0x37,0x2f,0x4c,0x59,0x2b,0x1a,0x25,
		0x17,0x0b,0x2b,0x45,0x50,0x25,0x1e,0x2e,0x1f,0x10,0x00,0x05,0x00,0x1c,0xff,0xf6,
		0x01,0xe2,0x02,0x7a,0x00,0x03,0x00,0x13,0x00,0x23,0x00,0x33,0x00,0x44,0x00,0x25,
		0x40,0x12,0x34,0x24,0x24,0x3d,0x01,0x01,0x2c,0x05,0x72,0x1c,0x0c,0x0c,0x14,0x03,
		0x03,0x04,0x0d,0x72,0x00,0x2b,0x32,0x2f,0x32,0x32,0x2f,0x33,0x2b,0x32,0x2f,0x32,
		0x32,0x2f,0x33,0x30,0x31,0x73,0x01,0x33,0x01,0x05,0x22,0x26,0x26,0x35,0x34,0x36,
		0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x36,0x35,0x34,0x26,
		0x26,0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,0x03,0x22,0x26,0x26,0x35,0x34,0x36,
		0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x36,0x35,0x34,0x2e,
		0x02,0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,0x2e,0x01,0x59,0x39,0xfe,0xa4,0x01,
		0x0f,0x1e,0x33,0x1f,0x1f,0x33,0x1e,0x1f,0x32,0x1e,0x1e,0x33,0x1d,0x0e,0x17,0x0e,
		0x0d,0x17,0x11,0x0d,0x18,0x0f,0x10,0x19,0xdb,0x1e,0x33,0x1f,0x1f,0x33,0x1e,0x1f,
		0x32,0x1f,0x1d,0x33,0x20,0x0d,0x16,0x0e,0x09,0x0e,0x13,0x09,0x0c,0x16,0x0f,0x0f,
		0x17,0x02,0x6f,0xfd,0x91,0x0a,0x22,0x3b,0x24,0x25,0x3a,0x23,0x23,0x3b,0x24,0x24,
		0x3b,0x22,0x32,0x11,0x23,0x1a,0x17,0x24,0x15,0x10,0x22,0x1c,0x1c,0x24,0x10,0x01,
		0x4d,0x22,0x3c,0x25,0x25,0x3a,0x23,0x23,0x3b,0x25,0x26,0x3b,0x21,0x35,0x0f,0x23,
		0x1c,0x15,0x1e,0x13,0x08,0x0f,0x22,0x1d,0x1c,0x22,0x10,0x00,0x00,0x07,0x00,0x14,
		0xff,0xf5,0x01,0xe0,0x02,0x78,0x00,0x03,0x00,0x13,0x00,0x23,0x00,0x33,0x00,0x43,
		0x00,0x53,0x00,0x63,0x00,0x35,0x40,0x1b,0x54,0x44,0x44,0x03,0x02,0x02,0x5c,0x4c,
		0x05,0x72,0x3c,0x2c,0x2c,0x34,0x24,0x0d,0x72,0x01,0x00,0x00,0x1c,0x0c,0x0c,0x14,
		0x04,0x0d,0x72,0x00,0x2b,0x32,0x32,0x2f,0x33,0x33,0x11,0x33,0x2b,0x32,0x32,0x2f,
		0x33,0x2b,0x32,0x32,0x11,0x33,0x32,0x2f,0x33,0x30,0x31,0x77,0x35,0x01,0x15,0x01,
		0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x27,
		0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,0x05,
		0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x27,
		0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,0x03,
		0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x27,
		0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,0x14,
		0x01,0xcc,0xfe,0xa2,0x1c,0x30,0x1c,0x1c,0x30,0x1c,0x1d,0x2f,0x1c,0x1b,0x2f,0x1e,
		0x0b,0x14,0x0d,0x0d,0x15,0x0c,0x0b,0x14,0x0d,0x0d,0x16,0x01,0x00,0x1c,0x30,0x1c,
		0x1c,0x30,0x1c,0x1d,0x2f,0x1c,0x1b,0x2f,0x1e,0x0c,0x14,0x0c,0x0d,0x15,0x0c,0x0a,
		0x15,0x0d,0x0e,0x15,0xea,0x1c,0x30,0x1c,0x1c,0x30,0x1c,0x1d,0x2f,0x1c,0x1b,0x2f,
		0x1e,0x0b,0x14,0x0d,0x0d,0x15,0x0c,0x0b,0x14,0x0d,0x0d,0x16,0xe2,0x38,0x01,0x04,
		0x38,0xfe,0x0f,0x20,0x37,0x23,0x22,0x37,0x20,0x21,0x37,0x22,0x23,0x37,0x1f,0x34,
		0x0e,0x1f,0x19,0x1a,0x1e,0x0e,0x0e,0x1e,0x1a,0x19,0x1f,0x0e,0x34,0x20,0x37,0x23,
		0x22,0x37,0x20,0x21,0x37,0x22,0x23,0x37,0x1f,0x34,0x0e,0x1f,0x19,0x1a,0x1e,0x0e,
		0x0e,0x1e,0x1a,0x19,0x1f,0x0e,0x01,0x5c,0x20,0x37,0x23,0x22,0x37,0x20,0x21,0x37,
		0x22,0x23,0x37,0x1f,0x34,0x0e,0x1f,0x19,0x1a,0x1e,0x0e,0x0e,0x1e,0x1a,0x19,0x1f,
		0x0e,0x00,0x00,0x03,0x00,0x29,0x00,0x63,0x01,0xca,0x02,0x05,0x00,0x13,0x00,0x27,
		0x00,0x33,0x00,0x1a,0x40,0x0d,0x33,0x32,0x29,0x2c,0x2f,0x2d,0x06,0x0a,0x14,0x00,
		0x00,0x1e,0x0a,0x00,0x2f,0x33,0x33,0x2f,0x32,0x11,0x17,0x39,0x30,0x31,0x77,0x22,
		0x2e,0x02,0x35,0x34,0x3e,0x02,0x33,0x32,0x1e,0x02,0x15,0x14,0x0e,0x02,0x27,0x32,
		0x3e,0x02,0x35,0x34,0x2e,0x02,0x23,0x22,0x0e,0x02,0x15,0x14,0x1e,0x02,0x37,0x35,
		0x23,0x35,0x33,0x35,0x33,0x15,0x33,0x15,0x23,0x15,0xf9,0x2b,0x4c,0x39,0x20,0x20,
		0x39,0x4c,0x2b,0x2b,0x4c,0x39,0x21,0x21,0x39,0x4c,0x2b,0x23,0x3d,0x2f,0x1a,0x1a,
		0x2f,0x3d,0x23,0x22,0x3d,0x2f,0x1a,0x1a,0x2f,0x3d,0x10,0x73,0x73,0x29,0x70,0x70,
		0x63,0x21,0x39,0x4c,0x2b,0x2b,0x4c,0x39,0x21,0x21,0x39,0x4c,0x2b,0x2b,0x4c,0x39,
		0x21,0x28,0x1b,0x2e,0x3e,0x22,0x23,0x3c,0x2f,0x1a,0x1a,0x2f,0x3c,0x23,0x22,0x3e,
		0x2e,0x1b,0x1f,0x79,0x28,0x6f,0x6f,0x28,0x79,0x00,0xff,0xff,0x00,0x47,0x01,0xd2,
		0x01,0xcd,0x02,0x3f,0x06,0x07,0x02,0x78,0x00,0x00,0x00,0xc8,0xff,0xff,0x00,0x5f,
		0x01,0x75,0x01,0x95,0x02,0x8d,0x04,0x06,0x02,0x7a,0x02,0x1e,0x00,0x01,0x00,0x3b,
		0x00,0x07,0x01,0xb9,0x02,0x45,0x00,0x09,0x00,0x1d,0x40,0x0c,0x09,0x06,0x07,0x07,
		0x03,0x02,0x02,0x04,0x08,0x01,0x01,0x04,0x00,0x2f,0x33,0x11,0x33,0x11,0x33,0x2f,
		0x33,0x33,0x11,0x33,0x2f,0x30,0x31,0x77,0x11,0x07,0x27,0x37,0x33,0x17,0x07,0x27,
		0x11,0xda,0x74,0x2b,0xbb,0x16,0xad,0x32,0x6a,0x07,0x01,0xbf,0x90,0x23,0xec,0xee,
		0x21,0x8f,0xfe,0x42,0x00,0x01,0x00,0x0e,0x00,0x69,0x01,0xdd,0x02,0x30,0x00,0x09,
		0x00,0x16,0x40,0x0c,0x00,0x07,0x06,0x08,0x01,0x02,0x03,0x05,0x08,0x04,0x09,0x04,
		0x00,0x2f,0x2f,0x12,0x17,0x39,0x30,0x31,0x77,0x01,0x07,0x27,0x25,0x17,0x03,0x27,
		0x37,0x01,0x0e,0x01,0x52,0xb8,0x06,0x01,0x2b,0x10,0x2e,0x3b,0x1a,0xfe,0xb0,0x99,
		0x01,0x51,0x14,0x37,0x23,0x10,0xfe,0xde,0x0c,0xb0,0xfe,0xaf,0x00,0x01,0x00,0x10,
		0x00,0x69,0x01,0xd9,0x01,0xe7,0x00,0x09,0x00,0x1b,0x40,0x0b,0x06,0x07,0x07,0x09,
		0x03,0x02,0x02,0x04,0x00,0x05,0x09,0x00,0x2f,0x33,0x33,0x32,0x32,0x11,0x33,0x11,
		0x33,0x11,0x33,0x30,0x31,0x53,0x21,0x27,0x37,0x17,0x15,0x07,0x27,0x37,0x21,0x10,
		0x01,0x4a,0x90,0x23,0xec,0xee,0x21,0x8f,0xfe,0xb7,0x01,0x48,0x74,0x2b,0xbb,0x16,
		0xad,0x32,0x6a,0x00,0x00,0x01,0x00,0x0e,0x00,0x27,0x01,0xdd,0x01,0xee,0x00,0x09,
		0x00,0x16,0x40,0x0c,0x00,0x03,0x04,0x07,0x08,0x09,0x02,0x05,0x08,0x01,0x06,0x01,
		0x00,0x2f,0x2f,0x12,0x17,0x39,0x30,0x31,0x53,0x37,0x01,0x27,0x37,0x13,0x07,0x25,
		0x37,0x17,0x0e,0x30,0x01,0x50,0x1a,0x3b,0x2e,0x10,0xfe,0xd5,0x06,0xb8,0x01,0xbe,
		0x30,0xfe,0xaf,0xb0,0x0c,0xfe,0xde,0x10,0x23,0x37,0x14,0x00,0x00,0x01,0x00,0x3b,
		0x00,0x1d,0x01,0xb9,0x02,0x5b,0x00,0x09,0x00,0x1d,0x40,0x0c,0x02,0x09,0x09,0x05,
		0x07,0x08,0x08,0x04,0x03,0x03,0x05,0x00,0x00,0x2f,0x2f,0x33,0x2f,0x33,0x33,0x11,
		0x33,0x11,0x33,0x11,0x33,0x30,0x31,0x53,0x33,0x11,0x37,0x17,0x07,0x23,0x27,0x37,
		0x17,0xda,0x43,0x6a,0x32,0xad,0x16,0xbb,0x2b,0x74,0x02,0x5b,0xfe,0x42,0x8f,0x21,
		0xee,0xec,0x23,0x90,0x00,0x01,0x00,0x0b,0x00,0x27,0x01,0xda,0x01,0xee,0x00,0x09,
		0x00,0x16,0x40,0x0c,0x00,0x06,0x07,0x08,0x01,0x02,0x03,0x05,0x08,0x04,0x09,0x04,
		0x00,0x2f,0x2f,0x12,0x17,0x39,0x30,0x31,0x41,0x01,0x37,0x17,0x05,0x27,0x13,0x17,
		0x07,0x01,0x01,0xda,0xfe,0xae,0xb8,0x06,0xfe,0xd5,0x10,0x2e,0x3b,0x1a,0x01,0x50,
		0x01,0xbe,0xfe,0xaf,0x14,0x37,0x23,0x10,0x01,0x22,0x0c,0xb0,0x01,0x51,0x00,0x01,
		0x00,0x17,0x00,0x69,0x01,0xe0,0x01,0xe7,0x00,0x09,0x00,0x1b,0x40,0x0b,0x04,0x03,
		0x03,0x01,0x07,0x08,0x08,0x06,0x00,0x05,0x01,0x00,0x2f,0x33,0x33,0x32,0x32,0x11,
		0x33,0x11,0x33,0x11,0x33,0x30,0x31,0x41,0x15,0x21,0x17,0x07,0x27,0x35,0x37,0x17,
		0x07,0x01,0xe0,0xfe,0xb7,0x8f,0x21,0xee,0xec,0x23,0x90,0x01,0x48,0x43,0x6a,0x32,
		0xad,0x16,0xbb,0x2b,0x74,0x00,0x00,0x01,0x00,0x0b,0x00,0x6a,0x01,0xda,0x02,0x31,
		0x00,0x09,0x00,0x16,0x40,0x0c,0x00,0x04,0x03,0x02,0x09,0x08,0x07,0x05,0x08,0x01,
		0x06,0x01,0x00,0x2f,0x2f,0x12,0x17,0x39,0x30,0x31,0x65,0x07,0x01,0x17,0x07,0x03,
		0x37,0x05,0x07,0x27,0x01,0xda,0x30,0xfe,0xb0,0x1a,0x3b,0x2e,0x10,0x01,0x2b,0x06,
		0xb8,0x9a,0x30,0x01,0x51,0xb0,0x0c,0x01,0x22,0x10,0x23,0x37,0x14,0x00,0x00,0x01,
		0x00,0x0a,0x00,0x6a,0x01,0xea,0x01,0xe8,0x00,0x0f,0x00,0x2e,0x40,0x15,0x00,0x0f,
		0x0f,0x0b,0x0c,0x0c,0x0a,0x01,0x0d,0x0d,0x06,0x03,0x04,0x04,0x08,0x07,0x07,0x09,
		0x02,0x06,0x12,0x00,0x3f,0x33,0x33,0x33,0x11,0x33,0x33,0x11,0x33,0x11,0x33,0x11,
		0x33,0x33,0x33,0x11,0x33,0x33,0x11,0x33,0x30,0x31,0x41,0x17,0x15,0x07,0x27,0x37,
		0x21,0x17,0x07,0x27,0x35,0x37,0x17,0x07,0x21,0x27,0x01,0x3f,0xab,0xad,0x26,0x62,
		0xfe,0xfd,0x67,0x26,0xad,0xab,0x28,0x68,0x01,0x05,0x63,0x01,0xe8,0xb6,0x16,0xb2,
		0x32,0x6a,0x6a,0x32,0xb2,0x16,0xb6,0x2b,0x74,0x74,0x00,0x01,0x00,0x3b,0x00,0x38,
		0x01,0xb9,0x02,0x18,0x00,0x0f,0x00,0x11,0xb7,0x0e,0x05,0x06,0x0d,0x04,0x01,0x09,
		0x01,0x00,0x2f,0x2f,0x12,0x17,0x39,0x30,0x31,0x65,0x07,0x23,0x27,0x37,0x17,0x11,
		0x07,0x27,0x37,0x33,0x17,0x07,0x27,0x11,0x37,0x01,0xb9,0xb6,0x16,0xb2,0x32,0x6a,
		0x6a,0x32,0xb2,0x16,0xb6,0x2b,0x74,0x74,0xe3,0xab,0xad,0x26,0x62,0x01,0x03,0x67,
		0x26,0xad,0xab,0x28,0x68,0xfe,0xfb,0x63,0x00,0x02,0x00,0x22,0x00,0x00,0x01,0xd4,
		0x02,0x7c,0x00,0x09,0x00,0x12,0x00,0x21,0x40,0x0e,0x08,0x06,0x0c,0x03,0x02,0x11,
		0x0c,0x11,0x0c,0x11,0x0f,0x04,0x0a,0x00,0x00,0x2f,0x32,0x2f,0x33,0x39,0x39,0x2f,
		0x2f,0x11,0x33,0x33,0x11,0x33,0x33,0x30,0x31,0x73,0x11,0x23,0x35,0x37,0x33,0x17,
		0x15,0x23,0x11,0x27,0x33,0x11,0x33,0x15,0x27,0x07,0x27,0x33,0x8c,0x6a,0xcc,0x1b,
		0xcb,0x69,0xb7,0x8f,0x74,0xbc,0xba,0x12,0x85,0x01,0x6d,0x2c,0xe3,0xe3,0x2c,0xfe,
		0x93,0x28,0x01,0x6e,0x18,0xd1,0xd1,0x18,0x00,0x02,0x00,0x0a,0x00,0x43,0x01,0xea,
		0x01,0xf5,0x00,0x09,0x00,0x12,0x00,0x2d,0x40,0x15,0x05,0x0f,0x04,0x03,0x0a,0x0b,
		0x0b,0x09,0x0d,0x0e,0x0e,0x07,0x07,0x09,0x0a,0x10,0x11,0x11,0x02,0x02,0x00,0x00,
		0x2f,0x32,0x2f,0x33,0x11,0x33,0x32,0x2f,0x33,0x2f,0x33,0x11,0x33,0x11,0x33,0x11,
		0x12,0x17,0x39,0x30,0x31,0x53,0x33,0x35,0x33,0x17,0x15,0x07,0x23,0x35,0x23,0x37,
		0x15,0x33,0x15,0x23,0x37,0x27,0x37,0x15,0x0a,0xd1,0x2c,0xe3,0xe3,0x2c,0xd1,0x28,
		0xd2,0x1b,0xd4,0xd4,0x1b,0x01,0x8b,0x6a,0xcc,0x1b,0xcb,0x69,0xb7,0x8f,0x74,0xbc,
		0xbc,0x10,0x85,0x00,0x00,0x02,0x00,0x22,0x00,0x00,0x01,0xd4,0x02,0x7c,0x00,0x09,
		0x00,0x12,0x00,0x27,0x40,0x11,0x07,0x0d,0x0d,0x09,0x04,0x0f,0x0f,0x11,0x02,0x02,
		0x0b,0x09,0x09,0x0e,0x06,0x0a,0x00,0x00,0x2f,0x32,0x2f,0x33,0x39,0x2f,0x33,0x33,
		0x2f,0x33,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x30,0x31,0x53,0x33,0x11,0x33,0x15,
		0x07,0x23,0x27,0x35,0x33,0x13,0x11,0x23,0x37,0x17,0x37,0x15,0x23,0x11,0x8c,0xdf,
		0x69,0xcb,0x1b,0xcc,0x6a,0x28,0x85,0x12,0xba,0xbc,0x74,0x02,0x7c,0xfe,0x93,0x2c,
		0xe3,0xe3,0x2c,0x01,0x45,0xfe,0x92,0x18,0xd1,0xd1,0x18,0x01,0x6e,0x00,0x00,0x02,
		0x00,0x0a,0x00,0x43,0x01,0xea,0x01,0xf5,0x00,0x09,0x00,0x12,0x00,0x2f,0x40,0x16,
		0x05,0x0e,0x06,0x03,0x0b,0x11,0x0b,0x09,0x0d,0x0c,0x0c,0x08,0x08,0x09,0x11,0x02,
		0x10,0x0f,0x0f,0x03,0x03,0x02,0x00,0x2f,0x33,0x2f,0x33,0x11,0x33,0x11,0x33,0x2f,
		0x33,0x2f,0x33,0x11,0x33,0x11,0x33,0x11,0x12,0x17,0x39,0x30,0x31,0x41,0x15,0x23,
		0x15,0x23,0x27,0x35,0x37,0x33,0x15,0x17,0x23,0x35,0x17,0x07,0x17,0x23,0x35,0x33,
		0x01,0xea,0xd1,0x2c,0xe3,0xe3,0x2c,0xa9,0xd2,0x1b,0xd4,0xd4,0x1b,0xd2,0x01,0x8b,
		0xdf,0x69,0xcb,0x1b,0xcc,0x6a,0x28,0x85,0x10,0xbc,0xbc,0x74,0x00,0x01,0x00,0x22,
		0x00,0x00,0x01,0xd4,0x02,0x7c,0x00,0x09,0x00,0x17,0x40,0x09,0x00,0x07,0x07,0x02,
		0x05,0x05,0x04,0x08,0x04,0x00,0x2f,0x2f,0x12,0x39,0x2f,0x33,0x33,0x11,0x33,0x30,
		0x31,0x41,0x15,0x23,0x11,0x23,0x11,0x23,0x35,0x37,0x33,0x01,0xd4,0x69,0xdf,0x6a,
		0xcc,0x1b,0x01,0x99,0x2c,0xfe,0x93,0x01,0x6d,0x2c,0xe3,0x00,0x00,0x01,0x00,0x0a,
		0x00,0x43,0x01,0xea,0x01,0xf5,0x00,0x09,0x00,0x19,0x40,0x0a,0x05,0x06,0x01,0x03,
		0x03,0x01,0x01,0x08,0x08,0x00,0x00,0x2f,0x32,0x2f,0x32,0x11,0x33,0x2f,0x11,0x39,
		0x39,0x30,0x31,0x77,0x35,0x33,0x35,0x33,0x17,0x15,0x07,0x23,0x35,0x0a,0xd1,0x2c,
		0xe3,0xe3,0x2c,0xac,0xdf,0x6a,0xcc,0x1b,0xcb,0x69,0x00,0x01,0x00,0x22,0x00,0x00,
		0x01,0xd4,0x02,0x7c,0x00,0x09,0x00,0x17,0x40,0x09,0x00,0x08,0x08,0x03,0x05,0x05,
		0x01,0x06,0x01,0x00,0x2f,0x2f,0x12,0x39,0x2f,0x33,0x33,0x11,0x33,0x30,0x31,0x65,
		0x07,0x23,0x27,0x35,0x33,0x11,0x33,0x11,0x33,0x01,0xd4,0xcb,0x1b,0xcc,0x6a,0xdf,
		0x69,0xe3,0xe3,0xe3,0x2c,0x01,0x6d,0xfe,0x93,0x00,0x00,0x01,0x00,0x0a,0x00,0x43,
		0x01,0xea,0x01,0xf5,0x00,0x09,0x00,0x19,0x40,0x0a,0x05,0x04,0x09,0x07,0x07,0x09,
		0x09,0x02,0x02,0x00,0x00,0x2f,0x32,0x2f,0x32,0x11,0x33,0x2f,0x11,0x39,0x39,0x30,
		0x31,0x65,0x23,0x15,0x23,0x27,0x35,0x37,0x33,0x15,0x33,0x01,0xea,0xd1,0x2c,0xe3,
		0xe3,0x2c,0xd1,0xac,0x69,0xcb,0x1b,0xcc,0x6a,0x00,0x00,0x01,0x00,0x00,0xfe,0x70,
		0x01,0xf4,0xff,0x1f,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x32,0x30,0x31,
		0x51,0x35,0x21,0x15,0x01,0xf4,0xfe,0x70,0xaf,0xaf,0x00,0x01,0x00,0x00,0xfe,0x70,
		0x01,0xf4,0xff,0xce,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,
		0x51,0x11,0x21,0x11,0x01,0xf4,0xfe,0x70,0x01,0x5e,0xfe,0xa2,0x00,0x01,0x00,0x00,
		0xfe,0x70,0x01,0xf4,0x00,0x7d,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,
		0x30,0x31,0x51,0x11,0x21,0x11,0x01,0xf4,0xfe,0x70,0x02,0x0d,0xfd,0xf3,0x00,0x01,
		0x00,0x00,0xfe,0x70,0x01,0xf4,0x01,0x2c,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,
		0x2f,0x2f,0x30,0x31,0x51,0x11,0x21,0x11,0x01,0xf4,0xfe,0x70,0x02,0xbc,0xfd,0x44,
		0x00,0x01,0x00,0x00,0xfe,0x70,0x01,0xf4,0x01,0xdb,0x00,0x03,0x00,0x08,0xb1,0x01,
		0x00,0x00,0x2f,0x2f,0x30,0x31,0x51,0x11,0x21,0x11,0x01,0xf4,0xfe,0x70,0x03,0x6b,
		0xfc,0x95,0x00,0x01,0x00,0x00,0xfe,0x70,0x01,0xf4,0x02,0x8a,0x00,0x03,0x00,0x08,
		0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x51,0x11,0x21,0x11,0x01,0xf4,0xfe,0x70,
		0x04,0x1a,0xfb,0xe6,0x00,0x01,0x00,0x00,0xfe,0x70,0x01,0xf4,0x03,0x39,0x00,0x03,
		0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x51,0x11,0x21,0x11,0x01,0xf4,
		0xfe,0x70,0x04,0xc9,0xfb,0x37,0x00,0x01,0x00,0x00,0xfe,0x70,0x01,0xf4,0x03,0xe8,
		0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x51,0x11,0x21,0x11,
		0x01,0xf4,0xfe,0x70,0x05,0x78,0xfa,0x88,0x00,0x01,0x00,0x00,0x01,0x2c,0x01,0xf4,
		0x03,0xe8,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x51,0x11,
		0x21,0x11,0x01,0xf4,0x01,0x2c,0x02,0xbc,0xfd,0x44,0x00,0x01,0x00,0x00,0x03,0x39,
		0x01,0xf4,0x03,0xe8,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,
		0x51,0x35,0x21,0x15,0x01,0xf4,0x03,0x39,0xaf,0xaf,0x00,0x01,0x00,0x00,0xfe,0x70,
		0x00,0x3f,0x03,0xe8,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,
		0x51,0x11,0x33,0x11,0x3f,0xfe,0x70,0x05,0x78,0xfa,0x88,0x00,0x00,0x01,0x00,0x00,
		0xfe,0x70,0x00,0x7d,0x03,0xe8,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,
		0x30,0x31,0x51,0x11,0x33,0x11,0x7d,0xfe,0x70,0x05,0x78,0xfa,0x88,0x00,0x00,0x01,
		0x00,0x00,0xfe,0x70,0x00,0xbc,0x03,0xe8,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,
		0x2f,0x2f,0x30,0x31,0x51,0x11,0x33,0x11,0xbc,0xfe,0x70,0x05,0x78,0xfa,0x88,0x00,
		0x00,0x01,0x00,0x00,0xfe,0x70,0x00,0xfa,0x03,0xe8,0x00,0x03,0x00,0x08,0xb1,0x01,
		0x00,0x00,0x2f,0x2f,0x30,0x31,0x51,0x11,0x33,0x11,0xfa,0xfe,0x70,0x05,0x78,0xfa,
		0x88,0x00,0x00,0x01,0x00,0x00,0xfe,0x70,0x01,0x39,0x03,0xe8,0x00,0x03,0x00,0x08,
		0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x51,0x11,0x21,0x11,0x01,0x39,0xfe,0x70,
		0x05,0x78,0xfa,0x88,0x00,0x01,0x00,0x00,0xfe,0x70,0x01,0x77,0x03,0xe8,0x00,0x03,
		0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x51,0x11,0x21,0x11,0x01,0x77,
		0xfe,0x70,0x05,0x78,0xfa,0x88,0x00,0x01,0x00,0x00,0xfe,0x70,0x01,0xb6,0x03,0xe8,
		0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x51,0x11,0x21,0x11,
		0x01,0xb6,0xfe,0x70,0x05,0x78,0xfa,0x88,0x00,0x01,0x00,0xfa,0xfe,0x70,0x01,0xf4,
		0x03,0xe8,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x53,0x11,
		0x33,0x11,0xfa,0xfa,0xfe,0x70,0x05,0x78,0xfa,0x88,0x00,0x01,0x01,0xb6,0xfe,0x70,
		0x01,0xf4,0x03,0xe8,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,
		0x41,0x11,0x33,0x11,0x01,0xb6,0x3e,0xfe,0x70,0x05,0x78,0xfa,0x88,0x00,0x00,0x01,
		0x00,0x00,0xfe,0x70,0x00,0xfa,0x01,0x2c,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,
		0x2f,0x2f,0x30,0x31,0x51,0x11,0x33,0x11,0xfa,0xfe,0x70,0x02,0xbc,0xfd,0x44,0x00,
		0x00,0x01,0x00,0xfa,0xfe,0x70,0x01,0xf4,0x01,0x2c,0x00,0x03,0x00,0x08,0xb1,0x01,
		0x00,0x00,0x2f,0x2f,0x30,0x31,0x53,0x11,0x33,0x11,0xfa,0xfa,0xfe,0x70,0x02,0xbc,
		0xfd,0x44,0x00,0x01,0x00,0x00,0x01,0x2c,0x00,0xfa,0x03,0xe8,0x00,0x03,0x00,0x08,
		0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x51,0x11,0x33,0x11,0xfa,0x01,0x2c,0x02,
		0xbc,0xfd,0x44,0x00,0x00,0x01,0x00,0x00,0xfe,0x70,0x01,0xf4,0x03,0xe8,0x00,0x05,
		0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x51,0x11,0x33,0x11,0x33,0x11,
		0xfa,0xfa,0xfe,0x70,0x05,0x78,0xfd,0x44,0xfd,0x44,0x00,0x01,0x00,0x00,0xfe,0x70,
		0x01,0xf4,0x03,0xe8,0x00,0x07,0x00,0x08,0xb1,0x03,0x00,0x00,0x2f,0x2f,0x30,0x31,
		0x53,0x11,0x23,0x11,0x33,0x11,0x33,0x11,0xfa,0xfa,0xfa,0xfa,0xfe,0x70,0x02,0xbc,
		0x02,0xbc,0xfd,0x44,0xfd,0x44,0x00,0x01,0x00,0x00,0xfe,0x70,0x01,0xf4,0x03,0xe8,
		0x00,0x05,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x51,0x11,0x21,0x11,
		0x23,0x11,0x01,0xf4,0xfa,0xfe,0x70,0x05,0x78,0xfd,0x44,0xfd,0x44,0x00,0x00,0x01,
		0x00,0x00,0xfe,0x70,0x01,0xf4,0x03,0xe8,0x00,0x05,0x00,0x08,0xb1,0x03,0x00,0x00,
		0x2f,0x2f,0x30,0x31,0x53,0x11,0x23,0x11,0x21,0x11,0xfa,0xfa,0x01,0xf4,0xfe,0x70,
		0x02,0xbc,0x02,0xbc,0xfa,0x88,0x00,0x01,0x00,0xfa,0x01,0x2c,0x01,0xf4,0x03,0xe8,
		0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x53,0x11,0x33,0x11,
		0xfa,0xfa,0x01,0x2c,0x02,0xbc,0xfd,0x44,0x00,0x02,0x00,0x00,0xfe,0x70,0x01,0xf4,
		0x03,0xe8,0x00,0x03,0x00,0x07,0x00,0x0e,0xb4,0x01,0x04,0x04,0x05,0x00,0x00,0x2f,
		0x2f,0x39,0x2f,0x33,0x30,0x31,0x51,0x11,0x33,0x19,0x02,0x33,0x11,0xfa,0xfa,0xfe,
		0x70,0x02,0xbc,0xfd,0x44,0x02,0xbc,0x02,0xbc,0xfd,0x44,0x00,0x00,0x01,0x00,0x00,
		0xfe,0x70,0x01,0xf4,0x03,0xe8,0x00,0x05,0x00,0x08,0xb1,0x03,0x00,0x00,0x2f,0x2f,
		0x30,0x31,0x51,0x11,0x33,0x11,0x33,0x11,0xfa,0xfa,0xfe,0x70,0x02,0xbc,0x02,0xbc,
		0xfa,0x88,0x00,0x2a,0x00,0x11,0xfe,0x89,0x01,0xe3,0x03,0xcf,0x00,0x03,0x00,0x07,
		0x00,0x0b,0x00,0x0f,0x00,0x13,0x00,0x17,0x00,0x1b,0x00,0x1f,0x00,0x23,0x00,0x27,
		0x00,0x2b,0x00,0x2f,0x00,0x33,0x00,0x37,0x00,0x3b,0x00,0x3f,0x00,0x43,0x00,0x47,
		0x00,0x4b,0x00,0x4f,0x00,0x53,0x00,0x57,0x00,0x5b,0x00,0x5f,0x00,0x63,0x00,0x67,
		0x00,0x6b,0x00,0x6f,0x00,0x73,0x00,0x77,0x00,0x7b,0x00,0x7f,0x00,0x83,0x00,0x87,
		0x00,0x8b,0x00,0x8f,0x00,0x93,0x00,0x97,0x00,0x9b,0x00,0x9f,0x00,0xa3,0x00,0xa7,
		0x00,0x00,0x53,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,
		0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,
		0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,
		0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x11,0x32,0x74,0x32,0x75,0x32,
		0xfe,0xd4,0x32,0x75,0x32,0x74,0x32,0xfe,0x2e,0x32,0x74,0x32,0x75,0x32,0xfe,0xd4,
		0x32,0x75,0x32,0x74,0x32,0xfe,0x2e,0x32,0x74,0x32,0x75,0x32,0xfe,0xd4,0x32,0x75,
		0x32,0x74,0x32,0xfe,0x2e,0x32,0x74,0x32,0x75,0x32,0xfe,0xd4,0x32,0x75,0x32,0x74,
		0x32,0xfe,0x2e,0x32,0x74,0x32,0x75,0x32,0xfe,0xd4,0x32,0x75,0x32,0x74,0x32,0xfe,
		0x2e,0x32,0x74,0x32,0x75,0x32,0xfe,0xd4,0x32,0x75,0x32,0x74,0x32,0xfe,0x2e,0x32,
		0x74,0x32,0x75,0x32,0xfe,0xd4,0x32,0x75,0x32,0x74,0x32,0xfe,0x89,0x32,0x32,0x32,
		0x32,0x32,0x32,0x64,0x32,0x32,0x32,0x32,0x32,0x32,0x64,0x32,0x32,0x32,0x32,0x32,
		0x32,0x64,0x32,0x32,0x32,0x32,0x32,0x32,0x64,0x32,0x32,0x32,0x32,0x32,0x32,0x64,
		0x32,0x32,0x32,0x32,0x32,0x32,0x64,0x32,0x32,0x32,0x32,0x32,0x32,0x64,0x32,0x32,
		0x32,0x32,0x32,0x32,0x64,0x32,0x32,0x32,0x32,0x32,0x32,0x64,0x32,0x32,0x32,0x32,
		0x32,0x32,0x64,0x32,0x32,0x32,0x32,0x32,0x32,0x64,0x32,0x32,0x32,0x32,0x32,0x32,
		0x64,0x32,0x32,0x32,0x32,0x32,0x32,0x64,0x32,0x32,0x32,0x32,0x32,0x32,0x00,0x2a,
		0x00,0x02,0xfe,0x7a,0x01,0xf2,0x03,0xde,0x00,0x03,0x00,0x07,0x00,0x0b,0x00,0x0f,
		0x00,0x13,0x00,0x17,0x00,0x1b,0x00,0x1f,0x00,0x23,0x00,0x27,0x00,0x2b,0x00,0x2f,
		0x00,0x33,0x00,0x37,0x00,0x3b,0x00,0x3f,0x00,0x43,0x00,0x47,0x00,0x4b,0x00,0x4f,
		0x00,0x53,0x00,0x57,0x00,0x5b,0x00,0x5f,0x00,0x63,0x00,0x67,0x00,0x6b,0x00,0x6f,
		0x00,0x73,0x00,0x77,0x00,0x7b,0x00,0x7f,0x00,0x83,0x00,0x87,0x00,0x8b,0x00,0x8f,
		0x00,0x93,0x00,0x97,0x00,0x9b,0x00,0x9f,0x00,0xa3,0x00,0xa7,0x00,0x00,0x53,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,
		0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,
		0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,
		0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x25,0x35,0x33,0x15,0x33,0x35,
		0x33,0x15,0x33,0x35,0x33,0x15,0x02,0x50,0x56,0x50,0x57,0x50,0xfe,0xb6,0x50,0x57,
		0x50,0x56,0x50,0xfe,0x10,0x50,0x56,0x50,0x57,0x50,0xfe,0xb6,0x50,0x57,0x50,0x56,
		0x50,0xfe,0x10,0x50,0x56,0x50,0x57,0x50,0xfe,0xb6,0x50,0x57,0x50,0x56,0x50,0xfe,
		0x10,0x50,0x56,0x50,0x57,0x50,0xfe,0xb6,0x50,0x57,0x50,0x56,0x50,0xfe,0x10,0x50,
		0x56,0x50,0x57,0x50,0xfe,0xb6,0x50,0x57,0x50,0x56,0x50,0xfe,0x10,0x50,0x56,0x50,
		0x57,0x50,0xfe,0xb6,0x50,0x57,0x50,0x56,0x50,0xfe,0x10,0x50,0x56,0x50,0x57,0x50,
		0xfe,0xb6,0x50,0x57,0x50,0x56,0x50,0xfe,0x7a,0x50,0x50,0x50,0x50,0x50,0x50,0x64,
		0x50,0x50,0x50,0x50,0x50,0x50,0x64,0x50,0x50,0x50,0x50,0x50,0x50,0x64,0x50,0x50,
		0x50,0x50,0x50,0x50,0x64,0x50,0x50,0x50,0x50,0x50,0x50,0x64,0x50,0x50,0x50,0x50,
		0x50,0x50,0x64,0x50,0x50,0x50,0x50,0x50,0x50,0x64,0x50,0x50,0x50,0x50,0x50,0x50,
		0x64,0x50,0x50,0x50,0x50,0x50,0x50,0x64,0x50,0x50,0x50,0x50,0x50,0x50,0x64,0x50,
		0x50,0x50,0x50,0x50,0x50,0x64,0x50,0x50,0x50,0x50,0x50,0x50,0x64,0x50,0x50,0x50,
		0x50,0x50,0x50,0x64,0x50,0x50,0x50,0x50,0x50,0x50,0x00,0x19,0x00,0x00,0xfe,0x70,
		0x01,0xf4,0x03,0xe8,0x00,0x47,0x00,0x4b,0x00,0x4f,0x00,0x53,0x00,0x57,0x00,0x5b,
		0x00,0x5f,0x00,0x63,0x00,0x67,0x00,0x6b,0x00,0x6f,0x00,0x73,0x00,0x77,0x00,0x7b,
		0x00,0x7f,0x00,0x83,0x00,0x87,0x00,0x8b,0x00,0x8f,0x00,0x93,0x00,0x97,0x00,0x9b,
		0x00,0x9f,0x00,0xa3,0x00,0xa7,0x00,0x00,0x51,0x35,0x33,0x35,0x23,0x35,0x33,0x35,
		0x23,0x35,0x33,0x35,0x23,0x35,0x33,0x35,0x23,0x35,0x33,0x35,0x23,0x35,0x33,0x35,
		0x23,0x35,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x23,0x15,
		0x33,0x15,0x23,0x15,0x33,0x15,0x23,0x15,0x33,0x15,0x23,0x15,0x33,0x15,0x23,0x15,
		0x33,0x15,0x23,0x15,0x33,0x15,0x23,0x15,0x23,0x35,0x23,0x15,0x23,0x35,0x23,0x15,
		0x37,0x35,0x23,0x15,0x33,0x35,0x23,0x15,0x27,0x35,0x23,0x15,0x33,0x35,0x23,0x15,
		0x27,0x35,0x23,0x15,0x33,0x35,0x23,0x15,0x27,0x35,0x23,0x15,0x33,0x35,0x23,0x15,
		0x27,0x35,0x23,0x15,0x33,0x35,0x23,0x15,0x27,0x35,0x23,0x15,0x33,0x35,0x23,0x15,
		0x27,0x35,0x23,0x15,0x33,0x35,0x23,0x15,0x27,0x35,0x23,0x15,0x33,0x35,0x23,0x15,
		0x27,0x35,0x23,0x15,0x33,0x35,0x23,0x15,0x27,0x35,0x23,0x15,0x33,0x35,0x23,0x15,
		0x27,0x35,0x23,0x15,0x33,0x35,0x23,0x15,0x27,0x35,0x23,0x15,0x33,0x35,0x23,0x15,
		0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x78,0x2f,0x78,
		0x2e,0x66,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x78,
		0x2f,0x78,0x2e,0x82,0x2f,0xd5,0x2e,0xcc,0x2e,0xd5,0x2f,0x24,0x2f,0xd5,0x2e,0xcc,
		0x2e,0xd5,0x2f,0x24,0x2f,0xd5,0x2e,0xcc,0x2e,0xd5,0x2f,0x24,0x2f,0xd5,0x2e,0xcc,
		0x2e,0xd5,0x2f,0x24,0x2f,0xd5,0x2e,0xcc,0x2e,0xd5,0x2f,0x24,0x2f,0xd5,0x2e,0xcc,
		0x2e,0xd5,0x2f,0xfe,0x70,0x6e,0x50,0x78,0x50,0x78,0x50,0x78,0x50,0x78,0x50,0x78,
		0x50,0x78,0x5a,0x5a,0x5a,0x5a,0x5a,0x6e,0x50,0x78,0x50,0x78,0x50,0x78,0x50,0x78,
		0x50,0x78,0x50,0x78,0x5a,0x5a,0x5a,0x5a,0x5a,0x6e,0x50,0x50,0x50,0x50,0x64,0x50,
		0x50,0x50,0x50,0x64,0x50,0x50,0x50,0x50,0x64,0x50,0x50,0x50,0x50,0x64,0x50,0x50,
		0x50,0x50,0x64,0x50,0x50,0x50,0x50,0x64,0x50,0x50,0x50,0x50,0x64,0x50,0x50,0x50,
		0x50,0x64,0x50,0x50,0x50,0x50,0x64,0x50,0x50,0x50,0x50,0x64,0x50,0x50,0x50,0x50,
		0x64,0x50,0x50,0x50,0x50,0x00,0x00,0x01,0x00,0x29,0x00,0x63,0x01,0xca,0x02,0x05,
		0x00,0x13,0x00,0x08,0xb1,0x0a,0x00,0x00,0x2f,0x32,0x30,0x31,0x77,0x22,0x2e,0x02,
		0x35,0x34,0x3e,0x02,0x33,0x32,0x1e,0x02,0x15,0x14,0x0e,0x02,0xf9,0x2b,0x4c,0x39,
		0x20,0x20,0x39,0x4c,0x2b,0x2b,0x4c,0x39,0x21,0x21,0x39,0x4c,0x63,0x21,0x39,0x4c,
		0x2b,0x2b,0x4c,0x39,0x21,0x21,0x39,0x4c,0x2b,0x2b,0x4c,0x39,0x21,0x00,0x00,0x02,
		0x00,0x29,0x00,0x63,0x01,0xca,0x02,0x05,0x00,0x13,0x00,0x27,0x00,0x0c,0xb3,0x14,
		0x1e,0x0a,0x00,0x00,0x2f,0x2f,0x33,0x32,0x30,0x31,0x77,0x22,0x2e,0x02,0x35,0x34,
		0x3e,0x02,0x33,0x32,0x1e,0x02,0x15,0x14,0x0e,0x02,0x27,0x32,0x3e,0x02,0x35,0x34,
		0x2e,0x02,0x23,0x22,0x0e,0x02,0x15,0x14,0x1e,0x02,0xf9,0x2b,0x4c,0x39,0x20,0x20,
		0x39,0x4c,0x2b,0x2b,0x4c,0x39,0x21,0x21,0x39,0x4c,0x2b,0x23,0x3d,0x2f,0x1a,0x1a,
		0x2f,0x3d,0x23,0x22,0x3d,0x2f,0x1a,0x1a,0x2f,0x3d,0x63,0x21,0x39,0x4c,0x2b,0x2b,
		0x4c,0x39,0x21,0x21,0x39,0x4c,0x2b,0x2b,0x4c,0x39,0x21,0x28,0x1b,0x2e,0x3e,0x22,
		0x23,0x3c,0x2f,0x1a,0x1a,0x2f,0x3c,0x23,0x22,0x3e,0x2e,0x1b,0x00,0x01,0x00,0x19,
		0x00,0x35,0x01,0xdb,0x01,0xf7,0x00,0x03,0x00,0x08,0xb1,0x00,0x02,0x00,0x2f,0x2f,
		0x30,0x31,0x53,0x17,0x07,0x27,0xfa,0xe1,0xe1,0xe1,0x01,0xf7,0xe1,0xe1,0xe1,0x00,
		0x00,0x02,0x00,0x19,0x00,0x35,0x01,0xdb,0x01,0xf7,0x00,0x03,0x00,0x07,0x00,0x0e,
		0xb4,0x05,0x02,0x07,0x00,0x02,0x00,0x2f,0x2f,0x32,0x11,0x33,0x30,0x31,0x53,0x17,
		0x07,0x27,0x33,0x17,0x37,0x27,0xfa,0xe1,0xe1,0xe1,0x39,0xa8,0xa8,0xa8,0x01,0xf7,
		0xe1,0xe1,0xe1,0xa8,0xa8,0xa8,0x00,0x02,0x00,0x2f,0x00,0x00,0x01,0xd8,0x02,0x81,
		0x00,0x05,0x00,0x09,0x00,0x13,0x40,0x09,0x06,0x00,0x08,0x02,0x03,0x72,0x00,0x12,
		0x72,0x00,0x2b,0x2b,0x32,0x11,0x33,0x30,0x31,0x73,0x03,0x13,0x33,0x13,0x03,0x27,
		0x37,0x27,0x07,0xf3,0xc4,0xc4,0x21,0xc4,0xc4,0x10,0x8d,0x8d,0x8e,0x01,0x40,0x01,
		0x41,0xfe,0xbf,0xfe,0xc0,0x58,0xe8,0xea,0xea,0x00,0x00,0x03,0xff,0xb0,0xfe,0x70,
		0x02,0x44,0x01,0xe0,0x00,0x05,0x00,0x0b,0x00,0x0f,0x00,0x1b,0x40,0x0b,0x0b,0x02,
		0x03,0x03,0x0d,0x0a,0x07,0x07,0x0c,0x0d,0x00,0x00,0x2f,0x2f,0x33,0x39,0x2f,0x33,
		0x11,0x39,0x2f,0x33,0x32,0x30,0x31,0x53,0x11,0x23,0x35,0x21,0x11,0x33,0x11,0x21,
		0x15,0x23,0x11,0x01,0x35,0x21,0x15,0x46,0x96,0x01,0x0e,0x78,0x01,0x0e,0x96,0xfe,
		0x02,0x02,0x94,0xfe,0x70,0x02,0x08,0x78,0xfd,0x80,0x02,0x80,0x78,0xfd,0xf8,0x02,
		0xf8,0x78,0x78,0x00,0x00,0x02,0xff,0xb0,0xfe,0x70,0x01,0xae,0x01,0xe0,0x00,0x05,
		0x00,0x0b,0x00,0x12,0xb6,0x0b,0x02,0x03,0x03,0x08,0x09,0x00,0x00,0x2f,0x2f,0x33,
		0x39,0x2f,0x33,0x32,0x30,0x31,0x53,0x11,0x23,0x35,0x21,0x11,0x33,0x11,0x21,0x35,
		0x21,0x11,0x46,0x96,0x01,0x0e,0x78,0xfe,0x7a,0x01,0xfe,0xfe,0x70,0x02,0x08,0x78,
		0xfd,0x80,0x02,0xf8,0x78,0xfc,0x90,0x00,0x00,0x02,0x00,0x46,0xfe,0x70,0x02,0x44,
		0x01,0xe0,0x00,0x05,0x00,0x0b,0x00,0x12,0xb6,0x0b,0x0a,0x07,0x07,0x04,0x01,0x00,
		0x00,0x2f,0x2f,0x33,0x39,0x2f,0x33,0x32,0x30,0x31,0x53,0x11,0x21,0x15,0x21,0x11,
		0x33,0x11,0x21,0x15,0x23,0x11,0x46,0x01,0xfe,0xfe,0x7a,0x78,0x01,0x0e,0x96,0xfe,
		0x70,0x03,0x70,0x78,0xfd,0x08,0x02,0x80,0x78,0xfd,0xf8,0x00,0x00,0x02,0xff,0xb0,
		0x00,0x78,0x02,0x44,0x01,0xe0,0x00,0x03,0x00,0x07,0x00,0x0c,0xb3,0x01,0x04,0x05,
		0x00,0x00,0x2f,0x2f,0x33,0x32,0x30,0x31,0x67,0x35,0x21,0x15,0x25,0x35,0x21,0x15,
		0x50,0x02,0x94,0xfd,0x6c,0x02,0x94,0x78,0x78,0x78,0xf0,0x78,0x78,0x00,0x00,0x03,
		0xff,0xb0,0x00,0x78,0x02,0x44,0x03,0xe8,0x00,0x03,0x00,0x09,0x00,0x0f,0x00,0x1d,
		0x40,0x0c,0x0c,0x07,0x01,0x05,0x04,0x04,0x07,0x0d,0x0a,0x0a,0x07,0x00,0x00,0x2f,
		0x2f,0x39,0x2f,0x33,0x11,0x39,0x2f,0x33,0x32,0x11,0x33,0x30,0x31,0x67,0x35,0x21,
		0x15,0x25,0x35,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x15,0x50,0x02,0x94,
		0xfd,0x6c,0x96,0x78,0x78,0x78,0x96,0x78,0x78,0x78,0xf0,0x78,0x02,0x08,0xfd,0x80,
		0x02,0x80,0xfd,0xf8,0x78,0x00,0x00,0x02,0xff,0xb0,0x00,0x78,0x01,0xae,0x03,0xe8,
		0x00,0x05,0x00,0x0b,0x00,0x14,0xb7,0x0a,0x03,0x01,0x07,0x06,0x06,0x03,0x00,0x00,
		0x2f,0x2f,0x39,0x2f,0x33,0x32,0x11,0x33,0x30,0x31,0x67,0x35,0x21,0x11,0x33,0x11,
		0x25,0x35,0x33,0x11,0x33,0x11,0x50,0x01,0x86,0x78,0xfe,0x02,0x96,0x78,0x78,0x78,
		0x02,0xf8,0xfc,0x90,0xf0,0x78,0x02,0x08,0xfd,0x80,0x00,0x02,0x00,0x46,0x00,0x78,
		0x02,0x44,0x03,0xe8,0x00,0x05,0x00,0x0b,0x00,0x14,0xb7,0x08,0x01,0x03,0x09,0x06,
		0x06,0x01,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x32,0x11,0x33,0x30,0x31,0x77,0x11,
		0x33,0x11,0x21,0x15,0x25,0x11,0x33,0x11,0x33,0x15,0x46,0x78,0x01,0x86,0xfe,0xf2,
		0x78,0x96,0x78,0x03,0x70,0xfd,0x08,0x78,0xf0,0x02,0x80,0xfd,0xf8,0x78,0x00,0x02,
		0x00,0x46,0xfe,0x70,0x01,0xae,0x03,0xe8,0x00,0x03,0x00,0x07,0x00,0x0c,0xb3,0x04,
		0x05,0x01,0x00,0x00,0x2f,0x2f,0x33,0x32,0x30,0x31,0x53,0x11,0x33,0x11,0x33,0x11,
		0x33,0x11,0x46,0x78,0x78,0x78,0xfe,0x70,0x05,0x78,0xfa,0x88,0x05,0x78,0xfa,0x88,
		0x00,0x04,0xff,0xb0,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x05,0x00,0x0b,0x00,0x11,
		0x00,0x17,0x00,0x1d,0x40,0x0c,0x13,0x0f,0x15,0x0d,0x0d,0x12,0x0c,0x07,0x02,0x03,
		0x06,0x00,0x00,0x2f,0x32,0x2f,0x33,0x33,0x2f,0x33,0x33,0x11,0x33,0x2f,0x33,0x30,
		0x31,0x53,0x11,0x23,0x35,0x21,0x11,0x33,0x11,0x21,0x15,0x23,0x11,0x01,0x35,0x33,
		0x11,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x15,0x46,0x96,0x01,0x0e,0x78,0x01,0x0e,
		0x96,0xfe,0x02,0x96,0x78,0x78,0x78,0x96,0xfe,0x70,0x02,0x08,0x78,0xfd,0x80,0x02,
		0x80,0x78,0xfd,0xf8,0x02,0xf8,0x78,0x02,0x08,0xfd,0x80,0x02,0x80,0xfd,0xf8,0x78,
		0x00,0x03,0xff,0xb0,0xfe,0x70,0x01,0xae,0x03,0xe8,0x00,0x05,0x00,0x09,0x00,0x0f,
		0x00,0x14,0xb7,0x07,0x0d,0x0b,0x0a,0x02,0x03,0x06,0x00,0x00,0x2f,0x32,0x2f,0x33,
		0x2f,0x33,0x2f,0x33,0x30,0x31,0x53,0x11,0x23,0x35,0x21,0x11,0x33,0x11,0x33,0x11,
		0x01,0x35,0x33,0x11,0x33,0x11,0x46,0x96,0x01,0x0e,0x78,0x78,0xfe,0x02,0x96,0x78,
		0xfe,0x70,0x02,0x08,0x78,0xfd,0x80,0x05,0x78,0xfa,0x88,0x02,0xf8,0x78,0x02,0x08,
		0xfd,0x80,0x00,0x03,0x00,0x46,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x03,0x00,0x09,
		0x00,0x0f,0x00,0x1d,0x40,0x0c,0x0c,0x01,0x09,0x05,0x08,0x08,0x01,0x0a,0x0d,0x0d,
		0x01,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x11,0x39,0x2f,0x33,0x32,0x11,0x33,0x30,
		0x31,0x53,0x11,0x33,0x11,0x33,0x11,0x21,0x15,0x23,0x11,0x03,0x11,0x33,0x11,0x33,
		0x15,0x46,0x78,0x78,0x01,0x0e,0x96,0x78,0x78,0x96,0xfe,0x70,0x05,0x78,0xfa,0x88,
		0x02,0x80,0x78,0xfd,0xf8,0x02,0xf8,0x02,0x80,0xfd,0xf8,0x78,0x00,0x01,0xff,0xb0,
		0xfe,0x70,0x02,0x44,0x01,0x68,0x00,0x0b,0x00,0x12,0xb6,0x08,0x06,0x0a,0x02,0x02,
		0x03,0x00,0x00,0x2f,0x2f,0x33,0x11,0x33,0x33,0x32,0x30,0x31,0x53,0x11,0x23,0x35,
		0x21,0x15,0x23,0x11,0x23,0x11,0x23,0x11,0x46,0x96,0x02,0x94,0x96,0x78,0x78,0xfe,
		0x70,0x02,0x80,0x78,0x78,0xfd,0x80,0x02,0x80,0xfd,0x80,0x00,0x00,0x01,0xff,0xb0,
		0xfe,0x70,0x01,0xae,0x01,0x68,0x00,0x09,0x00,0x10,0xb5,0x06,0x08,0x02,0x02,0x03,
		0x00,0x00,0x2f,0x2f,0x33,0x11,0x33,0x32,0x30,0x31,0x53,0x11,0x23,0x35,0x21,0x11,
		0x23,0x11,0x23,0x11,0x46,0x96,0x01,0xfe,0x78,0x78,0xfe,0x70,0x02,0x80,0x78,0xfd,
		0x08,0x02,0x80,0xfd,0x80,0x00,0x00,0x01,0x00,0x46,0xfe,0x70,0x02,0x44,0x01,0x68,
		0x00,0x09,0x00,0x10,0xb5,0x06,0x04,0x08,0x08,0x01,0x00,0x00,0x2f,0x2f,0x33,0x11,
		0x33,0x32,0x30,0x31,0x53,0x11,0x21,0x15,0x23,0x11,0x23,0x11,0x23,0x11,0x46,0x01,
		0xfe,0x96,0x78,0x78,0xfe,0x70,0x02,0xf8,0x78,0xfd,0x80,0x02,0x80,0xfd,0x80,0x00,
		0x00,0x01,0xff,0xb0,0xfe,0x70,0x02,0x44,0x01,0x68,0x00,0x07,0x00,0x0e,0xb4,0x06,
		0x02,0x02,0x03,0x00,0x00,0x2f,0x2f,0x33,0x11,0x33,0x30,0x31,0x53,0x11,0x23,0x35,
		0x21,0x15,0x23,0x11,0x82,0xd2,0x02,0x94,0xd2,0xfe,0x70,0x02,0x80,0x78,0x78,0xfd,
		0x80,0x00,0x00,0x01,0xff,0xb0,0xfe,0x70,0x01,0x72,0x01,0x68,0x00,0x05,0x00,0x0a,
		0xb2,0x02,0x03,0x00,0x00,0x2f,0x2f,0x33,0x30,0x31,0x53,0x11,0x23,0x35,0x21,0x11,
		0x82,0xd2,0x01,0xc2,0xfe,0x70,0x02,0x80,0x78,0xfd,0x08,0x00,0x00,0x01,0xff,0xb0,
		0xfe,0x70,0x01,0x72,0x03,0xe8,0x00,0x09,0x00,0x12,0xb6,0x07,0x03,0x03,0x02,0x02,
		0x05,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x11,0x33,0x30,0x31,0x53,0x11,0x23,0x35,
		0x21,0x11,0x33,0x11,0x33,0x11,0x82,0xd2,0x01,0x0e,0x78,0x3c,0xfe,0x70,0x02,0x80,
		0x78,0x02,0x80,0xfd,0x80,0xfd,0x08,0x00,0x00,0x01,0x00,0x82,0xfe,0x70,0x02,0x44,
		0x01,0x68,0x00,0x05,0x00,0x0a,0xb2,0x04,0x01,0x00,0x00,0x2f,0x2f,0x33,0x30,0x31,
		0x53,0x11,0x21,0x15,0x23,0x11,0x82,0x01,0xc2,0xd2,0xfe,0x70,0x02,0xf8,0x78,0xfd,
		0x80,0x00,0x00,0x01,0x00,0x82,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x09,0x00,0x12,
		0xb6,0x01,0x05,0x05,0x08,0x08,0x03,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x11,0x33,
		0x30,0x31,0x53,0x11,0x33,0x11,0x33,0x11,0x21,0x15,0x23,0x11,0x82,0x3c,0x78,0x01,
		0x0e,0xd2,0xfe,0x70,0x02,0xf8,0x02,0x80,0xfd,0x80,0x78,0xfd,0x80,0x00,0x00,0x01,
		0xff,0xb0,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x0b,0x00,0x14,0xb7,0x07,0x03,0x0a,
		0x03,0x02,0x02,0x05,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x33,0x11,0x33,0x30,0x31,
		0x53,0x11,0x23,0x35,0x21,0x11,0x33,0x11,0x21,0x15,0x23,0x11,0x82,0xd2,0x01,0x0e,
		0x78,0x01,0x0e,0xd2,0xfe,0x70,0x02,0x80,0x78,0x02,0x80,0xfd,0x80,0x78,0xfd,0x80,
		0x00,0x01,0xff,0xb0,0xfe,0x70,0x02,0x44,0x01,0xa4,0x00,0x07,0x00,0x0e,0xb4,0x06,
		0x02,0x02,0x03,0x00,0x00,0x2f,0x2f,0x33,0x11,0x33,0x30,0x31,0x53,0x11,0x21,0x35,
		0x21,0x15,0x21,0x11,0xbe,0xfe,0xf2,0x02,0x94,0xfe,0xf2,0xfe,0x70,0x02,0x44,0xf0,
		0xf0,0xfd,0xbc,0x00,0x00,0x01,0xff,0xb0,0xfe,0x70,0x01,0x36,0x01,0xa4,0x00,0x05,
		0x00,0x0a,0xb2,0x02,0x03,0x00,0x00,0x2f,0x2f,0x33,0x30,0x31,0x53,0x11,0x21,0x35,
		0x21,0x11,0xbe,0xfe,0xf2,0x01,0x86,0xfe,0x70,0x02,0x44,0xf0,0xfc,0xcc,0x00,0x01,
		0xff,0xb0,0xfe,0x70,0x01,0x72,0x03,0xe8,0x00,0x09,0x00,0x10,0xb5,0x08,0x04,0x01,
		0x01,0x05,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x33,0x30,0x31,0x53,0x11,0x21,0x35,
		0x33,0x11,0x33,0x11,0x23,0x11,0xbe,0xfe,0xf2,0xd2,0xf0,0x3c,0xfe,0x70,0x02,0x44,
		0xf0,0x02,0x44,0xfc,0xcc,0xfd,0xbc,0x00,0x00,0x01,0x00,0xbe,0xfe,0x70,0x02,0x44,
		0x01,0xa4,0x00,0x05,0x00,0x0a,0xb2,0x04,0x01,0x00,0x00,0x2f,0x2f,0x33,0x30,0x31,
		0x53,0x11,0x21,0x15,0x21,0x11,0xbe,0x01,0x86,0xfe,0xf2,0xfe,0x70,0x03,0x34,0xf0,
		0xfd,0xbc,0x00,0x01,0x00,0x82,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x09,0x00,0x10,
		0xb5,0x05,0x01,0x08,0x08,0x03,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x33,0x30,0x31,
		0x53,0x11,0x23,0x11,0x33,0x11,0x33,0x15,0x21,0x11,0xbe,0x3c,0xf0,0xd2,0xfe,0xf2,
		0xfe,0x70,0x02,0x44,0x03,0x34,0xfd,0xbc,0xf0,0xfd,0xbc,0x00,0x00,0x01,0xff,0xb0,
		0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x0b,0x00,0x14,0xb7,0x07,0x04,0x04,0x0a,0x01,
		0x01,0x05,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x33,0x11,0x33,0x30,0x31,0x53,0x11,
		0x21,0x35,0x33,0x11,0x33,0x11,0x33,0x15,0x21,0x11,0xbe,0xfe,0xf2,0xd2,0xf0,0xd2,
		0xfe,0xf2,0xfe,0x70,0x02,0x44,0xf0,0x02,0x44,0xfd,0xbc,0xf0,0xfd,0xbc,0x00,0x02,
		0xff,0xb0,0xfe,0x70,0x02,0x44,0x01,0xe0,0x00,0x07,0x00,0x0b,0x00,0x14,0xb7,0x06,
		0x02,0x02,0x03,0x03,0x08,0x09,0x00,0x00,0x2f,0x2f,0x33,0x39,0x2f,0x33,0x11,0x33,
		0x30,0x31,0x53,0x11,0x21,0x35,0x21,0x15,0x21,0x11,0x01,0x35,0x21,0x15,0xbe,0xfe,
		0xf2,0x02,0x94,0xfe,0xf2,0xfe,0x7a,0x02,0x94,0xfe,0x70,0x02,0x08,0x78,0x78,0xfd,
		0xf8,0x02,0xf8,0x78,0x78,0x00,0x00,0x01,0xff,0xb0,0xfe,0x70,0x01,0x36,0x01,0xe0,
		0x00,0x09,0x00,0x10,0xb5,0x02,0x03,0x03,0x06,0x07,0x00,0x00,0x2f,0x2f,0x33,0x39,
		0x2f,0x33,0x30,0x31,0x53,0x11,0x21,0x35,0x21,0x35,0x21,0x35,0x21,0x11,0xbe,0xfe,
		0xf2,0x01,0x0e,0xfe,0xf2,0x01,0x86,0xfe,0x70,0x02,0x08,0x78,0x78,0x78,0xfc,0x90,
		0x00,0x01,0x00,0xbe,0xfe,0x70,0x02,0x44,0x01,0xe0,0x00,0x09,0x00,0x10,0xb5,0x08,
		0x05,0x05,0x04,0x01,0x00,0x00,0x2f,0x2f,0x33,0x39,0x2f,0x33,0x30,0x31,0x53,0x11,
		0x21,0x15,0x21,0x15,0x21,0x15,0x21,0x11,0xbe,0x01,0x86,0xfe,0xf2,0x01,0x0e,0xfe,
		0xf2,0xfe,0x70,0x03,0x70,0x78,0x78,0x78,0xfd,0xf8,0x00,0x02,0x00,0x3f,0x00,0xb4,
		0x01,0xb6,0x01,0xa4,0x00,0x03,0x00,0x07,0x00,0x0c,0xb3,0x04,0x05,0x01,0x00,0x00,
		0x2f,0x2f,0x33,0x32,0x30,0x31,0x77,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x3f,0x7d,
		0x7d,0x7d,0xb4,0xf0,0xf0,0xf0,0xf0,0x00,0x00,0x02,0x00,0x82,0xff,0x1f,0x01,0x72,
		0x03,0x39,0x00,0x03,0x00,0x07,0x00,0x0c,0xb3,0x04,0x05,0x01,0x00,0x00,0x2f,0x32,
		0x2f,0x33,0x30,0x31,0x57,0x11,0x33,0x11,0x03,0x11,0x33,0x11,0x82,0xf0,0xf0,0xf0,
		0xe1,0x01,0x5e,0xfe,0xa2,0x02,0xbc,0x01,0x5e,0xfe,0xa2,0x00,0x00,0x01,0x00,0x82,
		0xfe,0x70,0x01,0x72,0x01,0x68,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,
		0x30,0x31,0x53,0x11,0x33,0x11,0x82,0xf0,0xfe,0x70,0x02,0xf8,0xfd,0x08,0x00,0x01,
		0xff,0xb0,0xfe,0x70,0x02,0x44,0x01,0xa4,0x00,0x07,0x00,0x0e,0xb4,0x06,0x01,0x01,
		0x03,0x00,0x00,0x2f,0x2f,0x33,0x11,0x33,0x30,0x31,0x53,0x11,0x23,0x35,0x21,0x15,
		0x23,0x11,0x82,0xd2,0x02,0x94,0xd2,0xfe,0x70,0x02,0x44,0xf0,0xf0,0xfd,0xbc,0x00,
		0x00,0x01,0xff,0xb0,0xfe,0x70,0x01,0x72,0x01,0xa4,0x00,0x05,0x00,0x0a,0xb2,0x01,
		0x03,0x00,0x00,0x2f,0x2f,0x33,0x30,0x31,0x53,0x11,0x23,0x35,0x21,0x11,0x82,0xd2,
		0x01,0xc2,0xfe,0x70,0x02,0x44,0xf0,0xfc,0xcc,0x00,0x00,0x01,0x00,0x82,0xfe,0x70,
		0x02,0x44,0x01,0xa4,0x00,0x05,0x00,0x0a,0xb2,0x04,0x01,0x00,0x00,0x2f,0x2f,0x33,
		0x30,0x31,0x53,0x11,0x21,0x15,0x23,0x11,0x82,0x01,0xc2,0xd2,0xfe,0x70,0x03,0x34,
		0xf0,0xfd,0xbc,0x00,0x00,0x01,0xff,0xb0,0x00,0xb4,0x02,0x44,0x01,0xa4,0x00,0x03,
		0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x32,0x30,0x31,0x67,0x35,0x21,0x15,0x50,0x02,
		0x94,0xb4,0xf0,0xf0,0x00,0x01,0xff,0xb0,0x00,0xb4,0x01,0x36,0x01,0xa4,0x00,0x03,
		0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x32,0x30,0x31,0x67,0x35,0x21,0x15,0x50,0x01,
		0x86,0xb4,0xf0,0xf0,0x00,0x01,0xff,0xb0,0x00,0xb4,0x02,0x44,0x01,0xa4,0x00,0x07,
		0x00,0x0e,0xb4,0x03,0x06,0x01,0x01,0x00,0x00,0x2f,0x32,0x11,0x39,0x39,0x30,0x31,
		0x67,0x35,0x21,0x15,0x21,0x15,0x21,0x15,0x50,0x01,0x86,0x01,0x0e,0xfe,0xf2,0xb4,
		0xf0,0x3c,0x78,0x3c,0x00,0x04,0x00,0x10,0x00,0xb4,0x01,0xe4,0x01,0xa4,0x00,0x03,
		0x00,0x07,0x00,0x0b,0x00,0x0f,0x00,0x14,0xb7,0x0c,0x0d,0x08,0x09,0x04,0x05,0x01,
		0x00,0x00,0x2f,0x2f,0x33,0x32,0x33,0x32,0x33,0x32,0x30,0x31,0x77,0x35,0x33,0x15,
		0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x10,0x5d,0x20,0x5d,
		0x20,0x5d,0x20,0x5d,0xb4,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x00,0x00,0x04,
		0x00,0x82,0xfe,0x9c,0x01,0x72,0x03,0xbc,0x00,0x03,0x00,0x07,0x00,0x0b,0x00,0x0f,
		0x00,0x1f,0x40,0x0d,0x0d,0x0c,0x0c,0x09,0x09,0x08,0x01,0x01,0x04,0x04,0x05,0x05,
		0x08,0x00,0x2f,0x33,0x2f,0x33,0x11,0x33,0x2f,0x11,0x33,0x11,0x33,0x2f,0x33,0x30,
		0x31,0x53,0x11,0x33,0x11,0x03,0x11,0x33,0x11,0x03,0x11,0x33,0x11,0x03,0x11,0x33,
		0x11,0x82,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xfe,0x9c,0x01,0x06,0xfe,0xfa,0x01,
		0x5e,0x01,0x06,0xfe,0xfa,0x01,0x5e,0x01,0x06,0xfe,0xfa,0x01,0x5e,0x01,0x06,0xfe,
		0xfa,0x00,0x00,0x01,0x00,0xbe,0x00,0xb4,0x02,0x44,0x01,0xa4,0x00,0x03,0x00,0x08,
		0xb1,0x01,0x00,0x00,0x2f,0x32,0x30,0x31,0x77,0x35,0x21,0x15,0xbe,0x01,0x86,0xb4,
		0xf0,0xf0,0x00,0x03,0x00,0x1c,0x00,0xb4,0x01,0xd8,0x01,0xa4,0x00,0x03,0x00,0x07,
		0x00,0x0b,0x00,0x17,0x40,0x09,0x08,0x04,0x04,0x09,0x05,0x05,0x01,0x01,0x00,0x00,
		0x2f,0x32,0x11,0x33,0x11,0x33,0x32,0x11,0x33,0x30,0x31,0x77,0x35,0x33,0x15,0x33,
		0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x1c,0x6f,0x37,0x70,0x37,0x6f,0xb4,0xf0,0xf0,
		0xf0,0xf0,0xf0,0xf0,0x00,0x03,0x00,0x82,0xfe,0xbe,0x01,0x72,0x03,0x9a,0x00,0x03,
		0x00,0x07,0x00,0x0b,0x00,0x0c,0xb3,0x04,0x05,0x09,0x00,0x00,0x2f,0x2f,0x33,0x32,
		0x30,0x31,0x53,0x11,0x33,0x11,0x03,0x11,0x33,0x11,0x03,0x11,0x33,0x11,0x82,0xf0,
		0xf0,0xf0,0xf0,0xf0,0xfe,0xbe,0x01,0x37,0xfe,0xc9,0x01,0xd2,0x01,0x38,0xfe,0xc8,
		0x01,0xd3,0x01,0x37,0xfe,0xc9,0x00,0x01,0x00,0x82,0x00,0xf0,0x01,0x72,0x03,0xe8,
		0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x77,0x11,0x33,0x11,
		0x82,0xf0,0xf0,0x02,0xf8,0xfd,0x08,0x00,0x00,0x01,0xff,0xb0,0x00,0xb4,0x02,0x44,
		0x03,0xe8,0x00,0x07,0x00,0x0e,0xb4,0x03,0x05,0x02,0x02,0x00,0x00,0x2f,0x32,0x11,
		0x33,0x2f,0x30,0x31,0x67,0x35,0x33,0x11,0x33,0x11,0x33,0x15,0x50,0xd2,0xf0,0xd2,
		0xb4,0xf0,0x02,0x44,0xfd,0xbc,0xf0,0x00,0x00,0x01,0xff,0xb0,0x00,0xb4,0x01,0x72,
		0x03,0xe8,0x00,0x05,0x00,0x0a,0xb2,0x03,0x02,0x00,0x00,0x2f,0x32,0x2f,0x30,0x31,
		0x67,0x35,0x33,0x11,0x33,0x11,0x50,0xd2,0xf0,0xb4,0xf0,0x02,0x44,0xfc,0xcc,0x00,
		0x00,0x01,0x00,0x82,0xfe,0x70,0x01,0x72,0x03,0xe8,0x00,0x07,0x00,0x08,0xb1,0x03,
		0x00,0x00,0x2f,0x2f,0x30,0x31,0x53,0x11,0x23,0x11,0x33,0x11,0x23,0x11,0xbe,0x3c,
		0xf0,0x3c,0xfe,0x70,0x02,0x80,0x02,0xf8,0xfd,0x08,0xfd,0x80,0x00,0x01,0x00,0x82,
		0x00,0xb4,0x02,0x44,0x03,0xe8,0x00,0x05,0x00,0x0a,0xb2,0x01,0x03,0x00,0x00,0x2f,
		0x32,0x2f,0x30,0x31,0x77,0x11,0x33,0x11,0x33,0x15,0x82,0xf0,0xd2,0xb4,0x03,0x34,
		0xfd,0xbc,0xf0,0x00,0x00,0x01,0x00,0x82,0xfe,0x70,0x01,0x72,0x03,0xe8,0x00,0x03,
		0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x53,0x11,0x33,0x11,0x82,0xf0,
		0xfe,0x70,0x05,0x78,0xfa,0x88,0x00,0x01,0xff,0xb0,0xfe,0x70,0x02,0x44,0x03,0xe8,
		0x00,0x0b,0x00,0x14,0xb7,0x07,0x0a,0x0a,0x04,0x01,0x01,0x05,0x00,0x00,0x2f,0x2f,
		0x39,0x2f,0x33,0x33,0x11,0x33,0x30,0x31,0x53,0x11,0x23,0x35,0x33,0x11,0x33,0x11,
		0x33,0x15,0x23,0x11,0x82,0xd2,0xd2,0xf0,0xd2,0xd2,0xfe,0x70,0x02,0x44,0xf0,0x02,
		0x44,0xfd,0xbc,0xf0,0xfd,0xbc,0x00,0x01,0xff,0xb0,0xfe,0x70,0x01,0x72,0x03,0xe8,
		0x00,0x07,0x00,0x0e,0xb4,0x04,0x01,0x01,0x05,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,
		0x30,0x31,0x53,0x11,0x23,0x35,0x33,0x11,0x33,0x11,0x82,0xd2,0xd2,0xf0,0xfe,0x70,
		0x02,0x44,0xf0,0x02,0x44,0xfa,0x88,0x00,0x00,0x01,0x00,0x82,0xfe,0x70,0x02,0x44,
		0x03,0xe8,0x00,0x07,0x00,0x0e,0xb4,0x03,0x06,0x06,0x01,0x00,0x00,0x2f,0x2f,0x39,
		0x2f,0x33,0x30,0x31,0x53,0x11,0x33,0x11,0x33,0x15,0x23,0x11,0x82,0xf0,0xd2,0xd2,
		0xfe,0x70,0x05,0x78,0xfd,0xbc,0xf0,0xfd,0xbc,0x00,0x00,0x01,0xff,0xb0,0xfe,0x70,
		0x02,0x44,0x03,0xe8,0x00,0x0d,0x00,0x10,0xb7,0x01,0x0c,0x09,0x07,0x04,0x05,0x05,
		0x00,0x00,0x2f,0x2f,0x17,0x39,0x30,0x31,0x53,0x11,0x23,0x35,0x21,0x11,0x33,0x11,
		0x33,0x15,0x33,0x15,0x23,0x11,0x82,0xd2,0x01,0x0e,0x78,0x3c,0xd2,0xd2,0xfe,0x70,
		0x02,0x44,0xf0,0x02,0x44,0xfd,0xbc,0x3c,0x78,0xfd,0x80,0x00,0x00,0x01,0xff,0xb0,
		0xfe,0x70,0x02,0x44,0x01,0xa4,0x00,0x09,0x00,0x10,0xb5,0x08,0x05,0x05,0x02,0x03,
		0x00,0x00,0x2f,0x2f,0x33,0x39,0x2f,0x33,0x30,0x31,0x53,0x11,0x21,0x35,0x21,0x15,
		0x21,0x15,0x21,0x11,0xbe,0xfe,0xf2,0x01,0x86,0x01,0x0e,0xfe,0xf2,0xfe,0x70,0x02,
		0x44,0xf0,0x3c,0x78,0xfd,0x80,0x00,0x01,0xff,0xb0,0x00,0xb4,0x02,0x44,0x03,0xe8,
		0x00,0x09,0x00,0x0e,0xb4,0x05,0x08,0x08,0x03,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,
		0x30,0x31,0x67,0x35,0x21,0x11,0x33,0x11,0x21,0x15,0x21,0x15,0x50,0x01,0x0e,0x78,
		0x01,0x0e,0xfe,0xf2,0xb4,0xf0,0x02,0x44,0xfd,0x80,0x78,0x3c,0x00,0x01,0xff,0xb0,
		0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x0b,0x00,0x0e,0xb4,0x07,0x0a,0x0a,0x05,0x00,
		0x00,0x2f,0x2f,0x39,0x2f,0x33,0x30,0x31,0x53,0x11,0x21,0x35,0x21,0x11,0x33,0x11,
		0x21,0x15,0x21,0x11,0xbe,0xfe,0xf2,0x01,0x0e,0x78,0x01,0x0e,0xfe,0xf2,0xfe,0x70,
		0x02,0x44,0xf0,0x02,0x44,0xfd,0x80,0x78,0xfd,0x80,0x00,0x01,0xff,0xb0,0xfe,0x70,
		0x02,0x44,0x01,0xa4,0x00,0x09,0x00,0x0e,0xb4,0x02,0x03,0x03,0x05,0x00,0x00,0x2f,
		0x2f,0x39,0x2f,0x33,0x30,0x31,0x53,0x11,0x23,0x35,0x33,0x35,0x21,0x15,0x23,0x11,
		0x82,0xd2,0xd2,0x01,0xc2,0xd2,0xfe,0x70,0x02,0x80,0x78,0x3c,0xf0,0xfd,0xbc,0x00,
		0x00,0x01,0xff,0xb0,0x00,0xb4,0x02,0x44,0x03,0xe8,0x00,0x09,0x00,0x0e,0xb4,0x03,
		0x02,0x02,0x05,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x30,0x31,0x77,0x35,0x23,0x35,
		0x33,0x11,0x33,0x11,0x33,0x15,0x82,0xd2,0xd2,0xf0,0xd2,0xb4,0x3c,0x78,0x02,0x80,
		0xfd,0xbc,0xf0,0x00,0x00,0x01,0xff,0xb0,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x0b,
		0x00,0x0e,0xb4,0x03,0x02,0x02,0x05,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x30,0x31,
		0x53,0x11,0x23,0x35,0x33,0x11,0x33,0x11,0x33,0x15,0x23,0x11,0x82,0xd2,0xd2,0xf0,
		0xd2,0xd2,0xfe,0x70,0x02,0x80,0x78,0x02,0x80,0xfd,0xbc,0xf0,0xfd,0xbc,0x00,0x01,
		0xff,0xb0,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x0d,0x00,0x0e,0xb4,0x07,0x0a,0x0a,
		0x05,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x30,0x31,0x53,0x11,0x21,0x35,0x33,0x11,
		0x33,0x11,0x33,0x15,0x23,0x15,0x23,0x11,0xbe,0xfe,0xf2,0xd2,0xf0,0xd2,0xd2,0x3c,
		0xfe,0x70,0x02,0x44,0xf0,0x02,0x44,0xfd,0x80,0x78,0x3c,0xfd,0xbc,0x00,0x00,0x01,
		0xff,0xb0,0xfe,0x70,0x01,0x36,0x01,0x68,0x00,0x10,0x00,0x0a,0xb2,0x06,0x07,0x0f,
		0x00,0x2f,0x2f,0x33,0x30,0x31,0x77,0x34,0x2e,0x02,0x23,0x23,0x35,0x33,0x32,0x1e,
		0x03,0x15,0x11,0x23,0xbe,0x1e,0x34,0x45,0x27,0x50,0x50,0x33,0x5d,0x4e,0x39,0x1f,
		0x78,0x32,0x27,0x45,0x34,0x1e,0x78,0x1f,0x39,0x4e,0x5d,0x33,0xfe,0x3e,0x00,0x01,
		0x00,0xbe,0xfe,0x70,0x02,0x44,0x01,0x68,0x00,0x10,0x00,0x0a,0xb2,0x0b,0x08,0x00,
		0x00,0x2f,0x2f,0x33,0x30,0x31,0x41,0x23,0x11,0x34,0x3e,0x03,0x33,0x33,0x15,0x23,
		0x22,0x0e,0x02,0x15,0x01,0x36,0x78,0x1f,0x39,0x4e,0x5d,0x33,0x50,0x50,0x27,0x45,
		0x34,0x1e,0xfe,0x70,0x01,0xc2,0x33,0x5d,0x4e,0x39,0x1f,0x78,0x1e,0x34,0x45,0x27,
		0x00,0x01,0xff,0xb0,0x00,0xf0,0x01,0x36,0x03,0xe8,0x00,0x10,0x00,0x0c,0xb3,0x0a,
		0x09,0x00,0x09,0x00,0x2f,0x2f,0x11,0x33,0x30,0x31,0x53,0x33,0x11,0x14,0x0e,0x03,
		0x23,0x23,0x35,0x33,0x32,0x3e,0x02,0x35,0xbe,0x78,0x1f,0x39,0x4e,0x5d,0x33,0x50,
		0x50,0x27,0x45,0x34,0x1e,0x03,0xe8,0xfe,0x3e,0x33,0x5d,0x4e,0x39,0x1f,0x78,0x1e,
		0x34,0x45,0x27,0x00,0x00,0x01,0x00,0xbe,0x00,0xf0,0x02,0x44,0x03,0xe8,0x00,0x10,
		0x00,0x0c,0xb3,0x05,0x08,0x0f,0x08,0x00,0x2f,0x2f,0x11,0x33,0x30,0x31,0x41,0x14,
		0x1e,0x02,0x33,0x33,0x15,0x23,0x22,0x2e,0x03,0x35,0x11,0x33,0x01,0x36,0x1e,0x34,
		0x45,0x27,0x50,0x50,0x33,0x5d,0x4e,0x39,0x1f,0x78,0x02,0x26,0x27,0x45,0x34,0x1e,
		0x78,0x1f,0x39,0x4e,0x5d,0x33,0x01,0xc2,0x00,0x02,0x00,0x3f,0x00,0xf0,0x01,0xb6,
		0x01,0x68,0x00,0x03,0x00,0x07,0x00,0x0e,0xb4,0x05,0x01,0x01,0x04,0x00,0x00,0x2f,
		0x32,0x32,0x11,0x33,0x30,0x31,0x77,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x3f,0x7d,
		0x7d,0x7d,0xf0,0x78,0x78,0x78,0x78,0x00,0x00,0x02,0x00,0xbe,0xff,0x1f,0x01,0x36,
		0x03,0x39,0x00,0x03,0x00,0x07,0x00,0x0c,0xb3,0x04,0x05,0x01,0x00,0x00,0x2f,0x32,
		0x2f,0x33,0x30,0x31,0x57,0x11,0x33,0x11,0x03,0x11,0x33,0x11,0xbe,0x78,0x78,0x78,
		0xe1,0x01,0x5e,0xfe,0xa2,0x02,0xbc,0x01,0x5e,0xfe,0xa2,0x00,0x00,0x02,0x00,0x00,
		0xfe,0xd4,0x01,0xf4,0x03,0x84,0x00,0x05,0x00,0x0b,0x00,0x14,0x40,0x09,0x04,0x07,
		0x0a,0x01,0x04,0x08,0x02,0x06,0x00,0x00,0x2f,0x32,0x2f,0x33,0x17,0x39,0x30,0x31,
		0x51,0x35,0x01,0x33,0x15,0x01,0x21,0x01,0x35,0x33,0x01,0x15,0x01,0xb3,0x41,0xfe,
		0x4d,0x01,0x72,0xfe,0x4d,0x41,0x01,0xb3,0xfe,0xd4,0x9c,0x04,0x14,0x9c,0xfb,0xec,
		0x04,0x14,0x9c,0xfb,0xec,0x9c,0x00,0x01,0x00,0x00,0xfe,0xd4,0x01,0xf4,0x03,0x84,
		0x00,0x05,0x00,0x0c,0xb3,0x01,0x02,0x04,0x00,0x00,0x2f,0x32,0x2f,0x33,0x30,0x31,
		0x41,0x01,0x35,0x33,0x01,0x15,0x01,0xb3,0xfe,0x4d,0x41,0x01,0xb3,0xfe,0xd4,0x04,
		0x14,0x9c,0xfb,0xec,0x9c,0x00,0x00,0x01,0x00,0x00,0xfe,0xd4,0x01,0xf4,0x03,0x84,
		0x00,0x05,0x00,0x0c,0xb3,0x04,0x02,0x01,0x00,0x00,0x2f,0x32,0x2f,0x33,0x30,0x31,
		0x51,0x35,0x01,0x33,0x15,0x01,0x01,0xb3,0x41,0xfe,0x4d,0xfe,0xd4,0x9c,0x04,0x14,
		0x9c,0xfb,0xec,0x00,0x00,0x01,0x00,0xbe,0xfe,0x70,0x01,0x36,0x01,0x68,0x00,0x03,
		0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x53,0x11,0x33,0x11,0xbe,0x78,
		0xfe,0x70,0x02,0xf8,0xfd,0x08,0x00,0x01,0xff,0xb0,0xfe,0x70,0x02,0x44,0x01,0x68,
		0x00,0x07,0x00,0x0e,0xb4,0x06,0x02,0x02,0x03,0x00,0x00,0x2f,0x2f,0x33,0x11,0x33,
		0x30,0x31,0x53,0x11,0x21,0x35,0x21,0x15,0x21,0x11,0xbe,0xfe,0xf2,0x02,0x94,0xfe,
		0xf2,0xfe,0x70,0x02,0x80,0x78,0x78,0xfd,0x80,0x00,0x00,0x01,0xff,0xb0,0xfe,0x70,
		0x01,0x36,0x01,0x68,0x00,0x05,0x00,0x0a,0xb2,0x02,0x03,0x00,0x00,0x2f,0x2f,0x33,
		0x30,0x31,0x53,0x11,0x21,0x35,0x21,0x11,0xbe,0xfe,0xf2,0x01,0x86,0xfe,0x70,0x02,
		0x80,0x78,0xfd,0x08,0x00,0x01,0x00,0xbe,0xfe,0x70,0x02,0x44,0x01,0x68,0x00,0x05,
		0x00,0x0a,0xb2,0x04,0x01,0x00,0x00,0x2f,0x2f,0x33,0x30,0x31,0x53,0x11,0x21,0x15,
		0x21,0x11,0xbe,0x01,0x86,0xfe,0xf2,0xfe,0x70,0x02,0xf8,0x78,0xfd,0x80,0x00,0x01,
		0xff,0xb0,0x00,0xf0,0x02,0x44,0x01,0x68,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,
		0x2f,0x32,0x30,0x31,0x67,0x35,0x21,0x15,0x50,0x02,0x94,0xf0,0x78,0x78,0x00,0x01,
		0xff,0xb0,0x00,0xf0,0x01,0x36,0x01,0x68,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,
		0x2f,0x32,0x30,0x31,0x67,0x35,0x21,0x15,0x50,0x01,0x86,0xf0,0x78,0x78,0x00,0x01,
		0xff,0xb0,0x00,0xb4,0x02,0x44,0x01,0xa4,0x00,0x07,0x00,0x0e,0xb4,0x04,0x01,0x05,
		0x05,0x00,0x00,0x2f,0x32,0x11,0x39,0x39,0x30,0x31,0x77,0x35,0x21,0x35,0x21,0x35,
		0x21,0x15,0xbe,0xfe,0xf2,0x01,0x0e,0x01,0x86,0xb4,0x3c,0x78,0x3c,0xf0,0x00,0x04,
		0x00,0x10,0x00,0xf0,0x01,0xe4,0x01,0x68,0x00,0x03,0x00,0x07,0x00,0x0b,0x00,0x0f,
		0x00,0x1f,0x40,0x0d,0x0c,0x08,0x08,0x04,0x04,0x0d,0x09,0x09,0x05,0x05,0x01,0x01,
		0x00,0x00,0x2f,0x32,0x11,0x33,0x11,0x33,0x11,0x33,0x32,0x11,0x33,0x11,0x33,0x30,
		0x31,0x77,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,0x35,0x33,
		0x15,0x10,0x5d,0x20,0x5d,0x20,0x5d,0x20,0x5d,0xf0,0x78,0x78,0x78,0x78,0x78,0x78,
		0x78,0x78,0x00,0x04,0x00,0xbe,0xfe,0x9c,0x01,0x36,0x03,0xbc,0x00,0x03,0x00,0x07,
		0x00,0x0b,0x00,0x0f,0x00,0x18,0x40,0x0a,0x0d,0x0c,0x09,0x08,0x05,0x00,0x01,0x04,
		0x05,0x12,0x00,0x3f,0xdd,0xde,0xcd,0x10,0xde,0xdd,0xde,0xcd,0x30,0x31,0x53,0x11,
		0x33,0x11,0x03,0x11,0x33,0x11,0x03,0x11,0x33,0x11,0x03,0x11,0x33,0x11,0xbe,0x78,
		0x78,0x78,0x78,0x78,0x78,0x78,0xfe,0x9c,0x01,0x06,0xfe,0xfa,0x01,0x5e,0x01,0x06,
		0xfe,0xfa,0x01,0x5e,0x01,0x06,0xfe,0xfa,0x01,0x5e,0x01,0x06,0xfe,0xfa,0x00,0x01,
		0x00,0xbe,0x00,0xf0,0x02,0x44,0x01,0x68,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,
		0x2f,0x32,0x30,0x31,0x77,0x35,0x21,0x15,0xbe,0x01,0x86,0xf0,0x78,0x78,0x00,0x03,
		0x00,0x1c,0x00,0xf0,0x01,0xd8,0x01,0x68,0x00,0x03,0x00,0x07,0x00,0x0b,0x00,0x17,
		0x40,0x09,0x08,0x04,0x04,0x09,0x05,0x05,0x01,0x01,0x00,0x00,0x2f,0x32,0x11,0x33,
		0x11,0x33,0x32,0x11,0x33,0x30,0x31,0x77,0x35,0x33,0x15,0x33,0x35,0x33,0x15,0x33,
		0x35,0x33,0x15,0x1c,0x6f,0x37,0x70,0x37,0x6f,0xf0,0x78,0x78,0x78,0x78,0x78,0x78,
		0x00,0x03,0x00,0xbe,0xfe,0xbe,0x01,0x36,0x03,0x9a,0x00,0x03,0x00,0x07,0x00,0x0b,
		0x00,0x0c,0xb3,0x04,0x05,0x09,0x00,0x00,0x2f,0x2f,0x33,0x32,0x30,0x31,0x53,0x11,
		0x33,0x11,0x03,0x11,0x33,0x11,0x03,0x11,0x33,0x11,0xbe,0x78,0x78,0x78,0x78,0x78,
		0xfe,0xbe,0x01,0x37,0xfe,0xc9,0x01,0xd2,0x01,0x38,0xfe,0xc8,0x01,0xd3,0x01,0x37,
		0xfe,0xc9,0x00,0x01,0x00,0xbe,0x00,0xf0,0x01,0x36,0x03,0xe8,0x00,0x03,0x00,0x08,
		0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x77,0x11,0x33,0x11,0xbe,0x78,0xf0,0x02,
		0xf8,0xfd,0x08,0x00,0x00,0x01,0x00,0x82,0xfe,0x70,0x01,0x72,0x03,0xe8,0x00,0x07,
		0x00,0x08,0xb1,0x03,0x00,0x00,0x2f,0x2f,0x30,0x31,0x53,0x11,0x33,0x11,0x33,0x11,
		0x33,0x11,0x82,0x3c,0x78,0x3c,0xfe,0x70,0x02,0xf8,0x02,0x80,0xfd,0x80,0xfd,0x08,
		0x00,0x01,0xff,0xb0,0x00,0xf0,0x02,0x44,0x03,0xe8,0x00,0x07,0x00,0x0e,0xb4,0x05,
		0x01,0x01,0x03,0x00,0x00,0x2f,0x2f,0x32,0x11,0x33,0x30,0x31,0x67,0x35,0x21,0x11,
		0x33,0x11,0x21,0x15,0x50,0x01,0x0e,0x78,0x01,0x0e,0xf0,0x78,0x02,0x80,0xfd,0x80,
		0x78,0x00,0x00,0x01,0xff,0xb0,0x00,0xf0,0x01,0x36,0x03,0xe8,0x00,0x05,0x00,0x0a,
		0xb2,0x01,0x03,0x00,0x00,0x2f,0x2f,0x32,0x30,0x31,0x67,0x35,0x21,0x11,0x33,0x11,
		0x50,0x01,0x0e,0x78,0xf0,0x78,0x02,0x80,0xfd,0x08,0x00,0x01,0x00,0xbe,0x00,0xf0,
		0x02,0x44,0x03,0xe8,0x00,0x05,0x00,0x0a,0xb2,0x03,0x01,0x00,0x00,0x2f,0x2f,0x32,
		0x30,0x31,0x77,0x11,0x33,0x11,0x21,0x15,0xbe,0x78,0x01,0x0e,0xf0,0x02,0xf8,0xfd,
		0x80,0x78,0x00,0x01,0x00,0xbe,0xfe,0x70,0x01,0x36,0x03,0xe8,0x00,0x03,0x00,0x08,
		0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x53,0x11,0x33,0x11,0xbe,0x78,0xfe,0x70,
		0x05,0x78,0xfa,0x88,0x00,0x01,0xff,0xb0,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x0b,
		0x00,0x14,0xb7,0x07,0x03,0x0a,0x03,0x02,0x02,0x05,0x00,0x00,0x2f,0x2f,0x39,0x2f,
		0x33,0x33,0x11,0x33,0x30,0x31,0x53,0x11,0x21,0x35,0x21,0x11,0x33,0x11,0x21,0x15,
		0x21,0x11,0xbe,0xfe,0xf2,0x01,0x0e,0x78,0x01,0x0e,0xfe,0xf2,0xfe,0x70,0x02,0x80,
		0x78,0x02,0x80,0xfd,0x80,0x78,0xfd,0x80,0x00,0x01,0xff,0xb0,0xfe,0x70,0x01,0x36,
		0x03,0xe8,0x00,0x07,0x00,0x0e,0xb4,0x03,0x02,0x02,0x05,0x00,0x00,0x2f,0x2f,0x39,
		0x2f,0x33,0x30,0x31,0x53,0x11,0x21,0x35,0x21,0x11,0x33,0x11,0xbe,0xfe,0xf2,0x01,
		0x0e,0x78,0xfe,0x70,0x02,0x80,0x78,0x02,0x80,0xfa,0x88,0x00,0x00,0x01,0x00,0xbe,
		0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x07,0x00,0x0e,0xb4,0x03,0x06,0x06,0x01,0x00,
		0x00,0x2f,0x2f,0x39,0x2f,0x33,0x30,0x31,0x53,0x11,0x33,0x11,0x21,0x15,0x21,0x11,
		0xbe,0x78,0x01,0x0e,0xfe,0xf2,0xfe,0x70,0x05,0x78,0xfd,0x80,0x78,0xfd,0x80,0x00,
		0x00,0x01,0xff,0xb0,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x0d,0x00,0x0e,0xb4,0x03,
		0x02,0x02,0x07,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x30,0x31,0x53,0x11,0x23,0x35,
		0x33,0x35,0x33,0x11,0x33,0x11,0x21,0x15,0x23,0x11,0x82,0xd2,0xd2,0x3c,0x78,0x01,
		0x0e,0xd2,0xfe,0x70,0x02,0x80,0x78,0x3c,0x02,0x44,0xfd,0xbc,0xf0,0xfd,0xbc,0x00,
		0x00,0x01,0xff,0xb0,0xfe,0x70,0x02,0x44,0x01,0xa4,0x00,0x09,0x00,0x0e,0xb4,0x02,
		0x03,0x03,0x05,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x30,0x31,0x53,0x11,0x21,0x35,
		0x21,0x35,0x21,0x15,0x21,0x11,0xbe,0xfe,0xf2,0x01,0x0e,0x01,0x86,0xfe,0xf2,0xfe,
		0x70,0x02,0x80,0x78,0x3c,0xf0,0xfd,0xbc,0x00,0x01,0xff,0xb0,0x00,0xb4,0x02,0x44,
		0x03,0xe8,0x00,0x09,0x00,0x0e,0xb4,0x03,0x02,0x02,0x05,0x00,0x00,0x2f,0x2f,0x39,
		0x2f,0x33,0x30,0x31,0x77,0x35,0x21,0x35,0x21,0x11,0x33,0x11,0x21,0x15,0xbe,0xfe,
		0xf2,0x01,0x0e,0x78,0x01,0x0e,0xb4,0x3c,0x78,0x02,0x80,0xfd,0xbc,0xf0,0x00,0x01,
		0xff,0xb0,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x0b,0x00,0x0e,0xb4,0x03,0x02,0x02,
		0x05,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x30,0x31,0x53,0x11,0x21,0x35,0x21,0x11,
		0x33,0x11,0x21,0x15,0x21,0x11,0xbe,0xfe,0xf2,0x01,0x0e,0x78,0x01,0x0e,0xfe,0xf2,
		0xfe,0x70,0x02,0x80,0x78,0x02,0x80,0xfd,0xbc,0xf0,0xfd,0xbc,0x00,0x01,0xff,0xb0,
		0xfe,0x70,0x02,0x44,0x01,0xa4,0x00,0x09,0x00,0x10,0xb5,0x08,0x05,0x05,0x02,0x03,
		0x00,0x00,0x2f,0x2f,0x33,0x39,0x2f,0x33,0x30,0x31,0x53,0x11,0x23,0x35,0x21,0x15,
		0x33,0x15,0x23,0x11,0x82,0xd2,0x01,0xc2,0xd2,0xd2,0xfe,0x70,0x02,0x44,0xf0,0x3c,
		0x78,0xfd,0x80,0x00,0x00,0x01,0xff,0xb0,0x00,0xb4,0x02,0x44,0x03,0xe8,0x00,0x09,
		0x00,0x10,0xb5,0x05,0x08,0x08,0x03,0x01,0x00,0x00,0x2f,0x32,0x2f,0x39,0x2f,0x33,
		0x30,0x31,0x67,0x35,0x33,0x11,0x33,0x11,0x33,0x15,0x23,0x15,0x50,0xd2,0xf0,0xd2,
		0xd2,0xb4,0xf0,0x02,0x44,0xfd,0x80,0x78,0x3c,0x00,0x00,0x01,0xff,0xb0,0xfe,0x70,
		0x02,0x44,0x03,0xe8,0x00,0x0b,0x00,0x14,0xb7,0x07,0x0a,0x0a,0x04,0x01,0x01,0x05,
		0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x33,0x11,0x33,0x30,0x31,0x53,0x11,0x23,0x35,
		0x33,0x11,0x33,0x11,0x33,0x15,0x23,0x11,0x82,0xd2,0xd2,0xf0,0xd2,0xd2,0xfe,0x70,
		0x02,0x44,0xf0,0x02,0x44,0xfd,0x80,0x78,0xfd,0x80,0x00,0x01,0xff,0xb0,0xfe,0x70,
		0x02,0x44,0x03,0xe8,0x00,0x0d,0x00,0x0e,0xb4,0x05,0x04,0x04,0x07,0x00,0x00,0x2f,
		0x2f,0x39,0x2f,0x33,0x30,0x31,0x53,0x11,0x23,0x35,0x23,0x35,0x33,0x11,0x33,0x11,
		0x33,0x15,0x21,0x11,0xbe,0x3c,0xd2,0xd2,0xf0,0xd2,0xfe,0xf2,0xfe,0x70,0x02,0x44,
		0x3c,0x78,0x02,0x80,0xfd,0xbc,0xf0,0xfd,0xbc,0x00,0x00,0x01,0xff,0xb0,0x00,0xf0,
		0x02,0x44,0x03,0xe8,0x00,0x0b,0x00,0x14,0xb7,0x08,0x03,0x09,0x05,0x01,0x01,0x03,
		0x00,0x00,0x2f,0x2f,0x32,0x11,0x33,0x33,0x11,0x33,0x30,0x31,0x67,0x35,0x33,0x11,
		0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x15,0x50,0x96,0x78,0x78,0x78,0x96,0xf0,0x78,
		0x02,0x80,0xfd,0x80,0x02,0x80,0xfd,0x80,0x78,0x00,0x00,0x01,0xff,0xb0,0x00,0xf0,
		0x01,0xae,0x03,0xe8,0x00,0x09,0x00,0x12,0xb6,0x08,0x03,0x05,0x01,0x01,0x03,0x00,
		0x00,0x2f,0x2f,0x32,0x11,0x33,0x11,0x33,0x30,0x31,0x67,0x35,0x33,0x11,0x33,0x11,
		0x33,0x11,0x33,0x11,0x50,0x96,0x78,0x78,0x78,0xf0,0x78,0x02,0x80,0xfd,0x80,0x02,
		0x80,0xfd,0x08,0x00,0x00,0x01,0x00,0x46,0x00,0xf0,0x02,0x44,0x03,0xe8,0x00,0x09,
		0x00,0x12,0xb6,0x06,0x01,0x07,0x03,0x03,0x01,0x00,0x00,0x2f,0x2f,0x32,0x11,0x33,
		0x11,0x33,0x30,0x31,0x77,0x11,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x15,0x46,0x78,
		0x78,0x78,0x96,0xf0,0x02,0xf8,0xfd,0x80,0x02,0x80,0xfd,0x80,0x78,0x00,0x00,0x01,
		0xff,0xb0,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x0b,0x00,0x14,0xb7,0x07,0x03,0x0a,
		0x03,0x02,0x02,0x05,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x33,0x11,0x33,0x30,0x31,
		0x53,0x11,0x21,0x35,0x33,0x11,0x33,0x11,0x33,0x15,0x21,0x11,0xbe,0xfe,0xf2,0xd2,
		0xf0,0xd2,0xfe,0xf2,0xfe,0x70,0x02,0x80,0x78,0x02,0x80,0xfd,0x80,0x78,0xfd,0x80,
		0x00,0x01,0xff,0xb0,0x00,0xf0,0x02,0x44,0x03,0xe8,0x00,0x07,0x00,0x0e,0xb4,0x05,
		0x01,0x01,0x03,0x00,0x00,0x2f,0x2f,0x32,0x11,0x33,0x30,0x31,0x67,0x35,0x33,0x11,
		0x33,0x11,0x33,0x15,0x50,0xd2,0xf0,0xd2,0xf0,0x78,0x02,0x80,0xfd,0x80,0x78,0x00,
		0x00,0x01,0xff,0xb0,0xfe,0x70,0x01,0x72,0x03,0xe8,0x00,0x09,0x00,0x10,0xb5,0x08,
		0x03,0x02,0x02,0x05,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x33,0x30,0x31,0x53,0x11,
		0x21,0x35,0x33,0x11,0x33,0x11,0x23,0x11,0xbe,0xfe,0xf2,0xd2,0xf0,0x3c,0xfe,0x70,
		0x02,0x80,0x78,0x02,0x80,0xfd,0x08,0xfd,0x80,0x00,0x00,0x01,0xff,0xb0,0x00,0xf0,
		0x01,0x72,0x03,0xe8,0x00,0x05,0x00,0x0a,0xb2,0x01,0x03,0x00,0x00,0x2f,0x2f,0x32,
		0x30,0x31,0x67,0x35,0x33,0x11,0x33,0x11,0x50,0xd2,0xf0,0xf0,0x78,0x02,0x80,0xfd,
		0x08,0x00,0x00,0x01,0x00,0x82,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x09,0x00,0x10,
		0xb5,0x02,0x05,0x08,0x08,0x03,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x33,0x30,0x31,
		0x53,0x11,0x23,0x11,0x33,0x11,0x33,0x15,0x21,0x11,0xbe,0x3c,0xf0,0xd2,0xfe,0xf2,
		0xfe,0x70,0x02,0x80,0x02,0xf8,0xfd,0x80,0x78,0xfd,0x80,0x00,0x00,0x01,0x00,0x82,
		0x00,0xf0,0x02,0x44,0x03,0xe8,0x00,0x05,0x00,0x0a,0xb2,0x03,0x01,0x00,0x00,0x2f,
		0x2f,0x32,0x30,0x31,0x77,0x11,0x33,0x11,0x33,0x15,0x82,0xf0,0xd2,0xf0,0x02,0xf8,
		0xfd,0x80,0x78,0x00,0x00,0x01,0xff,0xb0,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x0b,
		0x00,0x08,0xb1,0x05,0x00,0x00,0x2f,0x2f,0x30,0x31,0x53,0x11,0x23,0x35,0x21,0x11,
		0x33,0x11,0x21,0x15,0x23,0x11,0x82,0xd2,0x01,0x0e,0x78,0x01,0x0e,0xd2,0xfe,0x70,
		0x02,0x44,0xf0,0x02,0x44,0xfd,0xbc,0xf0,0xfd,0xbc,0x00,0x01,0xff,0xb0,0x00,0xb4,
		0x02,0x44,0x03,0xe8,0x00,0x07,0x00,0x0e,0xb4,0x03,0x05,0x01,0x01,0x00,0x00,0x2f,
		0x32,0x11,0x33,0x2f,0x30,0x31,0x67,0x35,0x21,0x11,0x33,0x11,0x21,0x15,0x50,0x01,
		0x0e,0x78,0x01,0x0e,0xb4,0xf0,0x02,0x44,0xfd,0xbc,0xf0,0x00,0x00,0x01,0xff,0xb0,
		0xfe,0x70,0x01,0x72,0x03,0xe8,0x00,0x09,0x00,0x08,0xb1,0x05,0x00,0x00,0x2f,0x2f,
		0x30,0x31,0x53,0x11,0x23,0x35,0x21,0x11,0x33,0x11,0x33,0x11,0x82,0xd2,0x01,0x0e,
		0x78,0x3c,0xfe,0x70,0x02,0x44,0xf0,0x02,0x44,0xfd,0xbc,0xfc,0xcc,0x00,0x00,0x01,
		0xff,0xb0,0x00,0xb4,0x01,0x36,0x03,0xe8,0x00,0x05,0x00,0x0a,0xb2,0x03,0x02,0x00,
		0x00,0x2f,0x32,0x2f,0x30,0x31,0x67,0x35,0x21,0x11,0x33,0x11,0x50,0x01,0x0e,0x78,
		0xb4,0xf0,0x02,0x44,0xfc,0xcc,0x00,0x01,0x00,0x82,0xfe,0x70,0x02,0x44,0x03,0xe8,
		0x00,0x09,0x00,0x08,0xb1,0x03,0x00,0x00,0x2f,0x2f,0x30,0x31,0x53,0x11,0x33,0x11,
		0x33,0x11,0x21,0x15,0x23,0x11,0x82,0x3c,0x78,0x01,0x0e,0xd2,0xfe,0x70,0x03,0x34,
		0x02,0x44,0xfd,0xbc,0xf0,0xfd,0xbc,0x00,0x00,0x01,0x00,0xbe,0x00,0xb4,0x02,0x44,
		0x03,0xe8,0x00,0x05,0x00,0x0a,0xb2,0x01,0x03,0x00,0x00,0x2f,0x32,0x2f,0x30,0x31,
		0x77,0x11,0x33,0x11,0x21,0x15,0xbe,0x78,0x01,0x0e,0xb4,0x03,0x34,0xfd,0xbc,0xf0,
		0x00,0x02,0xff,0xb0,0x00,0x78,0x02,0x44,0x03,0xe8,0x00,0x03,0x00,0x0b,0x00,0x14,
		0xb7,0x01,0x09,0x05,0x05,0x04,0x04,0x07,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x11,
		0x33,0x32,0x30,0x31,0x67,0x35,0x21,0x15,0x25,0x35,0x21,0x11,0x33,0x11,0x21,0x15,
		0x50,0x02,0x94,0xfd,0x6c,0x01,0x0e,0x78,0x01,0x0e,0x78,0x78,0x78,0xf0,0x78,0x02,
		0x08,0xfd,0xf8,0x78,0x00,0x01,0xff,0xb0,0x00,0x78,0x01,0x36,0x03,0xe8,0x00,0x09,
		0x00,0x10,0xb5,0x01,0x05,0x04,0x04,0x07,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x32,
		0x30,0x31,0x67,0x35,0x21,0x35,0x21,0x35,0x21,0x11,0x33,0x11,0x50,0x01,0x0e,0xfe,
		0xf2,0x01,0x0e,0x78,0x78,0x78,0x78,0x78,0x02,0x08,0xfc,0x90,0x00,0x01,0x00,0xbe,
		0x00,0x78,0x02,0x44,0x03,0xe8,0x00,0x09,0x00,0x10,0xb5,0x07,0x03,0x06,0x06,0x01,
		0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x32,0x30,0x31,0x77,0x11,0x33,0x11,0x21,0x15,
		0x21,0x15,0x21,0x15,0xbe,0x78,0x01,0x0e,0xfe,0xf2,0x01,0x0e,0x78,0x03,0x70,0xfd,
		0xf8,0x78,0x78,0x78,0x00,0x01,0xff,0xb0,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x13,
		0x00,0x1f,0x40,0x0d,0x10,0x0a,0x05,0x0b,0x07,0x03,0x0e,0x12,0x03,0x02,0x02,0x05,
		0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x33,0x33,0x11,0x33,0x33,0x11,0x33,0x32,0x30,
		0x31,0x53,0x11,0x23,0x35,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x15,0x23,
		0x11,0x23,0x11,0x23,0x11,0x46,0x96,0x96,0x78,0x78,0x78,0x96,0x96,0x78,0x78,0xfe,
		0x70,0x02,0x80,0x78,0x02,0x80,0xfd,0x80,0x02,0x80,0xfd,0x80,0x78,0xfd,0x80,0x02,
		0x80,0xfd,0x80,0x00,0x00,0x02,0xff,0xb0,0xfe,0x70,0x01,0xae,0x03,0xe8,0x00,0x07,
		0x00,0x0b,0x00,0x14,0xb7,0x08,0x09,0x05,0x03,0x02,0x02,0x05,0x00,0x00,0x2f,0x2f,
		0x39,0x2f,0x33,0x11,0x33,0x32,0x30,0x31,0x53,0x11,0x23,0x35,0x33,0x11,0x33,0x11,
		0x33,0x11,0x33,0x11,0x46,0x96,0x96,0x78,0x78,0x78,0xfe,0x70,0x02,0x80,0x78,0x02,
		0x80,0xfa,0x88,0x05,0x78,0xfa,0x88,0x00,0x00,0x02,0x00,0x46,0xfe,0x70,0x02,0x44,
		0x03,0xe8,0x00,0x03,0x00,0x0b,0x00,0x14,0xb7,0x0b,0x06,0x01,0x07,0x0a,0x0a,0x01,
		0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x11,0x33,0x32,0x30,0x31,0x53,0x11,0x33,0x11,
		0x33,0x11,0x33,0x11,0x33,0x15,0x23,0x11,0x46,0x78,0x78,0x78,0x96,0x96,0xfe,0x70,
		0x05,0x78,0xfa,0x88,0x05,0x78,0xfd,0x80,0x78,0xfd,0x80,0x00,0x00,0x01,0xff,0xb0,
		0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x0b,0x00,0x14,0xb7,0x07,0x03,0x0a,0x03,0x02,
		0x02,0x05,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x33,0x11,0x33,0x30,0x31,0x53,0x11,
		0x23,0x35,0x33,0x11,0x33,0x11,0x33,0x15,0x23,0x11,0x82,0xd2,0xd2,0xf0,0xd2,0xd2,
		0xfe,0x70,0x02,0x80,0x78,0x02,0x80,0xfd,0x80,0x78,0xfd,0x80,0x00,0x01,0xff,0xb0,
		0xfe,0x70,0x01,0x72,0x03,0xe8,0x00,0x07,0x00,0x0e,0xb4,0x03,0x02,0x02,0x05,0x00,
		0x00,0x2f,0x2f,0x39,0x2f,0x33,0x30,0x31,0x53,0x11,0x23,0x35,0x33,0x11,0x33,0x11,
		0x82,0xd2,0xd2,0xf0,0xfe,0x70,0x02,0x80,0x78,0x02,0x80,0xfa,0x88,0x00,0x00,0x01,
		0x00,0x82,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x07,0x00,0x0e,0xb4,0x03,0x06,0x06,
		0x01,0x00,0x00,0x2f,0x2f,0x39,0x2f,0x33,0x30,0x31,0x53,0x11,0x33,0x11,0x33,0x15,
		0x23,0x11,0x82,0xf0,0xd2,0xd2,0xfe,0x70,0x05,0x78,0xfd,0x80,0x78,0xfd,0x80,0x00,
		0x00,0x01,0xff,0xb0,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x0b,0x00,0x08,0xb1,0x05,
		0x00,0x00,0x2f,0x2f,0x30,0x31,0x53,0x11,0x21,0x35,0x21,0x11,0x33,0x11,0x21,0x15,
		0x21,0x11,0xbe,0xfe,0xf2,0x01,0x0e,0x78,0x01,0x0e,0xfe,0xf2,0xfe,0x70,0x02,0x44,
		0xf0,0x02,0x44,0xfd,0xbc,0xf0,0xfd,0xbc,0x00,0x01,0xff,0xb0,0xfe,0x70,0x01,0x36,
		0x03,0xe8,0x00,0x07,0x00,0x08,0xb1,0x05,0x00,0x00,0x2f,0x2f,0x30,0x31,0x53,0x11,
		0x21,0x35,0x21,0x11,0x33,0x11,0xbe,0xfe,0xf2,0x01,0x0e,0x78,0xfe,0x70,0x02,0x44,
		0xf0,0x02,0x44,0xfa,0x88,0x00,0x00,0x01,0x00,0xbe,0xfe,0x70,0x02,0x44,0x03,0xe8,
		0x00,0x07,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x2f,0x30,0x31,0x53,0x11,0x33,0x11,
		0x21,0x15,0x21,0x11,0xbe,0x78,0x01,0x0e,0xfe,0xf2,0xfe,0x70,0x05,0x78,0xfd,0xbc,
		0xf0,0xfd,0xbc,0x00,0x00,0x01,0xff,0xb0,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x13,
		0x00,0x1d,0x40,0x0c,0x09,0x0b,0x08,0x08,0x0e,0x05,0x12,0x01,0x01,0x0f,0x04,0x00,
		0x00,0x2f,0x2f,0x33,0x33,0x11,0x33,0x2f,0x33,0x33,0x11,0x33,0x2f,0x30,0x31,0x53,
		0x11,0x21,0x35,0x21,0x35,0x21,0x35,0x21,0x11,0x33,0x11,0x21,0x15,0x21,0x15,0x21,
		0x15,0x21,0x11,0xbe,0xfe,0xf2,0x01,0x0e,0xfe,0xf2,0x01,0x0e,0x78,0x01,0x0e,0xfe,
		0xf2,0x01,0x0e,0xfe,0xf2,0xfe,0x70,0x02,0x08,0x78,0x78,0x78,0x02,0x08,0xfd,0xf8,
		0x78,0x78,0x78,0xfd,0xf8,0x00,0x00,0x01,0xff,0xb0,0xfe,0x70,0x01,0x36,0x03,0xe8,
		0x00,0x0b,0x00,0x19,0x40,0x0a,0x08,0x05,0x01,0x04,0x05,0x04,0x05,0x04,0x09,0x00,
		0x00,0x2f,0x2f,0x39,0x39,0x2f,0x2f,0x11,0x33,0x11,0x33,0x30,0x31,0x53,0x11,0x21,
		0x35,0x21,0x35,0x21,0x35,0x21,0x11,0x33,0x11,0xbe,0xfe,0xf2,0x01,0x0e,0xfe,0xf2,
		0x01,0x0e,0x78,0xfe,0x70,0x02,0x08,0x78,0x78,0x78,0x02,0x08,0xfa,0x88,0x00,0x01,
		0x00,0xbe,0xfe,0x70,0x02,0x44,0x03,0xe8,0x00,0x0b,0x00,0x19,0x40,0x0a,0x03,0x06,
		0x0a,0x07,0x06,0x07,0x06,0x07,0x01,0x00,0x00,0x2f,0x2f,0x39,0x39,0x2f,0x2f,0x11,
		0x33,0x11,0x33,0x30,0x31,0x53,0x11,0x33,0x11,0x21,0x15,0x21,0x15,0x21,0x15,0x21,
		0x11,0xbe,0x78,0x01,0x0e,0xfe,0xf2,0x01,0x0e,0xfe,0xf2,0xfe,0x70,0x05,0x78,0xfd,
		0xf8,0x78,0x78,0x78,0xfd,0xf8,0x00,0x05,0x00,0x29,0x00,0x63,0x01,0xca,0x02,0x05,
		0x00,0x13,0x00,0x27,0x00,0x36,0x00,0x42,0x00,0x4e,0x00,0x1b,0x40,0x09,0x2f,0x28,
		0x43,0x37,0x3d,0x49,0x06,0x14,0x00,0xb8,0x01,0x40,0xb1,0x1e,0x0a,0x00,0x2f,0x33,
		0x1a,0xcc,0x32,0x17,0x39,0x30,0x31,0x77,0x22,0x2e,0x02,0x35,0x34,0x3e,0x02,0x33,
		0x32,0x1e,0x02,0x15,0x14,0x0e,0x02,0x27,0x32,0x3e,0x02,0x35,0x34,0x2e,0x02,0x23,
		0x22,0x0e,0x02,0x15,0x14,0x1e,0x02,0x37,0x32,0x16,0x17,0x07,0x26,0x26,0x23,0x22,
		0x06,0x06,0x07,0x27,0x36,0x36,0x27,0x22,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,
		0x14,0x06,0x33,0x22,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0xf9,0x2b,
		0x4c,0x39,0x20,0x20,0x39,0x4c,0x2b,0x2b,0x4c,0x39,0x21,0x21,0x39,0x4c,0x2b,0x23,
		0x3d,0x2f,0x1a,0x1a,0x2f,0x3d,0x23,0x22,0x3d,0x2f,0x1a,0x1a,0x2f,0x3d,0x23,0x1f,
		0x38,0x13,0x14,0x14,0x2b,0x17,0x11,0x1f,0x19,0x09,0x1a,0x17,0x36,0x26,0x0c,0x13,
		0x13,0x0c,0x0c,0x13,0x13,0x7e,0x0c,0x13,0x13,0x0c,0x0c,0x13,0x13,0x63,0x21,0x39,
		0x4c,0x2b,0x2b,0x4c,0x39,0x21,0x21,0x39,0x4c,0x2b,0x2b,0x4c,0x39,0x21,0x28,0x1b,
		0x2e,0x3e,0x22,0x23,0x3c,0x2f,0x1a,0x1a,0x2f,0x3c,0x23,0x22,0x3e,0x2e,0x1b,0x94,
		0x1f,0x1a,0x1f,0x1a,0x19,0x0d,0x17,0x0f,0x21,0x1c,0x1b,0x1f,0x13,0x0c,0x0c,0x13,
		0x13,0x0c,0x0c,0x13,0x13,0x0c,0x0c,0x13,0x13,0x0c,0x0c,0x13,0x00,0x05,0x00,0x29,
		0x00,0x63,0x01,0xca,0x02,0x05,0x00,0x13,0x00,0x27,0x00,0x37,0x00,0x43,0x00,0x4f,
		0x00,0x1b,0x40,0x09,0x28,0x30,0x44,0x38,0x4a,0x3e,0x06,0x14,0x00,0xb8,0x01,0x40,
		0xb1,0x1e,0x0a,0x00,0x2f,0x33,0x1a,0xcc,0x32,0x17,0x39,0x30,0x31,0x77,0x22,0x2e,
		0x02,0x35,0x34,0x3e,0x02,0x33,0x32,0x1e,0x02,0x15,0x14,0x0e,0x02,0x27,0x32,0x3e,
		0x02,0x35,0x34,0x2e,0x02,0x23,0x22,0x0e,0x02,0x15,0x14,0x1e,0x02,0x37,0x22,0x26,
		0x27,0x37,0x1e,0x02,0x33,0x32,0x36,0x36,0x37,0x17,0x06,0x06,0x27,0x22,0x26,0x35,
		0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x33,0x22,0x26,0x35,0x34,0x36,0x33,0x32,
		0x16,0x15,0x14,0x06,0xf9,0x2b,0x4c,0x39,0x20,0x20,0x39,0x4c,0x2b,0x2b,0x4c,0x39,
		0x21,0x21,0x39,0x4c,0x2b,0x23,0x3d,0x2f,0x1a,0x1a,0x2f,0x3d,0x23,0x22,0x3d,0x2f,
		0x1a,0x1a,0x2f,0x3d,0x23,0x1f,0x36,0x17,0x1a,0x09,0x19,0x1f,0x11,0x10,0x1d,0x1c,
		0x0d,0x14,0x13,0x38,0x64,0x0c,0x13,0x13,0x0c,0x0c,0x13,0x13,0x7e,0x0c,0x13,0x13,
		0x0c,0x0c,0x13,0x13,0x63,0x21,0x39,0x4c,0x2b,0x2b,0x4c,0x39,0x21,0x21,0x39,0x4c,
		0x2b,0x2b,0x4c,0x39,0x21,0x28,0x1b,0x2e,0x3e,0x22,0x23,0x3c,0x2f,0x1a,0x1a,0x2f,
		0x3c,0x23,0x22,0x3e,0x2e,0x1b,0x32,0x1b,0x1c,0x21,0x0e,0x18,0x0d,0x0b,0x17,0x11,
		0x1f,0x19,0x20,0x81,0x13,0x0c,0x0c,0x13,0x13,0x0c,0x0c,0x13,0x13,0x0c,0x0c,0x13,
		0x13,0x0c,0x0c,0x13,0x00,0x04,0x00,0x28,0x00,0x63,0x01,0xc9,0x02,0x05,0x00,0x13,
		0x00,0x23,0x00,0x2f,0x00,0x3b,0x00,0x16,0xb7,0x14,0x1c,0x30,0x24,0x2a,0x36,0x06,
		0x00,0xb8,0x01,0x40,0xb0,0x0a,0x00,0x2f,0x1a,0xcc,0x17,0x39,0x30,0x31,0x77,0x22,
		0x2e,0x02,0x35,0x34,0x3e,0x02,0x33,0x32,0x1e,0x02,0x15,0x14,0x0e,0x02,0x27,0x32,
		0x36,0x37,0x27,0x0e,0x02,0x23,0x22,0x26,0x26,0x27,0x07,0x16,0x16,0x27,0x32,0x36,
		0x35,0x34,0x26,0x23,0x22,0x06,0x15,0x14,0x16,0x33,0x32,0x36,0x35,0x34,0x26,0x23,
		0x22,0x06,0x15,0x14,0x16,0xf8,0x2b,0x4c,0x39,0x20,0x20,0x39,0x4c,0x2b,0x2b,0x4c,
		0x39,0x21,0x21,0x39,0x4c,0x2a,0x1f,0x38,0x13,0x14,0x0d,0x1c,0x1d,0x10,0x11,0x1f,
		0x19,0x09,0x1a,0x17,0x36,0x26,0x0c,0x13,0x13,0x0c,0x0c,0x13,0x13,0x96,0x0c,0x13,
		0x13,0x0c,0x0c,0x13,0x13,0x63,0x21,0x39,0x4c,0x2b,0x2b,0x4c,0x39,0x21,0x21,0x39,
		0x4c,0x2b,0x2b,0x4c,0x39,0x21,0x5a,0x20,0x19,0x1f,0x11,0x17,0x0b,0x0d,0x18,0x0e,
		0x21,0x1c,0x1b,0x81,0x13,0x0c,0x0c,0x13,0x13,0x0c,0x0c,0x13,0x13,0x0c,0x0c,0x13,
		0x13,0x0c,0x0c,0x13,0x00,0x02,0x00,0x0d,0x00,0x00,0x01,0xe7,0x02,0x59,0x00,0x0b,
		0x00,0x29,0x00,0x17,0x40,0x09,0x1b,0x18,0x0b,0x1d,0x1d,0x06,0x0c,0x07,0x06,0x00,
		0x2f,0x33,0x2f,0x12,0x39,0x2f,0x33,0x33,0x33,0x30,0x31,0x65,0x1e,0x02,0x17,0x17,
		0x21,0x37,0x3e,0x02,0x35,0x13,0x1e,0x06,0x15,0x14,0x06,0x06,0x23,0x22,0x27,0x23,
		0x06,0x23,0x22,0x26,0x26,0x35,0x34,0x3e,0x05,0x35,0x01,0x09,0x01,0x1d,0x3f,0x34,
		0x03,0xfe,0xba,0x03,0x37,0x40,0x1c,0x21,0x02,0x1a,0x27,0x2d,0x2d,0x25,0x17,0x1d,
		0x30,0x1e,0x55,0x2b,0x04,0x2b,0x55,0x1d,0x31,0x1d,0x18,0x26,0x2f,0x2e,0x26,0x18,
		0xfa,0x4e,0x64,0x32,0x04,0x12,0x12,0x03,0x31,0x65,0x4f,0x01,0x5f,0x24,0x35,0x2a,
		0x25,0x27,0x2d,0x3b,0x27,0x23,0x35,0x1d,0x37,0x37,0x1d,0x35,0x23,0x27,0x3b,0x2d,
		0x27,0x25,0x2a,0x35,0x24,0x00,0x00,0x03,0x00,0x05,0x00,0x00,0x01,0xef,0x02,0x49,
		0x00,0x06,0x00,0x2a,0x00,0x31,0x00,0x25,0x40,0x10,0x2c,0x12,0x0f,0x0f,0x06,0x15,
		0x15,0x24,0x2f,0x30,0x30,0x01,0x03,0x02,0x02,0x01,0x00,0x2f,0x33,0x11,0x33,0x11,
		0x33,0x11,0x33,0x2f,0x33,0x2f,0x33,0x33,0x11,0x33,0x33,0x30,0x31,0x77,0x15,0x23,
		0x37,0x36,0x36,0x35,0x37,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x23,0x22,0x26,0x27,
		0x06,0x06,0x23,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x33,0x26,0x35,0x34,0x36,
		0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x07,0x07,0x33,0x14,0x16,0x17,0x17,0x23,0xfa,
		0x5e,0x03,0x20,0x19,0x98,0x23,0x3a,0x22,0x22,0x3a,0x23,0x28,0x40,0x0e,0x0e,0x3f,
		0x28,0x23,0x3b,0x22,0x22,0x3b,0x23,0x05,0x10,0x22,0x3b,0x23,0x23,0x3a,0x22,0x10,
		0x6f,0x22,0x19,0x20,0x03,0x5e,0xfa,0xfa,0x12,0x04,0x6d,0x77,0x91,0x22,0x3a,0x23,
		0x23,0x3b,0x22,0x2c,0x22,0x22,0x2c,0x22,0x3b,0x23,0x23,0x3a,0x22,0x1d,0x22,0x23,
		0x3a,0x22,0x22,0x3a,0x23,0x22,0x1d,0x91,0x77,0x6d,0x04,0x12,0x00,0x01,0x00,0x0c,
		0x00,0x00,0x01,0xe8,0x02,0x4f,0x00,0x21,0x00,0x13,0xb2,0x1d,0x19,0x0d,0xb8,0xff,
		0xff,0xb2,0x72,0x19,0x00,0x00,0x2f,0x32,0x2b,0x11,0x39,0x30,0x31,0x41,0x32,0x16,
		0x16,0x15,0x14,0x0e,0x05,0x15,0x23,0x34,0x2e,0x05,0x35,0x34,0x36,0x36,0x33,0x32,
		0x16,0x16,0x15,0x33,0x34,0x36,0x36,0x01,0x76,0x20,0x33,0x1f,0x18,0x26,0x2f,0x2f,
		0x26,0x18,0x28,0x18,0x26,0x2f,0x2f,0x26,0x18,0x1f,0x34,0x1f,0x22,0x36,0x1f,0x0a,
		0x23,0x37,0x02,0x4f,0x20,0x38,0x24,0x30,0x4b,0x3d,0x36,0x36,0x3b,0x47,0x2d,0x2d,
		0x47,0x3b,0x36,0x36,0x3d,0x4b,0x30,0x24,0x38,0x20,0x1a,0x33,0x25,0x25,0x32,0x1b,
		0x00,0x01,0x00,0x0f,0x00,0x02,0x01,0xe5,0x02,0x59,0x00,0x07,0x00,0x08,0xb1,0x00,
		0x04,0x00,0x2f,0x2f,0x30,0x31,0x53,0x33,0x13,0x15,0x03,0x23,0x03,0x35,0xf0,0x1e,
		0xd7,0xd7,0x1e,0xe1,0x02,0x59,0xfe,0xe8,0x1e,0xfe,0xdf,0x01,0x21,0x1e,0x00,0x01,
		0x00,0x09,0xff,0xf0,0x01,0xd6,0x02,0x77,0x00,0x0d,0x00,0x0f,0xb6,0x09,0x07,0x08,
		0x01,0x04,0x06,0x00,0x00,0x2f,0x2f,0x17,0x39,0x30,0x31,0x41,0x17,0x0e,0x03,0x07,
		0x27,0x37,0x17,0x3e,0x03,0x01,0x76,0x60,0x16,0x44,0x54,0x5a,0x2d,0x98,0x3d,0x5b,
		0x21,0x3e,0x37,0x2d,0x02,0x77,0x1e,0x64,0xb4,0x9c,0x82,0x33,0xa9,0x34,0x6b,0x2f,
		0x6d,0x81,0x9b,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0xf2,0x02,0x79,0x00,0x0e,
		0x00,0x12,0x40,0x09,0x06,0x09,0x0a,0x07,0x08,0x01,0x06,0x05,0x00,0x00,0x2f,0x2f,
		0x17,0x39,0x30,0x31,0x41,0x17,0x0e,0x02,0x07,0x27,0x27,0x37,0x13,0x27,0x3e,0x03,
		0x01,0x87,0x6b,0x27,0x72,0x87,0x47,0x5a,0x31,0x68,0x32,0x44,0x21,0x52,0x55,0x4d,
		0x02,0x79,0x27,0x85,0xdc,0xaf,0x42,0x30,0xf3,0x17,0xfe,0xfe,0x1d,0x22,0x69,0x8c,
		0xaa,0x00,0xff,0xff,0x00,0x55,0x00,0x91,0x01,0xae,0x01,0xf7,0x06,0x06,0x02,0x6e,
		0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0c,0x01,0xf4,0x02,0x75,0x00,0x09,0x00,0x12,
		0x00,0x0a,0xb2,0x0a,0x0e,0x00,0x00,0x2f,0x2f,0x32,0x30,0x31,0x77,0x27,0x3e,0x02,
		0x37,0x17,0x0e,0x02,0x17,0x26,0x02,0x27,0x37,0x1e,0x02,0x17,0x45,0x45,0x40,0x8c,
		0x9f,0x5a,0x2f,0x58,0x96,0x83,0xf1,0x4f,0x71,0x23,0x54,0x16,0x3b,0x4f,0x34,0x0c,
		0x39,0x60,0xaa,0xa5,0x58,0x39,0x51,0xa7,0xb0,0x5d,0x76,0x01,0x26,0xb2,0x19,0x6f,
		0xc4,0xa8,0x48,0x00,0x00,0x02,0x00,0x04,0xff,0xfd,0x02,0x10,0x02,0x91,0x00,0x0d,
		0x00,0x17,0x00,0x0e,0xb4,0x00,0x0e,0x06,0x14,0x0e,0x00,0x2f,0x2f,0x33,0x11,0x33,
		0x30,0x31,0x77,0x27,0x3e,0x03,0x37,0x17,0x0e,0x05,0x17,0x2e,0x03,0x27,0x37,0x16,
		0x12,0x17,0x62,0x5e,0x39,0x6a,0x6a,0x73,0x43,0x49,0x2f,0x52,0x49,0x42,0x40,0x40,
		0xf2,0x2e,0x4c,0x3f,0x31,0x12,0x70,0x20,0x6b,0x56,0x06,0x53,0x50,0x8b,0x7c,0x76,
		0x3b,0x4f,0x2a,0x52,0x51,0x54,0x57,0x5f,0x3e,0x39,0x87,0x9c,0xaf,0x61,0x28,0xa6,
		0xfe,0xde,0x80,0x00,0x00,0x02,0x00,0x1f,0xff,0xf5,0x01,0xd1,0x02,0x79,0x00,0x32,
		0x00,0x3e,0x00,0x29,0x40,0x14,0x38,0x1e,0x33,0x15,0x11,0x11,0x15,0x1e,0x15,0x1e,
		0x15,0x00,0x22,0x0a,0x03,0x72,0x2c,0x00,0x09,0x72,0x00,0x2b,0x32,0x2b,0x32,0x12,
		0x39,0x39,0x2f,0x2f,0x11,0x33,0x2f,0x11,0x33,0x11,0x33,0x30,0x31,0x45,0x22,0x2e,
		0x02,0x35,0x34,0x3e,0x02,0x33,0x32,0x1e,0x02,0x15,0x15,0x23,0x35,0x06,0x06,0x23,
		0x22,0x26,0x26,0x35,0x34,0x3e,0x02,0x17,0x34,0x26,0x26,0x23,0x22,0x0e,0x02,0x15,
		0x14,0x1e,0x02,0x33,0x32,0x36,0x37,0x17,0x06,0x06,0x27,0x32,0x3e,0x02,0x35,0x26,
		0x06,0x06,0x15,0x14,0x16,0x01,0x27,0x31,0x5f,0x4b,0x2d,0x2a,0x46,0x55,0x2b,0x25,
		0x46,0x37,0x20,0x3c,0x13,0x31,0x1d,0x26,0x3c,0x23,0x1c,0x39,0x55,0x39,0x20,0x3c,
		0x2a,0x24,0x40,0x32,0x1d,0x24,0x3d,0x4b,0x28,0x1d,0x35,0x19,0x1b,0x20,0x46,0x10,
		0x17,0x21,0x16,0x0a,0x37,0x4b,0x26,0x28,0x0b,0x27,0x4f,0x7a,0x54,0x53,0x79,0x4e,
		0x26,0x1c,0x38,0x55,0x38,0xe9,0x26,0x17,0x17,0x22,0x3c,0x26,0x22,0x38,0x28,0x13,
		0x04,0x26,0x3d,0x24,0x1e,0x3f,0x60,0x42,0x48,0x68,0x45,0x21,0x11,0x10,0x31,0x14,
		0x15,0xe9,0x12,0x28,0x42,0x30,0x05,0x14,0x2c,0x20,0x25,0x2c,0x00,0x03,0x00,0x24,
		0xff,0xf4,0x01,0xe1,0x02,0x75,0x00,0x2e,0x00,0x3d,0x00,0x4d,0x00,0x23,0x40,0x15,
		0x01,0x33,0x2d,0x20,0x34,0x1f,0x0e,0x3e,0x08,0x05,0x46,0x16,0x03,0x72,0x2f,0x05,
		0x09,0x72,0x2e,0x00,0x09,0x00,0x3f,0x32,0x2b,0x32,0x2b,0x32,0x12,0x17,0x39,0x30,
		0x31,0x45,0x27,0x0e,0x02,0x23,0x22,0x26,0x26,0x35,0x34,0x3e,0x02,0x37,0x26,0x26,
		0x35,0x34,0x3e,0x02,0x33,0x32,0x16,0x16,0x15,0x14,0x0e,0x02,0x07,0x17,0x3e,0x03,
		0x37,0x34,0x36,0x37,0x17,0x0e,0x02,0x07,0x17,0x25,0x32,0x36,0x36,0x37,0x27,0x0e,
		0x03,0x15,0x14,0x1e,0x02,0x13,0x3e,0x03,0x35,0x34,0x26,0x23,0x22,0x06,0x06,0x15,
		0x14,0x16,0x16,0x01,0xa0,0x37,0x14,0x36,0x3e,0x21,0x2d,0x47,0x28,0x12,0x21,0x2f,
		0x1c,0x23,0x24,0x15,0x26,0x32,0x1c,0x29,0x3c,0x22,0x10,0x1d,0x27,0x18,0x70,0x0d,
		0x10,0x0a,0x05,0x01,0x02,0x02,0x41,0x0b,0x19,0x1a,0x0e,0x46,0xfe,0xec,0x18,0x2b,
		0x28,0x12,0x7f,0x14,0x1f,0x16,0x0c,0x0e,0x18,0x1f,0x28,0x12,0x1c,0x14,0x0a,0x29,
		0x1b,0x12,0x20,0x13,0x0d,0x1c,0x0c,0x58,0x1a,0x27,0x15,0x29,0x45,0x29,0x20,0x3a,
		0x34,0x2c,0x10,0x2b,0x4e,0x22,0x1c,0x30,0x23,0x14,0x26,0x3b,0x22,0x18,0x33,0x2d,
		0x25,0x0b,0x9d,0x0f,0x1a,0x17,0x18,0x0d,0x03,0x05,0x02,0x2d,0x14,0x27,0x26,0x13,
		0x5b,0x16,0x11,0x1f,0x15,0xad,0x0c,0x22,0x26,0x28,0x14,0x15,0x23,0x1b,0x0f,0x01,
		0x3f,0x09,0x1a,0x21,0x23,0x10,0x21,0x2d,0x12,0x21,0x16,0x10,0x26,0x2c,0x00,0x01,
		0x00,0x40,0xff,0xbc,0x01,0xb4,0x02,0x99,0x00,0x10,0x00,0x10,0xb6,0x0d,0x00,0x0f,
		0x0a,0x01,0x72,0x00,0x00,0x2f,0x2b,0x32,0x11,0x33,0x30,0x31,0x57,0x11,0x2e,0x03,
		0x35,0x34,0x36,0x36,0x33,0x33,0x11,0x23,0x11,0x23,0x11,0xf3,0x25,0x42,0x30,0x1c,
		0x2f,0x6c,0x5c,0x7d,0x3a,0x4c,0x44,0x01,0x86,0x02,0x1d,0x31,0x40,0x24,0x2b,0x4a,
		0x2e,0xfd,0x23,0x02,0xa4,0xfd,0x5c,0x00,0x00,0x02,0x00,0x41,0xff,0xca,0x01,0xa2,
		0x02,0xa0,0x00,0x4c,0x00,0x63,0x00,0x1e,0x40,0x12,0x12,0x48,0x45,0x4d,0x51,0x1a,
		0x57,0x1f,0x22,0x37,0x0a,0x00,0x33,0x26,0x01,0x72,0x0d,0x00,0x00,0x2f,0x32,0x2b,
		0x32,0x12,0x17,0x39,0x30,0x31,0x57,0x22,0x26,0x27,0x37,0x1e,0x03,0x17,0x1e,0x02,
		0x33,0x32,0x3e,0x02,0x35,0x34,0x26,0x26,0x27,0x2e,0x02,0x35,0x34,0x3e,0x02,0x37,
		0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x17,0x07,0x26,0x26,0x27,0x2e,
		0x03,0x23,0x22,0x06,0x06,0x15,0x14,0x1e,0x02,0x17,0x1e,0x03,0x15,0x14,0x06,0x06,
		0x07,0x16,0x16,0x15,0x14,0x0e,0x02,0x13,0x3e,0x02,0x35,0x34,0x2e,0x02,0x27,0x27,
		0x0e,0x03,0x15,0x14,0x1e,0x02,0x17,0x16,0x16,0xee,0x33,0x5b,0x1f,0x34,0x06,0x02,
		0x03,0x0b,0x0f,0x0b,0x18,0x1d,0x10,0x18,0x27,0x1a,0x0e,0x14,0x33,0x2e,0x33,0x3e,
		0x1c,0x0c,0x15,0x1f,0x12,0x22,0x21,0x2b,0x4a,0x2e,0x21,0x3b,0x30,0x10,0x39,0x02,
		0x03,0x01,0x02,0x10,0x19,0x20,0x13,0x18,0x29,0x18,0x12,0x27,0x3c,0x2a,0x17,0x22,
		0x17,0x0c,0x13,0x21,0x16,0x20,0x20,0x1a,0x2e,0x3e,0x21,0x0c,0x10,0x08,0x0c,0x19,
		0x27,0x1b,0x2b,0x0a,0x11,0x0c,0x06,0x0c,0x19,0x28,0x1b,0x11,0x1a,0x36,0x2b,0x2a,
		0x3d,0x02,0x06,0x0b,0x12,0x0e,0x0a,0x0c,0x07,0x0c,0x16,0x1d,0x10,0x17,0x21,0x1c,
		0x0d,0x11,0x24,0x2d,0x1e,0x11,0x1e,0x1b,0x15,0x06,0x14,0x38,0x25,0x26,0x41,0x27,
		0x15,0x28,0x1c,0x32,0x02,0x06,0x03,0x0d,0x19,0x13,0x0c,0x15,0x22,0x16,0x17,0x1e,
		0x18,0x18,0x10,0x0b,0x19,0x1c,0x20,0x12,0x14,0x26,0x1d,0x09,0x16,0x37,0x22,0x21,
		0x38,0x28,0x17,0x01,0x1a,0x07,0x12,0x18,0x0f,0x11,0x19,0x16,0x13,0x09,0x0f,0x03,
		0x0d,0x10,0x14,0x0b,0x10,0x1c,0x16,0x12,0x08,0x05,0x07,0x00,0x00,0x03,0x00,0x0e,
		0x00,0x13,0x01,0xf2,0x02,0x12,0x00,0x25,0x00,0x3a,0x00,0x4e,0x00,0x18,0xb6,0x00,
		0x1e,0x15,0x09,0x04,0x45,0x30,0xb8,0x01,0xc0,0xb1,0x3b,0x26,0x00,0x2f,0x33,0x1a,
		0xcc,0x32,0x17,0x39,0x30,0x31,0x65,0x22,0x26,0x26,0x35,0x34,0x3e,0x02,0x33,0x32,
		0x16,0x17,0x07,0x26,0x34,0x26,0x26,0x27,0x26,0x26,0x23,0x22,0x0e,0x02,0x15,0x14,
		0x16,0x16,0x33,0x32,0x36,0x36,0x37,0x17,0x06,0x06,0x07,0x22,0x2e,0x02,0x35,0x34,
		0x3e,0x02,0x33,0x32,0x1e,0x02,0x15,0x14,0x0e,0x03,0x27,0x32,0x3e,0x02,0x35,0x34,
		0x2e,0x02,0x23,0x22,0x0e,0x02,0x15,0x14,0x1e,0x02,0x01,0x05,0x29,0x42,0x27,0x18,
		0x28,0x32,0x19,0x36,0x45,0x0a,0x34,0x04,0x02,0x0b,0x10,0x08,0x15,0x0b,0x0e,0x1f,
		0x1c,0x12,0x19,0x2b,0x1a,0x10,0x1d,0x17,0x07,0x2c,0x15,0x42,0x2a,0x32,0x57,0x43,
		0x25,0x26,0x42,0x58,0x32,0x31,0x58,0x43,0x26,0x19,0x2c,0x3d,0x49,0x26,0x28,0x48,
		0x37,0x1f,0x1f,0x36,0x48,0x29,0x29,0x48,0x36,0x1f,0x1f,0x36,0x48,0x7a,0x2a,0x47,
		0x29,0x20,0x35,0x29,0x16,0x33,0x2a,0x13,0x07,0x0a,0x0a,0x0e,0x0b,0x05,0x05,0x0a,
		0x16,0x24,0x19,0x1e,0x30,0x1d,0x0b,0x14,0x0e,0x1d,0x20,0x24,0x67,0x28,0x46,0x5d,
		0x34,0x35,0x5d,0x46,0x28,0x28,0x46,0x5d,0x35,0x2b,0x4c,0x40,0x2e,0x1a,0x2b,0x22,
		0x3a,0x4e,0x2b,0x2c,0x4d,0x3a,0x22,0x21,0x3a,0x4e,0x2d,0x2c,0x4d,0x3a,0x21,0x00,
		0x00,0x04,0x00,0x0e,0x00,0x13,0x01,0xf2,0x02,0x12,0x00,0x0e,0x00,0x17,0x00,0x2c,
		0x00,0x40,0x00,0x1c,0x40,0x0a,0x00,0x03,0x02,0x0d,0x0f,0x17,0x05,0x07,0x37,0x22,
		0xb8,0x01,0xc0,0xb1,0x2d,0x18,0x00,0x2f,0x33,0x1a,0xcc,0x32,0x17,0x39,0x30,0x31,
		0x65,0x27,0x23,0x15,0x23,0x11,0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x07,0x17,0x27,
		0x33,0x32,0x36,0x35,0x34,0x26,0x23,0x23,0x13,0x22,0x2e,0x02,0x35,0x34,0x3e,0x02,
		0x33,0x32,0x1e,0x02,0x15,0x14,0x0e,0x03,0x27,0x32,0x3e,0x02,0x35,0x34,0x2e,0x02,
		0x23,0x22,0x0e,0x02,0x15,0x14,0x1e,0x02,0x01,0x49,0x3e,0x42,0x2e,0x5e,0x2c,0x34,
		0x18,0x1d,0x1c,0x40,0xaf,0x34,0x23,0x24,0x25,0x25,0x31,0x36,0x32,0x57,0x43,0x25,
		0x26,0x42,0x58,0x32,0x31,0x58,0x43,0x26,0x19,0x2c,0x3d,0x49,0x26,0x28,0x48,0x37,
		0x1f,0x1f,0x36,0x48,0x29,0x29,0x48,0x36,0x1f,0x1f,0x36,0x48,0x83,0x7d,0x7b,0x01,
		0x24,0x16,0x26,0x19,0x19,0x2c,0x08,0x7d,0x9e,0x16,0x16,0x16,0x16,0xfe,0x93,0x28,
		0x46,0x5d,0x34,0x35,0x5d,0x46,0x28,0x28,0x46,0x5d,0x35,0x2b,0x4c,0x40,0x2e,0x1a,
		0x2b,0x22,0x3a,0x4e,0x2b,0x2c,0x4d,0x3a,0x22,0x21,0x3a,0x4e,0x2d,0x2c,0x4d,0x3a,
		0x21,0x00,0x00,0x02,0x00,0x12,0x01,0x40,0x01,0xe3,0x02,0x7b,0x00,0x07,0x00,0x14,
		0x00,0x2b,0x40,0x15,0x0c,0x09,0x09,0x06,0x02,0x02,0x0b,0x13,0x10,0x03,0x12,0x12,
		0x00,0x0f,0x08,0x08,0x00,0x00,0x03,0x03,0x72,0x00,0x2b,0x32,0x2f,0x33,0x11,0x33,
		0x11,0x39,0x2f,0x17,0x39,0x32,0x11,0x33,0x32,0x11,0x33,0x30,0x31,0x53,0x11,0x23,
		0x35,0x33,0x15,0x23,0x11,0x33,0x11,0x33,0x17,0x37,0x33,0x11,0x23,0x35,0x07,0x23,
		0x27,0x15,0x68,0x56,0xdd,0x5a,0x77,0x23,0x48,0x4b,0x21,0x2a,0x3c,0x10,0x37,0x01,
		0x40,0x01,0x13,0x28,0x28,0xfe,0xed,0x01,0x3b,0x91,0x91,0xfe,0xc5,0xd7,0x6b,0x6b,
		0xd7,0x00,0x00,0x02,0x00,0x79,0x01,0x72,0x01,0x87,0x02,0x7f,0x00,0x10,0x00,0x20,
		0x00,0x10,0xb6,0x11,0x00,0xc0,0x19,0x09,0x03,0x72,0x00,0x2b,0x32,0x1a,0xcc,0x32,
		0x30,0x31,0x41,0x22,0x26,0x26,0x35,0x34,0x3e,0x02,0x33,0x32,0x16,0x16,0x15,0x14,
		0x06,0x06,0x27,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x14,
		0x16,0x16,0x01,0x00,0x25,0x3e,0x24,0x16,0x25,0x31,0x1b,0x25,0x3d,0x25,0x24,0x3d,
		0x26,0x16,0x21,0x14,0x13,0x21,0x16,0x14,0x23,0x14,0x14,0x22,0x01,0x72,0x24,0x3d,
		0x25,0x1d,0x31,0x24,0x15,0x25,0x3d,0x25,0x24,0x3d,0x25,0x37,0x16,0x25,0x15,0x15,
		0x25,0x17,0x17,0x24,0x16,0x15,0x25,0x16,0x00,0x01,0x00,0xc7,0x02,0x02,0x01,0x24,
		0x02,0xb6,0x00,0x03,0x00,0x08,0xb1,0x00,0x02,0x00,0x2f,0xcd,0x30,0x31,0x53,0x23,
		0x37,0x33,0xf3,0x2c,0x16,0x47,0x02,0x02,0xb4,0x00,0xff,0xff,0x00,0x8b,0x02,0x02,
		0x01,0x6a,0x02,0xb6,0x04,0x26,0x03,0x55,0x46,0x00,0x00,0x06,0x03,0x55,0xc4,0x00,
		0x00,0x01,0x00,0xd9,0xff,0x69,0x01,0x1c,0x02,0x8c,0x00,0x03,0x00,0x0a,0xb3,0x01,
		0x03,0x72,0x00,0x00,0x2f,0x2b,0x30,0x31,0x57,0x11,0x33,0x11,0xd9,0x43,0x97,0x03,
		0x23,0xfc,0xdd,0x00,0x00,0x02,0x00,0xd9,0xff,0x69,0x01,0x1c,0x02,0x8c,0x00,0x03,
		0x00,0x07,0x00,0x0e,0xb5,0x05,0x04,0x00,0x01,0x03,0x72,0x00,0x2b,0x32,0x2f,0x33,
		0x30,0x31,0x53,0x11,0x33,0x11,0x03,0x11,0x33,0x11,0xd9,0x43,0x43,0x43,0x01,0x27,
		0x01,0x65,0xfe,0x9b,0xfe,0x42,0x01,0x5b,0xfe,0xa5,0x00,0x01,0x00,0x31,0xff,0x69,
		0x01,0xc2,0x02,0x8c,0x00,0x0b,0x00,0x18,0x40,0x0a,0x07,0x03,0x0a,0x02,0x02,0x03,
		0x03,0x05,0x01,0x00,0x00,0x2f,0x3f,0x39,0x2f,0x33,0x11,0x33,0x11,0x33,0x30,0x31,
		0x57,0x11,0x23,0x35,0x33,0x35,0x33,0x15,0x33,0x15,0x23,0x11,0xd9,0xa8,0xa8,0x43,
		0xa6,0xa6,0x97,0x02,0x24,0x3c,0xc3,0xc3,0x3c,0xfd,0xdc,0x00,0x00,0x02,0x00,0x17,
		0xff,0xf8,0x01,0xad,0x02,0xa9,0x00,0x2d,0x00,0x3a,0x00,0x20,0x40,0x11,0x11,0x28,
		0x1a,0x37,0x04,0x1f,0x05,0x05,0x0b,0x32,0x1f,0x01,0x72,0x00,0x0b,0x13,0x72,0x00,
		0x2b,0x32,0x2b,0x32,0x12,0x39,0x2f,0x12,0x17,0x39,0x30,0x31,0x65,0x32,0x3e,0x02,
		0x37,0x33,0x0e,0x03,0x23,0x22,0x2e,0x02,0x35,0x35,0x0e,0x02,0x07,0x35,0x3e,0x02,
		0x37,0x35,0x34,0x36,0x36,0x33,0x32,0x1e,0x02,0x15,0x14,0x06,0x06,0x07,0x15,0x14,
		0x1e,0x02,0x13,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x15,0x3e,0x02,0x01,0x18,
		0x15,0x1e,0x13,0x0a,0x01,0x44,0x02,0x12,0x25,0x3c,0x2d,0x26,0x39,0x25,0x12,0x11,
		0x20,0x1e,0x0f,0x11,0x20,0x1e,0x0f,0x22,0x42,0x2f,0x23,0x35,0x24,0x12,0x2b,0x5b,
		0x49,0x0a,0x15,0x1e,0x45,0x0e,0x1d,0x16,0x12,0x1e,0x11,0x2c,0x39,0x1d,0x34,0x10,
		0x1d,0x2a,0x1a,0x27,0x40,0x2e,0x18,0x19,0x2e,0x40,0x28,0x43,0x06,0x0b,0x08,0x04,
		0x3c,0x05,0x09,0x0a,0x06,0xdf,0x36,0x48,0x25,0x14,0x28,0x3b,0x26,0x39,0x63,0x50,
		0x1d,0x59,0x1f,0x2d,0x1d,0x0d,0x01,0xda,0x21,0x2b,0x16,0x12,0x29,0x23,0xd0,0x16,
		0x3b,0x4c,0x00,0x01,0x00,0x31,0xff,0x69,0x01,0xc2,0x02,0x8c,0x00,0x13,0x00,0x29,
		0x40,0x13,0x0f,0x03,0x12,0x03,0x02,0x02,0x00,0x0b,0x07,0x0e,0x06,0x06,0x07,0x07,
		0x00,0x09,0x01,0x72,0x00,0x00,0x2f,0x2b,0x11,0x39,0x2f,0x33,0x11,0x33,0x11,0x33,
		0x11,0x39,0x2f,0x33,0x33,0x11,0x33,0x30,0x31,0x57,0x35,0x23,0x35,0x33,0x11,0x23,
		0x35,0x33,0x35,0x33,0x15,0x33,0x15,0x23,0x11,0x33,0x15,0x23,0x15,0xd9,0xa8,0xa8,
		0xa8,0xa8,0x43,0xa6,0xa6,0xa6,0xa6,0x97,0xd4,0x3c,0x01,0x14,0x3c,0xc3,0xc3,0x3c,
		0xfe,0xec,0x3c,0xd4,0x00,0x04,0x00,0x30,0x00,0x00,0x01,0xd2,0x02,0x7a,0x00,0x0e,
		0x00,0x12,0x00,0x22,0x00,0x32,0x00,0x27,0x40,0x14,0x0f,0x10,0x23,0x13,0x2b,0x1b,
		0x1b,0x04,0x03,0x0c,0x0d,0x04,0x00,0x05,0x01,0x04,0x72,0x0b,0x00,0x0c,0x00,0x3f,
		0x32,0x2b,0x32,0x12,0x17,0x39,0x33,0x2f,0x33,0xdc,0x32,0xce,0x32,0x30,0x31,0x73,
		0x11,0x33,0x13,0x07,0x11,0x33,0x14,0x06,0x15,0x11,0x23,0x03,0x37,0x11,0x13,0x35,
		0x33,0x15,0x27,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x14,
		0x06,0x06,0x27,0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x14,
		0x16,0x16,0x30,0x3f,0x6e,0x16,0x43,0x07,0x30,0x7b,0x16,0xbb,0xa9,0x56,0x17,0x26,
		0x16,0x18,0x27,0x17,0x17,0x26,0x16,0x18,0x27,0x16,0x0c,0x14,0x0c,0x0c,0x13,0x0c,
		0x0c,0x14,0x0d,0x0c,0x15,0x02,0x6f,0xfe,0x0b,0x06,0x01,0xfb,0x06,0x0a,0x0b,0xfd,
		0xac,0x02,0x11,0x06,0xfd,0xe9,0x01,0x63,0x2a,0x2a,0x4a,0x19,0x2d,0x1e,0x1f,0x2f,
		0x1b,0x17,0x2d,0x21,0x21,0x2e,0x19,0x2a,0x0e,0x1b,0x13,0x14,0x1b,0x0f,0x0f,0x1b,
		0x14,0x13,0x1b,0x0e,0x00,0x02,0x00,0x19,0xff,0xf9,0x01,0xdf,0x01,0xdd,0x00,0x19,
		0x00,0x22,0x00,0x12,0xb6,0x22,0x0e,0x0e,0x1e,0x09,0x12,0x00,0x00,0x2f,0x32,0x2f,
		0x33,0x39,0x2f,0x33,0x30,0x31,0x57,0x22,0x26,0x26,0x35,0x34,0x3e,0x02,0x33,0x32,
		0x16,0x16,0x15,0x21,0x15,0x16,0x16,0x33,0x32,0x36,0x37,0x17,0x0e,0x02,0x13,0x35,
		0x26,0x26,0x23,0x22,0x06,0x07,0x15,0xfc,0x4a,0x65,0x34,0x28,0x42,0x51,0x28,0x41,
		0x66,0x3c,0xfe,0x9e,0x14,0x44,0x27,0x40,0x4c,0x1e,0x1e,0x14,0x34,0x49,0x49,0x10,
		0x43,0x2e,0x2b,0x3f,0x14,0x07,0x44,0x6f,0x3f,0x3f,0x5b,0x3c,0x1c,0x3b,0x6c,0x4b,
		0x99,0x14,0x21,0x35,0x2f,0x11,0x20,0x37,0x20,0x01,0x16,0x77,0x11,0x22,0x1e,0x14,
		0x78,0x00,0x00,0x01,0x00,0x30,0xff,0xbe,0x01,0xc4,0x00,0x46,0x00,0x07,0x00,0x0e,
		0xb4,0x06,0x01,0x80,0x03,0x00,0x00,0x2f,0x32,0x1a,0xcd,0x32,0x30,0x31,0x57,0x35,
		0x33,0x15,0x21,0x35,0x33,0x15,0x30,0x2f,0x01,0x35,0x30,0x42,0x88,0x5b,0x5b,0x88,
		0x00,0x03,0x00,0x29,0x00,0x63,0x01,0xca,0x02,0x05,0x00,0x1f,0x00,0x26,0x00,0x2a,
		0x00,0x1d,0x40,0x0c,0x28,0x29,0x29,0x0a,0x21,0x23,0x23,0x15,0x0a,0x27,0x1f,0x00,
		0x00,0x2f,0x32,0x32,0x2f,0x33,0x39,0x2f,0x33,0x11,0x33,0x11,0x33,0x30,0x31,0x53,
		0x32,0x1e,0x02,0x15,0x14,0x0e,0x02,0x23,0x22,0x2e,0x02,0x35,0x33,0x14,0x1e,0x02,
		0x33,0x32,0x3e,0x02,0x35,0x34,0x2e,0x02,0x23,0x07,0x23,0x35,0x37,0x33,0x15,0x23,
		0x37,0x17,0x07,0x27,0xf9,0x2b,0x4c,0x39,0x21,0x21,0x39,0x4c,0x2b,0x2b,0x4c,0x39,
		0x20,0x28,0x1a,0x2f,0x3d,0x22,0x23,0x3d,0x2f,0x1a,0x1a,0x2f,0x3d,0x23,0xac,0x24,
		0x0a,0x61,0x47,0x01,0xba,0x19,0xb9,0x02,0x05,0x21,0x39,0x4c,0x2b,0x2b,0x4c,0x39,
		0x21,0x21,0x39,0x4c,0x2b,0x22,0x3e,0x2e,0x1b,0x1b,0x2e,0x3e,0x22,0x23,0x3c,0x2f,
		0x1a,0x40,0x60,0x09,0x24,0x19,0xbc,0x18,0xbd,0x00,0x00,0x02,0x00,0x1c,0x00,0x00,
		0x01,0xd8,0x01,0xcf,0x00,0x04,0x00,0x09,0x00,0x1d,0x40,0x0c,0x00,0x08,0x08,0x09,
		0x03,0x05,0x05,0x09,0x09,0x04,0x06,0x02,0x00,0x2f,0x33,0x2f,0x33,0x11,0x33,0x11,
		0x33,0x11,0x33,0x11,0x33,0x30,0x31,0x41,0x11,0x21,0x11,0x37,0x07,0x11,0x21,0x11,
		0x27,0x01,0xd8,0xfe,0x44,0xde,0xb6,0x01,0x6c,0xb6,0x01,0x48,0xfe,0xb8,0x01,0x48,
		0x87,0x9f,0xfe,0xf8,0x01,0x08,0x6d,0x00,0x00,0x04,0x00,0x22,0xff,0xd8,0x01,0xd4,
		0x02,0x7c,0x00,0x03,0x00,0x07,0x00,0x11,0x00,0x1a,0x00,0x31,0x40,0x16,0x0e,0x14,
		0x14,0x0b,0x1a,0x1a,0x10,0x09,0x09,0x17,0x0c,0x0c,0x12,0x08,0x01,0x40,0x04,0x00,
		0x00,0xc0,0x07,0x01,0x00,0x2f,0x33,0x1a,0xcd,0x2f,0x32,0x1a,0x10,0xce,0x32,0x32,
		0x2f,0x33,0x39,0x2f,0x33,0x33,0x11,0x33,0x33,0x11,0x33,0x30,0x31,0x57,0x35,0x33,
		0x15,0x27,0x33,0x35,0x23,0x27,0x35,0x23,0x35,0x37,0x33,0x17,0x15,0x23,0x15,0x27,
		0x33,0x35,0x33,0x17,0x27,0x07,0x27,0x33,0x8c,0xdf,0xb7,0x8f,0x8f,0x28,0x6a,0xcc,
		0x1b,0xcb,0x69,0xb7,0x8f,0x74,0x04,0xc0,0xc3,0x09,0x85,0x28,0x9b,0x9b,0x28,0x4b,
		0x85,0x9d,0x2c,0xe3,0xe3,0x2c,0x9d,0x28,0x9e,0x1e,0xd7,0xda,0x21,0x00,0x00,0x03,
		0x00,0x3d,0x00,0x4e,0x01,0xb7,0x02,0x0a,0x00,0x03,0x00,0x07,0x00,0x13,0x00,0x1c,
		0x40,0x0f,0x10,0x12,0x11,0x0e,0x08,0x0b,0x0c,0x0a,0x08,0x07,0x04,0x07,0x04,0x03,
		0x00,0x00,0x2f,0xcd,0x32,0x33,0x11,0x12,0x17,0x39,0x30,0x31,0x53,0x21,0x11,0x21,
		0x37,0x21,0x11,0x21,0x17,0x27,0x37,0x17,0x37,0x17,0x07,0x17,0x07,0x27,0x07,0x27,
		0x3d,0x01,0x7a,0xfe,0x86,0x28,0x01,0x2a,0xfe,0xd6,0x7c,0x52,0x19,0x52,0x52,0x19,
		0x52,0x52,0x19,0x52,0x52,0x19,0x02,0x0a,0xfe,0x44,0x28,0x01,0x6c,0xb6,0x52,0x19,
		0x52,0x52,0x19,0x52,0x52,0x19,0x52,0x52,0x19,0x00,0x00,0x03,0x00,0x02,0x00,0x4e,
		0x01,0xce,0x02,0x0a,0x00,0x04,0x00,0x09,0x00,0x15,0x00,0x22,0x40,0x15,0x12,0x14,
		0x15,0x11,0x13,0x04,0x10,0x0a,0x09,0x0d,0x0f,0x0b,0x0e,0x0c,0x0e,0x08,0x05,0x05,
		0x03,0x08,0x00,0x00,0x2f,0x32,0x2f,0x33,0x11,0x12,0x17,0x39,0x30,0x31,0x53,0x21,
		0x11,0x21,0x27,0x17,0x21,0x11,0x21,0x07,0x33,0x27,0x37,0x17,0x37,0x17,0x07,0x17,
		0x07,0x27,0x07,0x27,0x86,0x01,0x48,0xfe,0xb8,0x84,0x9c,0x01,0x08,0xfe,0xf8,0x6d,
		0xc7,0x52,0x19,0x52,0x52,0x19,0x52,0x52,0x19,0x52,0x52,0x19,0x02,0x0a,0xfe,0x44,
		0xde,0xb6,0x01,0x6c,0xb6,0x52,0x19,0x52,0x52,0x19,0x52,0x52,0x19,0x52,0x52,0x19,
		0x00,0x03,0x00,0x16,0x00,0x4e,0x01,0xe2,0x02,0x0a,0x00,0x04,0x00,0x09,0x00,0x15,
		0x00,0x22,0x40,0x15,0x0e,0x0c,0x0b,0x0f,0x0d,0x01,0x0a,0x10,0x06,0x13,0x15,0x11,
		0x12,0x14,0x0e,0x08,0x09,0x08,0x04,0x09,0x03,0x00,0x2f,0x33,0x2f,0x33,0x11,0x12,
		0x17,0x39,0x30,0x31,0x41,0x17,0x07,0x21,0x11,0x01,0x37,0x27,0x21,0x11,0x37,0x17,
		0x07,0x27,0x07,0x27,0x37,0x27,0x37,0x17,0x37,0x17,0x01,0x5e,0x84,0x84,0xfe,0xb8,
		0x01,0x30,0x6d,0x6d,0xfe,0xf8,0xae,0x52,0x19,0x52,0x52,0x19,0x52,0x52,0x19,0x52,
		0x52,0x19,0x02,0x0a,0xde,0xde,0x01,0xbc,0xfe,0x6c,0xb6,0xb6,0xfe,0x94,0xb6,0x52,
		0x19,0x52,0x52,0x19,0x52,0x52,0x19,0x52,0x52,0x19,0x00,0x02,0x00,0x00,0x00,0x00,
		0x01,0xf4,0x01,0xc9,0x00,0x07,0x00,0x0b,0x00,0x13,0xb7,0x08,0x09,0x09,0x02,0x03,
		0x06,0x05,0x00,0x00,0x2f,0x32,0x3f,0x33,0x33,0x11,0x33,0x30,0x31,0x61,0x03,0x23,
		0x35,0x33,0x13,0x33,0x15,0x03,0x35,0x33,0x15,0x01,0x57,0xd6,0x81,0x9c,0xd6,0x82,
		0xb1,0xb1,0x01,0x9e,0x2b,0xfe,0x62,0x2b,0x01,0x9e,0x2b,0x2b,0x00,0x06,0x00,0x18,
		0x00,0x08,0x01,0xdc,0x01,0xcb,0x00,0x33,0x00,0x41,0x00,0x4f,0x00,0x53,0x00,0x61,
		0x00,0x6f,0x00,0x47,0x40,0x21,0x22,0x53,0x53,0x09,0x62,0x15,0x15,0x43,0x43,0x09,
		0x6b,0x1a,0x1a,0x48,0x11,0x11,0x09,0x23,0x50,0x50,0x5d,0x30,0x30,0x39,0x39,0x54,
		0x2b,0x2b,0x34,0x00,0x00,0x08,0x09,0x00,0x2f,0xce,0x32,0x2f,0x33,0x33,0x11,0x33,
		0x32,0x11,0x33,0x11,0x33,0x32,0x11,0x33,0x11,0x33,0x2f,0x33,0x33,0x2f,0x33,0x11,
		0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x30,0x31,0x77,0x22,0x26,0x35,0x34,
		0x36,0x36,0x33,0x33,0x35,0x23,0x22,0x26,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,
		0x15,0x33,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x06,0x23,0x23,0x15,0x33,
		0x32,0x16,0x16,0x15,0x14,0x06,0x23,0x22,0x26,0x35,0x35,0x23,0x15,0x14,0x06,0x27,
		0x32,0x36,0x36,0x35,0x35,0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,0x13,0x33,0x35,
		0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x14,0x16,0x16,0x17,0x33,0x35,0x23,0x17,
		0x32,0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x23,0x15,0x14,0x16,0x16,0x03,0x33,0x32,
		0x36,0x36,0x35,0x34,0x26,0x26,0x23,0x22,0x06,0x06,0x15,0x75,0x26,0x37,0x19,0x2b,
		0x19,0x34,0x34,0x19,0x2b,0x19,0x37,0x26,0x26,0x36,0x52,0x36,0x26,0x26,0x37,0x19,
		0x2a,0x1a,0x34,0x34,0x1a,0x2a,0x19,0x37,0x26,0x26,0x36,0x52,0x36,0x26,0x0f,0x17,
		0x0e,0x34,0x0e,0x19,0x0e,0x0e,0x19,0x0e,0x34,0x0e,0x17,0x0f,0x0e,0x19,0x0e,0x0e,
		0x19,0x6a,0x52,0x52,0xae,0x0f,0x18,0x0e,0x0e,0x18,0x0f,0x34,0x0e,0x18,0x26,0x34,
		0x0f,0x18,0x0e,0x0e,0x18,0x0f,0x0e,0x18,0x0e,0x08,0x37,0x26,0x1a,0x29,0x19,0x51,
		0x19,0x2a,0x19,0x26,0x37,0x37,0x26,0x34,0x34,0x26,0x37,0x37,0x26,0x19,0x2a,0x19,
		0x51,0x19,0x29,0x1a,0x26,0x37,0x37,0x26,0x34,0x34,0x26,0x37,0x28,0x0e,0x19,0x0e,
		0x34,0x0e,0x17,0x0f,0x0e,0x19,0x0e,0x01,0x0a,0x34,0x0f,0x18,0x0e,0x0e,0x18,0x0f,
		0x0e,0x18,0x0e,0x79,0x51,0xe2,0x0e,0x19,0x0e,0x0f,0x17,0x0e,0x34,0x0e,0x19,0x0e,
		0x01,0x0a,0x0e,0x18,0x0e,0x0f,0x18,0x0e,0x0e,0x18,0x0f,0x00,0x00,0x02,0x00,0x21,
		0x00,0x21,0x01,0xcc,0x01,0xc9,0x00,0x0b,0x00,0x16,0x00,0x3a,0x40,0x1a,0x13,0x12,
		0x12,0x06,0x11,0x07,0x03,0x09,0x04,0x04,0x03,0x03,0x14,0x0e,0x0f,0x10,0x10,0x09,
		0x0c,0x00,0x00,0x09,0x09,0x0a,0x0a,0x0e,0x00,0x2f,0x33,0x11,0x33,0x7c,0x2f,0x33,
		0x18,0x2f,0x32,0x11,0x33,0x11,0x33,0x10,0xce,0x32,0x11,0x33,0x7d,0x2f,0x12,0x17,
		0x39,0x33,0x11,0x33,0x30,0x31,0x41,0x33,0x11,0x21,0x15,0x23,0x27,0x35,0x37,0x33,
		0x15,0x33,0x37,0x15,0x23,0x35,0x17,0x07,0x17,0x07,0x35,0x21,0x35,0x01,0x40,0x8c,
		0xfe,0xf2,0x12,0x8b,0x8b,0x14,0x80,0x28,0xcb,0x1a,0x68,0x65,0x19,0x01,0x09,0x01,
		0xc9,0xfe,0xb2,0x5a,0x9b,0x1a,0x8d,0x58,0x96,0xbe,0x5d,0x0d,0x6c,0x72,0x0b,0x59,
		0xfe,0x00,0x00,0x03,0x00,0x0f,0x00,0x02,0x01,0xe5,0x02,0x59,0x00,0x07,0x00,0x14,
		0x00,0x37,0x00,0x13,0x40,0x09,0x08,0x0e,0x37,0x2c,0x1f,0x05,0x02,0x07,0x02,0x00,
		0x2f,0x2f,0x12,0x17,0x39,0x30,0x31,0x53,0x35,0x13,0x33,0x13,0x15,0x03,0x23,0x37,
		0x32,0x36,0x35,0x34,0x26,0x23,0x22,0x06,0x15,0x14,0x16,0x33,0x37,0x35,0x34,0x3e,
		0x03,0x35,0x34,0x26,0x23,0x22,0x06,0x06,0x07,0x17,0x17,0x37,0x26,0x36,0x37,0x36,
		0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x0e,0x03,0x15,0x15,0x0f,0xe1,0x1e,0xd7,0xd7,
		0x1e,0x10,0x0e,0x16,0x16,0x0e,0x0f,0x14,0x14,0x0f,0x0f,0x13,0x1c,0x1b,0x13,0x3c,
		0x2f,0x1d,0x2c,0x22,0x10,0x1c,0x08,0x04,0x01,0x09,0x0b,0x0d,0x1f,0x11,0x12,0x1e,
		0x13,0x12,0x1c,0x1b,0x12,0x01,0x23,0x1e,0x01,0x18,0xfe,0xe8,0x1e,0xfe,0xdf,0x37,
		0x15,0x0e,0x0f,0x15,0x15,0x0f,0x0e,0x15,0x7a,0x19,0x1b,0x22,0x1a,0x19,0x23,0x1a,
		0x2e,0x36,0x10,0x1d,0x14,0x16,0x07,0x06,0x08,0x0c,0x0c,0x08,0x0a,0x0b,0x1c,0x18,
		0x16,0x1f,0x1a,0x1c,0x26,0x1b,0x19,0x00,0x00,0x03,0x00,0x2d,0x00,0x09,0x05,0xaf,
		0x01,0xc3,0x00,0x03,0x00,0x07,0x00,0x0b,0x00,0x13,0xb7,0x08,0x09,0x80,0x01,0x00,
		0x04,0x05,0x12,0x00,0x3f,0x33,0xce,0x32,0x1a,0xce,0x32,0x30,0x31,0x53,0x35,0x21,
		0x15,0x05,0x35,0x21,0x15,0x05,0x35,0x21,0x15,0x2d,0x05,0x82,0xfb,0x28,0x04,0x2e,
		0xfb,0x28,0x05,0x82,0x01,0x86,0x3d,0x3d,0xbf,0x3d,0x3d,0xbe,0x3d,0x3d,0x00,0x05,
		0x00,0x2c,0x00,0x16,0x03,0xa8,0x02,0x6a,0x00,0x06,0x00,0x0a,0x00,0x0e,0x00,0x12,
		0x00,0x16,0x00,0x34,0x40,0x18,0x0d,0x14,0x14,0x02,0x05,0x01,0x03,0x15,0x10,0x0c,
		0x06,0x06,0x00,0x15,0x08,0x11,0x11,0x10,0x09,0x04,0x04,0x03,0x03,0x10,0x00,0x2f,
		0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x11,0x33,0x7c,0x2f,0x33,0x32,0x11,0x33,0x11,
		0x12,0x17,0x39,0x32,0x11,0x33,0x30,0x31,0x41,0x01,0x15,0x01,0x35,0x25,0x25,0x11,
		0x33,0x15,0x07,0x11,0x17,0x15,0x23,0x15,0x21,0x35,0x21,0x35,0x21,0x35,0x21,0x01,
		0xad,0x01,0xfb,0xfe,0x05,0x01,0xa6,0xfe,0x5a,0x3d,0x3d,0x3d,0x3d,0xfe,0x7f,0x01,
		0x81,0xfe,0x7f,0x01,0x81,0x02,0x6a,0xfe,0xf2,0x38,0xfe,0xf2,0x47,0xe3,0xe3,0xfe,
		0xc9,0xb5,0x21,0x02,0x54,0x21,0xb5,0xe5,0x3d,0xa8,0x3d,0x00,0x00,0x02,0x00,0x93,
		0xff,0xbd,0x03,0x53,0x02,0x95,0x00,0x06,0x00,0x0a,0x00,0x21,0x40,0x0f,0x0a,0x09,
		0x08,0x06,0x02,0x05,0x03,0x03,0x04,0x40,0x01,0x00,0x80,0x07,0x08,0x00,0x2f,0x33,
		0x1a,0xde,0x32,0x1a,0xcc,0x32,0x17,0x39,0x10,0xcd,0x32,0x30,0x31,0x77,0x35,0x25,
		0x25,0x35,0x05,0x15,0x01,0x35,0x01,0x15,0x93,0x01,0xb7,0xfe,0x4b,0x02,0x02,0xfd,
		0xfc,0x02,0xc0,0x8d,0x4c,0xc4,0xb1,0x47,0xdf,0x30,0xfe,0x37,0x4c,0x01,0x5c,0x4c,
		0x00,0x02,0x00,0x40,0x00,0x16,0x03,0xbc,0x02,0x6a,0x00,0x06,0x00,0x0a,0x00,0x1b,
		0x40,0x0c,0x01,0x05,0x02,0x03,0x04,0x03,0x03,0x09,0x09,0x06,0x00,0x08,0x00,0x2f,
		0x33,0x32,0x33,0x11,0x33,0x11,0x33,0x17,0x39,0x30,0x31,0x65,0x01,0x35,0x01,0x15,
		0x05,0x05,0x25,0x21,0x35,0x21,0x02,0x3b,0xfe,0x05,0x01,0xfb,0xfe,0x5a,0x01,0xa6,
		0x01,0x81,0xfd,0x9b,0x02,0x65,0x16,0x01,0x0e,0x38,0x01,0x0e,0x47,0xe3,0xe3,0xc5,
		0x3d,0x00,0x00,0x02,0x00,0x95,0xff,0xbd,0x03,0x55,0x02,0x95,0x00,0x06,0x00,0x0a,
		0x00,0x25,0x40,0x11,0x09,0x08,0x08,0x07,0x07,0x0a,0x01,0x05,0x02,0x03,0x04,0x03,
		0x40,0x06,0x00,0x80,0x0a,0x00,0x2f,0x1a,0xde,0x32,0x1a,0xcc,0x32,0x17,0x39,0x11,
		0x33,0x11,0x33,0x2f,0x33,0x30,0x31,0x65,0x25,0x35,0x25,0x15,0x05,0x05,0x11,0x01,
		0x35,0x01,0x03,0x55,0xfd,0xfc,0x02,0x02,0xfe,0x4b,0x01,0xb7,0xfd,0x40,0x02,0xc0,
		0x8d,0xf9,0x30,0xdf,0x47,0xb1,0xc4,0xfe,0xe4,0x01,0x5c,0x4c,0xfe,0xa4,0x00,0x01,
		0x00,0xad,0xff,0xb4,0x01,0x32,0x00,0x68,0x00,0x03,0x00,0x08,0xb1,0x00,0x02,0x00,
		0x2f,0xcd,0x30,0x31,0x57,0x23,0x37,0x33,0xd9,0x2c,0x3e,0x47,0x4c,0xb4,0x00,0x01,
		0x00,0xb4,0x01,0xc6,0x01,0x25,0x02,0x9f,0x00,0x13,0x00,0x0e,0xb5,0x01,0x00,0xc0,
		0x0d,0x03,0x72,0x00,0x2b,0x1a,0xcc,0x32,0x30,0x31,0x53,0x27,0x3e,0x02,0x35,0x34,
		0x2e,0x02,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x06,0xd0,0x1c,0x10,0x17,
		0x0d,0x0c,0x11,0x0c,0x1b,0x15,0x15,0x21,0x13,0x25,0x01,0xc6,0x18,0x0e,0x20,0x1d,
		0x0a,0x08,0x0d,0x0d,0x10,0x0b,0x14,0x1b,0x25,0x1d,0x15,0x31,0x34,0x00,0x00,0x01,
		0x00,0xb2,0x01,0x87,0x01,0x31,0x02,0x7b,0x00,0x11,0x00,0x0e,0xb5,0x0b,0xc0,0x01,
		0x00,0x03,0x72,0x00,0x2b,0x32,0x1a,0xcc,0x30,0x31,0x41,0x17,0x06,0x06,0x15,0x14,
		0x16,0x16,0x15,0x14,0x06,0x23,0x22,0x26,0x35,0x34,0x36,0x36,0x01,0x12,0x1f,0x19,
		0x22,0x17,0x17,0x1e,0x17,0x18,0x25,0x15,0x2b,0x02,0x7b,0x1b,0x17,0x36,0x11,0x0c,
		0x14,0x15,0x11,0x16,0x1f,0x2a,0x21,0x18,0x35,0x3b,0xff,0xff,0x00,0x8b,0x02,0x02,
		0x01,0x6a,0x02,0xb6,0x04,0x26,0x03,0x55,0x46,0x00,0x00,0x06,0x03,0x55,0xc4,0x00,
		0x00,0x01,0x00,0x7b,0x02,0x35,0x01,0x79,0x02,0x6d,0x00,0x03,0x00,0x0a,0xb3,0x00,
		0x01,0x02,0x72,0x00,0x2b,0x32,0x30,0x31,0x53,0x35,0x33,0x15,0x7b,0xfe,0x02,0x35,
		0x38,0x38,0x00,0x01,0x00,0xb4,0x02,0x0a,0x01,0x4b,0x02,0xbb,0x00,0x03,0x00,0x08,
		0xb1,0x00,0x02,0x00,0x2f,0xcd,0x30,0x31,0x41,0x27,0x37,0x17,0x01,0x19,0x65,0x3f,
		0x58,0x02,0x0a,0x87,0x2a,0x93,0xff,0xff,0x00,0xc7,0x02,0x02,0x01,0x24,0x02,0xb6,
		0x06,0x06,0x03,0x55,0x00,0x00,0x00,0x01,0x00,0xc4,0x01,0xc2,0x01,0x31,0x02,0x99,
		0x00,0x10,0x00,0x0c,0xb3,0x10,0x00,0x09,0x08,0x00,0x2f,0x33,0xcc,0x32,0x30,0x31,
		0x41,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x17,0x22,0x06,0x15,0x14,0x16,0x16,
		0x33,0x01,0x30,0x1e,0x31,0x1d,0x1e,0x31,0x1d,0x01,0x17,0x22,0x0f,0x1a,0x0f,0x01,
		0xc2,0x1c,0x31,0x1e,0x1f,0x30,0x1d,0x2e,0x25,0x18,0x10,0x1b,0x11,0x00,0x00,0x01,
		0x00,0xc3,0x01,0xc2,0x01,0x30,0x02,0x99,0x00,0x10,0x00,0x0c,0xb3,0x01,0x00,0x08,
		0x09,0x00,0x2f,0x33,0xcc,0x32,0x30,0x31,0x53,0x35,0x32,0x36,0x36,0x35,0x34,0x26,
		0x23,0x37,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0xc4,0x10,0x19,0x0f,0x22,0x17,0x01,
		0x1d,0x31,0x1e,0x1d,0x31,0x01,0xc2,0x30,0x11,0x1b,0x10,0x18,0x25,0x2e,0x1d,0x30,
		0x1f,0x1e,0x31,0x1c,0x00,0x01,0x00,0xb8,0x02,0x2e,0x01,0x62,0x02,0xc0,0x00,0x03,
		0x00,0x0a,0xb2,0x01,0x80,0x02,0x00,0x2f,0x1a,0xcd,0x30,0x31,0x53,0x23,0x37,0x33,
		0xf1,0x39,0x5b,0x4f,0x02,0x2e,0x92,0x00,0x00,0x01,0x00,0xd6,0xff,0x42,0x01,0x1f,
		0x00,0x1e,0x00,0x03,0x00,0x08,0xb1,0x00,0x02,0x00,0x2f,0xcd,0x30,0x31,0x45,0x23,
		0x35,0x33,0x01,0x1f,0x49,0x49,0xbe,0xdc,0x00,0x01,0x00,0xdd,0x01,0xbd,0x01,0x24,
		0x02,0x99,0x00,0x03,0x00,0x08,0xb1,0x00,0x02,0x00,0x2f,0xcd,0x30,0x31,0x41,0x23,
		0x35,0x33,0x01,0x24,0x47,0x47,0x01,0xbd,0xdc,0x00,0xff,0xff,0x00,0x70,0x02,0x34,
		0x01,0x87,0x02,0x99,0x04,0x06,0x03,0x93,0x00,0x00,0xff,0xff,0x00,0xcb,0x02,0x29,
		0x01,0x32,0x02,0x90,0x04,0x06,0x03,0x94,0x00,0x00,0xff,0xff,0x00,0x9a,0x01,0xfb,
		0x01,0x25,0x02,0xaa,0x04,0x06,0x03,0x95,0x00,0x00,0xff,0xff,0x00,0xd8,0x01,0xfb,
		0x01,0x63,0x02,0xaa,0x04,0x06,0x03,0x96,0x00,0xf1,0xff,0xff,0x00,0x7e,0x02,0x0a,
		0x01,0xb0,0x02,0xbb,0x04,0x06,0x03,0x97,0x00,0x00,0x00,0x01,0x00,0x63,0x01,0xff,
		0x01,0x91,0x02,0xad,0x00,0x06,0x00,0x17,0x40,0x09,0x06,0x02,0x04,0x05,0x05,0x01,
		0x00,0x00,0x02,0x00,0x2f,0x33,0x2f,0x32,0x32,0x11,0x33,0x11,0x39,0x30,0x31,0x53,
		0x27,0x37,0x33,0x17,0x07,0x27,0x8b,0x28,0x8b,0x18,0x8b,0x28,0x6f,0x01,0xff,0x22,
		0x8c,0x8c,0x22,0x6e,0x00,0x01,0x00,0x68,0x02,0x02,0x01,0x96,0x02,0xb0,0x00,0x06,
		0x00,0x17,0x40,0x09,0x03,0x02,0x02,0x01,0x05,0x06,0x00,0x00,0x05,0x00,0x2f,0x33,
		0x2f,0x32,0x12,0x39,0x33,0x11,0x33,0x30,0x31,0x53,0x17,0x37,0x17,0x07,0x23,0x27,
		0x90,0x6f,0x6f,0x28,0x8b,0x18,0x8b,0x02,0xb0,0x6e,0x6e,0x22,0x8c,0x8c,0x00,0x01,
		0x00,0x74,0x02,0x1a,0x01,0x90,0x02,0x8e,0x00,0x0e,0x00,0x14,0xb7,0x01,0x00,0x00,
		0x07,0x08,0x80,0x0b,0x04,0x00,0x2f,0x33,0x1a,0xcc,0x32,0x32,0x11,0x33,0x30,0x31,
		0x41,0x17,0x06,0x06,0x23,0x22,0x26,0x27,0x37,0x16,0x16,0x33,0x32,0x36,0x36,0x01,
		0x5c,0x34,0x16,0x49,0x2f,0x2e,0x49,0x17,0x34,0x11,0x2b,0x1e,0x14,0x21,0x1a,0x02,
		0x8e,0x18,0x2c,0x30,0x30,0x2c,0x18,0x23,0x21,0x0e,0x1f,0x00,0xff,0xff,0x00,0xa5,
		0x02,0x05,0x01,0x5c,0x02,0xb5,0x04,0x06,0x03,0x9b,0x00,0x00,0x00,0x01,0x00,0x65,
		0x02,0x3e,0x01,0xaf,0x02,0xab,0x00,0x17,0x00,0x1b,0x40,0x0b,0x01,0x00,0x00,0x09,
		0x10,0x80,0x0d,0x0c,0x0c,0x15,0x04,0x00,0x2f,0x33,0x33,0x11,0x33,0x1a,0xcd,0x32,
		0x32,0x11,0x33,0x30,0x31,0x41,0x17,0x06,0x06,0x23,0x22,0x2e,0x02,0x23,0x22,0x06,
		0x07,0x27,0x36,0x36,0x33,0x32,0x1e,0x02,0x33,0x32,0x36,0x01,0x81,0x2e,0x16,0x29,
		0x1e,0x16,0x23,0x1d,0x1d,0x11,0x11,0x1b,0x0c,0x31,0x0e,0x32,0x27,0x16,0x21,0x1c,
		0x1d,0x12,0x10,0x15,0x02,0xa5,0x1c,0x2a,0x21,0x10,0x16,0x10,0x14,0x1b,0x16,0x22,
		0x2e,0x10,0x16,0x10,0x14,0x00,0xff,0xff,0x00,0x7b,0x02,0x35,0x01,0x79,0x02,0x6d,
		0x04,0x06,0x03,0x9d,0x00,0x00,0x00,0x01,0x00,0x99,0x02,0x0b,0x01,0x40,0x02,0xc0,
		0x00,0x1a,0x00,0x0c,0xb3,0x10,0x06,0x80,0x17,0x00,0x2f,0x1a,0xcc,0x33,0x30,0x31,
		0x41,0x14,0x0e,0x02,0x15,0x15,0x23,0x35,0x34,0x3e,0x02,0x35,0x34,0x26,0x23,0x22,
		0x06,0x07,0x27,0x36,0x36,0x33,0x32,0x16,0x16,0x01,0x40,0x11,0x16,0x11,0x33,0x10,
		0x14,0x10,0x12,0x0d,0x0d,0x19,0x06,0x25,0x12,0x29,0x1b,0x16,0x25,0x16,0x02,0x76,
		0x15,0x17,0x10,0x15,0x13,0x07,0x1c,0x0d,0x14,0x12,0x11,0x09,0x0e,0x0e,0x0c,0x14,
		0x26,0x17,0x13,0x12,0x21,0x00,0xff,0xff,0x00,0x5f,0x01,0xfb,0x01,0x8a,0x02,0xaa,
		0x04,0x26,0x03,0x7c,0xc5,0x00,0x00,0x06,0x03,0x7c,0x65,0x00,0x00,0x01,0x00,0x73,
		0x02,0x10,0x01,0x8f,0x02,0x84,0x00,0x0e,0x00,0x14,0xb7,0x07,0x08,0x08,0x0b,0x04,
		0x80,0x01,0x00,0x00,0x2f,0x32,0x1a,0xcc,0x32,0x33,0x11,0x33,0x30,0x31,0x53,0x27,
		0x36,0x36,0x33,0x32,0x16,0x17,0x07,0x26,0x26,0x23,0x22,0x06,0x06,0xa7,0x34,0x17,
		0x49,0x2e,0x2f,0x49,0x16,0x34,0x10,0x2c,0x1e,0x14,0x20,0x1b,0x02,0x10,0x18,0x2c,
		0x30,0x30,0x2c,0x18,0x23,0x21,0x0e,0x1e,0x00,0x01,0x00,0xa6,0x02,0x26,0x01,0x33,
		0x03,0x35,0x00,0x13,0x00,0x08,0xb1,0x0c,0x00,0x00,0x2f,0xcc,0x30,0x31,0x41,0x17,
		0x06,0x06,0x15,0x14,0x1e,0x02,0x15,0x14,0x06,0x23,0x22,0x26,0x35,0x34,0x3e,0x02,
		0x01,0x11,0x22,0x1c,0x25,0x0f,0x15,0x0f,0x21,0x1a,0x1a,0x2a,0x0d,0x1b,0x28,0x03,
		0x35,0x1e,0x1a,0x3c,0x13,0x0a,0x11,0x10,0x14,0x0e,0x19,0x22,0x2e,0x25,0x14,0x2b,
		0x2f,0x33,0x00,0x01,0x01,0x8c,0x01,0x98,0x01,0xea,0x02,0x1d,0x00,0x08,0x00,0x0c,
		0xb3,0x05,0x04,0x80,0x00,0x00,0x2f,0x1a,0xcd,0x32,0x30,0x31,0x41,0x14,0x06,0x06,
		0x23,0x35,0x32,0x36,0x35,0x01,0xea,0x0e,0x28,0x28,0x10,0x0e,0x02,0x1d,0x30,0x3b,
		0x1a,0x31,0x20,0x34,0xff,0xff,0x00,0xbb,0xff,0x6d,0x01,0x22,0xff,0xd4,0x04,0x07,
		0x03,0x7b,0xff,0xf0,0xfd,0x44,0xff,0xff,0x00,0x70,0xff,0x5a,0x01,0x87,0xff,0xbf,
		0x06,0x07,0x03,0x7a,0x00,0x00,0xfd,0x26,0x00,0x01,0x00,0xb1,0xfe,0xed,0x01,0x2f,
		0xff,0xe1,0x00,0x11,0x00,0x0a,0xb2,0x01,0x00,0x0b,0x00,0x2f,0xcc,0x32,0x30,0x31,
		0x53,0x27,0x36,0x36,0x35,0x34,0x26,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,0x14,
		0x06,0x06,0xcf,0x1e,0x18,0x22,0x17,0x17,0x1e,0x17,0x18,0x25,0x15,0x2b,0xfe,0xed,
		0x1b,0x17,0x36,0x11,0x0c,0x14,0x15,0x11,0x16,0x1f,0x2a,0x21,0x18,0x35,0x3b,0x00,
		0xff,0xff,0x00,0xa9,0xff,0x3b,0x01,0x80,0x00,0x00,0x04,0x06,0x03,0x9e,0x00,0x00,
		0x00,0x01,0x00,0x97,0xff,0x1d,0x01,0x2b,0x00,0x11,0x00,0x10,0x00,0x0a,0xb2,0x00,
		0x01,0x09,0x00,0x2f,0xcc,0x32,0x30,0x31,0x45,0x07,0x2e,0x02,0x35,0x34,0x36,0x36,
		0x37,0x17,0x0e,0x02,0x15,0x14,0x16,0x01,0x17,0x10,0x21,0x32,0x1d,0x1c,0x36,0x27,
		0x1b,0x19,0x25,0x14,0x1e,0xb3,0x30,0x05,0x17,0x25,0x19,0x1b,0x35,0x33,0x17,0x11,
		0x14,0x2b,0x2a,0x12,0x15,0x1e,0xff,0xff,0x00,0x74,0xff,0x51,0x01,0x90,0xff,0xc5,
		0x06,0x07,0x03,0x81,0x00,0x00,0xfd,0x37,0xff,0xff,0x00,0x7b,0xff,0x65,0x01,0x79,
		0xff,0x9d,0x06,0x07,0x03,0x84,0x00,0x00,0xfd,0x30,0x00,0x01,0x00,0x79,0x01,0x1e,
		0x01,0x87,0x01,0x57,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x32,0x30,0x31,
		0x53,0x35,0x21,0x15,0x79,0x01,0x0e,0x01,0x1e,0x39,0x39,0x00,0xff,0xff,0x00,0x6f,
		0x01,0x19,0x01,0x87,0x01,0x5c,0x04,0x06,0x02,0x31,0x00,0x00,0x00,0x02,0x00,0x70,
		0x02,0x34,0x01,0x87,0x02,0x99,0x00,0x0b,0x00,0x17,0x00,0x0e,0xb4,0x12,0x0c,0x0c,
		0x06,0x00,0x00,0x2f,0x32,0x32,0x11,0x33,0x30,0x31,0x53,0x22,0x26,0x35,0x34,0x36,
		0x33,0x32,0x16,0x15,0x14,0x06,0x33,0x22,0x26,0x35,0x34,0x36,0x33,0x32,0x16,0x15,
		0x14,0x06,0xa3,0x15,0x1e,0x1e,0x15,0x14,0x1e,0x1e,0x9e,0x15,0x1d,0x1d,0x15,0x14,
		0x1e,0x1e,0x02,0x34,0x1e,0x14,0x14,0x1f,0x1e,0x15,0x14,0x1e,0x1d,0x15,0x15,0x1e,
		0x1e,0x15,0x14,0x1e,0x00,0x01,0x00,0xcb,0x02,0x29,0x01,0x32,0x02,0x90,0x00,0x0b,
		0x00,0x08,0xb1,0x06,0x00,0x00,0x2f,0x32,0x30,0x31,0x53,0x22,0x26,0x35,0x34,0x36,
		0x33,0x32,0x16,0x15,0x14,0x06,0xfe,0x15,0x1e,0x1d,0x16,0x15,0x1f,0x1f,0x02,0x29,
		0x1e,0x15,0x16,0x1e,0x1f,0x15,0x15,0x1e,0x00,0x01,0x00,0x9a,0x01,0xfb,0x01,0x25,
		0x02,0xaa,0x00,0x03,0x00,0x0c,0xb3,0x01,0x03,0x02,0x00,0x00,0x2f,0xcd,0x39,0x39,
		0x30,0x31,0x53,0x27,0x37,0x17,0xff,0x65,0x37,0x54,0x01,0xfb,0x87,0x28,0x95,0x00,
		0x00,0x01,0x00,0xd8,0x02,0x0a,0x01,0x63,0x02,0xb9,0x00,0x03,0x00,0x0e,0xb4,0x03,
		0x01,0x02,0x80,0x00,0x00,0x2f,0x1a,0xcd,0x39,0x39,0x30,0x31,0x53,0x27,0x37,0x17,
		0xfe,0x26,0x54,0x37,0x02,0x0a,0x1a,0x95,0x28,0x00,0x00,0x02,0x00,0x7e,0x02,0x0a,
		0x01,0xb0,0x02,0xbb,0x00,0x03,0x00,0x07,0x00,0x17,0x40,0x09,0x03,0x02,0x02,0x07,
		0x06,0x01,0x00,0x05,0x04,0x00,0x2f,0x33,0x33,0x32,0xcd,0x32,0x32,0x11,0x33,0x30,
		0x31,0x41,0x27,0x37,0x17,0x05,0x27,0x37,0x17,0x01,0x4b,0x32,0x58,0x3f,0xff,0x00,
		0x32,0x58,0x3f,0x02,0x0a,0x1e,0x93,0x2a,0x87,0x1e,0x93,0x2a,0x00,0x01,0x00,0x7c,
		0x02,0x03,0x01,0x83,0x02,0xad,0x00,0x06,0x00,0x10,0xb5,0x01,0x04,0x06,0x00,0x03,
		0x02,0x00,0x2f,0x33,0x33,0x32,0xcd,0x39,0x30,0x31,0x41,0x27,0x07,0x27,0x37,0x33,
		0x17,0x01,0x57,0x58,0x5f,0x24,0x79,0x16,0x78,0x02,0x06,0x67,0x6a,0x1e,0x8c,0x8d,
		0x00,0x01,0x00,0x86,0x02,0x06,0x01,0x79,0x02,0xb6,0x00,0x06,0x00,0x12,0xb6,0x05,
		0x04,0x04,0x03,0x01,0x02,0x00,0x00,0x2f,0xcd,0x32,0x39,0x32,0x11,0x33,0x30,0x31,
		0x53,0x27,0x37,0x17,0x37,0x17,0x07,0xf4,0x6e,0x2e,0x4e,0x51,0x26,0x6f,0x02,0x06,
		0x8d,0x23,0x67,0x66,0x23,0x8c,0x00,0x01,0x00,0x65,0x02,0x0c,0x01,0x8d,0x02,0x86,
		0x00,0x0e,0x00,0x14,0xb7,0x0b,0x0a,0x0a,0x03,0x04,0x80,0x07,0x00,0x00,0x2f,0x32,
		0x1a,0xcc,0x32,0x32,0x11,0x33,0x30,0x31,0x53,0x22,0x26,0x27,0x37,0x16,0x16,0x33,
		0x32,0x36,0x37,0x17,0x0e,0x02,0xfb,0x2b,0x4b,0x20,0x24,0x13,0x3b,0x23,0x20,0x3b,
		0x1c,0x1c,0x12,0x2f,0x35,0x02,0x0c,0x27,0x26,0x2d,0x1e,0x28,0x23,0x23,0x2a,0x18,
		0x24,0x14,0x00,0x02,0x00,0xa5,0x02,0x05,0x01,0x5c,0x02,0xb5,0x00,0x0f,0x00,0x1b,
		0x00,0x0f,0xb4,0x16,0x08,0x80,0x10,0x00,0x00,0x2f,0x32,0x1a,0x7c,0xcc,0x32,0x30,
		0x31,0x41,0x22,0x26,0x26,0x35,0x34,0x36,0x36,0x33,0x32,0x16,0x16,0x15,0x14,0x06,
		0x06,0x27,0x32,0x36,0x35,0x34,0x26,0x23,0x22,0x06,0x15,0x14,0x16,0x01,0x00,0x18,
		0x29,0x1a,0x1a,0x29,0x18,0x19,0x2a,0x19,0x1a,0x29,0x18,0x11,0x19,0x19,0x11,0x11,
		0x18,0x18,0x02,0x05,0x18,0x28,0x18,0x18,0x28,0x18,0x18,0x27,0x19,0x18,0x28,0x18,
		0x2b,0x1b,0x13,0x13,0x1b,0x1b,0x13,0x13,0x1b,0x00,0xff,0xff,0x00,0x65,0x02,0x3e,
		0x01,0xaf,0x02,0xab,0x04,0x06,0x03,0x83,0x00,0x00,0x00,0x01,0x00,0x7b,0x02,0x35,
		0x01,0x79,0x02,0x6d,0x00,0x03,0x00,0x08,0xb1,0x01,0x00,0x00,0x2f,0x32,0x30,0x31,
		0x53,0x35,0x33,0x15,0x7b,0xfe,0x02,0x35,0x38,0x38,0x00,0x01,0x00,0xa9,0xff,0x3b,
		0x01,0x80,0x00,0x00,0x00,0x17,0x00,0x13,0xb6,0x11,0x0e,0x0e,0x07,0x00,0x80,0x0f,
		0x00,0x2f,0x1a,0x7c,0xcc,0x32,0x33,0x11,0x33,0x30,0x31,0x45,0x22,0x26,0x27,0x37,
		0x16,0x16,0x33,0x32,0x36,0x35,0x34,0x26,0x23,0x23,0x37,0x33,0x07,0x1e,0x02,0x15,
		0x14,0x06,0x01,0x0c,0x1a,0x32,0x17,0x19,0x13,0x2b,0x19,0x1a,0x18,0x1c,0x17,0x1e,
		0x0b,0x2c,0x06,0x1e,0x25,0x12,0x39,0xc5,0x0f,0x10,0x2a,0x0f,0x0f,0x13,0x11,0x10,
		0x11,0x55,0x2f,0x02,0x14,0x1c,0x0f,0x22,0x33,0x00,0x00,0x01,0x00,0xfb,0xff,0x1d,
		0x01,0x8f,0x00,0x11,0x00,0x10,0x00,0x0a,0xb2,0x00,0x01,0x09,0x00,0x2f,0xcc,0x32,
		0x30,0x31,0x45,0x07,0x2e,0x02,0x35,0x34,0x36,0x36,0x37,0x17,0x0e,0x02,0x15,0x14,
		0x16,0x01,0x7b,0x10,0x21,0x32,0x1d,0x1c,0x36,0x27,0x1b,0x19,0x25,0x14,0x1e,0xb3,
		0x30,0x05,0x17,0x25,0x19,0x1b,0x35,0x33,0x17,0x11,0x14,0x2b,0x2a,0x12,0x15,0x1e,
		0xff,0xff,0x00,0x6f,0x02,0xb0,0x01,0x86,0x03,0x15,0x04,0x06,0x03,0xab,0x00,0x00,
		0xff,0xff,0x00,0xc6,0x02,0xb5,0x01,0x2d,0x03,0x1c,0x04,0x06,0x03,0xac,0xf1,0x00,
		0xff,0xff,0x00,0x89,0x02,0x94,0x01,0x4a,0x03,0x17,0x04,0x06,0x03,0xad,0xce,0x00,
		0xff,0xff,0x00,0xad,0x02,0x94,0x01,0x6d,0x03,0x17,0x04,0x06,0x03,0xae,0x00,0x00,
		0xff,0xff,0x00,0x70,0x02,0x85,0x01,0xd3,0x03,0x2a,0x04,0x06,0x03,0xaf,0x00,0x00,
		0x00,0x01,0x00,0x5c,0x02,0x8f,0x01,0x98,0x03,0x17,0x00,0x06,0x00,0x17,0x40,0x09,
		0x06,0x02,0x04,0x05,0x05,0x01,0x00,0x80,0x02,0x00,0x2f,0x1a,0xcd,0x32,0x32,0x11,
		0x33,0x11,0x39,0x30,0x31,0x53,0x27,0x37,0x33,0x17,0x07,0x27,0x7d,0x21,0x8f,0x16,
		0x97,0x1e,0x82,0x02,0x8f,0x26,0x62,0x63,0x24,0x46,0xff,0xff,0x00,0x58,0x02,0x91,
		0x01,0x94,0x03,0x19,0x04,0x06,0x03,0xb0,0x0a,0x00,0xff,0xff,0x00,0x6c,0x02,0x9f,
		0x01,0x88,0x03,0x13,0x04,0x06,0x03,0xb1,0xfc,0x0a,0xff,0xff,0x00,0x9f,0x02,0x6b,
		0x01,0x56,0x03,0x1b,0x04,0x06,0x03,0xb2,0x00,0x00,0xff,0xff,0x00,0x60,0x02,0xb0,
		0x01,0xaa,0x03,0x1d,0x04,0x06,0x03,0x83,0xfb,0x72,0x00,0x01,0x01,0x8e,0x02,0x3e,
		0x01,0xf1,0x02,0xcd,0x00,0x09,0x00,0x0c,0xb3,0x01,0x00,0x80,0x05,0x00,0x2f,0x1a,
		0xcc,0x32,0x30,0x31,0x41,0x27,0x32,0x36,0x36,0x35,0x33,0x14,0x06,0x06,0x01,0x98,
		0x0a,0x13,0x11,0x05,0x3a,0x0c,0x25,0x02,0x3e,0x31,0x0e,0x29,0x27,0x34,0x3f,0x1c,
		0x00,0x02,0x00,0x6f,0x02,0xb0,0x01,0x86,0x03,0x15,0x00,0x0b,0x00,0x17,0x00,0x0c,
		0xb3,0x06,0x00,0x12,0x0c,0x00,0x2f,0x33,0x33,0x32,0x30,0x31,0x53,0x22,0x26,0x35,
		0x34,0x36,0x33,0x32,0x16,0x15,0x14,0x06,0x33,0x22,0x26,0x35,0x34,0x36,0x33,0x32,
		0x16,0x15,0x14,0x06,0xa1,0x14,0x1e,0x1e,0x14,0x15,0x1e,0x1e,0x9d,0x14,0x1d,0x1d,
		0x14,0x15,0x1e,0x1e,0x02,0xb0,0x1e,0x14,0x14,0x1f,0x1e,0x15,0x14,0x1e,0x1d,0x15,
		0x15,0x1e,0x1e,0x15,0x14,0x1e,0xff,0xff,0x00,0xd5,0x02,0xb5,0x01,0x3c,0x03,0x1c,
		0x04,0x07,0x03,0x94,0x00,0x0a,0x00,0x8c,0x00,0x01,0x00,0xbb,0x02,0x94,0x01,0x7c,
		0x03,0x17,0x00,0x03,0x00,0x0e,0xb4,0x01,0x03,0x02,0x80,0x00,0x00,0x2f,0x1a,0xcd,
		0x39,0x39,0x30,0x31,0x41,0x27,0x37,0x17,0x01,0x65,0xaa,0x28,0x99,0x02,0x94,0x3d,
		0x46,0x59,0x00,0x01,0x00,0xad,0x02,0x94,0x01,0x6d,0x03,0x17,0x00,0x03,0x00,0x0e,
		0xb4,0x03,0x01,0x02,0x80,0x00,0x00,0x2f,0x1a,0xcd,0x39,0x39,0x30,0x31,0x53,0x27,
		0x37,0x17,0xc4,0x17,0x98,0x28,0x02,0x94,0x2a,0x59,0x46,0x00,0x00,0x02,0x00,0x70,
		0x02,0x85,0x01,0xd3,0x03,0x2a,0x00,0x03,0x00,0x07,0x00,0x19,0x40,0x0a,0x03,0x02,
		0x02,0x07,0x06,0x80,0x01,0x00,0x05,0x04,0x00,0x2f,0x33,0x33,0x32,0x1a,0xcd,0x32,
		0x32,0x11,0x33,0x30,0x31,0x41,0x27,0x37,0x17,0x05,0x27,0x37,0x17,0x01,0x42,0x20,
		0x83,0x2e,0xfe,0xbd,0x20,0x83,0x2f,0x02,0x85,0x29,0x7c,0x40,0x65,0x29,0x7c,0x40,
		0x00,0x01,0x00,0x4e,0x02,0x91,0x01,0x8a,0x03,0x19,0x00,0x06,0x00,0x17,0x40,0x09,
		0x06,0x02,0x01,0x00,0x00,0x04,0x05,0x80,0x02,0x00,0x2f,0x1a,0xcd,0x32,0x32,0x11,
		0x33,0x11,0x39,0x30,0x31,0x41,0x17,0x07,0x23,0x27,0x37,0x17,0x01,0x69,0x21,0x8f,
		0x16,0x97,0x1e,0x82,0x03,0x19,0x26,0x62,0x63,0x24,0x46,0x00,0xff,0xff,0x00,0x70,
		0x02,0x95,0x01,0x8c,0x03,0x09,0x04,0x06,0x03,0x81,0xfc,0x7b,0x00,0x02,0x00,0x9f,
		0x02,0x6b,0x01,0x56,0x03,0x1b,0x00,0x0f,0x00,0x1b,0x00,0x0c,0xb3,0x16,0x08,0x10,
		0x00,0x00,0x2f,0x32,0xcc,0x32,0x30,0x31,0x53,0x22,0x26,0x26,0x35,0x34,0x36,0x36,
		0x33,0x32,0x16,0x16,0x15,0x14,0x06,0x06,0x27,0x32,0x36,0x35,0x34,0x26,0x23,0x22,
		0x06,0x15,0x14,0x16,0xfb,0x19,0x2a,0x19,0x1a,0x2a,0x18,0x19,0x29,0x19,0x18,0x29,
		0x19,0x11,0x18,0x18,0x11,0x11,0x19,0x19,0x02,0x6b,0x18,0x28,0x18,0x18,0x28,0x18,
		0x18,0x28,0x19,0x17,0x28,0x18,0x2b,0x1a,0x13,0x14,0x1a,0x1a,0x14,0x13,0x1a,0x00,
		0xff,0xff,0x00,0x65,0x02,0xc0,0x01,0xaf,0x03,0x2d,0x04,0x07,0x03,0x83,0x00,0x00,
		0x00,0x82,0x00,0x01,0x00,0x75,0x02,0x3e,0x01,0x93,0x02,0xab,0x00,0x17,0x00,0x1c,
		0x40,0x0c,0x01,0x00,0x00,0x09,0x10,0x80,0x0d,0x0c,0x0c,0x15,0x04,0x10,0x00,0x3f,
		0x33,0x33,0x11,0x33,0x1a,0xcd,0x32,0x32,0x11,0x33,0x30,0x31,0x41,0x17,0x06,0x06,
		0x23,0x22,0x2e,0x02,0x23,0x22,0x06,0x07,0x27,0x36,0x36,0x33,0x32,0x1e,0x02,0x33,
		0x32,0x36,0x01,0x65,0x2e,0x13,0x28,0x1a,0x12,0x1e,0x1a,0x18,0x0c,0x0d,0x18,0x08,
		0x2e,0x0b,0x31,0x19,0x12,0x21,0x1d,0x19,0x0b,0x0b,0x13,0x02,0x9f,0x16,0x2a,0x21,
		0x10,0x16,0x10,0x15,0x15,0x16,0x22,0x29,0x10,0x16,0x10,0x14,0xff,0xff,0x00,0x74,
		0x02,0x1a,0x01,0x90,0x03,0x2d,0x06,0x26,0x03,0x81,0x00,0x00,0x00,0x07,0x03,0x7d,
		0x00,0x08,0x00,0x83,0xff,0xff,0x00,0x74,0x02,0x1a,0x01,0x90,0x03,0x2d,0x06,0x26,
		0x03,0x81,0x00,0x00,0x00,0x07,0x03,0x7c,0x00,0x08,0x00,0x83,0xff,0xff,0x00,0x74,
		0x02,0x1a,0x01,0x90,0x03,0x3f,0x06,0x26,0x03,0x81,0x00,0x00,0x00,0x06,0x03,0x85,
		0x11,0x7f,0xff,0xff,0x00,0x74,0x02,0x1a,0x01,0x92,0x03,0x22,0x06,0x26,0x03,0x81,
		0x00,0x00,0x00,0x06,0x03,0xb4,0xff,0x77,0xff,0xff,0x00,0x69,0x01,0xff,0x01,0xec,
		0x03,0x26,0x04,0x26,0x03,0x7f,0x06,0x00,0x00,0x07,0x03,0x7d,0x00,0x89,0x00,0x7c,
		0xff,0xff,0x00,0x6b,0x01,0xff,0x01,0xa7,0x03,0x3b,0x04,0x26,0x03,0x7f,0x08,0x00,
		0x00,0x07,0x03,0x7c,0x00,0x82,0x00,0x91,0xff,0xff,0x00,0x65,0x01,0xff,0x01,0xc9,
		0x03,0x24,0x04,0x26,0x03,0x7f,0x02,0x00,0x00,0x07,0x03,0x85,0x00,0x89,0x00,0x64,
		0xff,0xff,0x00,0x6c,0x01,0xff,0x01,0x9a,0x03,0x38,0x04,0x26,0x03,0x7f,0x09,0x00,
		0x02,0x07,0x03,0xb4,0x00,0x00,0x00,0x8d,0xff,0xff,0x00,0x5c,0x02,0x8f,0x02,0x1b,
		0x03,0x81,0x06,0x26,0x03,0xa5,0x00,0x00,0x00,0x07,0x03,0xa3,0x00,0xae,0x00,0x6a,
		0xff,0xff,0x00,0x5c,0x02,0x8f,0x01,0x98,0x03,0xa1,0x06,0x26,0x03,0xa5,0x00,0x00,
		0x00,0x07,0x03,0xa2,0x00,0x00,0x00,0x8a,0xff,0xff,0x00,0x5c,0x02,0x8f,0x01,0xc6,
		0x03,0xa2,0x06,0x26,0x03,0xa5,0x00,0x00,0x00,0x07,0x03,0x85,0x00,0x86,0x00,0xe2,
		0xff,0xff,0x00,0x5c,0x02,0x8f,0x01,0x98,0x03,0xa5,0x06,0x26,0x03,0xa5,0x00,0x00,
		0x00,0x07,0x03,0xb4,0xff,0xf6,0x00,0xfa,0x00,0x01,0x00,0x00,0x03,0xc2,0x00,0xa8,
		0x00,0x2a,0x00,0x73,0x00,0x05,0x00,0x02,0x00,0x10,0x00,0x2f,0x00,0x9a,0x00,0x00,
		0x02,0xdb,0x0f,0x83,0x00,0x03,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x26,0x00,0x38,
		0x00,0x4a,0x00,0x64,0x00,0x7f,0x00,0x9a,0x00,0xb5,0x00,0xd0,0x00,0xe2,0x00,0xf9,
		0x01,0x14,0x01,0x2b,0x01,0x42,0x01,0x59,0x01,0x6d,0x01,0x80,0x01,0x93,0x01,0xa5,
		0x01,0xb8,0x01,0xcb,0x01,0xde,0x01,0xf1,0x02,0x05,0x02,0x22,0x02,0x34,0x02,0x69,
		0x02,0x7b,0x02,0xc9,0x03,0x18,0x03,0x2a,0x03,0x3c,0x03,0x4e,0x03,0x68,0x03,0x7a,
		0x03,0x8c,0x03,0xbf,0x04,0x03,0x04,0x15,0x04,0x1d,0x04,0x30,0x04,0x43,0x04,0x66,
		0x04,0x78,0x04,0x8a,0x04,0x9c,0x04,0xb6,0x04,0xc8,0x04,0xdf,0x04,0xfa,0x05,0x11,
		0x05,0x28,0x05,0x3f,0x05,0x53,0x05,0x66,0x05,0x78,0x05,0x8b,0x05,0x9d,0x05,0xb0,
		0x05,0xc3,0x05,0xd6,0x05,0xf2,0x06,0x0e,0x06,0x20,0x06,0x32,0x06,0x80,0x06,0x9f,
		0x06,0xf5,0x07,0x07,0x07,0x19,0x07,0x2b,0x07,0x3e,0x07,0x50,0x07,0x63,0x07,0x92,
		0x07,0xcb,0x07,0xde,0x07,0xf0,0x08,0x03,0x08,0x24,0x08,0x36,0x08,0x48,0x08,0x5a,
		0x08,0x6e,0x08,0x81,0x08,0x9d,0x08,0xaf,0x08,0xc2,0x08,0xd4,0x08,0xe7,0x08,0xfa,
		0x09,0x0d,0x09,0x1f,0x09,0x31,0x09,0x69,0x09,0x7b,0x09,0xae,0x09,0xc1,0x0a,0x08,
		0x0a,0x25,0x0a,0x6c,0x0a,0x7e,0x0a,0xb7,0x0a,0xca,0x0a,0xdd,0x0a,0xf0,0x0b,0x47,
		0x0b,0x5a,0x0b,0x8b,0x0b,0xb1,0x0b,0xc4,0x0b,0xec,0x0b,0xfe,0x0c,0x10,0x0c,0x23,
		0x0c,0x35,0x0c,0x48,0x0c,0x85,0x0c,0x98,0x0c,0xaa,0x0c,0xe3,0x0c,0xf5,0x0d,0x07,
		0x0d,0x19,0x0d,0x30,0x0d,0x4b,0x0d,0x62,0x0d,0x79,0x0d,0x90,0x0d,0xa4,0x0d,0xb7,
		0x0d,0xd3,0x0d,0xee,0x0e,0x01,0x0e,0x13,0x0e,0x26,0x0e,0x39,0x0e,0x4b,0x0e,0x5e,
		0x0e,0x70,0x0e,0x83,0x0e,0x95,0x0e,0xa8,0x0e,0xbb,0x0e,0xce,0x0e,0xea,0x0f,0x06,
		0x0f,0x18,0x0f,0x61,0x0f,0x73,0x0f,0x85,0x0f,0xa0,0x0f,0xbc,0x0f,0xd8,0x10,0x2c,
		0x10,0x5e,0x10,0x9c,0x10,0xf1,0x11,0x29,0x11,0x3b,0x11,0x4d,0x11,0x60,0x11,0x74,
		0x11,0x87,0x11,0x9a,0x11,0xad,0x12,0x15,0x12,0x27,0x12,0x41,0x12,0x53,0x12,0x6e,
		0x12,0x80,0x12,0x92,0x12,0xa5,0x12,0xb7,0x12,0xca,0x12,0xe5,0x13,0x3f,0x13,0x47,
		0x13,0x61,0x13,0x85,0x13,0x97,0x13,0xa9,0x13,0xbc,0x13,0xcf,0x13,0xe2,0x14,0x10,
		0x14,0x22,0x14,0x34,0x14,0x46,0x14,0x5a,0x14,0x6d,0x14,0x80,0x14,0x92,0x14,0xa5,
		0x14,0xb8,0x14,0xca,0x14,0xdd,0x14,0xef,0x15,0x02,0x15,0x14,0x15,0x27,0x15,0x3a,
		0x15,0x4d,0x15,0x6a,0x15,0x7c,0x15,0x90,0x15,0xa2,0x15,0xbd,0x15,0xd9,0x16,0x04,
		0x16,0x16,0x16,0x28,0x16,0x3b,0x16,0x4d,0x16,0x74,0x16,0x95,0x16,0xa7,0x16,0xb9,
		0x16,0xcc,0x16,0xde,0x16,0xf1,0x17,0x03,0x17,0x16,0x17,0x29,0x17,0x3b,0x17,0x64,
		0x17,0x76,0x17,0x88,0x17,0x9a,0x17,0xad,0x17,0xdb,0x18,0x3b,0x18,0x4d,0x18,0x5f,
		0x18,0x76,0x18,0x91,0x18,0xa8,0x18,0xbf,0x18,0xd6,0x18,0xe8,0x18,0xff,0x19,0x1a,
		0x19,0x31,0x19,0x48,0x19,0x5f,0x19,0x72,0x19,0x85,0x19,0x98,0x19,0xaa,0x19,0xbc,
		0x19,0xce,0x19,0xe0,0x19,0xf2,0x1a,0x05,0x1a,0x21,0x1a,0x33,0x1a,0xbd,0x1a,0xcf,
		0x1b,0x26,0x1b,0x73,0x1b,0xb9,0x1b,0xcb,0x1b,0xdd,0x1b,0xef,0x1c,0x09,0x1c,0x1b,
		0x1c,0x2d,0x1c,0x8a,0x1c,0xf2,0x1d,0x68,0x1d,0x7b,0x1d,0x8e,0x1d,0xa1,0x1d,0xef,
		0x1e,0x01,0x1e,0x13,0x1e,0x25,0x1e,0x3f,0x1e,0x51,0x1e,0x68,0x1e,0x83,0x1e,0x9a,
		0x1e,0xb1,0x1e,0xc8,0x1e,0xdb,0x1e,0xee,0x1f,0x00,0x1f,0x13,0x1f,0x25,0x1f,0x37,
		0x1f,0x49,0x1f,0x5b,0x1f,0x76,0x1f,0x91,0x1f,0xa3,0x20,0x01,0x20,0x13,0x20,0x60,
		0x20,0x69,0x20,0xa5,0x21,0x48,0x21,0x5a,0x21,0x6c,0x21,0x7e,0x21,0x90,0x21,0xa2,
		0x21,0xb4,0x21,0xee,0x22,0x01,0x22,0x14,0x22,0x27,0x22,0x3a,0x22,0x4c,0x22,0x6a,
		0x22,0x7c,0x22,0x8e,0x22,0xa0,0x22,0xb3,0x22,0xc6,0x22,0xe3,0x22,0xf5,0x23,0x08,
		0x23,0x1a,0x23,0x2c,0x23,0x3e,0x23,0x50,0x23,0x6a,0x23,0x7c,0x23,0x8e,0x23,0xc1,
		0x23,0xd3,0x24,0x05,0x24,0x18,0x24,0x4c,0x24,0x69,0x24,0x7b,0x24,0x8e,0x24,0xa1,
		0x24,0xd2,0x24,0xe5,0x25,0x3d,0x25,0x50,0x25,0x7b,0x25,0xcc,0x25,0xdf,0x26,0x12,
		0x26,0x24,0x26,0x36,0x26,0x49,0x26,0x5b,0x26,0x6e,0x26,0xbc,0x26,0xcf,0x26,0xe1,
		0x27,0x1c,0x27,0x2e,0x27,0x40,0x27,0x52,0x27,0x69,0x27,0x84,0x27,0x9b,0x27,0xb2,
		0x27,0xc9,0x27,0xdc,0x27,0xef,0x28,0x0b,0x28,0x26,0x28,0x39,0x28,0x4b,0x28,0x5d,
		0x28,0x70,0x28,0x82,0x28,0x95,0x28,0xa7,0x28,0xb9,0x28,0xcb,0x28,0xde,0x28,0xf0,
		0x29,0x02,0x29,0x1d,0x29,0x38,0x29,0x43,0x29,0x8c,0x29,0x9e,0x29,0xb0,0x29,0xcb,
		0x29,0xe7,0x2a,0x02,0x2a,0x84,0x2a,0xd3,0x2b,0x29,0x2b,0x78,0x2b,0xb2,0x2b,0xc4,
		0x2b,0xd6,0x2b,0xe9,0x2b,0xfc,0x2c,0x0f,0x2c,0x61,0x2c,0x73,0x2c,0x86,0x2c,0xc8,
		0x2d,0x2c,0x2d,0x3e,0x2d,0x59,0x2d,0x6b,0x2d,0x86,0x2d,0x98,0x2d,0xaa,0x2d,0xbd,
		0x2d,0xcf,0x2d,0xe2,0x2d,0xfd,0x2e,0x5f,0x2e,0xa1,0x2e,0xec,0x2f,0x00,0x2f,0x12,
		0x2f,0x25,0x2f,0x38,0x2f,0x4b,0x2f,0x5e,0x2f,0x9c,0x2f,0xae,0x2f,0xc0,0x2f,0xd2,
		0x2f,0xe5,0x2f,0xf8,0x30,0x0b,0x30,0x1d,0x30,0x2f,0x30,0x42,0x30,0x54,0x30,0x67,
		0x30,0x79,0x30,0x8b,0x30,0x9d,0x30,0xb0,0x30,0xc2,0x30,0xd4,0x30,0xf0,0x31,0x03,
		0x31,0x16,0x31,0x28,0x31,0x43,0x31,0x69,0x31,0x9c,0x31,0xae,0x31,0xc0,0x31,0xd3,
		0x31,0xe5,0x32,0x09,0x32,0x4f,0x32,0x61,0x32,0x73,0x32,0x86,0x32,0x98,0x32,0xab,
		0x32,0xbd,0x32,0xcf,0x32,0xe1,0x32,0xf3,0x33,0x1c,0x33,0x2e,0x33,0x40,0x33,0x52,
		0x33,0x65,0x33,0xa3,0x34,0x09,0x34,0x4d,0x34,0x55,0x34,0x8b,0x34,0xd4,0x34,0xf0,
		0x35,0x3a,0x35,0x9a,0x35,0xc5,0x36,0x18,0x36,0x7f,0x36,0xa2,0x37,0x12,0x37,0x72,
		0x37,0xc0,0x37,0xf9,0x38,0x02,0x38,0x0b,0x38,0x14,0x38,0x1d,0x38,0x26,0x38,0x2f,
		0x38,0x38,0x38,0x41,0x38,0x4a,0x38,0x53,0x38,0x5b,0x38,0x63,0x38,0x6c,0x38,0x75,
		0x38,0x7e,0x38,0x86,0x38,0x8e,0x38,0x96,0x38,0x9e,0x38,0xa6,0x38,0xae,0x38,0xb6,
		0x38,0xbe,0x38,0xc6,0x38,0xce,0x38,0xd6,0x38,0xde,0x38,0xe6,0x38,0xee,0x38,0xf6,
		0x39,0x37,0x39,0x53,0x39,0x97,0x39,0xef,0x3a,0x17,0x3a,0x62,0x3a,0xbe,0x3a,0xde,
		0x3b,0x41,0x3b,0x95,0x3b,0xa9,0x3c,0x06,0x3c,0x52,0x3c,0xd3,0x3c,0xdc,0x3c,0xe5,
		0x3c,0xed,0x3d,0x23,0x3d,0x2c,0x3d,0x34,0x3d,0x3c,0x3d,0x85,0x3d,0xa0,0x3d,0xc5,
		0x3d,0xf2,0x3e,0x2a,0x3e,0x6a,0x3e,0x9a,0x3e,0xc8,0x3f,0x1b,0x3f,0x6d,0x3f,0x87,
		0x3f,0xa7,0x3f,0xd2,0x3f,0xf5,0x40,0x48,0x40,0x5c,0x40,0x72,0x40,0x7a,0x40,0xa5,
		0x40,0xcd,0x40,0xf4,0x41,0x3e,0x41,0x89,0x41,0xa0,0x41,0xb8,0x41,0xc9,0x41,0xd1,
		0x41,0xe2,0x41,0xf3,0x41,0xfb,0x42,0x03,0x42,0x0b,0x42,0x1b,0x42,0x24,0x42,0x68,
		0x42,0xae,0x42,0xf5,0x43,0x1d,0x43,0x45,0x43,0x67,0x43,0x8a,0x43,0xa0,0x43,0xb5,
		0x43,0xc0,0x43,0xdb,0x43,0xe6,0x44,0x07,0x44,0x2e,0x44,0x65,0x44,0x65,0x44,0x65,
		0x44,0x65,0x44,0x65,0x44,0x65,0x44,0x65,0x44,0x65,0x44,0x65,0x44,0xb4,0x45,0x04,
		0x45,0x5d,0x45,0xb2,0x46,0x3b,0x46,0xa4,0x47,0x0a,0x47,0x5e,0x47,0x71,0x47,0xc4,
		0x48,0x09,0x48,0x11,0x48,0x58,0x48,0x93,0x48,0xc6,0x49,0x7f,0x49,0xcf,0x4a,0x12,
		0x4a,0x57,0x4a,0xc3,0x4a,0xfa,0x4b,0x3e,0x4b,0x69,0x4b,0x89,0x4b,0x9d,0x4b,0xd0,
		0x4b,0xd8,0x4b,0xf6,0x4c,0x07,0x4c,0x2c,0x4c,0x64,0x4c,0x7e,0x4c,0xab,0x4c,0xc6,
		0x4c,0xe2,0x4d,0x08,0x4d,0x2f,0x4d,0x57,0x4d,0x62,0x4d,0x9a,0x4d,0xae,0x4d,0xcc,
		0x4e,0x37,0x4e,0x84,0x4e,0xbb,0x4f,0x06,0x4f,0x2b,0x4f,0x4b,0x4f,0x76,0x4f,0x93,
		0x4f,0xe8,0x50,0x47,0x50,0xc0,0x51,0x6b,0x51,0xbf,0x51,0xc8,0x51,0xd0,0x51,0xf4,
		0x52,0x18,0x52,0x3c,0x52,0x60,0x52,0x84,0x52,0xa9,0x52,0xcd,0x52,0xf1,0x53,0x27,
		0x53,0x4e,0x53,0x7e,0x53,0xb4,0x53,0xe9,0x54,0x20,0x54,0x40,0x54,0x5f,0x54,0x7f,
		0x54,0x9f,0x54,0xaf,0x54,0xc0,0x54,0xd1,0x54,0xe2,0x54,0xf3,0x55,0x04,0x55,0x15,
		0x55,0x26,0x55,0x37,0x55,0x47,0x55,0x58,0x55,0x69,0x55,0x7a,0x55,0x8b,0x55,0x9c,
		0x55,0xad,0x55,0xbe,0x55,0xcf,0x55,0xe1,0x55,0xf2,0x56,0x03,0x56,0x14,0x56,0x27,
		0x56,0x3d,0x56,0x51,0x56,0x65,0x56,0x76,0x56,0x90,0x56,0xa3,0x57,0x89,0x58,0x6f,
		0x59,0x3d,0x59,0x61,0x59,0xa0,0x59,0xb2,0x59,0xcd,0x59,0xef,0x5a,0x1c,0x5a,0x3e,
		0x5a,0x60,0x5a,0x79,0x5a,0xa5,0x5a,0xc7,0x5a,0xe9,0x5b,0x02,0x5b,0x3a,0x5b,0x63,
		0x5b,0x90,0x5b,0xb0,0x5b,0xcd,0x5b,0xea,0x5c,0x03,0x5c,0x18,0x5c,0x36,0x5c,0x4b,
		0x5c,0x69,0x5c,0x8a,0x5c,0xa4,0x5c,0xb9,0x5c,0xd6,0x5c,0xeb,0x5d,0x08,0x5d,0x29,
		0x5d,0x4d,0x5d,0x6a,0x5d,0x87,0x5d,0x9e,0x5d,0xb8,0x5d,0xc9,0x5d,0xe2,0x5d,0xf7,
		0x5e,0x0c,0x5e,0x1c,0x5e,0x2c,0x5e,0x44,0x5e,0x69,0x5e,0x9b,0x5e,0xab,0x5e,0xcc,
		0x5e,0xed,0x5e,0xfe,0x5f,0x16,0x5f,0x2a,0x5f,0x40,0x5f,0x54,0x5f,0x65,0x5f,0x85,
		0x5f,0x9e,0x5f,0xb7,0x5f,0xd8,0x5f,0xf5,0x60,0x10,0x60,0x2f,0x60,0x4a,0x60,0x64,
		0x60,0x81,0x60,0xa1,0x60,0xc1,0x60,0xe2,0x61,0x04,0x61,0x26,0x61,0x3e,0x61,0x58,
		0x61,0x7d,0x61,0x95,0x61,0xac,0x61,0xbd,0x61,0xd7,0x61,0xec,0x62,0x01,0x62,0x11,
		0x62,0x21,0x62,0x39,0x62,0x63,0x62,0x91,0x62,0xa1,0x62,0xc2,0x62,0xe3,0x62,0xf4,
		0x63,0x0a,0x63,0x23,0x63,0x37,0x63,0x4b,0x63,0x5c,0x63,0x7e,0x63,0x98,0x63,0xb2,
		0x63,0xd2,0x63,0xee,0x64,0x09,0x64,0x28,0x64,0x44,0x64,0x5f,0x64,0x7f,0x64,0x9f,
		0x64,0xbf,0x64,0xdc,0x64,0xf9,0x65,0x1a,0x65,0x32,0x65,0x4f,0x65,0x63,0x65,0x80,
		0x65,0x94,0x65,0xaf,0x65,0xc8,0x65,0xe1,0x65,0xf5,0x66,0x0e,0x66,0x22,0x66,0x44,
		0x66,0x60,0x66,0x7c,0x66,0xac,0x66,0xce,0x66,0xf0,0x67,0x10,0x67,0x29,0x67,0x42,
		0x67,0x5e,0x67,0x75,0x67,0x8c,0x67,0xbd,0x67,0xe1,0x68,0x05,0x68,0x80,0x68,0xfc,
		0x69,0x5c,0x69,0xa5,0x6a,0x00,0x6a,0x3a,0x6a,0x51,0x6a,0x74,0x6a,0x9b,0x6a,0xa3,
		0x6a,0xcc,0x6a,0xfc,0x6b,0x68,0x6b,0xe9,0x6c,0x0e,0x6c,0xa8,0x6d,0x22,0x6d,0x8b,
		0x6d,0xc3,0x6d,0xfe,0x6e,0x0f,0x6e,0x1a,0x6e,0x2c,0x6e,0x47,0x6e,0x68,0x6e,0xcb,
		0x6e,0xfc,0x6f,0x5c,0x6f,0x9b,0x6f,0xb2,0x6f,0xff,0x70,0x26,0x70,0x69,0x70,0x9f,
		0x70,0xda,0x71,0x17,0x71,0x38,0x71,0xf0,0x72,0x33,0x72,0x8e,0x72,0xb1,0x72,0xf8,
		0x73,0x22,0x73,0x4b,0x73,0x79,0x73,0x89,0x73,0xb1,0x73,0xd7,0x73,0xe2,0x73,0xf3,
		0x74,0x05,0x74,0x0d,0x74,0x31,0x74,0x54,0x74,0x66,0x74,0x76,0x74,0x87,0x74,0x8f,
		0x74,0x97,0x74,0x9f,0x74,0xa7,0x74,0xaf,0x74,0xcc,0x74,0xe9,0x75,0x10,0x75,0x18,
		0x75,0x4d,0x75,0x55,0x75,0x85,0x75,0x90,0x75,0xb6,0x75,0xdb,0x75,0xf4,0x75,0xfd,
		0x76,0x06,0x76,0x2a,0x76,0x32,0x76,0x55,0x76,0x5e,0x76,0x67,0x76,0x78,0x76,0x80,
		0x76,0xac,0x76,0xc6,0x76,0xda,0x76,0xef,0x77,0x10,0x77,0x2a,0x77,0x45,0x77,0x6b,
		0x77,0x9f,0x77,0xa7,0x77,0xb7,0x77,0xe7,0x78,0x0a,0x78,0x12,0x78,0x1a,0x78,0x22,
		0x78,0x2a,0x78,0x32,0x78,0x4f,0x78,0x57,0x78,0x5f,0x78,0x67,0x78,0x6f,0x78,0x8a,
		0x78,0xb5,0x78,0xbe,0x78,0xd3,0x78,0xe8,0x79,0x0a,0x79,0x28,0x79,0x30,0x79,0x62,
		0x79,0x6b,0x79,0xa0,0x79,0xac,0x79,0xb8,0x79,0xc3,0x79,0xce,0x79,0xda,0x79,0xe6,
		0x79,0xf2,0x79,0xfe,0x7a,0x0a,0x7a,0x16,0x7a,0x22,0x7a,0x2e,0x7a,0x2e,0x00,0x00,
		0x00,0x01,0x00,0x00,0x00,0x03,0x00,0x42,0xed,0x3e,0x32,0x7a,0x5f,0x0f,0x3c,0xf5,
		0x00,0x0b,0x03,0xe8,0x00,0x00,0x00,0x00,0xda,0x17,0x06,0x51,0x00,0x00,0x00,0x00,
		0xda,0xaa,0x43,0x42,0xff,0xb0,0xfe,0x70,0x05,0xaf,0x03,0xe8,0x00,0x00,0x00,0x06,
		0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x10,
		0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,
		0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,
		0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,
		0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,
		0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,
		0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,
		0x01,0xf4,0x00,0x0f,0x01,0xf4,0x00,0x0f,0x01,0xf4,0x00,0x30,0x01,0xf4,0x00,0x29,
		0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0x29,
		0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0x36,0x01,0xf4,0x00,0x1e,
		0x01,0xf4,0x00,0x36,0x01,0xf4,0x00,0x1e,0x01,0xf4,0x00,0x36,0x01,0xf4,0x00,0x36,
		0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,
		0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,
		0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,
		0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,
		0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,
		0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x47,
		0x01,0xf4,0x00,0x4e,0x01,0xf4,0x00,0x23,0x01,0xf4,0x00,0x23,0x01,0xf4,0x00,0x23,
		0x01,0xf4,0x00,0x23,0x01,0xf4,0x00,0x23,0x01,0xf4,0x00,0x23,0x01,0xf4,0x00,0x23,
		0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x07,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,
		0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x51,0x01,0xf4,0x00,0x51,0x01,0xf4,0x00,0x51,
		0x01,0xf4,0x00,0x51,0x01,0xf4,0x00,0x3f,0x01,0xf4,0x00,0x51,0x01,0xf4,0x00,0x51,
		0x01,0xf4,0x00,0x51,0x01,0xf4,0x00,0x51,0x01,0xf4,0x00,0x51,0x01,0xf4,0x00,0x51,
		0x01,0xf4,0x00,0x51,0x01,0xf4,0x00,0x51,0x01,0xf4,0x00,0x51,0x01,0xf4,0x00,0x50,
		0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x2a,0x01,0xf4,0x00,0x2a,
		0x01,0xf4,0x00,0x2a,0x01,0xf4,0x00,0x42,0x01,0xf4,0x00,0x42,0x01,0xf4,0x00,0x42,
		0x01,0xf4,0x00,0x42,0x01,0xf4,0x00,0x42,0x01,0xf4,0x00,0x42,0x01,0xf4,0x00,0x42,
		0x01,0xf4,0x00,0x42,0x01,0xf4,0x00,0x42,0x01,0xf4,0x00,0x14,0x01,0xf4,0x00,0x29,
		0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,
		0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,
		0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,
		0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,
		0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,
		0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,
		0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,
		0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,
		0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,
		0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,
		0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1b,
		0x01,0xf4,0x00,0x09,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x1d,
		0x01,0xf4,0x00,0x38,0x01,0xf4,0x00,0x38,0x01,0xf4,0x00,0x38,0x01,0xf4,0x00,0x38,
		0x01,0xf4,0x00,0x38,0x01,0xf4,0x00,0x38,0x01,0xf4,0x00,0x38,0x01,0xf4,0x00,0x38,
		0x01,0xf4,0x00,0x34,0x01,0xf4,0x00,0x34,0x01,0xf4,0x00,0x34,0x01,0xf4,0x00,0x34,
		0x01,0xf4,0x00,0x34,0x01,0xf4,0x00,0x34,0x01,0xf4,0x00,0x34,0x01,0xf4,0x00,0x34,
		0x01,0xf4,0x00,0x34,0x01,0xf4,0x00,0x34,0x01,0xf4,0x00,0x34,0x01,0xf4,0x00,0x37,
		0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x1f,0x01,0xf4,0x00,0x1f,0x01,0xf4,0x00,0x1f,
		0x01,0xf4,0x00,0x1f,0x01,0xf4,0x00,0x1f,0x01,0xf4,0x00,0x1f,0x01,0xf4,0x00,0x1f,
		0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,
		0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,
		0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x2d,0x01,0xf4,0x00,0x2d,0x01,0xf4,0x00,0x2d,
		0x01,0xf4,0x00,0x2d,0x01,0xf4,0x00,0x2d,0x01,0xf4,0x00,0x2d,0x01,0xf4,0x00,0x32,
		0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,
		0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x19,
		0x01,0xf4,0x00,0x11,0x01,0xf4,0x00,0x11,0x01,0xf4,0x00,0x11,0x01,0xf4,0x00,0x11,
		0x01,0xf4,0x00,0x11,0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0x1c,0x01,0xf4,0x00,0x1c,
		0x01,0xf4,0x00,0x1c,0x01,0xf4,0x00,0x1c,0x01,0xf4,0x00,0x1c,0x01,0xf4,0x00,0x1c,
		0x01,0xf4,0x00,0x1c,0x01,0xf4,0x00,0x1c,0x01,0xf4,0x00,0x1c,0x01,0xf4,0x00,0x1c,
		0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,
		0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x2d,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,
		0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,
		0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,
		0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,
		0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,
		0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,
		0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x0a,
		0x01,0xf4,0x00,0x0a,0x01,0xf4,0x00,0x3c,0x01,0xf4,0x00,0x1b,0x01,0xf4,0x00,0x38,
		0x01,0xf4,0x00,0x38,0x01,0xf4,0x00,0x38,0x01,0xf4,0x00,0x38,0x01,0xf4,0x00,0x38,
		0x01,0xf4,0x00,0x38,0x01,0xf4,0x00,0x38,0x01,0xf4,0x00,0x2d,0x01,0xf4,0x00,0x28,
		0x01,0xf4,0x00,0x23,0x01,0xf4,0x00,0x2d,0x01,0xf4,0x00,0x2d,0x01,0xf4,0x00,0x2d,
		0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,
		0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,
		0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,
		0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,
		0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,
		0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x2d,0x01,0xf4,0x00,0x31,
		0x01,0xf4,0x00,0x37,0x01,0xf4,0x00,0x5b,0x01,0xf4,0x00,0x3f,0x01,0xf4,0x00,0x26,
		0x01,0xf4,0x00,0x26,0x01,0xf4,0x00,0x26,0x01,0xf4,0x00,0x26,0x01,0xf4,0x00,0x26,
		0x01,0xf4,0x00,0x26,0x01,0xf4,0x00,0x26,0x01,0xf4,0x00,0x49,0x01,0xf4,0x00,0x00,
		0x01,0xf4,0x00,0x49,0x01,0xf4,0xff,0xd8,0x01,0xf4,0x00,0x49,0x01,0xf4,0x00,0x64,
		0x01,0xf4,0x00,0x64,0x01,0xf4,0x00,0x64,0x01,0xf4,0x00,0x64,0x01,0xf4,0x00,0x63,
		0x01,0xf4,0x00,0x4a,0x01,0xf4,0x00,0x64,0x01,0xf4,0x00,0x64,0x01,0xf4,0x00,0x64,
		0x01,0xf4,0x00,0x64,0x01,0xf4,0x00,0x64,0x01,0xf4,0x00,0x64,0x01,0xf4,0x00,0x64,
		0x01,0xf4,0x00,0x64,0x01,0xf4,0x00,0x64,0x01,0xf4,0x00,0x64,0x01,0xf4,0x00,0x30,
		0x01,0xf4,0x00,0x30,0x01,0xf4,0x00,0x30,0x01,0xf4,0x00,0x42,0x01,0xf4,0x00,0x42,
		0x01,0xf4,0x00,0x42,0x01,0xf4,0x00,0x4f,0x01,0xf4,0x00,0x4f,0x01,0xf4,0x00,0x4f,
		0x01,0xf4,0x00,0x4f,0x01,0xf4,0x00,0x45,0x01,0xf4,0x00,0x4f,0x01,0xf4,0x00,0x13,
		0x01,0xf4,0x00,0x4f,0x01,0xf4,0x00,0x4f,0x01,0xf4,0x00,0x26,0x01,0xf4,0x00,0x26,
		0x01,0xf4,0x00,0x48,0x01,0xf4,0x00,0x48,0x01,0xf4,0x00,0x48,0x01,0xf4,0x00,0x48,
		0x01,0xf4,0x00,0x48,0x01,0xf4,0x00,0x48,0x01,0xf4,0x00,0x44,0x01,0xf4,0x00,0x48,
		0x01,0xf4,0x00,0x48,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,
		0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,
		0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,
		0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,
		0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,
		0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,
		0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,
		0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,
		0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x06,
		0x01,0xf4,0x00,0x3c,0x01,0xf4,0x00,0x3c,0x01,0xf4,0x00,0x2a,0x01,0xf4,0x00,0x77,
		0x01,0xf4,0x00,0x77,0x01,0xf4,0x00,0x77,0x01,0xf4,0x00,0x77,0x01,0xf4,0x00,0x72,
		0x01,0xf4,0x00,0x77,0x01,0xf4,0x00,0x19,0x01,0xf4,0x00,0x77,0x01,0xf4,0x00,0x77,
		0x01,0xf4,0x00,0x23,0x01,0xf4,0x00,0x39,0x01,0xf4,0x00,0x39,0x01,0xf4,0x00,0x39,
		0x01,0xf4,0x00,0x39,0x01,0xf4,0x00,0x39,0x01,0xf4,0x00,0x39,0x01,0xf4,0x00,0x39,
		0x01,0xf4,0x00,0x39,0x01,0xf4,0x00,0x39,0x01,0xf4,0x00,0x39,0x01,0xf4,0x00,0x39,
		0x01,0xf4,0x00,0x37,0x01,0xf4,0x00,0x46,0x01,0xf4,0x00,0x3d,0x01,0xf4,0x00,0x46,
		0x01,0xf4,0x00,0x46,0x01,0xf4,0x00,0x46,0x01,0xf4,0x00,0x46,0x01,0xf4,0x00,0x46,
		0x01,0xf4,0x00,0x46,0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x40,
		0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x40,
		0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x28,0x01,0xf4,0x00,0x28,
		0x01,0xf4,0x00,0x28,0x01,0xf4,0x00,0x28,0x01,0xf4,0x00,0x28,0x01,0xf4,0x00,0x28,
		0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x40,
		0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x40,
		0x01,0xf4,0x00,0x28,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,
		0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x2f,0x01,0xf4,0x00,0x16,
		0x01,0xf4,0x00,0x16,0x01,0xf4,0x00,0x16,0x01,0xf4,0x00,0x16,0x01,0xf4,0x00,0x16,
		0x01,0xf4,0x00,0x16,0x01,0xf4,0x00,0x16,0x01,0xf4,0x00,0x16,0x01,0xf4,0x00,0x16,
		0x01,0xf4,0x00,0x16,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,
		0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x28,0x01,0xf4,0x00,0x4c,
		0x01,0xf4,0x00,0x4c,0x01,0xf4,0x00,0x48,0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x39,
		0x01,0xf4,0x00,0x58,0x01,0xf4,0x00,0x3a,0x01,0xf4,0x00,0x45,0x01,0xf4,0x00,0x30,
		0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x43,0x01,0xf4,0x00,0x4f,0x01,0xf4,0x00,0x3c,
		0x01,0xf4,0x00,0x44,0x01,0xf4,0x00,0x39,0x01,0xf4,0x00,0x39,0x01,0xf4,0x00,0x72,
		0x01,0xf4,0x00,0x88,0x01,0xf4,0x00,0x73,0x01,0xf4,0x00,0x79,0x01,0xf4,0x00,0x6e,
		0x01,0xf4,0x00,0x79,0x01,0xf4,0x00,0x7a,0x01,0xf4,0x00,0x82,0x01,0xf4,0x00,0x75,
		0x01,0xf4,0x00,0x79,0x01,0xf4,0x00,0x72,0x01,0xf4,0x00,0x88,0x01,0xf4,0x00,0x73,
		0x01,0xf4,0x00,0x79,0x01,0xf4,0x00,0x6e,0x01,0xf4,0x00,0x79,0x01,0xf4,0x00,0x7a,
		0x01,0xf4,0x00,0x82,0x01,0xf4,0x00,0x75,0x01,0xf4,0x00,0x79,0x01,0xf4,0x00,0x72,
		0x01,0xf4,0x00,0x88,0x01,0xf4,0x00,0x73,0x01,0xf4,0x00,0x79,0x01,0xf4,0x00,0x6e,
		0x01,0xf4,0x00,0x79,0x01,0xf4,0x00,0x7a,0x01,0xf4,0x00,0x82,0x01,0xf4,0x00,0x75,
		0x01,0xf4,0x00,0x79,0x01,0xf4,0x00,0x72,0x01,0xf4,0x00,0x88,0x01,0xf4,0x00,0x73,
		0x01,0xf4,0x00,0x79,0x01,0xf4,0x00,0x6e,0x01,0xf4,0x00,0x79,0x01,0xf4,0x00,0x7a,
		0x01,0xf4,0x00,0x82,0x01,0xf4,0x00,0x75,0x01,0xf4,0x00,0x79,0x01,0xf4,0x00,0x4c,
		0x01,0xf4,0x00,0x12,0x01,0xf4,0x00,0x12,0x01,0xf4,0x00,0x05,0x01,0xf4,0x00,0x72,
		0x01,0xf4,0x00,0x72,0x01,0xf4,0x00,0x72,0x01,0xf4,0x00,0x72,0x01,0xf4,0x00,0x72,
		0x01,0xf4,0x00,0x72,0x01,0xf4,0x00,0x72,0x01,0xf4,0x00,0x72,0x01,0xf4,0x00,0xb4,
		0x01,0xf4,0x00,0xa5,0x01,0xf4,0x00,0xb3,0x01,0xf4,0x00,0xa5,0x01,0xf4,0x00,0x08,
		0x01,0xf4,0x00,0xb4,0x01,0xf4,0x00,0xb4,0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x40,
		0x01,0xf4,0x00,0xb3,0x01,0xf4,0x00,0xa5,0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0xc8,
		0x01,0xf4,0x00,0x19,0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0xb3,
		0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0x7a,0x01,0xf4,0x00,0x72,0x01,0xf4,0x00,0x35,
		0x01,0xf4,0x00,0x36,0x01,0xf4,0x00,0x83,0x01,0xf4,0x00,0x83,0x01,0xf4,0x00,0x6f,
		0x01,0xf4,0x00,0x6f,0x01,0xf4,0x00,0x47,0x01,0xf4,0x00,0x0a,0x01,0xf4,0x00,0x47,
		0x01,0xf4,0x00,0x0a,0x01,0xf4,0x00,0x6f,0x01,0xf4,0x00,0x23,0x01,0xf4,0x00,0xa5,
		0x01,0xf4,0x00,0x3c,0x01,0xf4,0x00,0x50,0x01,0xf4,0x00,0x52,0x01,0xf4,0x00,0xb4,
		0x01,0xf4,0x00,0xa5,0x01,0xf4,0x00,0x43,0x01,0xf4,0x00,0x48,0x01,0xf4,0x00,0x91,
		0x01,0xf4,0x00,0x91,0x01,0xf4,0x00,0x87,0x01,0xf4,0x00,0xd2,0x01,0xf4,0x00,0x71,
		0x01,0xf4,0x00,0xce,0x03,0xe8,0x00,0x2c,0x05,0xdc,0x00,0x2d,0x01,0xf4,0x00,0x00,
		0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,
		0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x29,
		0x01,0xf4,0x00,0x38,0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0x44,0x01,0xf4,0x00,0x3c,
		0x01,0xf4,0x00,0x41,0x01,0xf4,0x00,0x21,0x01,0xf4,0x00,0x12,0x01,0xf4,0x00,0x15,
		0x01,0xf4,0x00,0x23,0x01,0xf4,0x00,0x0e,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x19,
		0x01,0xf4,0x00,0x32,0x01,0xf4,0x00,0x0e,0x01,0xf4,0x00,0x36,0x01,0xf4,0x00,0x0d,
		0x01,0xf4,0x00,0x13,0x01,0xf4,0x00,0x33,0x01,0xf4,0x00,0x27,0x01,0xf4,0x00,0x0e,
		0x01,0xf4,0x00,0x24,0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0x8e,0x01,0xf4,0x00,0x33,
		0x01,0xf4,0x00,0x28,0x01,0xf4,0x00,0x2d,0x01,0xf4,0x00,0x2d,0x01,0xf4,0x00,0x2d,
		0x01,0xf4,0x00,0x55,0x01,0xf4,0x00,0x47,0x01,0xf4,0x00,0x2d,0x01,0xf4,0x00,0x2d,
		0x01,0xf4,0x00,0x28,0x01,0xf4,0x00,0x23,0x01,0xf4,0x00,0x23,0x01,0xf4,0x00,0x23,
		0x01,0xf4,0x00,0x2d,0x01,0xf4,0x00,0x47,0x01,0xf4,0x00,0x47,0x01,0xf4,0x00,0x5b,
		0x01,0xf4,0x00,0x5d,0x01,0xf4,0x00,0x0a,0x01,0xf4,0x00,0x0d,0x01,0xf4,0x00,0x49,
		0x01,0xf4,0x00,0x14,0x01,0xf4,0x00,0x20,0x01,0xf4,0x00,0x36,0x01,0xf4,0x00,0x27,
		0x01,0xf4,0x00,0x0c,0x01,0xf4,0x00,0x18,0x01,0xf4,0x00,0x1f,0x01,0xf4,0x00,0x1c,
		0x01,0xf4,0x00,0x14,0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0x47,0x01,0xf4,0x00,0x5f,
		0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x0e,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x0e,
		0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x0b,0x01,0xf4,0x00,0x17,0x01,0xf4,0x00,0x0b,
		0x01,0xf4,0x00,0x0a,0x01,0xf4,0x00,0x3b,0x01,0xf4,0x00,0x22,0x01,0xf4,0x00,0x0a,
		0x01,0xf4,0x00,0x22,0x01,0xf4,0x00,0x0a,0x01,0xf4,0x00,0x22,0x01,0xf4,0x00,0x0a,
		0x01,0xf4,0x00,0x22,0x01,0xf4,0x00,0x0a,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,
		0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,
		0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,
		0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,
		0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0xfa,
		0x01,0xf4,0x01,0xb6,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0xfa,0x01,0xf4,0x00,0x00,
		0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,
		0x01,0xf4,0x00,0xfa,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x11,
		0x01,0xf4,0x00,0x02,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0x29,
		0x01,0xf4,0x00,0x19,0x01,0xf4,0x00,0x19,0x01,0xf4,0x00,0x2f,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0x46,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0x46,0x01,0xf4,0x00,0x46,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0x46,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0x00,0x46,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0x00,0x82,0x01,0xf4,0x00,0x82,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0xbe,0x01,0xf4,0x00,0x82,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0xbe,
		0x01,0xf4,0x00,0x3f,0x01,0xf4,0x00,0x82,0x01,0xf4,0x00,0x82,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0x82,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0x10,0x01,0xf4,0x00,0x82,0x01,0xf4,0x00,0xbe,
		0x01,0xf4,0x00,0x1c,0x01,0xf4,0x00,0x82,0x01,0xf4,0x00,0x82,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0x82,0x01,0xf4,0x00,0x82,0x01,0xf4,0x00,0x82,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0x82,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0x00,0xbe,0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0xbe,0x01,0xf4,0x00,0x3f,
		0x01,0xf4,0x00,0xbe,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x00,
		0x01,0xf4,0x00,0xbe,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0xbe,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0x10,
		0x01,0xf4,0x00,0xbe,0x01,0xf4,0x00,0xbe,0x01,0xf4,0x00,0x1c,0x01,0xf4,0x00,0xbe,
		0x01,0xf4,0x00,0xbe,0x01,0xf4,0x00,0x82,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0x00,0xbe,0x01,0xf4,0x00,0xbe,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0x00,0xbe,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0x46,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0x00,0x82,0x01,0xf4,0x00,0x82,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0x82,0x01,0xf4,0x00,0xbe,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0xbe,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0x46,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,
		0x01,0xf4,0x00,0x82,0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0xbe,
		0x01,0xf4,0xff,0xb0,0x01,0xf4,0xff,0xb0,0x01,0xf4,0x00,0xbe,0x01,0xf4,0x00,0x29,
		0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0x28,0x01,0xf4,0x00,0x0d,0x01,0xf4,0x00,0x05,
		0x01,0xf4,0x00,0x0c,0x01,0xf4,0x00,0x0f,0x01,0xf4,0x00,0x09,0x01,0xf4,0x00,0x00,
		0x01,0xf4,0x00,0x55,0x01,0xf4,0x00,0x00,0x01,0xf4,0x00,0x04,0x01,0xf4,0x00,0x1f,
		0x01,0xf4,0x00,0x24,0x01,0xf4,0x00,0x40,0x01,0xf4,0x00,0x41,0x01,0xf4,0x00,0x0e,
		0x01,0xf4,0x00,0x0e,0x01,0xf4,0x00,0x12,0x01,0xf4,0x00,0x79,0x01,0xf4,0x00,0xc7,
		0x01,0xf4,0x00,0x8b,0x01,0xf4,0x00,0xd9,0x01,0xf4,0x00,0xd9,0x01,0xf4,0x00,0x31,
		0x01,0xf4,0x00,0x17,0x01,0xf4,0x00,0x31,0x01,0xf4,0x00,0x30,0x01,0xf4,0x00,0x19,
		0x01,0xf4,0x00,0x30,0x01,0xf4,0x00,0x29,0x01,0xf4,0x00,0x1c,0x01,0xf4,0x00,0x22,
		0x01,0xf4,0x00,0x3d,0x01,0xf4,0x00,0x02,0x01,0xf4,0x00,0x16,0x01,0xf4,0x00,0x00,
		0x01,0xf4,0x00,0x18,0x01,0xf4,0x00,0x21,0x01,0xf4,0x00,0x0f,0x05,0xdc,0x00,0x2d,
		0x03,0xe8,0x00,0x2c,0x03,0xe8,0x00,0x93,0x03,0xe8,0x00,0x40,0x03,0xe8,0x00,0x95,
		0x01,0xf4,0x00,0xad,0x01,0xf4,0x00,0xb4,0x01,0xf4,0x00,0xb2,0x01,0xf4,0x00,0x8b,
		0x01,0xf4,0x00,0x7b,0x01,0xf4,0x00,0xb4,0x01,0xf4,0x00,0xc7,0x01,0xf4,0x00,0xc4,
		0x01,0xf4,0x00,0xc3,0x01,0xf4,0x00,0xb8,0x01,0xf4,0x00,0xd6,0x01,0xf4,0x00,0xdd,
		0x00,0x00,0x00,0x70,0x00,0x00,0x00,0xcb,0x00,0x00,0x00,0x9a,0x00,0x00,0x00,0xd8,
		0x00,0x00,0x00,0x7e,0x00,0x00,0x00,0x63,0x00,0x00,0x00,0x68,0x00,0x00,0x00,0x74,
		0x00,0x00,0x00,0xa5,0x00,0x00,0x00,0x65,0x00,0x00,0x00,0x7b,0x00,0x00,0x00,0x99,
		0x00,0x00,0x00,0x5f,0x00,0x00,0x00,0x73,0x00,0x00,0x00,0xa6,0x00,0x00,0x01,0x8c,
		0x00,0x00,0x00,0xbb,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0xb1,0x00,0x00,0x00,0xa9,
		0x00,0x00,0x00,0x97,0x00,0x00,0x00,0x74,0x00,0x00,0x00,0x7b,0x00,0x00,0x00,0x79,
		0x00,0x00,0x00,0x6f,0x01,0xf4,0x00,0x70,0x01,0xf4,0x00,0xcb,0x01,0xf4,0x00,0x9a,
		0x01,0xf4,0x00,0xd8,0x01,0xf4,0x00,0x7e,0x01,0xf4,0x00,0x7c,0x01,0xf4,0x00,0x86,
		0x01,0xf4,0x00,0x65,0x01,0xf4,0x00,0xa5,0x01,0xf4,0x00,0x65,0x01,0xf4,0x00,0x7b,
		0x01,0xf4,0x00,0xa9,0x01,0xf4,0x00,0xfb,0x00,0x00,0x00,0x6f,0x00,0x00,0x00,0xc6,
		0x00,0x00,0x00,0x89,0x00,0x00,0x00,0xad,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x5c,
		0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x6c,0x00,0x00,0x00,0x9f,0x00,0x00,0x00,0x60,
		0x00,0x00,0x01,0x8e,0x01,0xf4,0x00,0x6f,0x01,0xf4,0x00,0xd5,0x01,0xf4,0x00,0xbb,
		0x01,0xf4,0x00,0xad,0x01,0xf4,0x00,0x70,0x01,0xf4,0x00,0x4e,0x01,0xf4,0x00,0x70,
		0x01,0xf4,0x00,0x9f,0x01,0xf4,0x00,0x65,0x00,0x00,0x00,0x75,0x00,0x00,0x00,0x74,
		0x00,0x00,0x00,0x74,0x00,0x00,0x00,0x74,0x00,0x00,0x00,0x74,0x00,0x00,0x00,0x69,
		0x00,0x00,0x00,0x6b,0x00,0x00,0x00,0x65,0x00,0x00,0x00,0x6c,0x00,0x00,0x00,0x5c,
		0x00,0x00,0x00,0x5c,0x00,0x00,0x00,0x5c,0x00,0x00,0x00,0x5c,0x01,0xf4,0x00,0x00,
		0x00,0x01,0x00,0x00,0x03,0x5b,0xff,0x42,0x00,0x00,0x05,0xdc,0xff,0xb0,0xfd,0xe5,
		0x05,0xaf,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x03,0xc2,0x00,0x04,0x01,0xf9,0x01,0x90,0x00,0x05,0x00,0x00,0x02,0x8a,
		0x02,0x58,0x00,0x00,0x00,0x4b,0x02,0x8a,0x02,0x58,0x00,0x00,0x01,0x5e,0x00,0x32,
		0x01,0x12,0x00,0x00,0x00,0x00,0x05,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,
		0x00,0xff,0x00,0x00,0xf9,0xeb,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x43,0x59,
		0x52,0x45,0x00,0xc0,0x00,0x00,0xff,0xfd,0x03,0x5b,0xff,0x42,0x00,0x00,0x03,0xec,
		0x01,0xc6,0x60,0x00,0x01,0x93,0xcd,0xd4,0x00,0x00,0x01,0xc9,0x02,0x6f,0x00,0x00,
		0x00,0x20,0x00,0x03,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x14,
		0x00,0x03,0x00,0x01,0x00,0x00,0x00,0x14,0x00,0x04,0x0a,0x2c,0x00,0x00,0x01,0x0a,
		0x01,0x00,0x00,0x07,0x00,0x0a,0x00,0x00,0x00,0x0d,0x00,0x2f,0x00,0x39,0x00,0x7e,
		0x01,0x31,0x01,0x48,0x01,0x7e,0x01,0x8f,0x01,0x92,0x01,0x98,0x01,0xa1,0x01,0xb0,
		0x01,0xb9,0x01,0xc9,0x01,0xe7,0x01,0xeb,0x02,0x1b,0x02,0x2d,0x02,0x33,0x02,0x37,
		0x02,0x4d,0x02,0x59,0x02,0x7b,0x02,0x98,0x02,0x9a,0x02,0xbc,0x02,0xbf,0x02,0xcc,
		0x02,0xdd,0x03,0x04,0x03,0x0c,0x03,0x0f,0x03,0x12,0x03,0x1b,0x03,0x24,0x03,0x28,
		0x03,0x2e,0x03,0x31,0x03,0x36,0x03,0x75,0x1e,0x09,0x1e,0x0f,0x1e,0x17,0x1e,0x1d,
		0x1e,0x21,0x1e,0x25,0x1e,0x2b,0x1e,0x2f,0x1e,0x37,0x1e,0x3b,0x1e,0x49,0x1e,0x53,
		0x1e,0x5b,0x1e,0x69,0x1e,0x6f,0x1e,0x7b,0x1e,0x85,0x1e,0x8f,0x1e,0x93,0x1e,0x97,
		0x1e,0x9e,0x1e,0xf9,0x20,0x0b,0x20,0x10,0x20,0x15,0x20,0x1a,0x20,0x1e,0x20,0x22,
		0x20,0x26,0x20,0x30,0x20,0x33,0x20,0x3a,0x20,0x44,0x20,0x70,0x20,0x79,0x20,0x7b,
		0x20,0x7f,0x20,0x89,0x20,0xa1,0x20,0xa4,0x20,0xa7,0x20,0xa9,0x20,0xad,0x20,0xb2,
		0x20,0xb5,0x20,0xba,0x20,0xbd,0x21,0x13,0x21,0x16,0x21,0x22,0x21,0x24,0x21,0x26,
		0x21,0x2e,0x21,0x99,0x21,0xea,0x22,0x02,0x22,0x06,0x22,0x08,0x22,0x0f,0x22,0x12,
		0x22,0x15,0x22,0x17,0x22,0x1a,0x22,0x1e,0x22,0x2b,0x22,0x48,0x22,0x60,0x22,0x65,
		0x22,0x95,0x23,0x02,0x23,0x18,0x23,0x27,0x23,0x2b,0x23,0x8b,0x23,0xce,0x24,0x23,
		0x25,0x94,0x25,0x9f,0x25,0xc7,0x25,0xcb,0x25,0xcf,0x26,0x3b,0x26,0x60,0x26,0x63,
		0x26,0x66,0x27,0x15,0x27,0x18,0x2b,0x07,0x2b,0x95,0x2e,0x12,0xff,0xfd,0xff,0xff,
		0x00,0x00,0x00,0x00,0x00,0x0d,0x00,0x20,0x00,0x30,0x00,0x3a,0x00,0xa0,0x01,0x34,
		0x01,0x4a,0x01,0x8f,0x01,0x92,0x01,0x98,0x01,0xa0,0x01,0xaf,0x01,0xb8,0x01,0xc7,
		0x01,0xe6,0x01,0xea,0x01,0xfa,0x02,0x2a,0x02,0x30,0x02,0x37,0x02,0x4d,0x02,0x59,
		0x02,0x7b,0x02,0x98,0x02,0x9a,0x02,0xb9,0x02,0xbe,0x02,0xc6,0x02,0xd8,0x03,0x00,
		0x03,0x06,0x03,0x0f,0x03,0x11,0x03,0x1b,0x03,0x23,0x03,0x26,0x03,0x2e,0x03,0x31,
		0x03,0x35,0x03,0x75,0x1e,0x08,0x1e,0x0c,0x1e,0x14,0x1e,0x1c,0x1e,0x20,0x1e,0x24,
		0x1e,0x2a,0x1e,0x2e,0x1e,0x36,0x1e,0x3a,0x1e,0x42,0x1e,0x4c,0x1e,0x5a,0x1e,0x5e,
		0x1e,0x6c,0x1e,0x78,0x1e,0x80,0x1e,0x8e,0x1e,0x92,0x1e,0x97,0x1e,0x9e,0x1e,0xa0,
		0x20,0x07,0x20,0x10,0x20,0x12,0x20,0x18,0x20,0x1c,0x20,0x20,0x20,0x26,0x20,0x30,
		0x20,0x32,0x20,0x39,0x20,0x44,0x20,0x70,0x20,0x74,0x20,0x7b,0x20,0x7f,0x20,0x80,
		0x20,0xa1,0x20,0xa3,0x20,0xa6,0x20,0xa9,0x20,0xab,0x20,0xb1,0x20,0xb5,0x20,0xb9,
		0x20,0xbc,0x21,0x13,0x21,0x16,0x21,0x22,0x21,0x24,0x21,0x26,0x21,0x2e,0x21,0x90,
		0x21,0xe6,0x22,0x02,0x22,0x05,0x22,0x08,0x22,0x0f,0x22,0x11,0x22,0x15,0x22,0x17,
		0x22,0x19,0x22,0x1e,0x22,0x2b,0x22,0x48,0x22,0x60,0x22,0x64,0x22,0x95,0x23,0x02,
		0x23,0x18,0x23,0x25,0x23,0x2b,0x23,0x8b,0x23,0xce,0x24,0x23,0x25,0x00,0x25,0x95,
		0x25,0xc6,0x25,0xca,0x25,0xcf,0x26,0x39,0x26,0x60,0x26,0x63,0x26,0x65,0x27,0x13,
		0x27,0x17,0x2b,0x05,0x2b,0x95,0x2e,0x12,0xff,0xfd,0xff,0xff,0x03,0xc1,0x02,0x43,
		0x00,0x00,0x01,0xa9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x23,0x00,0xc6,
		0xfe,0xca,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0xff,0x13,0xff,0x45,0xfe,0xd1,0xff,0x14,0xfe,0x6c,0xfe,0x8e,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x77,0x00,0x76,
		0x00,0x6e,0x00,0x67,0x00,0x66,0x00,0x61,0x00,0x5f,0x00,0x5c,0xff,0xf9,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0xe3,0x0d,0xe2,0x13,0x00,0x00,0x00,0x00,0xe2,0x27,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0xe1,0xf7,0xe2,0x56,0xe3,0x23,0xe2,0x08,0xe1,0xc9,
		0xe1,0x93,0xe1,0x93,0xe1,0xf0,0xe1,0x58,0xe1,0x65,0xe1,0xb2,0x00,0x00,0xe1,0xb9,
		0xe1,0xbc,0x00,0x00,0x00,0x00,0xe1,0x9c,0x00,0x00,0x00,0x00,0xe2,0x47,0xe2,0x46,
		0xe2,0x31,0xe0,0xb4,0xe1,0x58,0xe2,0x2f,0x00,0x00,0x00,0x00,0xe0,0x82,0x00,0x00,
		0xe0,0x62,0xe0,0x71,0x00,0x00,0xe0,0x54,0xe0,0x50,0x00,0x00,0xe0,0x5d,0xe0,0x52,
		0xe0,0x2f,0xe0,0x11,0x00,0x00,0xdf,0xf2,0xe0,0x5e,0xe0,0x4e,0x00,0x00,0xe0,0x38,
		0xdf,0xd4,0xdf,0x99,0xdf,0x3b,0x00,0x00,0xdd,0x19,0xdc,0xf8,0x00,0x00,0xdc,0xed,
		0xdd,0x08,0xdc,0xe4,0xdc,0xe2,0xdc,0xe1,0xdc,0x35,0xdc,0x34,0x00,0x00,0xd7,0x04,
		0xd4,0x13,0x03,0x6b,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x06,0x00,0x00,0x01,0x22,
		0x01,0xaa,0x02,0xcc,0x02,0xf4,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x56,0x03,0x58,
		0x03,0x5a,0x03,0x5c,0x03,0x60,0x03,0x62,0x03,0x64,0x03,0xa6,0x03,0xac,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xa6,0x03,0xac,0x03,0xae,
		0x03,0xba,0x03,0xc4,0x03,0xcc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xc6,0x03,0xc8,0x03,0xce,0x03,0xd4,
		0x03,0xd6,0x03,0xd8,0x03,0xda,0x03,0xdc,0x03,0xde,0x03,0xe0,0x03,0xe2,0x03,0xf0,
		0x03,0xfe,0x04,0x00,0x04,0x16,0x04,0x1c,0x04,0x22,0x04,0x2c,0x04,0x2e,0x00,0x00,
		0x00,0x00,0x04,0x2c,0x04,0xde,0x00,0x00,0x04,0xe4,0x04,0xea,0x04,0xee,0x04,0xf2,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xe0,0x00,0x00,0x00,0x00,0x04,0xde,0x04,0xe2,
		0x00,0x00,0x04,0xe2,0x04,0xe4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x04,0xda,0x04,0xec,0x00,0x00,0x04,0xf2,0x00,0x00,0x00,0x00,0x04,0xf0,
		0x00,0x00,0x00,0x00,0x04,0xee,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xe8,
		0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xe4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x04,0xe0,0x00,0x00,0x00,0x00,0x06,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x05,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x02,0x4c,0x02,0x1e,0x02,0x43,0x02,0x26,0x02,0x55,0x02,0x85,0x03,0x4e,0x02,0x44,
		0x02,0x2b,0x02,0x2c,0x02,0x24,0x02,0x6c,0x02,0x1a,0x02,0x31,0x02,0x19,0x02,0x27,
		0x02,0x1b,0x02,0x1c,0x02,0x73,0x02,0x70,0x02,0x72,0x02,0x20,0x03,0x4d,0x00,0x01,
		0x00,0x1c,0x00,0x1d,0x00,0x24,0x00,0x2a,0x00,0x42,0x00,0x43,0x00,0x4a,0x00,0x4f,
		0x00,0x5e,0x00,0x60,0x00,0x63,0x00,0x6d,0x00,0x6f,0x00,0x78,0x00,0x9b,0x00,0x9d,
		0x00,0x9e,0x00,0xa6,0x00,0xb3,0x00,0xba,0x00,0xd1,0x00,0xd2,0x00,0xd7,0x00,0xd8,
		0x00,0xe2,0x02,0x2f,0x02,0x28,0x02,0x30,0x02,0x7a,0x02,0x38,0x03,0x95,0x00,0xe8,
		0x01,0x03,0x01,0x05,0x01,0x0c,0x01,0x12,0x01,0x2c,0x01,0x2d,0x01,0x34,0x01,0x39,
		0x01,0x49,0x01,0x4c,0x01,0x4f,0x01,0x58,0x01,0x5a,0x01,0x63,0x01,0x86,0x01,0x88,
		0x01,0x89,0x01,0x93,0x01,0x9f,0x01,0xa7,0x01,0xbe,0x01,0xbf,0x01,0xc4,0x01,0xc5,
		0x01,0xcf,0x02,0x2d,0x03,0x57,0x02,0x2e,0x02,0x78,0x02,0x4d,0x02,0x1f,0x02,0x52,
		0x02,0x64,0x02,0x54,0x02,0x66,0x03,0x58,0x03,0x50,0x03,0x93,0x03,0x51,0x01,0xd5,
		0x02,0x3f,0x02,0x79,0x02,0x32,0x03,0x52,0x03,0x9d,0x03,0x54,0x02,0x76,0x02,0x05,
		0x02,0x06,0x03,0x96,0x02,0x83,0x03,0x4f,0x02,0x22,0x03,0x9e,0x02,0x04,0x01,0xd6,
		0x02,0x40,0x02,0x0f,0x02,0x0e,0x02,0x10,0x02,0x21,0x00,0x12,0x00,0x02,0x00,0x09,
		0x00,0x19,0x00,0x10,0x00,0x17,0x00,0x1a,0x00,0x20,0x00,0x39,0x00,0x2b,0x00,0x2f,
		0x00,0x36,0x00,0x58,0x00,0x50,0x00,0x52,0x00,0x54,0x00,0x25,0x00,0x77,0x00,0x86,
		0x00,0x79,0x00,0x7b,0x00,0x96,0x00,0x82,0x02,0x6e,0x00,0x94,0x00,0xc1,0x00,0xbb,
		0x00,0xbd,0x00,0xbf,0x00,0xd9,0x00,0x9c,0x01,0x9e,0x00,0xf9,0x00,0xe9,0x00,0xf0,
		0x01,0x00,0x00,0xf7,0x00,0xfe,0x01,0x01,0x01,0x08,0x01,0x21,0x01,0x13,0x01,0x17,
		0x01,0x1e,0x01,0x43,0x01,0x3b,0x01,0x3d,0x01,0x3f,0x01,0x0d,0x01,0x62,0x01,0x71,
		0x01,0x64,0x01,0x66,0x01,0x81,0x01,0x6d,0x02,0x6f,0x01,0x7f,0x01,0xae,0x01,0xa8,
		0x01,0xaa,0x01,0xac,0x01,0xc6,0x01,0x87,0x01,0xc8,0x00,0x15,0x00,0xfc,0x00,0x03,
		0x00,0xea,0x00,0x16,0x00,0xfd,0x00,0x1e,0x01,0x06,0x00,0x22,0x01,0x0a,0x00,0x23,
		0x01,0x0b,0x00,0x1f,0x01,0x07,0x00,0x26,0x01,0x0e,0x00,0x27,0x01,0x0f,0x00,0x3c,
		0x01,0x24,0x00,0x2c,0x01,0x14,0x00,0x37,0x01,0x1f,0x00,0x3f,0x01,0x27,0x00,0x2d,
		0x01,0x15,0x00,0x46,0x01,0x30,0x00,0x44,0x01,0x2e,0x00,0x48,0x01,0x32,0x00,0x47,
		0x01,0x31,0x00,0x4d,0x01,0x37,0x00,0x4b,0x01,0x35,0x00,0x5d,0x01,0x48,0x00,0x5b,
		0x01,0x46,0x00,0x51,0x01,0x3c,0x00,0x5c,0x01,0x47,0x00,0x56,0x01,0x3a,0x00,0x5f,
		0x01,0x4b,0x00,0x61,0x01,0x4d,0x01,0x4e,0x00,0x65,0x01,0x50,0x00,0x67,0x01,0x52,
		0x00,0x66,0x01,0x51,0x00,0x68,0x01,0x53,0x00,0x6c,0x01,0x57,0x00,0x70,0x01,0x5b,
		0x00,0x72,0x01,0x5d,0x00,0x71,0x01,0x5c,0x00,0x75,0x01,0x60,0x00,0x90,0x01,0x7b,
		0x00,0x7a,0x01,0x65,0x00,0x8e,0x01,0x79,0x00,0x9a,0x01,0x85,0x00,0x9f,0x01,0x8a,
		0x00,0xa1,0x01,0x8c,0x00,0xa0,0x01,0x8b,0x00,0xa7,0x01,0x94,0x00,0xac,0x01,0x99,
		0x00,0xab,0x01,0x98,0x00,0xa9,0x01,0x96,0x00,0xb6,0x01,0xa2,0x00,0xb5,0x01,0xa1,
		0x00,0xb4,0x01,0xa0,0x00,0xcf,0x01,0xbc,0x00,0xcb,0x01,0xb8,0x00,0xbc,0x01,0xa9,
		0x00,0xce,0x01,0xbb,0x00,0xc9,0x01,0xb6,0x00,0xcd,0x01,0xba,0x00,0xd4,0x01,0xc1,
		0x00,0xda,0x01,0xc7,0x00,0xdb,0x00,0xe3,0x01,0xd0,0x00,0xe5,0x01,0xd2,0x00,0xe4,
		0x01,0xd1,0x00,0x88,0x01,0x73,0x00,0xc3,0x01,0xb0,0x00,0x41,0x01,0x2b,0x00,0x64,
		0x00,0x6a,0x01,0x55,0x00,0x45,0x01,0x2f,0x00,0x93,0x01,0x7e,0x00,0x18,0x00,0xff,
		0x00,0x1b,0x01,0x02,0x00,0x95,0x01,0x80,0x00,0x0f,0x00,0xf6,0x00,0x14,0x00,0xfb,
		0x00,0x35,0x01,0x1d,0x00,0x3b,0x01,0x23,0x00,0x53,0x01,0x3e,0x00,0x5a,0x01,0x45,
		0x00,0x81,0x01,0x6c,0x00,0x8f,0x01,0x7a,0x00,0xa2,0x01,0x8d,0x00,0xa4,0x01,0x90,
		0x00,0xbe,0x01,0xab,0x00,0xca,0x01,0xb7,0x00,0xad,0x01,0x9a,0x00,0xb7,0x01,0xa3,
		0x00,0x83,0x01,0x6e,0x00,0x99,0x01,0x84,0x00,0x84,0x01,0x6f,0x00,0xe0,0x01,0xcd,
		0x03,0x74,0x03,0x71,0x03,0x70,0x03,0x6f,0x03,0x76,0x03,0x75,0x03,0x98,0x03,0x99,
		0x03,0x79,0x03,0x72,0x03,0x77,0x03,0x73,0x03,0x78,0x03,0x9a,0x03,0x94,0x03,0x9b,
		0x03,0x9f,0x03,0x9c,0x03,0x97,0x03,0x7c,0x03,0x7d,0x03,0x7f,0x03,0x83,0x03,0x84,
		0x03,0x81,0x03,0x7b,0x03,0x7a,0x03,0x85,0x03,0x82,0x03,0x7e,0x03,0x80,0x00,0x21,
		0x01,0x09,0x00,0x28,0x01,0x10,0x00,0x29,0x01,0x11,0x00,0x3e,0x01,0x26,0x00,0x3d,
		0x01,0x25,0x00,0x2e,0x01,0x16,0x00,0x49,0x01,0x33,0x00,0x4e,0x01,0x38,0x00,0x4c,
		0x01,0x36,0x00,0x55,0x01,0x40,0x00,0x69,0x01,0x54,0x00,0x6b,0x01,0x56,0x00,0x6e,
		0x01,0x59,0x00,0x73,0x01,0x5e,0x00,0x74,0x01,0x5f,0x00,0x76,0x01,0x61,0x00,0x97,
		0x01,0x82,0x00,0x98,0x01,0x83,0x00,0x92,0x01,0x7d,0x00,0x91,0x01,0x7c,0x00,0xa3,
		0x01,0x8e,0x00,0xa5,0x01,0x91,0x00,0xae,0x01,0x9b,0x00,0xaf,0x01,0x9c,0x00,0xa8,
		0x01,0x95,0x00,0xaa,0x01,0x97,0x00,0xb0,0x01,0x9d,0x00,0xb8,0x01,0xa5,0x00,0xb9,
		0x01,0xa6,0x00,0xd0,0x01,0xbd,0x00,0xcc,0x01,0xb9,0x00,0xd6,0x01,0xc3,0x00,0xd3,
		0x01,0xc0,0x00,0xd5,0x01,0xc2,0x00,0xdc,0x01,0xc9,0x00,0xe6,0x01,0xd3,0x00,0x11,
		0x00,0xf8,0x00,0x13,0x00,0xfa,0x00,0x0a,0x00,0xf1,0x00,0x0c,0x00,0xf3,0x00,0x0d,
		0x00,0xf4,0x00,0x0e,0x00,0xf5,0x00,0x0b,0x00,0xf2,0x00,0x04,0x00,0xeb,0x00,0x06,
		0x00,0xed,0x00,0x07,0x00,0xee,0x00,0x08,0x00,0xef,0x00,0x05,0x00,0xec,0x00,0x38,
		0x01,0x20,0x00,0x3a,0x01,0x22,0x00,0x40,0x01,0x29,0x00,0x30,0x01,0x18,0x00,0x32,
		0x01,0x1a,0x00,0x33,0x01,0x1b,0x00,0x34,0x01,0x1c,0x00,0x31,0x01,0x19,0x00,0x59,
		0x01,0x44,0x00,0x57,0x01,0x42,0x00,0x85,0x01,0x70,0x00,0x87,0x01,0x72,0x00,0x7c,
		0x01,0x67,0x00,0x7e,0x01,0x69,0x00,0x7f,0x01,0x6a,0x00,0x80,0x01,0x6b,0x00,0x7d,
		0x01,0x68,0x00,0x89,0x01,0x74,0x00,0x8b,0x01,0x76,0x00,0x8c,0x01,0x77,0x00,0x8d,
		0x01,0x78,0x00,0x8a,0x01,0x75,0x00,0xc0,0x01,0xad,0x00,0xc2,0x01,0xaf,0x00,0xc4,
		0x01,0xb1,0x00,0xc6,0x01,0xb3,0x00,0xc7,0x01,0xb4,0x00,0xc8,0x01,0xb5,0x00,0xc5,
		0x01,0xb2,0x00,0xde,0x01,0xcb,0x00,0xdd,0x01,0xca,0x00,0xdf,0x01,0xcc,0x00,0xe1,
		0x01,0xce,0x02,0x49,0x02,0x4b,0x02,0x4e,0x02,0x4a,0x02,0x4f,0x02,0x35,0x02,0x33,
		0x02,0x34,0x02,0x36,0x02,0x3d,0x02,0x3e,0x02,0x39,0x02,0x3b,0x02,0x3c,0x02,0x3a,
		0x03,0x59,0x03,0x5b,0x02,0x23,0x02,0x59,0x02,0x5c,0x02,0x56,0x02,0x57,0x02,0x5b,
		0x02,0x61,0x02,0x5a,0x02,0x63,0x02,0x5d,0x02,0x5e,0x02,0x62,0x02,0x90,0x02,0x8a,
		0x02,0x8c,0x02,0x8e,0x02,0x92,0x02,0x93,0x02,0x91,0x02,0x8b,0x02,0x8d,0x02,0x8f,
		0x02,0x97,0x02,0x94,0x02,0x95,0x02,0x96,0x03,0x61,0x02,0x7c,0x02,0x7f,0x02,0x81,
		0x02,0x6d,0x02,0x68,0x02,0x82,0x02,0x75,0x02,0x74,0x03,0x65,0x03,0x64,0x03,0x62,
		0x03,0x0a,0x02,0xe4,0x03,0x17,0x02,0xf1,0x03,0x10,0x02,0xea,0x03,0x11,0x02,0xeb,
		0x03,0x0d,0x02,0xe7,0x03,0x0e,0x02,0xe8,0x03,0x09,0x02,0xd8,0x02,0xd2,0x02,0xe3,
		0x03,0x08,0x02,0xd6,0x02,0xd0,0x02,0xe2,0x03,0x16,0x03,0x31,0x03,0x2b,0x02,0xf0,
		0x03,0x15,0x03,0x2f,0x03,0x29,0x02,0xee,0x03,0x1a,0x03,0x3d,0x03,0x2a,0x02,0xd3,
		0x03,0x3a,0x02,0xd9,0x03,0x30,0x02,0xf4,0x03,0x19,0x03,0x3c,0x03,0x28,0x02,0xd1,
		0x03,0x39,0x02,0xd7,0x03,0x2e,0x02,0xf3,0x03,0x07,0x02,0xf6,0x03,0x1c,0x02,0xd5,
		0x02,0xcf,0x03,0x1f,0x02,0xf9,0x02,0xe1,0x03,0x14,0x02,0xf7,0x03,0x1d,0x03,0x2d,
		0x03,0x27,0x03,0x20,0x02,0xfa,0x02,0xed,0x03,0x18,0x02,0xf8,0x03,0x1e,0x03,0x3b,
		0x03,0x26,0x02,0xd4,0x03,0x38,0x02,0xfc,0x03,0x22,0x02,0xf5,0x03,0x1b,0x02,0xda,
		0x03,0x2c,0x03,0x21,0x02,0xfb,0x02,0xf2,0x03,0x01,0x02,0xde,0x03,0x02,0x02,0xdf,
		0x02,0xc4,0x02,0xc8,0x02,0xdd,0x02,0xce,0x02,0xc3,0x02,0xdc,0x02,0xcd,0x02,0xc2,
		0x03,0x34,0x03,0x25,0x02,0xc7,0x03,0x33,0x03,0x24,0x02,0xc6,0x03,0x40,0x03,0x37,
		0x02,0xcb,0x03,0x3f,0x03,0x36,0x02,0xca,0x02,0xdb,0x02,0xcc,0x02,0xc1,0x03,0x32,
		0x03,0x23,0x02,0xc5,0x03,0x3e,0x03,0x35,0x02,0xc9,0x02,0xfe,0x02,0xfd,0x02,0xff,
		0x03,0x00,0x03,0x05,0x03,0x04,0x03,0x03,0x03,0x0b,0x03,0x12,0x03,0x0f,0x03,0x06,
		0x02,0xe5,0x02,0xec,0x02,0xe9,0x02,0xe0,0x03,0x0c,0x03,0x13,0x02,0xe6,0x02,0xef,
		0x02,0xa4,0x02,0x9c,0x02,0x9d,0x02,0x9e,0x02,0x9f,0x02,0xa0,0x02,0xa1,0x02,0xa2,
		0x02,0xa3,0x02,0xac,0x02,0xab,0x02,0xaa,0x02,0xa9,0x02,0xa8,0x02,0xa7,0x02,0xa6,
		0x02,0xad,0x02,0xb9,0x02,0xba,0x02,0xbb,0x02,0xa5,0x02,0xc0,0x02,0xbd,0x02,0x9b,
		0x02,0x98,0x02,0x9a,0x40,0x4a,0x99,0x98,0x97,0x96,0x87,0x86,0x85,0x84,0x83,0x82,
		0x81,0x80,0x7f,0x7e,0x7d,0x7c,0x7b,0x7a,0x79,0x78,0x77,0x76,0x75,0x74,0x73,0x72,
		0x71,0x70,0x6f,0x6e,0x6d,0x6c,0x6b,0x6a,0x69,0x68,0x67,0x66,0x65,0x64,0x63,0x62,
		0x61,0x60,0x5f,0x5e,0x5d,0x5c,0x5b,0x5a,0x59,0x58,0x57,0x56,0x55,0x54,0x53,0x51,
		0x50,0x4f,0x4e,0x4d,0x4c,0x4b,0x4a,0x49,0x48,0x47,0x46,0x28,0x1f,0x10,0x0a,0x09,
		0x2c,0x01,0xb1,0x0b,0x0a,0x43,0x23,0x43,0x65,0x0a,0x2d,0x2c,0x00,0xb1,0x0a,0x0b,
		0x43,0x23,0x43,0x0b,0x2d,0x2c,0x01,0xb0,0x06,0x43,0xb0,0x07,0x43,0x65,0x0a,0x2d,
		0x2c,0xb0,0x4f,0x2b,0x20,0xb0,0x40,0x51,0x58,0x21,0x4b,0x52,0x58,0x45,0x44,0x1b,
		0x21,0x21,0x59,0x1b,0x23,0x21,0xb0,0x40,0xb0,0x04,0x25,0x45,0xb0,0x04,0x25,0x45,
		0x61,0x64,0x8a,0x63,0x52,0x58,0x45,0x44,0x1b,0x21,0x21,0x59,0x59,0x2d,0x2c,0x00,
		0xb0,0x07,0x43,0xb0,0x06,0x43,0x0b,0x2d,0x2c,0x4b,0x53,0x23,0x4b,0x51,0x5a,0x58,
		0x20,0x45,0x8a,0x60,0x44,0x1b,0x21,0x21,0x59,0x2d,0x2c,0x4b,0x54,0x58,0x20,0x45,
		0x8a,0x60,0x44,0x1b,0x21,0x21,0x59,0x2d,0x2c,0x4b,0x53,0x23,0x4b,0x51,0x5a,0x58,
		0x38,0x1b,0x21,0x21,0x59,0x2d,0x2c,0x4b,0x54,0x58,0x38,0x1b,0x21,0x21,0x59,0x2d,
		0x2c,0xb0,0x02,0x43,0x54,0x58,0xb0,0x46,0x2b,0x1b,0x21,0x21,0x21,0x21,0x59,0x2d,
		0x2c,0xb0,0x02,0x43,0x54,0x58,0xb0,0x47,0x2b,0x1b,0x21,0x21,0x21,0x59,0x2d,0x2c,
		0xb0,0x02,0x43,0x54,0x58,0xb0,0x48,0x2b,0x1b,0x21,0x21,0x21,0x21,0x59,0x2d,0x2c,
		0xb0,0x02,0x43,0x54,0x58,0xb0,0x49,0x2b,0x1b,0x21,0x21,0x21,0x59,0x2d,0x2c,0x23,
		0x20,0xb0,0x00,0x50,0x8a,0x8a,0x64,0xb1,0x00,0x03,0x25,0x54,0x58,0xb0,0x40,0x1b,
		0xb1,0x01,0x03,0x25,0x54,0x58,0xb0,0x05,0x43,0x8b,0x59,0xb0,0x4f,0x2b,0x59,0x23,
		0xb0,0x62,0x2b,0x23,0x21,0x23,0x58,0x65,0x59,0x2d,0x2c,0xb1,0x08,0x00,0x0c,0x21,
		0x54,0x60,0x43,0x2d,0x2c,0xb1,0x0c,0x00,0x0c,0x21,0x54,0x60,0x43,0x2d,0x2c,0x01,
		0x20,0x47,0xb0,0x02,0x43,0x20,0xb8,0x10,0x00,0x62,0xb8,0x10,0x00,0x63,0x57,0x23,
		0xb8,0x01,0x00,0x62,0xb8,0x10,0x00,0x63,0x57,0x5a,0x58,0xb0,0x20,0x60,0x66,0x59,
		0x48,0x2d,0x2c,0xb1,0x00,0x02,0x25,0xb0,0x02,0x25,0xb0,0x02,0x25,0x53,0xb8,0x00,
		0x35,0x23,0x78,0xb0,0x02,0x25,0xb0,0x02,0x25,0x60,0xb0,0x20,0x63,0x20,0x20,0xb0,
		0x06,0x25,0x23,0x62,0x50,0x58,0x8a,0x21,0xb0,0x01,0x60,0x23,0x1b,0x20,0x20,0xb0,
		0x06,0x25,0x23,0x62,0x52,0x58,0x23,0x21,0xb0,0x01,0x61,0x1b,0x8a,0x21,0x23,0x21,
		0x20,0x59,0x59,0xb8,0xff,0xc1,0x1c,0x60,0xb0,0x20,0x63,0x23,0x21,0x2d,0x2c,0xb1,
		0x02,0x00,0x42,0xb1,0x23,0x01,0x88,0x51,0xb1,0x40,0x01,0x88,0x53,0x5a,0x58,0xb8,
		0x10,0x00,0xb0,0x20,0x88,0x54,0x58,0xb2,0x02,0x01,0x02,0x43,0x60,0x42,0x59,0xb1,
		0x24,0x01,0x88,0x51,0x58,0xb8,0x20,0x00,0xb0,0x40,0x88,0x54,0x58,0xb2,0x02,0x02,
		0x02,0x43,0x60,0x42,0xb1,0x24,0x01,0x88,0x54,0x58,0xb2,0x02,0x20,0x02,0x43,0x60,
		0x42,0x00,0x4b,0x01,0x4b,0x52,0x58,0xb2,0x02,0x08,0x02,0x43,0x60,0x42,0x59,0x1b,
		0xb8,0x40,0x00,0xb0,0x80,0x88,0x54,0x58,0xb2,0x02,0x04,0x02,0x43,0x60,0x42,0x59,
		0xb8,0x40,0x00,0xb0,0x80,0x63,0xb8,0x01,0x00,0x88,0x54,0x58,0xb2,0x02,0x08,0x02,
		0x43,0x60,0x42,0x59,0xb9,0x40,0x00,0x01,0x00,0x63,0xb8,0x02,0x00,0x88,0x54,0x58,
		0xb2,0x02,0x10,0x02,0x43,0x60,0x42,0x59,0xb1,0x26,0x01,0x88,0x51,0x58,0xb9,0x40,
		0x00,0x02,0x00,0x63,0xb8,0x04,0x00,0x88,0x54,0x58,0xb2,0x02,0x40,0x02,0x43,0x60,
		0x42,0x59,0xb9,0x40,0x00,0x04,0x00,0x63,0xb8,0x08,0x00,0x88,0x54,0x58,0xb2,0x02,
		0x80,0x02,0x43,0x60,0x42,0x59,0xb1,0x28,0x01,0x88,0x51,0x58,0xb9,0x40,0x00,0x08,
		0x00,0x63,0xb8,0x10,0x00,0x88,0x54,0x58,0xb9,0x00,0x02,0x01,0x00,0xb0,0x02,0x43,
		0x60,0x42,0x59,0x59,0x59,0x59,0x59,0x59,0x59,0xb1,0x00,0x02,0x43,0x54,0x58,0x40,
		0x0a,0x05,0x40,0x08,0x40,0x09,0x40,0x0c,0x02,0x0d,0x02,0x1b,0xb1,0x01,0x02,0x43,
		0x54,0x58,0xb2,0x05,0x40,0x08,0xba,0x01,0x00,0x00,0x09,0x01,0x00,0xb3,0x0c,0x01,
		0x0d,0x01,0x1b,0xb1,0x80,0x02,0x43,0x52,0x58,0xb2,0x05,0x40,0x08,0xb8,0x01,0x80,
		0xb1,0x09,0x40,0x1b,0xb8,0x01,0x00,0xb0,0x02,0x43,0x52,0x58,0xb2,0x05,0x40,0x08,
		0xba,0x01,0x80,0x00,0x09,0x01,0x40,0x1b,0xb8,0x01,0x80,0xb0,0x02,0x43,0x52,0x58,
		0xb2,0x05,0x40,0x08,0xb8,0x02,0x00,0xb1,0x09,0x40,0x1b,0xb2,0x05,0x40,0x08,0xba,
		0x01,0x00,0x00,0x09,0x01,0x00,0x59,0x59,0x59,0xb8,0x40,0x00,0xb0,0x80,0x88,0x55,
		0xb9,0x40,0x00,0x02,0x00,0x63,0xb8,0x04,0x00,0x88,0x55,0x5a,0x58,0xb3,0x0c,0x00,
		0x0d,0x01,0x1b,0xb3,0x0c,0x00,0x0d,0x01,0x59,0x59,0x59,0x42,0x42,0x42,0x42,0x42,
		0x2d,0x2c,0x45,0xb1,0x02,0x4e,0x2b,0x23,0xb0,0x4f,0x2b,0x20,0xb0,0x40,0x51,0x58,
		0x21,0x4b,0x51,0x58,0xb0,0x02,0x25,0x45,0xb1,0x01,0x4e,0x2b,0x60,0x59,0x1b,0x23,
		0x4b,0x51,0x58,0xb0,0x03,0x25,0x45,0x20,0x64,0x8a,0x63,0xb0,0x40,0x53,0x58,0xb1,
		0x02,0x4e,0x2b,0x60,0x1b,0x21,0x59,0x1b,0x21,0x59,0x59,0x44,0x2d,0x2c,0x20,0xb0,
		0x00,0x50,0x20,0x58,0x23,0x65,0x1b,0x23,0x59,0xb1,0x14,0x14,0x8a,0x70,0x45,0xb1,
		0x10,0x10,0x43,0x4b,0x8a,0x43,0x51,0x5a,0x58,0xb0,0x40,0x1b,0xb0,0x4f,0x2b,0x59,
		0x23,0xb1,0x61,0x06,0x26,0x60,0x2b,0x8a,0x58,0xb0,0x05,0x43,0x8b,0x59,0x23,0x58,
		0x65,0x59,0x23,0x10,0x3a,0x2d,0x2c,0xb0,0x03,0x25,0x49,0x63,0x23,0x46,0x60,0xb0,
		0x4f,0x2b,0x23,0xb0,0x04,0x25,0xb0,0x04,0x25,0x49,0xb0,0x03,0x25,0x63,0x56,0x20,
		0x60,0xb0,0x62,0x60,0x2b,0xb0,0x03,0x25,0x20,0x10,0x46,0x8a,0x46,0x60,0xb0,0x20,
		0x63,0x61,0x3a,0x2d,0x2c,0xb0,0x00,0x16,0xb1,0x02,0x03,0x25,0xb1,0x01,0x04,0x25,
		0x01,0x3e,0x00,0x3e,0xb1,0x01,0x02,0x06,0x0c,0xb0,0x0a,0x23,0x65,0x42,0xb0,0x0b,
		0x23,0x42,0xb1,0x02,0x03,0x25,0xb1,0x01,0x04,0x25,0x01,0x3f,0x00,0x3f,0xb1,0x01,
		0x02,0x06,0x0c,0xb0,0x06,0x23,0x65,0x42,0xb0,0x07,0x23,0x42,0xb0,0x01,0x16,0xb1,
		0x00,0x02,0x43,0x54,0x58,0x45,0x23,0x45,0x20,0x18,0x69,0x8a,0x63,0x23,0x62,0x20,
		0x20,0xb0,0x40,0x50,0x58,0x67,0x1b,0x66,0x59,0x61,0xb0,0x20,0x63,0xb0,0x40,0x23,
		0x61,0xb0,0x04,0x23,0x42,0x1b,0xb1,0x04,0x00,0x42,0x21,0x21,0x59,0x18,0x01,0x2d,
		0x2c,0x20,0x45,0xb1,0x00,0x4e,0x2b,0x44,0x2d,0x2c,0x4b,0x51,0xb1,0x40,0x4f,0x2b,
		0x50,0x5b,0x58,0x20,0x45,0xb1,0x01,0x4e,0x2b,0x20,0x8a,0x8a,0x44,0x20,0xb1,0x40,
		0x04,0x26,0x61,0x63,0x61,0xb1,0x01,0x4e,0x2b,0x44,0x21,0x1b,0x23,0x21,0x8a,0x45,
		0xb1,0x01,0x4e,0x2b,0x20,0x8a,0x23,0x44,0x44,0x59,0x2d,0x2c,0x4b,0x51,0xb1,0x40,
		0x4f,0x2b,0x50,0x5b,0x58,0x45,0x20,0x8a,0xb0,0x40,0x61,0x63,0x60,0x1b,0x23,0x21,
		0x45,0x59,0xb1,0x01,0x4e,0x2b,0x44,0x2d,0x2c,0x23,0x45,0x20,0x8a,0x45,0x23,0x61,
		0x20,0x64,0xb0,0x40,0x51,0xb0,0x04,0x25,0x20,0xb0,0x00,0x53,0x23,0xb0,0x40,0x51,
		0x5a,0x5a,0xb1,0x40,0x4f,0x2b,0x54,0x5a,0x58,0x8a,0x0c,0x64,0x23,0x64,0x23,0x53,
		0x58,0xb1,0x40,0x40,0x8a,0x61,0x20,0x63,0x61,0x1b,0x20,0x63,0x59,0x1b,0x8a,0x59,
		0x63,0xb1,0x02,0x4e,0x2b,0x60,0x44,0x2d,0x2c,0x01,0x2d,0x2c,0x00,0x2d,0x2c,0x05,
		0xb1,0x0b,0x0a,0x43,0x23,0x43,0x65,0x0a,0x2d,0x2c,0xb1,0x0a,0x0b,0x43,0x23,0x43,
		0x0b,0x02,0x2d,0x2c,0xb0,0x02,0x25,0x63,0x66,0xb0,0x02,0x25,0xb8,0x20,0x00,0x62,
		0x60,0x23,0x62,0x2d,0x2c,0xb0,0x02,0x25,0x63,0xb0,0x20,0x60,0x66,0xb0,0x02,0x25,
		0xb8,0x20,0x00,0x62,0x60,0x23,0x62,0x2d,0x2c,0xb0,0x02,0x25,0x63,0x67,0xb0,0x02,
		0x25,0xb8,0x20,0x00,0x62,0x60,0x23,0x62,0x2d,0x2c,0xb0,0x02,0x25,0x63,0x66,0xb0,
		0x20,0x60,0xb0,0x02,0x25,0xb8,0x20,0x00,0x62,0x60,0x23,0x62,0x2d,0x2c,0x23,0x4a,
		0xb1,0x02,0x4e,0x2b,0x2d,0x2c,0x23,0x4a,0xb1,0x01,0x4e,0x2b,0x2d,0x2c,0x23,0x8a,
		0x4a,0x23,0x45,0x64,0xb0,0x02,0x25,0x64,0xb0,0x02,0x25,0x61,0x64,0xb0,0x03,0x43,
		0x52,0x58,0x21,0x20,0x64,0x59,0xb1,0x02,0x4e,0x2b,0x23,0xb0,0x00,0x50,0x58,0x65,
		0x59,0x2d,0x2c,0x23,0x8a,0x4a,0x23,0x45,0x64,0xb0,0x02,0x25,0x64,0xb0,0x02,0x25,
		0x61,0x64,0xb0,0x03,0x43,0x52,0x58,0x21,0x20,0x64,0x59,0xb1,0x01,0x4e,0x2b,0x23,
		0xb0,0x00,0x50,0x58,0x65,0x59,0x2d,0x2c,0x20,0xb0,0x03,0x25,0x4a,0xb1,0x02,0x4e,
		0x2b,0x8a,0x10,0x3b,0x2d,0x2c,0x20,0xb0,0x03,0x25,0x4a,0xb1,0x01,0x4e,0x2b,0x8a,
		0x10,0x3b,0x2d,0x2c,0xb0,0x03,0x25,0xb0,0x03,0x25,0x8a,0xb0,0x67,0x2b,0x8a,0x10,
		0x3b,0x2d,0x2c,0xb0,0x03,0x25,0xb0,0x03,0x25,0x8a,0xb0,0x68,0x2b,0x8a,0x10,0x3b,
		0x2d,0x2c,0xb0,0x03,0x25,0x46,0xb0,0x03,0x25,0x46,0x60,0xb0,0x04,0x25,0x2e,0xb0,
		0x04,0x25,0xb0,0x04,0x25,0xb0,0x04,0x26,0x20,0xb0,0x00,0x50,0x58,0x21,0xb0,0x6a,
		0x1b,0xb0,0x6c,0x59,0x2b,0xb0,0x03,0x25,0x46,0xb0,0x03,0x25,0x46,0x60,0x61,0xb0,
		0x80,0x62,0x20,0x8a,0x20,0x10,0x23,0x3a,0x23,0x20,0x10,0x23,0x3a,0x2d,0x2c,0xb0,
		0x03,0x25,0x47,0xb0,0x03,0x25,0x47,0x60,0xb0,0x05,0x25,0x47,0xb0,0x80,0x63,0x61,
		0xb0,0x02,0x25,0xb0,0x06,0x25,0x49,0x63,0x23,0xb0,0x05,0x25,0x4a,0xb0,0x80,0x63,
		0x20,0x58,0x62,0x1b,0x21,0x59,0xb0,0x04,0x26,0x46,0x60,0x8a,0x46,0x8a,0x46,0x60,
		0xb0,0x20,0x63,0x61,0x2d,0x2c,0xb0,0x04,0x26,0xb0,0x04,0x25,0xb0,0x04,0x25,0xb0,
		0x04,0x26,0xb0,0x6e,0x2b,0x20,0x8a,0x20,0x10,0x23,0x3a,0x23,0x20,0x10,0x23,0x3a,
		0x2d,0x2c,0x23,0x20,0xb0,0x01,0x54,0x58,0x21,0xb0,0x02,0x25,0xb1,0x02,0x4e,0x2b,
		0xb0,0x80,0x50,0x20,0x60,0x59,0x20,0x60,0x60,0x20,0xb0,0x01,0x51,0x58,0x21,0x21,
		0x1b,0x20,0xb0,0x05,0x51,0x58,0x21,0x20,0x66,0x61,0xb0,0x40,0x23,0x61,0xb1,0x00,
		0x03,0x25,0x50,0xb0,0x03,0x25,0xb0,0x03,0x25,0x50,0x5a,0x58,0x20,0xb0,0x03,0x25,
		0x61,0x8a,0x53,0x58,0x21,0xb0,0x00,0x59,0x1b,0x21,0x59,0x1b,0xb0,0x07,0x54,0x58,
		0x20,0x66,0x61,0x65,0x23,0x21,0x1b,0x21,0x21,0xb0,0x00,0x59,0x59,0x59,0xb1,0x02,
		0x4e,0x2b,0x2d,0x2c,0xb0,0x02,0x25,0xb0,0x04,0x25,0x4a,0xb0,0x00,0x53,0x58,0xb0,
		0x00,0x1b,0x8a,0x8a,0x23,0x8a,0xb0,0x01,0x59,0xb0,0x04,0x25,0x46,0x20,0x66,0x61,
		0x20,0xb0,0x05,0x26,0xb0,0x06,0x26,0x49,0xb0,0x05,0x26,0xb0,0x05,0x26,0xb0,0x70,
		0x2b,0x23,0x61,0x65,0xb0,0x20,0x60,0x20,0x66,0x61,0xb0,0x20,0x61,0x65,0x2d,0x2c,
		0xb0,0x02,0x25,0x46,0x20,0x8a,0x20,0xb0,0x00,0x50,0x58,0x21,0xb1,0x02,0x4e,0x2b,
		0x1b,0x45,0x23,0x21,0x59,0x61,0x65,0xb0,0x02,0x25,0x10,0x3b,0x2d,0x2c,0xb0,0x04,
		0x26,0x20,0xb8,0x02,0x00,0x62,0x20,0xb8,0x02,0x00,0x63,0x8a,0x23,0x61,0x20,0xb0,
		0x5d,0x60,0x2b,0xb0,0x05,0x25,0x11,0x8a,0x12,0x8a,0x20,0x39,0x8a,0x58,0xb9,0x00,
		0x5d,0x10,0x00,0xb0,0x04,0x26,0x63,0x56,0x60,0x2b,0x23,0x21,0x20,0x10,0x20,0x46,
		0x20,0xb1,0x02,0x4e,0x2b,0x23,0x61,0x1b,0x23,0x21,0x20,0x8a,0x20,0x10,0x49,0xb1,
		0x02,0x4e,0x2b,0x59,0x3b,0x2d,0x2c,0xb9,0x00,0x5d,0x10,0x00,0xb0,0x09,0x25,0x63,
		0x56,0x60,0x2b,0xb0,0x05,0x25,0xb0,0x05,0x25,0xb0,0x05,0x26,0xb0,0x6d,0x2b,0xb1,
		0x5d,0x07,0x25,0x60,0x2b,0xb0,0x05,0x25,0xb0,0x05,0x25,0xb0,0x05,0x25,0xb0,0x05,
		0x25,0xb0,0x6f,0x2b,0xb9,0x00,0x5d,0x10,0x00,0xb0,0x08,0x26,0x63,0x56,0x60,0x2b,
		0x20,0xb0,0x00,0x52,0x58,0xb0,0x50,0x2b,0xb0,0x05,0x25,0xb0,0x05,0x25,0xb0,0x07,
		0x25,0xb0,0x07,0x25,0xb0,0x05,0x25,0xb0,0x71,0x2b,0xb0,0x02,0x17,0x38,0xb0,0x00,
		0x52,0xb0,0x02,0x25,0xb0,0x01,0x52,0x5a,0x58,0xb0,0x04,0x25,0xb0,0x06,0x25,0x49,
		0xb0,0x03,0x25,0xb0,0x05,0x25,0x49,0x60,0x20,0xb0,0x40,0x52,0x58,0x21,0x1b,0xb0,
		0x00,0x52,0x58,0x20,0xb0,0x02,0x54,0x58,0xb0,0x04,0x25,0xb0,0x04,0x25,0xb0,0x07,
		0x25,0xb0,0x07,0x25,0x49,0xb0,0x02,0x17,0x38,0x1b,0xb0,0x04,0x25,0xb0,0x04,0x25,
		0xb0,0x04,0x25,0xb0,0x06,0x25,0x49,0xb0,0x02,0x17,0x38,0x59,0x59,0x59,0x59,0x59,
		0x21,0x21,0x21,0x21,0x21,0x2d,0x2c,0xb9,0x00,0x5d,0x10,0x00,0xb0,0x0b,0x25,0x63,
		0x56,0x60,0x2b,0xb0,0x07,0x25,0xb0,0x07,0x25,0xb0,0x06,0x25,0xb0,0x06,0x25,0xb0,
		0x0c,0x25,0xb0,0x0c,0x25,0xb0,0x09,0x25,0xb0,0x08,0x25,0xb0,0x6e,0x2b,0xb0,0x04,
		0x17,0x38,0xb0,0x07,0x25,0xb0,0x07,0x25,0xb0,0x07,0x26,0xb0,0x6d,0x2b,0xb0,0x04,
		0x25,0xb0,0x04,0x25,0xb0,0x04,0x26,0xb0,0x6d,0x2b,0xb0,0x50,0x2b,0xb0,0x06,0x25,
		0xb0,0x06,0x25,0xb0,0x03,0x25,0xb0,0x71,0x2b,0xb0,0x05,0x25,0xb0,0x05,0x25,0xb0,
		0x03,0x25,0xb0,0x02,0x17,0x38,0x20,0xb0,0x06,0x25,0xb0,0x06,0x25,0xb0,0x05,0x25,
		0xb0,0x71,0x2b,0x60,0xb0,0x06,0x25,0xb0,0x06,0x25,0xb0,0x04,0x25,0x65,0xb0,0x02,
		0x17,0x38,0xb0,0x02,0x25,0xb0,0x02,0x25,0x60,0x20,0xb0,0x40,0x53,0x58,0x21,0xb0,
		0x40,0x61,0x23,0xb0,0x40,0x61,0x23,0x1b,0xb8,0xff,0xc0,0x50,0x58,0xb0,0x40,0x60,
		0x23,0xb0,0x40,0x60,0x23,0x59,0x59,0xb0,0x08,0x25,0xb0,0x08,0x25,0xb0,0x04,0x26,
		0xb0,0x02,0x17,0x38,0xb0,0x05,0x25,0xb0,0x05,0x25,0x8a,0xb0,0x02,0x17,0x38,0x20,
		0xb0,0x00,0x52,0x58,0xb0,0x06,0x25,0xb0,0x08,0x25,0x49,0xb0,0x03,0x25,0xb0,0x05,
		0x25,0x49,0x60,0x20,0xb0,0x40,0x52,0x58,0x21,0x1b,0xb0,0x00,0x52,0x58,0xb0,0x06,
		0x25,0xb0,0x06,0x25,0xb0,0x06,0x25,0xb0,0x06,0x25,0xb0,0x0b,0x25,0xb0,0x0b,0x25,
		0x49,0xb0,0x04,0x17,0x38,0xb0,0x06,0x25,0xb0,0x06,0x25,0xb0,0x06,0x25,0xb0,0x06,
		0x25,0xb0,0x0a,0x25,0xb0,0x0a,0x25,0xb0,0x07,0x25,0xb0,0x71,0x2b,0xb0,0x04,0x17,
		0x38,0xb0,0x04,0x25,0xb0,0x04,0x25,0xb0,0x05,0x25,0xb0,0x07,0x25,0xb0,0x05,0x25,
		0xb0,0x71,0x2b,0xb0,0x02,0x17,0x38,0x1b,0xb0,0x04,0x25,0xb0,0x04,0x25,0xb8,0xff,
		0xc0,0xb0,0x02,0x17,0x38,0x59,0x59,0x59,0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x21,
		0x2d,0x2c,0xb0,0x04,0x25,0xb0,0x03,0x25,0x87,0xb0,0x03,0x25,0xb0,0x03,0x25,0x8a,
		0x20,0xb0,0x00,0x50,0x58,0x21,0xb0,0x65,0x1b,0xb0,0x68,0x59,0x2b,0x64,0xb0,0x04,
		0x25,0xb0,0x04,0x25,0x06,0xb0,0x04,0x25,0xb0,0x04,0x25,0x49,0x20,0x20,0x63,0xb0,
		0x03,0x25,0x20,0x63,0x51,0xb1,0x00,0x03,0x25,0x54,0x5b,0x58,0x21,0x21,0x23,0x21,
		0x07,0x1b,0x20,0x63,0xb0,0x02,0x25,0x20,0x63,0x61,0x20,0xb0,0x53,0x2b,0x8a,0x63,
		0xb0,0x05,0x25,0xb0,0x05,0x25,0x87,0xb0,0x04,0x25,0xb0,0x04,0x26,0x4a,0xb0,0x00,
		0x50,0x58,0x65,0x59,0xb0,0x04,0x26,0x20,0x01,0x46,0x23,0x00,0x46,0xb0,0x05,0x26,
		0x20,0x01,0x46,0x23,0x00,0x46,0xb0,0x00,0x16,0x00,0xb0,0x00,0x23,0x48,0x01,0xb0,
		0x00,0x23,0x48,0x00,0x20,0xb0,0x01,0x23,0x48,0xb0,0x02,0x23,0x48,0x01,0x20,0xb0,
		0x01,0x23,0x48,0xb0,0x02,0x23,0x48,0x23,0xb2,0x02,0x00,0x01,0x08,0x23,0x38,0xb2,
		0x02,0x00,0x01,0x09,0x23,0x38,0xb1,0x02,0x01,0x07,0xb0,0x01,0x16,0x59,0x2d,0x2c,
		0x23,0x10,0x0d,0x0c,0x8a,0x63,0x23,0x8a,0x63,0x60,0x64,0xb9,0x40,0x00,0x04,0x00,
		0x63,0x50,0x58,0xb0,0x00,0x38,0x1b,0x3c,0x59,0x2d,0x2c,0xb0,0x06,0x25,0xb0,0x09,
		0x25,0xb0,0x09,0x25,0xb0,0x07,0x26,0xb0,0x76,0x2b,0x23,0xb0,0x00,0x54,0x58,0x05,
		0x1b,0x04,0x59,0xb0,0x04,0x25,0xb0,0x06,0x26,0xb0,0x77,0x2b,0xb0,0x05,0x25,0xb0,
		0x05,0x26,0xb0,0x05,0x25,0xb0,0x05,0x26,0xb0,0x76,0x2b,0xb0,0x00,0x54,0x58,0x05,
		0x1b,0x04,0x59,0xb0,0x77,0x2b,0x2d,0x2c,0xb0,0x07,0x25,0xb0,0x0a,0x25,0xb0,0x0a,
		0x25,0xb0,0x08,0x26,0xb0,0x76,0x2b,0x8a,0xb0,0x00,0x54,0x58,0x05,0x1b,0x04,0x59,
		0xb0,0x05,0x25,0xb0,0x07,0x26,0xb0,0x77,0x2b,0xb0,0x06,0x25,0xb0,0x06,0x26,0xb0,
		0x06,0x25,0xb0,0x06,0x26,0xb0,0x76,0x2b,0x08,0xb0,0x77,0x2b,0x2d,0x2c,0xb0,0x07,
		0x25,0xb0,0x0a,0x25,0xb0,0x0a,0x25,0xb0,0x08,0x26,0xb0,0x76,0x2b,0x8a,0x8a,0x08,
		0xb0,0x04,0x25,0xb0,0x06,0x26,0xb0,0x77,0x2b,0xb0,0x05,0x25,0xb0,0x05,0x26,0xb0,
		0x05,0x25,0xb0,0x05,0x26,0xb0,0x76,0x2b,0xb0,0x00,0x54,0x58,0x05,0x1b,0x04,0x59,
		0xb0,0x77,0x2b,0x2d,0x2c,0xb0,0x08,0x25,0xb0,0x0b,0x25,0xb0,0x0b,0x25,0xb0,0x09,
		0x26,0xb0,0x76,0x2b,0xb0,0x04,0x26,0xb0,0x04,0x26,0x08,0xb0,0x05,0x25,0xb0,0x07,
		0x26,0xb0,0x77,0x2b,0xb0,0x06,0x25,0xb0,0x06,0x26,0xb0,0x06,0x25,0xb0,0x06,0x26,
		0xb0,0x76,0x2b,0x08,0xb0,0x77,0x2b,0x2d,0x2c,0x03,0xb0,0x03,0x25,0xb0,0x03,0x25,
		0x4a,0xb0,0x04,0x25,0xb0,0x03,0x25,0x4a,0x02,0xb0,0x05,0x25,0xb0,0x05,0x26,0x4a,
		0xb0,0x05,0x26,0xb0,0x05,0x26,0x4a,0xb0,0x04,0x26,0x63,0x8a,0x8a,0x63,0x61,0x2d,
		0x2c,0xb1,0x5d,0x0e,0x25,0x60,0x2b,0xb0,0x0c,0x26,0x11,0xb0,0x05,0x26,0x12,0xb0,
		0x0a,0x25,0x39,0xb0,0x07,0x25,0x39,0xb0,0x0a,0x25,0xb0,0x0a,0x25,0xb0,0x09,0x25,
		0xb0,0x7c,0x2b,0xb0,0x00,0x50,0xb0,0x0b,0x25,0xb0,0x08,0x25,0xb0,0x0a,0x25,0xb0,
		0x7c,0x2b,0xb0,0x00,0x50,0x54,0x58,0xb0,0x07,0x25,0xb0,0x0b,0x25,0x87,0xb0,0x04,
		0x25,0xb0,0x04,0x25,0x0b,0xb0,0x0a,0x25,0x10,0xb0,0x09,0x25,0xc1,0xb0,0x02,0x25,
		0xb0,0x02,0x25,0x0b,0xb0,0x07,0x25,0x10,0xb0,0x06,0x25,0xc1,0x1b,0xb0,0x07,0x25,
		0xb0,0x0b,0x25,0xb0,0x0b,0x25,0xb8,0xff,0xff,0xb0,0x76,0x2b,0xb0,0x04,0x25,0xb0,
		0x04,0x25,0x0b,0xb0,0x07,0x25,0xb0,0x0a,0x25,0xb0,0x77,0x2b,0xb0,0x0a,0x25,0xb0,
		0x08,0x25,0xb0,0x08,0x25,0xb8,0xff,0xff,0xb0,0x76,0x2b,0xb0,0x02,0x25,0xb0,0x02,
		0x25,0x0b,0xb0,0x0a,0x25,0xb0,0x07,0x25,0xb0,0x77,0x2b,0x59,0xb0,0x0a,0x25,0x46,
		0xb0,0x0a,0x25,0x46,0x60,0xb0,0x08,0x25,0x46,0xb0,0x08,0x25,0x46,0x60,0xb0,0x06,
		0x25,0xb0,0x06,0x25,0x0b,0xb0,0x0c,0x25,0xb0,0x0c,0x25,0xb0,0x0c,0x26,0x20,0xb0,
		0x00,0x50,0x58,0x21,0xb0,0x6a,0x1b,0xb0,0x6c,0x59,0x2b,0xb0,0x04,0x25,0xb0,0x04,
		0x25,0x0b,0xb0,0x09,0x25,0xb0,0x09,0x25,0xb0,0x09,0x26,0x20,0xb0,0x00,0x50,0x58,
		0x21,0xb0,0x6a,0x1b,0xb0,0x6c,0x59,0x2b,0x23,0xb0,0x0a,0x25,0x46,0xb0,0x0a,0x25,
		0x46,0x60,0x61,0xb0,0x20,0x63,0x23,0xb0,0x08,0x25,0x46,0xb0,0x08,0x25,0x46,0x60,
		0x61,0xb0,0x20,0x63,0xb1,0x01,0x0c,0x25,0x54,0x58,0x04,0x1b,0x05,0x59,0xb0,0x0a,
		0x26,0x20,0x10,0xb0,0x03,0x25,0x3a,0xb0,0x06,0x26,0xb0,0x06,0x26,0x0b,0xb0,0x07,
		0x26,0x20,0x10,0x8a,0x3a,0xb1,0x01,0x07,0x26,0x54,0x58,0x04,0x1b,0x05,0x59,0xb0,
		0x05,0x26,0x20,0x10,0xb0,0x02,0x25,0x3a,0x8a,0x8a,0x0b,0x23,0x20,0x10,0x23,0x3a,
		0x2d,0x2c,0x23,0xb0,0x01,0x54,0x58,0xb9,0x00,0x00,0x40,0x00,0x1b,0xb8,0x40,0x00,
		0xb0,0x00,0x59,0x8a,0xb0,0x01,0x54,0x58,0xb9,0x00,0x00,0x40,0x00,0x1b,0xb8,0x40,
		0x00,0xb0,0x00,0x59,0xb0,0x7d,0x2b,0x2d,0x2c,0x8a,0x8a,0x08,0x0d,0x8a,0xb0,0x01,
		0x54,0x58,0xb9,0x00,0x00,0x40,0x00,0x1b,0xb8,0x40,0x00,0xb0,0x00,0x59,0xb0,0x7d,
		0x2b,0x2d,0x2c,0x08,0xb0,0x01,0x54,0x58,0xb9,0x00,0x00,0x40,0x00,0x1b,0xb8,0x40,
		0x00,0xb0,0x00,0x59,0x0d,0xb0,0x7d,0x2b,0x2d,0x2c,0xb0,0x04,0x26,0xb0,0x04,0x26,
		0x08,0x0d,0xb0,0x04,0x26,0xb0,0x04,0x26,0x08,0x0d,0xb0,0x7d,0x2b,0x2d,0x2c,0x20,
		0x01,0x46,0x23,0x00,0x46,0xb0,0x0a,0x43,0xb0,0x0b,0x43,0x8a,0x63,0x23,0x62,0x61,
		0x2d,0x2c,0xb0,0x09,0x2b,0xb0,0x06,0x25,0x2e,0xb0,0x05,0x25,0x7d,0xc5,0xb0,0x06,
		0x25,0xb0,0x05,0x25,0xb0,0x04,0x25,0x20,0xb0,0x00,0x50,0x58,0x21,0xb0,0x6a,0x1b,
		0xb0,0x6c,0x59,0x2b,0xb0,0x05,0x25,0xb0,0x04,0x25,0xb0,0x03,0x25,0x20,0xb0,0x00,
		0x50,0x58,0x21,0xb0,0x6a,0x1b,0xb0,0x6c,0x59,0x2b,0x18,0xb0,0x08,0x25,0xb0,0x07,
		0x25,0xb0,0x06,0x25,0xb0,0x0a,0x25,0xb0,0x6f,0x2b,0xb0,0x06,0x25,0xb0,0x05,0x25,
		0xb0,0x04,0x26,0x20,0xb0,0x00,0x50,0x58,0x21,0xb0,0x66,0x1b,0xb0,0x68,0x59,0x2b,
		0xb0,0x05,0x25,0xb0,0x04,0x25,0xb0,0x04,0x26,0x20,0xb0,0x00,0x50,0x58,0x21,0xb0,
		0x66,0x1b,0xb0,0x68,0x59,0x2b,0x54,0x58,0x7d,0xb0,0x04,0x25,0x10,0xb0,0x03,0x25,
		0xc5,0xb0,0x02,0x25,0x10,0xb0,0x01,0x25,0xc5,0xb0,0x05,0x26,0x21,0xb0,0x05,0x26,
		0x21,0x1b,0xb0,0x06,0x26,0xb0,0x04,0x25,0xb0,0x03,0x25,0xb0,0x08,0x26,0xb0,0x6f,
		0x2b,0x59,0xb1,0x00,0x02,0x43,0x54,0x58,0x7d,0xb0,0x02,0x25,0xb0,0x82,0x2b,0xb0,
		0x05,0x25,0xb0,0x82,0x2b,0x20,0x20,0x69,0x61,0xb0,0x04,0x43,0x01,0x23,0x61,0xb0,
		0x60,0x60,0x20,0x69,0x61,0xb0,0x20,0x61,0x20,0xb0,0x08,0x26,0xb0,0x08,0x26,0x8a,
		0xb0,0x02,0x17,0x38,0x8a,0x8a,0x61,0x20,0x69,0x61,0x61,0xb0,0x02,0x17,0x38,0x1b,
		0x21,0x21,0x21,0x21,0x59,0x18,0x2d,0x2c,0x4b,0x52,0xb1,0x01,0x02,0x43,0x53,0x5a,
		0x58,0x23,0x10,0x20,0x01,0x3c,0x00,0x3c,0x1b,0x21,0x21,0x59,0x2d,0x2c,0x23,0xb0,
		0x02,0x25,0xb0,0x02,0x25,0x53,0x58,0x20,0xb0,0x04,0x25,0x58,0x3c,0x1b,0x39,0x59,
		0xb0,0x01,0x60,0xb8,0xff,0xe9,0x1c,0x59,0x21,0x21,0x21,0x2d,0x2c,0xb0,0x02,0x25,
		0x47,0xb0,0x02,0x25,0x47,0x54,0x8a,0x20,0x20,0x10,0x11,0xb0,0x01,0x60,0x8a,0x20,
		0x12,0xb0,0x01,0x61,0xb0,0x85,0x2b,0x2d,0x2c,0xb0,0x04,0x25,0x47,0xb0,0x02,0x25,
		0x47,0x54,0x23,0x20,0x12,0xb0,0x01,0x61,0x23,0x20,0xb0,0x06,0x26,0x20,0x20,0x10,
		0x11,0xb0,0x01,0x60,0xb0,0x06,0x26,0xb0,0x85,0x2b,0x8a,0x8a,0xb0,0x85,0x2b,0x2d,
		0x2c,0xb0,0x02,0x43,0x54,0x58,0x0c,0x02,0x8a,0x4b,0x53,0xb0,0x04,0x26,0x4b,0x51,
		0x5a,0x58,0x0a,0x38,0x1b,0x0a,0x21,0x21,0x59,0x1b,0x21,0x21,0x21,0x21,0x59,0x2d,
		0x2c,0xb0,0x98,0x2b,0x58,0x0c,0x02,0x8a,0x4b,0x53,0xb0,0x04,0x26,0x4b,0x51,0x5a,
		0x58,0x0a,0x38,0x1b,0x0a,0x21,0x21,0x59,0x1b,0x21,0x21,0x21,0x21,0x59,0x2d,0x2c,
		0x20,0xb0,0x02,0x43,0x54,0xb0,0x01,0x23,0xb8,0x00,0x68,0x23,0x78,0x21,0xb1,0x00,
		0x02,0x43,0xb8,0x00,0x5e,0x23,0x79,0x21,0xb0,0x02,0x43,0x23,0xb0,0x20,0x20,0x5c,
		0x58,0x21,0x21,0x21,0xb0,0x00,0xb8,0x00,0x4d,0x1c,0x59,0x8a,0x8a,0x20,0x8a,0x20,
		0x8a,0x23,0xb8,0x10,0x00,0x63,0x56,0x58,0xb8,0x10,0x00,0x63,0x56,0x58,0x21,0x21,
		0x21,0xb0,0x01,0xb8,0x00,0x30,0x1c,0x59,0x1b,0x21,0x59,0xb0,0x80,0x62,0x20,0x5c,
		0x58,0x21,0x21,0x21,0xb0,0x00,0xb8,0x00,0x1d,0x1c,0x59,0x23,0xb0,0x80,0x62,0x20,
		0x5c,0x58,0x21,0x21,0x21,0xb0,0x00,0xb8,0x00,0x0c,0x1c,0x59,0x8a,0xb0,0x01,0x61,
		0xb8,0xff,0xab,0x1c,0x23,0x21,0x2d,0x2c,0x20,0xb0,0x02,0x43,0x54,0xb0,0x01,0x23,
		0xb8,0x00,0x81,0x23,0x78,0x21,0xb1,0x00,0x02,0x43,0xb8,0x00,0x77,0x23,0x79,0x21,
		0xb1,0x00,0x02,0x43,0x8a,0xb0,0x20,0x20,0x5c,0x58,0x21,0x21,0x21,0xb8,0x00,0x67,
		0x1c,0x59,0x8a,0x8a,0x20,0x8a,0x20,0x8a,0x23,0xb8,0x10,0x00,0x63,0x56,0x58,0xb8,
		0x10,0x00,0x63,0x56,0x58,0xb0,0x04,0x26,0xb0,0x01,0x5b,0xb0,0x04,0x26,0xb0,0x04,
		0x26,0xb0,0x04,0x26,0x1b,0x21,0x21,0x21,0x21,0xb8,0x00,0x38,0xb0,0x00,0x23,0x1c,
		0x59,0x1b,0x21,0x59,0xb0,0x04,0x26,0x23,0xb0,0x80,0x62,0x20,0x5c,0x58,0x8a,0x5c,
		0x8a,0x5a,0x23,0x21,0x23,0x21,0xb8,0x00,0x1e,0x1c,0x59,0x8a,0xb0,0x80,0x62,0x20,
		0x5c,0x58,0x21,0x21,0x23,0x21,0xb8,0x00,0x0e,0x1c,0x59,0xb0,0x04,0x26,0xb0,0x01,
		0x61,0xb8,0xff,0x93,0x1c,0x23,0x21,0x2d,0x40,0xff,0x76,0x34,0x22,0x1f,0x75,0x34,
		0x48,0x1f,0x74,0x34,0x64,0x1f,0x73,0x34,0xfa,0x1f,0x72,0x34,0xff,0x1f,0x71,0x34,
		0xa7,0x1f,0x70,0x33,0xff,0x1f,0x6f,0x33,0xfa,0x1f,0x6e,0x32,0x48,0x1f,0x6d,0x32,
		0xa7,0x1f,0x6c,0x32,0xff,0x1f,0x6b,0x31,0xff,0x1f,0x6a,0x30,0xff,0x1f,0x69,0x2f,
		0xff,0x1f,0x68,0x2f,0xfa,0x1f,0x67,0x2e,0x7d,0x1f,0x66,0x2e,0xfa,0x1f,0x65,0x2e,
		0xff,0x1f,0x64,0x2e,0x7d,0x1f,0x63,0x2e,0x3f,0x1f,0x62,0x2d,0xff,0x1f,0x61,0x2c,
		0xff,0x1f,0x60,0x2c,0x64,0x1f,0x5f,0x2b,0x64,0x1f,0x5e,0x2b,0xfa,0x1f,0x5d,0x2b,
		0xff,0x1f,0x5c,0x2b,0xfa,0x1f,0x5b,0x2a,0xfa,0x1f,0x5a,0x2a,0xff,0x1f,0x59,0x2a,
		0xa7,0x1f,0x58,0x29,0xff,0x1f,0x57,0x26,0x32,0x1f,0x56,0x28,0x7d,0x1f,0x55,0x28,
		0xff,0x1f,0x54,0x26,0xff,0x1f,0x53,0x26,0xfa,0x1f,0x52,0x27,0xff,0x1f,0x51,0x27,
		0xfa,0x1f,0x50,0x26,0x38,0x1f,0x4f,0x25,0xff,0x1f,0x4e,0x25,0x54,0x1f,0x4d,0x24,
		0x7d,0x1f,0x4c,0x24,0xff,0x1f,0x4b,0x24,0x7d,0x1f,0x4a,0x23,0xa7,0x1f,0x49,0x23,
		0xff,0x1f,0x48,0x23,0xfa,0x1f,0x47,0x23,0x54,0x1f,0x46,0x22,0xff,0x1f,0x45,0x1f,
		0x20,0x1f,0x44,0x21,0xff,0x1f,0x43,0x1f,0xa7,0x1f,0x42,0x1f,0xff,0x1f,0x41,0x1f,
		0xa7,0x1f,0x40,0x20,0xfa,0x1f,0x3f,0x20,0xff,0x1f,0x3e,0x20,0x7d,0x1f,0x3d,0x20,
		0x54,0x1f,0x3c,0x1e,0xff,0x1f,0x3b,0x1d,0x64,0x1f,0x3a,0x1d,0xff,0x1f,0x39,0x1d,
		0xfa,0x1f,0x38,0x1d,0x54,0x1f,0x37,0x1c,0xfa,0x40,0xdf,0x1f,0x36,0x1c,0xff,0x1f,
		0x35,0x1c,0xfa,0x1f,0x32,0x31,0x7d,0x1f,0x28,0x26,0xa7,0x1f,0x27,0x26,0x64,0x1f,
		0x26,0x1b,0x1b,0x19,0x5c,0x25,0x1b,0x38,0x1f,0x24,0x04,0x1a,0x19,0x5c,0x23,0x19,
		0xff,0x1f,0x22,0x09,0x1a,0x19,0x5c,0x21,0x1f,0x3f,0x1f,0x20,0x1f,0x3f,0x1f,0x1f,
		0x35,0x18,0x16,0x5c,0x1e,0x18,0x2a,0x1f,0x1d,0x17,0xff,0x1f,0x1c,0x16,0xa7,0x1f,
		0x1b,0x33,0x19,0x24,0x5b,0x18,0x3a,0x16,0x4f,0x5b,0x1a,0x33,0x19,0x24,0x5b,0x17,
		0x3a,0x16,0x4f,0x5b,0x15,0x19,0x45,0x16,0x61,0x5a,0x13,0x32,0x12,0x55,0x11,0x32,
		0x10,0x55,0x12,0x59,0x10,0x59,0x0d,0x2e,0x0c,0x55,0x05,0x7d,0x04,0x55,0x0c,0x59,
		0x04,0x59,0x0f,0x04,0x1f,0x04,0x3f,0x04,0x4f,0x04,0x7f,0x04,0x9f,0x04,0xef,0x04,
		0x07,0x0f,0x64,0x0e,0x55,0x0b,0x3f,0x0a,0x55,0x07,0x32,0x06,0x55,0x01,0x54,0x00,
		0x55,0x0e,0x59,0x6f,0x0e,0x01,0x0a,0x59,0x06,0x59,0x0f,0x06,0x3f,0x06,0x4f,0x06,
		0x5f,0x06,0x7f,0x06,0x9f,0x06,0x06,0x00,0x59,0x0f,0x00,0x4f,0x00,0x5f,0x00,0x9f,
		0x00,0xef,0x00,0x05,0x09,0x2e,0x08,0x55,0x03,0x7d,0x02,0x55,0x08,0x59,0x02,0x59,
		0xef,0x02,0x01,0xd0,0x02,0x01,0x0f,0x02,0x1f,0x02,0x3f,0x02,0x4f,0x02,0x7f,0x02,
		0x9f,0x02,0x06,0x10,0x00,0x03,0x40,0x40,0x05,0x01,0xb8,0x01,0x90,0xb0,0x54,0x2b,
		0x4b,0xb8,0x07,0xff,0x52,0x4b,0xb0,0x09,0x50,0x5b,0xb0,0x01,0x88,0xb0,0x25,0x53,
		0xb0,0x01,0x88,0xb0,0x40,0x51,0x5a,0xb0,0x06,0x88,0xb0,0x00,0x55,0x5a,0x5b,0x58,
		0xb1,0x01,0x01,0x8e,0x59,0x85,0x8d,0x8d,0x00,0x1d,0x42,0x4b,0xb0,0x90,0x53,0x58,
		0xb2,0x03,0x00,0x00,0x1d,0x42,0x59,0xb1,0x02,0x02,0x43,0x51,0x58,0xb1,0x04,0x03,
		0x8e,0x59,0x42,0x73,0x73,0x73,0x00,0x2b,0x00,0x2b,0x2b,0x2b,0x73,0x00,0x2b,0x73,
		0x00,0x2b,0x00,0x2b,0x73,0x00,0x2b,0x2b,0x2b,0x2b,0x2b,0x73,0x00,0x2b,0x00,0x2b,
		0x2b,0x2b,0x00,0x2b,0x00,0x2b,0x2b,0x2b,0x01,0x2b,0x01,0x2b,0x01,0x2b,0x01,0x2b,
		0x01,0x2b,0x01,0x2b,0x00,0x2b,0x2b,0x01,0x2b,0x2b,0x2b,0x01,0x2b,0x01,0x2b,0x00,
		0x2b,0x00,0x2b,0x01,0x2b,0x2b,0x2b,0x2b,0x01,0x2b,0x2b,0x2b,0x00,0x2b,0x2b,0x2b,
		0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x01,0x2b,0x2b,0x2b,0x2b,
		0x2b,0x00,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x01,
		0x2b,0x2b,0x2b,0x2b,0x00,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x01,0x2b,0x2b,0x2b,
		0x2b,0x2b,0x2b,0x2b,0x00,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,0x2b,
		0x2b,0x2b,0x18,0x00,0x02,0x99,0x00,0x06,0x02,0x6f,0x00,0x04,0x02,0x6f,0x00,0x04,
		0x01,0xc9,0x00,0x0a,0x00,0x00,0xff,0xf5,0x00,0x00,0xff,0xf8,0x00,0x00,0xff,0xf5,
		0xff,0x59,0xff,0xfb,0x02,0x70,0x00,0x0a,0x00,0x00,0xff,0xf6,0x00,0x00,0x00,0x46,
		0x00,0x43,0x00,0x3d,0x00,0x3d,0x00,0x48,0x00,0x3a,0x00,0x3a,0x00,0x46,0x00,0x3d,
		0x00,0x31,0x00,0x42,0x00,0x3b,0x00,0x4b,0x00,0x3c,0x00,0x48,0x00,0x3b,0x00,0x31,
		0x00,0x40,0x00,0x3b,0x00,0x43,0x00,0x3a,0x00,0x47,0x00,0x3d,0x00,0x3f,0x00,0x4a,
		0x00,0x43,0x00,0x4c,0x00,0x2d,0x00,0x38,0x00,0x3c,0x00,0x31,0x00,0x3b,0x00,0x43,
		0x00,0x45,0x00,0x48,0x00,0x37,0x00,0x3b,0x00,0x3d,0x00,0x42,0x00,0x31,0x00,0x35,
		0x00,0x37,0x00,0x3b,0x00,0x3d,0x00,0x40,0x00,0x44,0x00,0x47,0x00,0x4b,0x00,0x52,
		0x00,0x3c,0x00,0x42,0x00,0x46,0x00,0x49,0x00,0x4c,0x00,0x37,0x00,0x3b,0x00,0x3f,
		0x00,0x2b,0x00,0x31,0x00,0x37,0x00,0x39,0x00,0x3b,0x00,0x3e,0x00,0x40,0x00,0x43,
		0x00,0x47,0x00,0x4a,0x00,0x3a,0x00,0x44,0x00,0x48,0x00,0x4a,0x00,0x3b,0x00,0x3d,
		0x00,0x3f,0x00,0x42,0x00,0x3a,0x00,0x40,0x00,0x4a,0x00,0x3b,0x00,0x3f,0x00,0x43,
		0x00,0x45,0x00,0x47,0x00,0x4a,0x00,0x4c,0x00,0x2d,0x00,0x38,0x00,0x3d,0x00,0x40,
		0x00,0x43,0x00,0x2f,0x00,0x32,0x00,0x37,0x00,0x3a,0x00,0x3c,0x00,0x3f,0x00,0x42,
		0x00,0x4a,0x01,0x8b,0x00,0x00,0x00,0x11,0x00,0xd2,0x00,0x03,0x00,0x01,0x04,0x09,
		0x00,0x00,0x00,0xb4,0x00,0x00,0x00,0x03,0x00,0x01,0x04,0x09,0x00,0x01,0x00,0x16,
		0x00,0xb4,0x00,0x03,0x00,0x01,0x04,0x09,0x00,0x02,0x00,0x0e,0x00,0xca,0x00,0x03,
		0x00,0x01,0x04,0x09,0x00,0x03,0x00,0x3c,0x00,0xd8,0x00,0x03,0x00,0x01,0x04,0x09,
		0x00,0x04,0x00,0x26,0x01,0x14,0x00,0x03,0x00,0x01,0x04,0x09,0x00,0x05,0x00,0x1a,
		0x01,0x3a,0x00,0x03,0x00,0x01,0x04,0x09,0x00,0x06,0x00,0x26,0x01,0x54,0x00,0x03,
		0x00,0x01,0x04,0x09,0x00,0x08,0x00,0x36,0x01,0x7a,0x00,0x03,0x00,0x01,0x04,0x09,
		0x00,0x09,0x00,0x48,0x01,0xb0,0x00,0x03,0x00,0x01,0x04,0x09,0x00,0x0b,0x00,0x8e,
		0x01,0xf8,0x00,0x03,0x00,0x01,0x04,0x09,0x00,0x0c,0x00,0x92,0x02,0x86,0x00,0x03,
		0x00,0x01,0x04,0x09,0x00,0x0d,0x01,0x20,0x03,0x18,0x00,0x03,0x00,0x01,0x04,0x09,
		0x00,0x0e,0x00,0x34,0x04,0x38,0x00,0x03,0x00,0x01,0x04,0x09,0x01,0x00,0x00,0x0c,
		0x04,0x6c,0x00,0x03,0x00,0x01,0x04,0x09,0x01,0x01,0x00,0x0a,0x04,0x78,0x00,0x03,
		0x00,0x01,0x04,0x09,0x01,0x50,0x00,0x0c,0x04,0x82,0x00,0x03,0x00,0x01,0x04,0x09,
		0x01,0x57,0x00,0x0e,0x00,0xca,0x00,0x43,0x00,0x6f,0x00,0x70,0x00,0x79,0x00,0x72,
		0x00,0x69,0x00,0x67,0x00,0x68,0x00,0x74,0x00,0x20,0x00,0x32,0x00,0x30,0x00,0x30,
		0x00,0x36,0x00,0x20,0x00,0x54,0x00,0x68,0x00,0x65,0x00,0x20,0x00,0x49,0x00,0x6e,
		0x00,0x63,0x00,0x6f,0x00,0x6e,0x00,0x73,0x00,0x6f,0x00,0x6c,0x00,0x61,0x00,0x74,
		0x00,0x61,0x00,0x20,0x00,0x50,0x00,0x72,0x00,0x6f,0x00,0x6a,0x00,0x65,0x00,0x63,
		0x00,0x74,0x00,0x20,0x00,0x41,0x00,0x75,0x00,0x74,0x00,0x68,0x00,0x6f,0x00,0x72,
		0x00,0x73,0x00,0x20,0x00,0x28,0x00,0x68,0x00,0x74,0x00,0x74,0x00,0x70,0x00,0x73,
		0x00,0x3a,0x00,0x2f,0x00,0x2f,0x00,0x67,0x00,0x69,0x00,0x74,0x00,0x68,0x00,0x75,
		0x00,0x62,0x00,0x2e,0x00,0x63,0x00,0x6f,0x00,0x6d,0x00,0x2f,0x00,0x63,0x00,0x79,
		0x00,0x72,0x00,0x65,0x00,0x61,0x00,0x6c,0x00,0x74,0x00,0x79,0x00,0x70,0x00,0x65,
		0x00,0x2f,0x00,0x49,0x00,0x6e,0x00,0x63,0x00,0x6f,0x00,0x6e,0x00,0x73,0x00,0x6f,
		0x00,0x6c,0x00,0x61,0x00,0x74,0x00,0x61,0x00,0x29,0x00,0x49,0x00,0x6e,0x00,0x63,
		0x00,0x6f,0x00,0x6e,0x00,0x73,0x00,0x6f,0x00,0x6c,0x00,0x61,0x00,0x74,0x00,0x61,
		0x00,0x52,0x00,0x65,0x00,0x67,0x00,0x75,0x00,0x6c,0x00,0x61,0x00,0x72,0x00,0x33,
		0x00,0x2e,0x00,0x30,0x00,0x30,0x00,0x31,0x00,0x3b,0x00,0x43,0x00,0x59,0x00,0x52,
		0x00,0x45,0x00,0x3b,0x00,0x49,0x00,0x6e,0x00,0x63,0x00,0x6f,0x00,0x6e,0x00,0x73,
		0x00,0x6f,0x00,0x6c,0x00,0x61,0x00,0x74,0x00,0x61,0x00,0x2d,0x00,0x52,0x00,0x65,
		0x00,0x67,0x00,0x75,0x00,0x6c,0x00,0x61,0x00,0x72,0x00,0x49,0x00,0x6e,0x00,0x63,
		0x00,0x6f,0x00,0x6e,0x00,0x73,0x00,0x6f,0x00,0x6c,0x00,0x61,0x00,0x74,0x00,0x61,
		0x00,0x20,0x00,0x52,0x00,0x65,0x00,0x67,0x00,0x75,0x00,0x6c,0x00,0x61,0x00,0x72,
		0x00,0x56,0x00,0x65,0x00,0x72,0x00,0x73,0x00,0x69,0x00,0x6f,0x00,0x6e,0x00,0x20,
		0x00,0x33,0x00,0x2e,0x00,0x30,0x00,0x30,0x00,0x31,0x00,0x49,0x00,0x6e,0x00,0x63,
		0x00,0x6f,0x00,0x6e,0x00,0x73,0x00,0x6f,0x00,0x6c,0x00,0x61,0x00,0x74,0x00,0x61,
		0x00,0x2d,0x00,0x52,0x00,0x65,0x00,0x67,0x00,0x75,0x00,0x6c,0x00,0x61,0x00,0x72,
		0x00,0x52,0x00,0x61,0x00,0x70,0x00,0x68,0x00,0x20,0x00,0x4c,0x00,0x65,0x00,0x76,
		0x00,0x69,0x00,0x65,0x00,0x6e,0x00,0x2c,0x00,0x20,0x00,0x43,0x00,0x79,0x00,0x72,
		0x00,0x65,0x00,0x61,0x00,0x6c,0x00,0x2c,0x00,0x20,0x00,0x47,0x00,0x6f,0x00,0x6f,
		0x00,0x67,0x00,0x6c,0x00,0x65,0x00,0x52,0x00,0x61,0x00,0x70,0x00,0x68,0x00,0x20,
		0x00,0x4c,0x00,0x65,0x00,0x76,0x00,0x69,0x00,0x65,0x00,0x6e,0x00,0x2c,0x00,0x20,
		0x00,0x43,0x00,0x79,0x00,0x72,0x00,0x65,0x00,0x61,0x00,0x6c,0x00,0x2c,0x00,0x20,
		0x00,0x42,0x00,0x72,0x00,0x65,0x00,0x6e,0x00,0x74,0x00,0x6f,0x00,0x6e,0x00,0x20,
		0x00,0x53,0x00,0x69,0x00,0x6d,0x00,0x70,0x00,0x73,0x00,0x6f,0x00,0x6e,0x00,0x68,
		0x00,0x74,0x00,0x74,0x00,0x70,0x00,0x3a,0x00,0x2f,0x00,0x2f,0x00,0x77,0x00,0x77,
		0x00,0x77,0x00,0x2e,0x00,0x6c,0x00,0x65,0x00,0x76,0x00,0x69,0x00,0x65,0x00,0x6e,
		0x00,0x2e,0x00,0x63,0x00,0x6f,0x00,0x6d,0x00,0x20,0x00,0x7c,0x00,0x20,0x00,0x68,
		0x00,0x74,0x00,0x74,0x00,0x70,0x00,0x3a,0x00,0x2f,0x00,0x2f,0x00,0x77,0x00,0x77,
		0x00,0x77,0x00,0x2e,0x00,0x63,0x00,0x79,0x00,0x72,0x00,0x65,0x00,0x61,0x00,0x6c,
		0x00,0x2e,0x00,0x6f,0x00,0x72,0x00,0x67,0x00,0x20,0x00,0x7c,0x00,0x20,0x00,0x68,
		0x00,0x74,0x00,0x74,0x00,0x70,0x00,0x3a,0x00,0x2f,0x00,0x2f,0x00,0x66,0x00,0x6f,
		0x00,0x6e,0x00,0x74,0x00,0x73,0x00,0x2e,0x00,0x67,0x00,0x6f,0x00,0x6f,0x00,0x67,
		0x00,0x6c,0x00,0x65,0x00,0x2e,0x00,0x63,0x00,0x6f,0x00,0x6d,0x00,0x68,0x00,0x74,
		0x00,0x74,0x00,0x70,0x00,0x3a,0x00,0x2f,0x00,0x2f,0x00,0x77,0x00,0x77,0x00,0x77,
		0x00,0x2e,0x00,0x6c,0x00,0x65,0x00,0x76,0x00,0x69,0x00,0x65,0x00,0x6e,0x00,0x2e,
		0x00,0x63,0x00,0x6f,0x00,0x6d,0x00,0x20,0x00,0x7c,0x00,0x20,0x00,0x68,0x00,0x74,
		0x00,0x74,0x00,0x70,0x00,0x3a,0x00,0x2f,0x00,0x2f,0x00,0x77,0x00,0x77,0x00,0x77,
		0x00,0x2e,0x00,0x63,0x00,0x79,0x00,0x72,0x00,0x65,0x00,0x61,0x00,0x6c,0x00,0x2e,
		0x00,0x6f,0x00,0x72,0x00,0x67,0x00,0x20,0x00,0x7c,0x00,0x20,0x00,0x68,0x00,0x74,
		0x00,0x74,0x00,0x70,0x00,0x3a,0x00,0x2f,0x00,0x2f,0x00,0x61,0x00,0x70,0x00,0x70,
		0x00,0x73,0x00,0x66,0x00,0x6f,0x00,0x72,0x00,0x61,0x00,0x72,0x00,0x74,0x00,0x69,
		0x00,0x73,0x00,0x74,0x00,0x73,0x00,0x2e,0x00,0x63,0x00,0x6f,0x00,0x6d,0x00,0x54,
		0x00,0x68,0x00,0x69,0x00,0x73,0x00,0x20,0x00,0x46,0x00,0x6f,0x00,0x6e,0x00,0x74,
		0x00,0x20,0x00,0x53,0x00,0x6f,0x00,0x66,0x00,0x74,0x00,0x77,0x00,0x61,0x00,0x72,
		0x00,0x65,0x00,0x20,0x00,0x69,0x00,0x73,0x00,0x20,0x00,0x6c,0x00,0x69,0x00,0x63,
		0x00,0x65,0x00,0x6e,0x00,0x73,0x00,0x65,0x00,0x64,0x00,0x20,0x00,0x75,0x00,0x6e,
		0x00,0x64,0x00,0x65,0x00,0x72,0x00,0x20,0x00,0x74,0x00,0x68,0x00,0x65,0x00,0x20,
		0x00,0x53,0x00,0x49,0x00,0x4c,0x00,0x20,0x00,0x4f,0x00,0x70,0x00,0x65,0x00,0x6e,
		0x00,0x20,0x00,0x46,0x00,0x6f,0x00,0x6e,0x00,0x74,0x00,0x20,0x00,0x4c,0x00,0x69,
		0x00,0x63,0x00,0x65,0x00,0x6e,0x00,0x73,0x00,0x65,0x00,0x2c,0x00,0x20,0x00,0x56,
		0x00,0x65,0x00,0x72,0x00,0x73,0x00,0x69,0x00,0x6f,0x00,0x6e,0x00,0x20,0x00,0x31,
		0x00,0x2e,0x00,0x31,0x00,0x2e,0x00,0x20,0x00,0x54,0x00,0x68,0x00,0x69,0x00,0x73,
		0x00,0x20,0x00,0x6c,0x00,0x69,0x00,0x63,0x00,0x65,0x00,0x6e,0x00,0x73,0x00,0x65,
		0x00,0x20,0x00,0x69,0x00,0x73,0x00,0x20,0x00,0x61,0x00,0x76,0x00,0x61,0x00,0x69,
		0x00,0x6c,0x00,0x61,0x00,0x62,0x00,0x6c,0x00,0x65,0x00,0x20,0x00,0x77,0x00,0x69,
		0x00,0x74,0x00,0x68,0x00,0x20,0x00,0x61,0x00,0x20,0x00,0x46,0x00,0x41,0x00,0x51,
		0x00,0x20,0x00,0x61,0x00,0x74,0x00,0x3a,0x00,0x20,0x00,0x68,0x00,0x74,0x00,0x74,
		0x00,0x70,0x00,0x3a,0x00,0x2f,0x00,0x2f,0x00,0x73,0x00,0x63,0x00,0x72,0x00,0x69,
		0x00,0x70,0x00,0x74,0x00,0x73,0x00,0x2e,0x00,0x73,0x00,0x69,0x00,0x6c,0x00,0x2e,
		0x00,0x6f,0x00,0x72,0x00,0x67,0x00,0x2f,0x00,0x4f,0x00,0x46,0x00,0x4c,0x00,0x68,
		0x00,0x74,0x00,0x74,0x00,0x70,0x00,0x3a,0x00,0x2f,0x00,0x2f,0x00,0x73,0x00,0x63,
		0x00,0x72,0x00,0x69,0x00,0x70,0x00,0x74,0x00,0x73,0x00,0x2e,0x00,0x73,0x00,0x69,
		0x00,0x6c,0x00,0x2e,0x00,0x6f,0x00,0x72,0x00,0x67,0x00,0x2f,0x00,0x4f,0x00,0x46,
		0x00,0x4c,0x00,0x57,0x00,0x65,0x00,0x69,0x00,0x67,0x00,0x68,0x00,0x74,0x00,0x57,
		0x00,0x69,0x00,0x64,0x00,0x74,0x00,0x68,0x00,0x4e,0x00,0x6f,0x00,0x72,0x00,0x6d,
		0x00,0x61,0x00,0x6c,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x38,0x00,0x32,
		0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x03,0xc2,0x00,0x00,0x00,0x24,0x00,0xc9,0x01,0x02,0x01,0x03,
		0x01,0x04,0x01,0x05,0x01,0x06,0x01,0x07,0x00,0xc7,0x01,0x08,0x01,0x09,0x01,0x0a,
		0x01,0x0b,0x01,0x0c,0x01,0x0d,0x00,0x62,0x01,0x0e,0x00,0xad,0x01,0x0f,0x01,0x10,
		0x01,0x11,0x01,0x12,0x00,0x63,0x01,0x13,0x00,0xae,0x00,0x90,0x01,0x14,0x00,0x25,
		0x00,0x26,0x00,0xfd,0x00,0xff,0x00,0x64,0x01,0x15,0x01,0x16,0x01,0x17,0x00,0x27,
		0x00,0xe9,0x01,0x18,0x01,0x19,0x01,0x1a,0x01,0x1b,0x00,0x28,0x00,0x65,0x01,0x1c,
		0x01,0x1d,0x01,0x1e,0x00,0xc8,0x01,0x1f,0x01,0x20,0x01,0x21,0x01,0x22,0x01,0x23,
		0x01,0x24,0x00,0xca,0x01,0x25,0x01,0x26,0x00,0xcb,0x01,0x27,0x01,0x28,0x01,0x29,
		0x01,0x2a,0x01,0x2b,0x01,0x2c,0x01,0x2d,0x01,0x2e,0x00,0x29,0x00,0x2a,0x00,0xf8,
		0x01,0x2f,0x01,0x30,0x01,0x31,0x01,0x32,0x01,0x33,0x00,0x2b,0x01,0x34,0x01,0x35,
		0x01,0x36,0x01,0x37,0x00,0x2c,0x00,0xcc,0x01,0x38,0x00,0xcd,0x01,0x39,0x00,0xce,
		0x01,0x3a,0x00,0xfa,0x01,0x3b,0x00,0xcf,0x01,0x3c,0x01,0x3d,0x01,0x3e,0x01,0x3f,
		0x01,0x40,0x00,0x2d,0x01,0x41,0x00,0x2e,0x01,0x42,0x01,0x43,0x00,0x2f,0x01,0x44,
		0x01,0x45,0x01,0x46,0x01,0x47,0x01,0x48,0x01,0x49,0x01,0x4a,0x01,0x4b,0x00,0xe2,
		0x00,0x30,0x01,0x4c,0x00,0x31,0x01,0x4d,0x01,0x4e,0x01,0x4f,0x01,0x50,0x01,0x51,
		0x01,0x52,0x01,0x53,0x00,0x66,0x00,0x32,0x00,0xd0,0x01,0x54,0x00,0xd1,0x01,0x55,
		0x01,0x56,0x01,0x57,0x01,0x58,0x01,0x59,0x01,0x5a,0x00,0x67,0x01,0x5b,0x01,0x5c,
		0x01,0x5d,0x00,0xd3,0x01,0x5e,0x01,0x5f,0x01,0x60,0x01,0x61,0x01,0x62,0x01,0x63,
		0x01,0x64,0x01,0x65,0x01,0x66,0x01,0x67,0x01,0x68,0x01,0x69,0x01,0x6a,0x00,0x91,
		0x01,0x6b,0x00,0xaf,0x01,0x6c,0x01,0x6d,0x01,0x6e,0x00,0xb0,0x00,0x33,0x00,0xed,
		0x00,0x34,0x00,0x35,0x01,0x6f,0x01,0x70,0x01,0x71,0x01,0x72,0x01,0x73,0x01,0x74,
		0x01,0x75,0x00,0x36,0x01,0x76,0x01,0x77,0x00,0xe4,0x01,0x78,0x00,0xfb,0x01,0x79,
		0x01,0x7a,0x01,0x7b,0x01,0x7c,0x01,0x7d,0x01,0x7e,0x01,0x7f,0x00,0x37,0x01,0x80,
		0x01,0x81,0x01,0x82,0x01,0x83,0x01,0x84,0x01,0x85,0x00,0x38,0x00,0xd4,0x01,0x86,
		0x00,0xd5,0x01,0x87,0x00,0x68,0x01,0x88,0x00,0xd6,0x01,0x89,0x01,0x8a,0x01,0x8b,
		0x01,0x8c,0x01,0x8d,0x01,0x8e,0x01,0x8f,0x01,0x90,0x01,0x91,0x01,0x92,0x01,0x93,
		0x01,0x94,0x01,0x95,0x01,0x96,0x01,0x97,0x00,0x39,0x00,0x3a,0x01,0x98,0x01,0x99,
		0x01,0x9a,0x01,0x9b,0x00,0x3b,0x00,0x3c,0x00,0xeb,0x01,0x9c,0x00,0xbb,0x01,0x9d,
		0x01,0x9e,0x01,0x9f,0x01,0xa0,0x01,0xa1,0x01,0xa2,0x00,0x3d,0x01,0xa3,0x00,0xe6,
		0x01,0xa4,0x01,0xa5,0x01,0xa6,0x00,0x44,0x00,0x69,0x01,0xa7,0x01,0xa8,0x01,0xa9,
		0x01,0xaa,0x01,0xab,0x01,0xac,0x00,0x6b,0x01,0xad,0x01,0xae,0x01,0xaf,0x01,0xb0,
		0x01,0xb1,0x01,0xb2,0x00,0x6c,0x01,0xb3,0x00,0x6a,0x01,0xb4,0x01,0xb5,0x01,0xb6,
		0x01,0xb7,0x00,0x6e,0x01,0xb8,0x00,0x6d,0x00,0xa0,0x01,0xb9,0x00,0x45,0x01,0xba,
		0x00,0x46,0x00,0xfe,0x01,0x00,0x00,0x6f,0x01,0xbb,0x01,0xbc,0x01,0xbd,0x00,0x47,
		0x00,0xea,0x01,0xbe,0x01,0x01,0x01,0xbf,0x01,0xc0,0x00,0x48,0x00,0x70,0x01,0xc1,
		0x01,0xc2,0x01,0xc3,0x00,0x72,0x01,0xc4,0x01,0xc5,0x01,0xc6,0x01,0xc7,0x01,0xc8,
		0x01,0xc9,0x00,0x73,0x01,0xca,0x01,0xcb,0x00,0x71,0x01,0xcc,0x01,0xcd,0x01,0xce,
		0x01,0xcf,0x01,0xd0,0x01,0xd1,0x01,0xd2,0x01,0xd3,0x01,0xd4,0x01,0xd5,0x00,0x49,
		0x00,0x4a,0x00,0xf9,0x01,0xd6,0x01,0xd7,0x01,0xd8,0x01,0xd9,0x01,0xda,0x00,0x4b,
		0x01,0xdb,0x01,0xdc,0x01,0xdd,0x01,0xde,0x00,0x4c,0x00,0xd7,0x00,0x74,0x01,0xdf,
		0x00,0x76,0x01,0xe0,0x00,0x77,0x01,0xe1,0x01,0xe2,0x01,0xe3,0x00,0x75,0x01,0xe4,
		0x01,0xe5,0x01,0xe6,0x01,0xe7,0x01,0xe8,0x00,0x4d,0x01,0xe9,0x01,0xea,0x00,0x4e,
		0x01,0xeb,0x01,0xec,0x00,0x4f,0x01,0xed,0x01,0xee,0x01,0xef,0x01,0xf0,0x01,0xf1,
		0x01,0xf2,0x01,0xf3,0x00,0xe3,0x00,0x50,0x01,0xf4,0x00,0x51,0x01,0xf5,0x01,0xf6,
		0x01,0xf7,0x01,0xf8,0x01,0xf9,0x01,0xfa,0x01,0xfb,0x00,0x78,0x00,0x52,0x00,0x79,
		0x01,0xfc,0x00,0x7b,0x01,0xfd,0x01,0xfe,0x01,0xff,0x02,0x00,0x02,0x01,0x02,0x02,
		0x00,0x7c,0x02,0x03,0x02,0x04,0x02,0x05,0x00,0x7a,0x02,0x06,0x02,0x07,0x02,0x08,
		0x02,0x09,0x02,0x0a,0x02,0x0b,0x02,0x0c,0x02,0x0d,0x02,0x0e,0x02,0x0f,0x02,0x10,
		0x02,0x11,0x02,0x12,0x00,0xa1,0x02,0x13,0x00,0x7d,0x02,0x14,0x02,0x15,0x02,0x16,
		0x00,0xb1,0x00,0x53,0x00,0xee,0x00,0x54,0x00,0x55,0x02,0x17,0x02,0x18,0x02,0x19,
		0x02,0x1a,0x02,0x1b,0x02,0x1c,0x02,0x1d,0x02,0x1e,0x02,0x1f,0x00,0x56,0x02,0x20,
		0x02,0x21,0x00,0xe5,0x02,0x22,0x00,0xfc,0x02,0x23,0x02,0x24,0x02,0x25,0x02,0x26,
		0x02,0x27,0x00,0x89,0x00,0x57,0x02,0x28,0x02,0x29,0x02,0x2a,0x02,0x2b,0x02,0x2c,
		0x02,0x2d,0x02,0x2e,0x00,0x58,0x00,0x7e,0x02,0x2f,0x00,0x80,0x02,0x30,0x00,0x81,
		0x02,0x31,0x00,0x7f,0x02,0x32,0x02,0x33,0x02,0x34,0x02,0x35,0x02,0x36,0x02,0x37,
		0x02,0x38,0x02,0x39,0x02,0x3a,0x02,0x3b,0x02,0x3c,0x02,0x3d,0x02,0x3e,0x02,0x3f,
		0x02,0x40,0x00,0x59,0x00,0x5a,0x02,0x41,0x02,0x42,0x02,0x43,0x02,0x44,0x00,0x5b,
		0x00,0x5c,0x00,0xec,0x02,0x45,0x00,0xba,0x02,0x46,0x02,0x47,0x02,0x48,0x02,0x49,
		0x02,0x4a,0x02,0x4b,0x00,0x5d,0x02,0x4c,0x00,0xe7,0x02,0x4d,0x02,0x4e,0x02,0x4f,
		0x00,0x9d,0x00,0x9e,0x02,0x50,0x02,0x51,0x00,0x13,0x00,0x14,0x00,0x15,0x00,0x16,
		0x00,0x17,0x00,0x18,0x00,0x19,0x00,0x1a,0x00,0x1b,0x00,0x1c,0x02,0x52,0x02,0x53,
		0x02,0x54,0x02,0x55,0x02,0x56,0x02,0x57,0x02,0x58,0x02,0x59,0x02,0x5a,0x02,0x5b,
		0x02,0x5c,0x02,0x5d,0x02,0x5e,0x02,0x5f,0x02,0x60,0x02,0x61,0x02,0x62,0x02,0x63,
		0x02,0x64,0x02,0x65,0x02,0x66,0x02,0x67,0x02,0x68,0x02,0x69,0x02,0x6a,0x02,0x6b,
		0x02,0x6c,0x02,0x6d,0x02,0x6e,0x02,0x6f,0x02,0x70,0x02,0x71,0x02,0x72,0x02,0x73,
		0x02,0x74,0x02,0x75,0x02,0x76,0x02,0x77,0x02,0x78,0x02,0x79,0x02,0x7a,0x02,0x7b,
		0x00,0xbc,0x00,0xf4,0x00,0xf5,0x00,0xf6,0x02,0x7c,0x02,0x7d,0x02,0x7e,0x02,0x7f,
		0x02,0x80,0x02,0x81,0x02,0x82,0x02,0x83,0x00,0x11,0x00,0x0f,0x00,0x1d,0x00,0x1e,
		0x00,0xab,0x00,0x04,0x00,0xa3,0x00,0x22,0x00,0xa2,0x00,0xc3,0x00,0x87,0x00,0x0d,
		0x02,0x84,0x00,0x06,0x00,0x12,0x00,0x3f,0x02,0x85,0x02,0x86,0x00,0x0b,0x00,0x0c,
		0x00,0x5e,0x00,0x60,0x00,0x3e,0x00,0x40,0x00,0x10,0x02,0x87,0x00,0xb2,0x00,0xb3,
		0x02,0x88,0x02,0x89,0x02,0x8a,0x00,0x42,0x00,0xc4,0x00,0xc5,0x00,0xb4,0x00,0xb5,
		0x00,0xb6,0x00,0xb7,0x00,0xa9,0x00,0xaa,0x00,0xbe,0x00,0xbf,0x00,0x05,0x00,0x0a,
		0x02,0x8b,0x02,0x8c,0x02,0x8d,0x02,0x8e,0x02,0x8f,0x02,0x90,0x02,0x91,0x00,0x03,
		0x02,0x92,0x02,0x93,0x02,0x94,0x02,0x95,0x02,0x96,0x00,0x84,0x02,0x97,0x00,0xbd,
		0x00,0x07,0x02,0x98,0x02,0x99,0x00,0xa6,0x00,0xf7,0x02,0x9a,0x02,0x9b,0x02,0x9c,
		0x02,0x9d,0x02,0x9e,0x02,0x9f,0x02,0xa0,0x02,0xa1,0x02,0xa2,0x02,0xa3,0x00,0x85,
		0x02,0xa4,0x00,0x96,0x02,0xa5,0x02,0xa6,0x02,0xa7,0x02,0xa8,0x02,0xa9,0x00,0x0e,
		0x00,0xef,0x00,0xf0,0x00,0xb8,0x00,0x20,0x00,0x8f,0x00,0x21,0x00,0x1f,0x00,0x95,
		0x00,0x94,0x00,0x93,0x00,0xa7,0x00,0x61,0x00,0xa4,0x00,0x41,0x00,0x92,0x02,0xaa,
		0x00,0x9c,0x02,0xab,0x02,0xac,0x00,0x9a,0x00,0x99,0x00,0xa5,0x02,0xad,0x00,0x98,
		0x00,0x08,0x00,0xc6,0x02,0xae,0x02,0xaf,0x02,0xb0,0x02,0xb1,0x02,0xb2,0x02,0xb3,
		0x02,0xb4,0x02,0xb5,0x02,0xb6,0x02,0xb7,0x02,0xb8,0x02,0xb9,0x02,0xba,0x02,0xbb,
		0x02,0xbc,0x02,0xbd,0x02,0xbe,0x02,0xbf,0x02,0xc0,0x02,0xc1,0x02,0xc2,0x02,0xc3,
		0x02,0xc4,0x02,0xc5,0x02,0xc6,0x02,0xc7,0x02,0xc8,0x02,0xc9,0x02,0xca,0x02,0xcb,
		0x02,0xcc,0x02,0xcd,0x02,0xce,0x02,0xcf,0x02,0xd0,0x02,0xd1,0x02,0xd2,0x02,0xd3,
		0x02,0xd4,0x02,0xd5,0x02,0xd6,0x02,0xd7,0x02,0xd8,0x02,0xd9,0x02,0xda,0x02,0xdb,
		0x02,0xdc,0x02,0xdd,0x02,0xde,0x02,0xdf,0x02,0xe0,0x02,0xe1,0x02,0xe2,0x02,0xe3,
		0x02,0xe4,0x02,0xe5,0x02,0xe6,0x00,0xb9,0x02,0xe7,0x02,0xe8,0x02,0xe9,0x02,0xea,
		0x02,0xeb,0x02,0xec,0x02,0xed,0x02,0xee,0x02,0xef,0x02,0xf0,0x02,0xf1,0x02,0xf2,
		0x02,0xf3,0x02,0xf4,0x02,0xf5,0x02,0xf6,0x02,0xf7,0x02,0xf8,0x02,0xf9,0x02,0xfa,
		0x02,0xfb,0x02,0xfc,0x02,0xfd,0x02,0xfe,0x02,0xff,0x03,0x00,0x03,0x01,0x03,0x02,
		0x03,0x03,0x03,0x04,0x03,0x05,0x03,0x06,0x03,0x07,0x03,0x08,0x03,0x09,0x03,0x0a,
		0x03,0x0b,0x03,0x0c,0x03,0x0d,0x03,0x0e,0x03,0x0f,0x03,0x10,0x03,0x11,0x03,0x12,
		0x03,0x13,0x03,0x14,0x03,0x15,0x03,0x16,0x03,0x17,0x03,0x18,0x03,0x19,0x03,0x1a,
		0x03,0x1b,0x03,0x1c,0x03,0x1d,0x03,0x1e,0x03,0x1f,0x03,0x20,0x03,0x21,0x03,0x22,
		0x03,0x23,0x03,0x24,0x03,0x25,0x03,0x26,0x03,0x27,0x03,0x28,0x03,0x29,0x03,0x2a,
		0x03,0x2b,0x03,0x2c,0x03,0x2d,0x03,0x2e,0x03,0x2f,0x03,0x30,0x03,0x31,0x03,0x32,
		0x03,0x33,0x03,0x34,0x03,0x35,0x03,0x36,0x03,0x37,0x03,0x38,0x03,0x39,0x03,0x3a,
		0x03,0x3b,0x03,0x3c,0x03,0x3d,0x03,0x3e,0x03,0x3f,0x03,0x40,0x03,0x41,0x03,0x42,
		0x03,0x43,0x03,0x44,0x03,0x45,0x03,0x46,0x03,0x47,0x03,0x48,0x03,0x49,0x03,0x4a,
		0x03,0x4b,0x03,0x4c,0x03,0x4d,0x03,0x4e,0x03,0x4f,0x03,0x50,0x03,0x51,0x03,0x52,
		0x03,0x53,0x03,0x54,0x03,0x55,0x03,0x56,0x03,0x57,0x03,0x58,0x03,0x59,0x03,0x5a,
		0x03,0x5b,0x03,0x5c,0x03,0x5d,0x03,0x5e,0x03,0x5f,0x03,0x60,0x03,0x61,0x03,0x62,
		0x03,0x63,0x03,0x64,0x03,0x65,0x03,0x66,0x03,0x67,0x03,0x68,0x03,0x69,0x03,0x6a,
		0x03,0x6b,0x03,0x6c,0x03,0x6d,0x03,0x6e,0x03,0x6f,0x03,0x70,0x03,0x71,0x03,0x72,
		0x00,0x23,0x00,0x09,0x00,0x88,0x00,0x86,0x00,0x8b,0x00,0x8a,0x00,0x8c,0x00,0x83,
		0x03,0x73,0x03,0x74,0x00,0x5f,0x00,0xe8,0x00,0x82,0x03,0x75,0x00,0xc2,0x03,0x76,
		0x03,0x77,0x03,0x78,0x03,0x79,0x03,0x7a,0x03,0x7b,0x03,0x7c,0x03,0x7d,0x03,0x7e,
		0x03,0x7f,0x03,0x80,0x03,0x81,0x03,0x82,0x03,0x83,0x03,0x84,0x03,0x85,0x03,0x86,
		0x03,0x87,0x03,0x88,0x03,0x89,0x03,0x8a,0x03,0x8b,0x03,0x8c,0x03,0x8d,0x03,0x8e,
		0x03,0x8f,0x03,0x90,0x03,0x91,0x03,0x92,0x03,0x93,0x03,0x94,0x03,0x95,0x03,0x96,
		0x03,0x97,0x03,0x98,0x03,0x99,0x03,0x9a,0x03,0x9b,0x03,0x9c,0x03,0x9d,0x03,0x9e,
		0x03,0x9f,0x03,0xa0,0x03,0xa1,0x03,0xa2,0x03,0xa3,0x03,0xa4,0x03,0xa5,0x03,0xa6,
		0x03,0xa7,0x03,0xa8,0x03,0xa9,0x03,0xaa,0x03,0xab,0x03,0xac,0x00,0x8e,0x00,0xdc,
		0x00,0x43,0x00,0x8d,0x00,0xdf,0x00,0xd8,0x00,0xe1,0x00,0xdb,0x00,0xdd,0x00,0xd9,
		0x00,0xda,0x00,0xde,0x00,0xe0,0x03,0xad,0x03,0xae,0x03,0xaf,0x03,0xb0,0x03,0xb1,
		0x03,0xb2,0x03,0xb3,0x03,0xb4,0x03,0xb5,0x03,0xb6,0x03,0xb7,0x03,0xb8,0x03,0xb9,
		0x03,0xba,0x03,0xbb,0x03,0xbc,0x03,0xbd,0x03,0xbe,0x03,0xbf,0x03,0xc0,0x03,0xc1,
		0x03,0xc2,0x03,0xc3,0x03,0xc4,0x03,0xc5,0x03,0xc6,0x03,0xc7,0x03,0xc8,0x03,0xc9,
		0x03,0xca,0x03,0xcb,0x03,0xcc,0x03,0xcd,0x03,0xce,0x06,0x41,0x62,0x72,0x65,0x76,
		0x65,0x07,0x75,0x6e,0x69,0x31,0x45,0x41,0x45,0x07,0x75,0x6e,0x69,0x31,0x45,0x42,
		0x36,0x07,0x75,0x6e,0x69,0x31,0x45,0x42,0x30,0x07,0x75,0x6e,0x69,0x31,0x45,0x42,
		0x32,0x07,0x75,0x6e,0x69,0x31,0x45,0x42,0x34,0x07,0x75,0x6e,0x69,0x31,0x45,0x41,
		0x34,0x07,0x75,0x6e,0x69,0x31,0x45,0x41,0x43,0x07,0x75,0x6e,0x69,0x31,0x45,0x41,
		0x36,0x07,0x75,0x6e,0x69,0x31,0x45,0x41,0x38,0x07,0x75,0x6e,0x69,0x31,0x45,0x41,
		0x41,0x07,0x75,0x6e,0x69,0x30,0x32,0x30,0x30,0x07,0x75,0x6e,0x69,0x31,0x45,0x41,
		0x30,0x07,0x75,0x6e,0x69,0x31,0x45,0x41,0x32,0x07,0x75,0x6e,0x69,0x30,0x32,0x30,
		0x32,0x07,0x41,0x6d,0x61,0x63,0x72,0x6f,0x6e,0x07,0x41,0x6f,0x67,0x6f,0x6e,0x65,
		0x6b,0x0a,0x41,0x72,0x69,0x6e,0x67,0x61,0x63,0x75,0x74,0x65,0x07,0x41,0x45,0x61,
		0x63,0x75,0x74,0x65,0x07,0x75,0x6e,0x69,0x31,0x45,0x30,0x38,0x0b,0x43,0x63,0x69,
		0x72,0x63,0x75,0x6d,0x66,0x6c,0x65,0x78,0x0a,0x43,0x64,0x6f,0x74,0x61,0x63,0x63,
		0x65,0x6e,0x74,0x06,0x44,0x63,0x61,0x72,0x6f,0x6e,0x06,0x44,0x63,0x72,0x6f,0x61,
		0x74,0x07,0x75,0x6e,0x69,0x31,0x45,0x30,0x43,0x07,0x75,0x6e,0x69,0x31,0x45,0x30,
		0x45,0x06,0x45,0x62,0x72,0x65,0x76,0x65,0x06,0x45,0x63,0x61,0x72,0x6f,0x6e,0x07,
		0x75,0x6e,0x69,0x31,0x45,0x31,0x43,0x07,0x75,0x6e,0x69,0x31,0x45,0x42,0x45,0x07,
		0x75,0x6e,0x69,0x31,0x45,0x43,0x36,0x07,0x75,0x6e,0x69,0x31,0x45,0x43,0x30,0x07,
		0x75,0x6e,0x69,0x31,0x45,0x43,0x32,0x07,0x75,0x6e,0x69,0x31,0x45,0x43,0x34,0x07,
		0x75,0x6e,0x69,0x30,0x32,0x30,0x34,0x0a,0x45,0x64,0x6f,0x74,0x61,0x63,0x63,0x65,
		0x6e,0x74,0x07,0x75,0x6e,0x69,0x31,0x45,0x42,0x38,0x07,0x75,0x6e,0x69,0x31,0x45,
		0x42,0x41,0x07,0x75,0x6e,0x69,0x30,0x32,0x30,0x36,0x07,0x45,0x6d,0x61,0x63,0x72,
		0x6f,0x6e,0x07,0x75,0x6e,0x69,0x31,0x45,0x31,0x36,0x07,0x75,0x6e,0x69,0x31,0x45,
		0x31,0x34,0x07,0x45,0x6f,0x67,0x6f,0x6e,0x65,0x6b,0x07,0x75,0x6e,0x69,0x31,0x45,
		0x42,0x43,0x07,0x75,0x6e,0x69,0x30,0x31,0x42,0x38,0x06,0x47,0x63,0x61,0x72,0x6f,
		0x6e,0x0b,0x47,0x63,0x69,0x72,0x63,0x75,0x6d,0x66,0x6c,0x65,0x78,0x07,0x75,0x6e,
		0x69,0x30,0x31,0x32,0x32,0x0a,0x47,0x64,0x6f,0x74,0x61,0x63,0x63,0x65,0x6e,0x74,
		0x07,0x75,0x6e,0x69,0x31,0x45,0x32,0x30,0x04,0x48,0x62,0x61,0x72,0x07,0x75,0x6e,
		0x69,0x31,0x45,0x32,0x41,0x0b,0x48,0x63,0x69,0x72,0x63,0x75,0x6d,0x66,0x6c,0x65,
		0x78,0x07,0x75,0x6e,0x69,0x31,0x45,0x32,0x34,0x06,0x49,0x62,0x72,0x65,0x76,0x65,
		0x07,0x75,0x6e,0x69,0x30,0x32,0x30,0x38,0x07,0x75,0x6e,0x69,0x31,0x45,0x32,0x45,
		0x07,0x75,0x6e,0x69,0x31,0x45,0x43,0x41,0x07,0x75,0x6e,0x69,0x31,0x45,0x43,0x38,
		0x07,0x75,0x6e,0x69,0x30,0x32,0x30,0x41,0x07,0x49,0x6d,0x61,0x63,0x72,0x6f,0x6e,
		0x07,0x49,0x6f,0x67,0x6f,0x6e,0x65,0x6b,0x06,0x49,0x74,0x69,0x6c,0x64,0x65,0x0b,
		0x4a,0x63,0x69,0x72,0x63,0x75,0x6d,0x66,0x6c,0x65,0x78,0x07,0x75,0x6e,0x69,0x30,
		0x31,0x33,0x36,0x07,0x75,0x6e,0x69,0x30,0x31,0x39,0x38,0x07,0x75,0x6e,0x69,0x30,
		0x31,0x43,0x37,0x06,0x4c,0x61,0x63,0x75,0x74,0x65,0x06,0x4c,0x63,0x61,0x72,0x6f,
		0x6e,0x07,0x75,0x6e,0x69,0x30,0x31,0x33,0x42,0x04,0x4c,0x64,0x6f,0x74,0x07,0x75,
		0x6e,0x69,0x31,0x45,0x33,0x36,0x07,0x75,0x6e,0x69,0x30,0x31,0x43,0x38,0x07,0x75,
		0x6e,0x69,0x31,0x45,0x33,0x41,0x07,0x75,0x6e,0x69,0x31,0x45,0x34,0x32,0x06,0x4e,
		0x61,0x63,0x75,0x74,0x65,0x06,0x4e,0x63,0x61,0x72,0x6f,0x6e,0x07,0x75,0x6e,0x69,
		0x30,0x31,0x34,0x35,0x07,0x75,0x6e,0x69,0x31,0x45,0x34,0x34,0x07,0x75,0x6e,0x69,
		0x31,0x45,0x34,0x36,0x03,0x45,0x6e,0x67,0x07,0x75,0x6e,0x69,0x31,0x45,0x34,0x38,
		0x06,0x4f,0x62,0x72,0x65,0x76,0x65,0x07,0x75,0x6e,0x69,0x31,0x45,0x44,0x30,0x07,
		0x75,0x6e,0x69,0x31,0x45,0x44,0x38,0x07,0x75,0x6e,0x69,0x31,0x45,0x44,0x32,0x07,
		0x75,0x6e,0x69,0x31,0x45,0x44,0x34,0x07,0x75,0x6e,0x69,0x31,0x45,0x44,0x36,0x07,
		0x75,0x6e,0x69,0x30,0x32,0x30,0x43,0x07,0x75,0x6e,0x69,0x30,0x32,0x32,0x41,0x07,
		0x75,0x6e,0x69,0x30,0x32,0x33,0x30,0x07,0x75,0x6e,0x69,0x31,0x45,0x43,0x43,0x07,
		0x75,0x6e,0x69,0x31,0x45,0x43,0x45,0x05,0x4f,0x68,0x6f,0x72,0x6e,0x07,0x75,0x6e,
		0x69,0x31,0x45,0x44,0x41,0x07,0x75,0x6e,0x69,0x31,0x45,0x45,0x32,0x07,0x75,0x6e,
		0x69,0x31,0x45,0x44,0x43,0x07,0x75,0x6e,0x69,0x31,0x45,0x44,0x45,0x07,0x75,0x6e,
		0x69,0x31,0x45,0x45,0x30,0x0d,0x4f,0x68,0x75,0x6e,0x67,0x61,0x72,0x75,0x6d,0x6c,
		0x61,0x75,0x74,0x07,0x75,0x6e,0x69,0x30,0x32,0x30,0x45,0x07,0x4f,0x6d,0x61,0x63,
		0x72,0x6f,0x6e,0x07,0x75,0x6e,0x69,0x31,0x45,0x35,0x32,0x07,0x75,0x6e,0x69,0x31,
		0x45,0x35,0x30,0x07,0x75,0x6e,0x69,0x30,0x31,0x45,0x41,0x0b,0x4f,0x73,0x6c,0x61,
		0x73,0x68,0x61,0x63,0x75,0x74,0x65,0x07,0x75,0x6e,0x69,0x31,0x45,0x34,0x43,0x07,
		0x75,0x6e,0x69,0x31,0x45,0x34,0x45,0x07,0x75,0x6e,0x69,0x30,0x32,0x32,0x43,0x06,
		0x52,0x61,0x63,0x75,0x74,0x65,0x06,0x52,0x63,0x61,0x72,0x6f,0x6e,0x07,0x75,0x6e,
		0x69,0x30,0x31,0x35,0x36,0x07,0x75,0x6e,0x69,0x30,0x32,0x31,0x30,0x07,0x75,0x6e,
		0x69,0x31,0x45,0x35,0x41,0x07,0x75,0x6e,0x69,0x30,0x32,0x31,0x32,0x07,0x75,0x6e,
		0x69,0x31,0x45,0x35,0x45,0x06,0x53,0x61,0x63,0x75,0x74,0x65,0x07,0x75,0x6e,0x69,
		0x31,0x45,0x36,0x34,0x07,0x75,0x6e,0x69,0x31,0x45,0x36,0x36,0x0b,0x53,0x63,0x69,
		0x72,0x63,0x75,0x6d,0x66,0x6c,0x65,0x78,0x07,0x75,0x6e,0x69,0x30,0x32,0x31,0x38,
		0x07,0x75,0x6e,0x69,0x31,0x45,0x36,0x30,0x07,0x75,0x6e,0x69,0x31,0x45,0x36,0x32,
		0x07,0x75,0x6e,0x69,0x31,0x45,0x36,0x38,0x07,0x75,0x6e,0x69,0x31,0x45,0x39,0x45,
		0x07,0x75,0x6e,0x69,0x30,0x31,0x38,0x46,0x04,0x54,0x62,0x61,0x72,0x06,0x54,0x63,
		0x61,0x72,0x6f,0x6e,0x07,0x75,0x6e,0x69,0x30,0x31,0x36,0x32,0x07,0x75,0x6e,0x69,
		0x30,0x32,0x31,0x41,0x07,0x75,0x6e,0x69,0x31,0x45,0x36,0x43,0x07,0x75,0x6e,0x69,
		0x31,0x45,0x36,0x45,0x06,0x55,0x62,0x72,0x65,0x76,0x65,0x07,0x75,0x6e,0x69,0x30,
		0x32,0x31,0x34,0x07,0x75,0x6e,0x69,0x31,0x45,0x45,0x34,0x07,0x75,0x6e,0x69,0x31,
		0x45,0x45,0x36,0x05,0x55,0x68,0x6f,0x72,0x6e,0x07,0x75,0x6e,0x69,0x31,0x45,0x45,
		0x38,0x07,0x75,0x6e,0x69,0x31,0x45,0x46,0x30,0x07,0x75,0x6e,0x69,0x31,0x45,0x45,
		0x41,0x07,0x75,0x6e,0x69,0x31,0x45,0x45,0x43,0x07,0x75,0x6e,0x69,0x31,0x45,0x45,
		0x45,0x0d,0x55,0x68,0x75,0x6e,0x67,0x61,0x72,0x75,0x6d,0x6c,0x61,0x75,0x74,0x07,
		0x75,0x6e,0x69,0x30,0x32,0x31,0x36,0x07,0x55,0x6d,0x61,0x63,0x72,0x6f,0x6e,0x07,
		0x75,0x6e,0x69,0x31,0x45,0x37,0x41,0x07,0x55,0x6f,0x67,0x6f,0x6e,0x65,0x6b,0x05,
		0x55,0x72,0x69,0x6e,0x67,0x06,0x55,0x74,0x69,0x6c,0x64,0x65,0x07,0x75,0x6e,0x69,
		0x31,0x45,0x37,0x38,0x06,0x57,0x61,0x63,0x75,0x74,0x65,0x0b,0x57,0x63,0x69,0x72,
		0x63,0x75,0x6d,0x66,0x6c,0x65,0x78,0x09,0x57,0x64,0x69,0x65,0x72,0x65,0x73,0x69,
		0x73,0x06,0x57,0x67,0x72,0x61,0x76,0x65,0x0b,0x59,0x63,0x69,0x72,0x63,0x75,0x6d,
		0x66,0x6c,0x65,0x78,0x07,0x75,0x6e,0x69,0x31,0x45,0x38,0x45,0x07,0x75,0x6e,0x69,
		0x31,0x45,0x46,0x34,0x06,0x59,0x67,0x72,0x61,0x76,0x65,0x07,0x75,0x6e,0x69,0x31,
		0x45,0x46,0x36,0x07,0x75,0x6e,0x69,0x30,0x32,0x33,0x32,0x07,0x75,0x6e,0x69,0x31,
		0x45,0x46,0x38,0x06,0x5a,0x61,0x63,0x75,0x74,0x65,0x0a,0x5a,0x64,0x6f,0x74,0x61,
		0x63,0x63,0x65,0x6e,0x74,0x07,0x75,0x6e,0x69,0x31,0x45,0x39,0x32,0x03,0x55,0x2e,
		0x69,0x06,0x61,0x62,0x72,0x65,0x76,0x65,0x07,0x75,0x6e,0x69,0x31,0x45,0x41,0x46,
		0x07,0x75,0x6e,0x69,0x31,0x45,0x42,0x37,0x07,0x75,0x6e,0x69,0x31,0x45,0x42,0x31,
		0x07,0x75,0x6e,0x69,0x31,0x45,0x42,0x33,0x07,0x75,0x6e,0x69,0x31,0x45,0x42,0x35,
		0x07,0x75,0x6e,0x69,0x31,0x45,0x41,0x35,0x07,0x75,0x6e,0x69,0x31,0x45,0x41,0x44,
		0x07,0x75,0x6e,0x69,0x31,0x45,0x41,0x37,0x07,0x75,0x6e,0x69,0x31,0x45,0x41,0x39,
		0x07,0x75,0x6e,0x69,0x31,0x45,0x41,0x42,0x07,0x75,0x6e,0x69,0x30,0x32,0x30,0x31,
		0x07,0x75,0x6e,0x69,0x31,0x45,0x41,0x31,0x07,0x75,0x6e,0x69,0x31,0x45,0x41,0x33,
		0x07,0x75,0x6e,0x69,0x30,0x32,0x30,0x33,0x07,0x61,0x6d,0x61,0x63,0x72,0x6f,0x6e,
		0x07,0x61,0x6f,0x67,0x6f,0x6e,0x65,0x6b,0x0a,0x61,0x72,0x69,0x6e,0x67,0x61,0x63,
		0x75,0x74,0x65,0x07,0x61,0x65,0x61,0x63,0x75,0x74,0x65,0x07,0x75,0x6e,0x69,0x30,
		0x32,0x39,0x38,0x07,0x75,0x6e,0x69,0x31,0x45,0x30,0x39,0x0b,0x63,0x63,0x69,0x72,
		0x63,0x75,0x6d,0x66,0x6c,0x65,0x78,0x0a,0x63,0x64,0x6f,0x74,0x61,0x63,0x63,0x65,
		0x6e,0x74,0x06,0x64,0x63,0x61,0x72,0x6f,0x6e,0x07,0x75,0x6e,0x69,0x31,0x45,0x30,
		0x44,0x07,0x75,0x6e,0x69,0x31,0x45,0x30,0x46,0x06,0x65,0x62,0x72,0x65,0x76,0x65,
		0x06,0x65,0x63,0x61,0x72,0x6f,0x6e,0x07,0x75,0x6e,0x69,0x31,0x45,0x31,0x44,0x07,
		0x75,0x6e,0x69,0x31,0x45,0x42,0x46,0x07,0x75,0x6e,0x69,0x31,0x45,0x43,0x37,0x07,
		0x75,0x6e,0x69,0x31,0x45,0x43,0x31,0x07,0x75,0x6e,0x69,0x31,0x45,0x43,0x33,0x07,
		0x75,0x6e,0x69,0x31,0x45,0x43,0x35,0x07,0x75,0x6e,0x69,0x30,0x32,0x30,0x35,0x0a,
		0x65,0x64,0x6f,0x74,0x61,0x63,0x63,0x65,0x6e,0x74,0x07,0x75,0x6e,0x69,0x31,0x45,
		0x42,0x39,0x07,0x75,0x6e,0x69,0x31,0x45,0x42,0x42,0x07,0x75,0x6e,0x69,0x30,0x32,
		0x30,0x37,0x07,0x65,0x6d,0x61,0x63,0x72,0x6f,0x6e,0x07,0x75,0x6e,0x69,0x31,0x45,
		0x31,0x37,0x07,0x75,0x6e,0x69,0x31,0x45,0x31,0x35,0x07,0x65,0x6f,0x67,0x6f,0x6e,
		0x65,0x6b,0x07,0x75,0x6e,0x69,0x30,0x32,0x39,0x41,0x07,0x75,0x6e,0x69,0x31,0x45,
		0x42,0x44,0x07,0x75,0x6e,0x69,0x30,0x32,0x35,0x39,0x07,0x75,0x6e,0x69,0x30,0x31,
		0x42,0x39,0x06,0x67,0x63,0x61,0x72,0x6f,0x6e,0x0b,0x67,0x63,0x69,0x72,0x63,0x75,
		0x6d,0x66,0x6c,0x65,0x78,0x07,0x75,0x6e,0x69,0x30,0x31,0x32,0x33,0x0a,0x67,0x64,
		0x6f,0x74,0x61,0x63,0x63,0x65,0x6e,0x74,0x07,0x75,0x6e,0x69,0x31,0x45,0x32,0x31,
		0x04,0x68,0x62,0x61,0x72,0x07,0x75,0x6e,0x69,0x31,0x45,0x32,0x42,0x0b,0x68,0x63,
		0x69,0x72,0x63,0x75,0x6d,0x66,0x6c,0x65,0x78,0x07,0x75,0x6e,0x69,0x31,0x45,0x32,
		0x35,0x06,0x69,0x62,0x72,0x65,0x76,0x65,0x07,0x75,0x6e,0x69,0x30,0x32,0x30,0x39,
		0x07,0x75,0x6e,0x69,0x31,0x45,0x32,0x46,0x09,0x69,0x2e,0x6c,0x6f,0x63,0x6c,0x54,
		0x52,0x4b,0x07,0x75,0x6e,0x69,0x31,0x45,0x43,0x42,0x07,0x75,0x6e,0x69,0x31,0x45,
		0x43,0x39,0x07,0x75,0x6e,0x69,0x30,0x32,0x30,0x42,0x07,0x69,0x6d,0x61,0x63,0x72,
		0x6f,0x6e,0x07,0x69,0x6f,0x67,0x6f,0x6e,0x65,0x6b,0x06,0x69,0x74,0x69,0x6c,0x64,
		0x65,0x07,0x75,0x6e,0x69,0x30,0x32,0x33,0x37,0x0b,0x6a,0x63,0x69,0x72,0x63,0x75,
		0x6d,0x66,0x6c,0x65,0x78,0x07,0x75,0x6e,0x69,0x30,0x31,0x33,0x37,0x0c,0x6b,0x67,
		0x72,0x65,0x65,0x6e,0x6c,0x61,0x6e,0x64,0x69,0x63,0x06,0x6c,0x61,0x63,0x75,0x74,
		0x65,0x06,0x6c,0x63,0x61,0x72,0x6f,0x6e,0x07,0x75,0x6e,0x69,0x30,0x31,0x33,0x43,
		0x04,0x6c,0x64,0x6f,0x74,0x07,0x75,0x6e,0x69,0x31,0x45,0x33,0x37,0x07,0x75,0x6e,
		0x69,0x30,0x31,0x43,0x39,0x07,0x75,0x6e,0x69,0x31,0x45,0x33,0x42,0x07,0x75,0x6e,
		0x69,0x31,0x45,0x34,0x33,0x06,0x6e,0x61,0x63,0x75,0x74,0x65,0x06,0x6e,0x63,0x61,
		0x72,0x6f,0x6e,0x07,0x75,0x6e,0x69,0x30,0x31,0x34,0x36,0x07,0x75,0x6e,0x69,0x31,
		0x45,0x34,0x35,0x07,0x75,0x6e,0x69,0x31,0x45,0x34,0x37,0x03,0x65,0x6e,0x67,0x07,
		0x75,0x6e,0x69,0x31,0x45,0x34,0x39,0x06,0x6f,0x62,0x72,0x65,0x76,0x65,0x07,0x75,
		0x6e,0x69,0x31,0x45,0x44,0x31,0x07,0x75,0x6e,0x69,0x31,0x45,0x44,0x39,0x07,0x75,
		0x6e,0x69,0x31,0x45,0x44,0x33,0x07,0x75,0x6e,0x69,0x31,0x45,0x44,0x35,0x07,0x75,
		0x6e,0x69,0x31,0x45,0x44,0x37,0x07,0x75,0x6e,0x69,0x30,0x32,0x30,0x44,0x07,0x75,
		0x6e,0x69,0x30,0x32,0x32,0x42,0x07,0x75,0x6e,0x69,0x30,0x32,0x33,0x31,0x07,0x75,
		0x6e,0x69,0x31,0x45,0x43,0x44,0x07,0x75,0x6e,0x69,0x31,0x45,0x43,0x46,0x05,0x6f,
		0x68,0x6f,0x72,0x6e,0x07,0x75,0x6e,0x69,0x31,0x45,0x44,0x42,0x07,0x75,0x6e,0x69,
		0x31,0x45,0x45,0x33,0x07,0x75,0x6e,0x69,0x31,0x45,0x44,0x44,0x07,0x75,0x6e,0x69,
		0x31,0x45,0x44,0x46,0x07,0x75,0x6e,0x69,0x31,0x45,0x45,0x31,0x0d,0x6f,0x68,0x75,
		0x6e,0x67,0x61,0x72,0x75,0x6d,0x6c,0x61,0x75,0x74,0x07,0x75,0x6e,0x69,0x30,0x32,
		0x30,0x46,0x07,0x6f,0x6d,0x61,0x63,0x72,0x6f,0x6e,0x07,0x75,0x6e,0x69,0x31,0x45,
		0x35,0x33,0x07,0x75,0x6e,0x69,0x31,0x45,0x35,0x31,0x07,0x75,0x6e,0x69,0x30,0x31,
		0x45,0x42,0x0b,0x6f,0x73,0x6c,0x61,0x73,0x68,0x61,0x63,0x75,0x74,0x65,0x07,0x75,
		0x6e,0x69,0x31,0x45,0x34,0x44,0x07,0x75,0x6e,0x69,0x31,0x45,0x34,0x46,0x07,0x75,
		0x6e,0x69,0x30,0x32,0x32,0x44,0x06,0x72,0x61,0x63,0x75,0x74,0x65,0x06,0x72,0x63,
		0x61,0x72,0x6f,0x6e,0x07,0x75,0x6e,0x69,0x30,0x31,0x35,0x37,0x07,0x75,0x6e,0x69,
		0x30,0x32,0x31,0x31,0x07,0x75,0x6e,0x69,0x31,0x45,0x35,0x42,0x07,0x75,0x6e,0x69,
		0x30,0x32,0x37,0x42,0x07,0x75,0x6e,0x69,0x30,0x32,0x31,0x33,0x07,0x75,0x6e,0x69,
		0x31,0x45,0x35,0x46,0x07,0x75,0x6e,0x69,0x30,0x32,0x34,0x44,0x06,0x73,0x61,0x63,
		0x75,0x74,0x65,0x07,0x75,0x6e,0x69,0x31,0x45,0x36,0x35,0x07,0x75,0x6e,0x69,0x31,
		0x45,0x36,0x37,0x0b,0x73,0x63,0x69,0x72,0x63,0x75,0x6d,0x66,0x6c,0x65,0x78,0x07,
		0x75,0x6e,0x69,0x30,0x32,0x31,0x39,0x07,0x75,0x6e,0x69,0x31,0x45,0x36,0x31,0x07,
		0x75,0x6e,0x69,0x31,0x45,0x36,0x33,0x07,0x75,0x6e,0x69,0x31,0x45,0x36,0x39,0x04,
		0x74,0x62,0x61,0x72,0x06,0x74,0x63,0x61,0x72,0x6f,0x6e,0x07,0x75,0x6e,0x69,0x30,
		0x31,0x36,0x33,0x07,0x75,0x6e,0x69,0x30,0x32,0x31,0x42,0x07,0x75,0x6e,0x69,0x31,
		0x45,0x39,0x37,0x07,0x75,0x6e,0x69,0x31,0x45,0x36,0x44,0x07,0x75,0x6e,0x69,0x31,
		0x45,0x36,0x46,0x06,0x75,0x62,0x72,0x65,0x76,0x65,0x07,0x75,0x6e,0x69,0x30,0x32,
		0x31,0x35,0x07,0x75,0x6e,0x69,0x31,0x45,0x45,0x35,0x07,0x75,0x6e,0x69,0x31,0x45,
		0x45,0x37,0x05,0x75,0x68,0x6f,0x72,0x6e,0x07,0x75,0x6e,0x69,0x31,0x45,0x45,0x39,
		0x07,0x75,0x6e,0x69,0x31,0x45,0x46,0x31,0x07,0x75,0x6e,0x69,0x31,0x45,0x45,0x42,
		0x07,0x75,0x6e,0x69,0x31,0x45,0x45,0x44,0x07,0x75,0x6e,0x69,0x31,0x45,0x45,0x46,
		0x0d,0x75,0x68,0x75,0x6e,0x67,0x61,0x72,0x75,0x6d,0x6c,0x61,0x75,0x74,0x07,0x75,
		0x6e,0x69,0x30,0x32,0x31,0x37,0x07,0x75,0x6d,0x61,0x63,0x72,0x6f,0x6e,0x07,0x75,
		0x6e,0x69,0x31,0x45,0x37,0x42,0x07,0x75,0x6f,0x67,0x6f,0x6e,0x65,0x6b,0x05,0x75,
		0x72,0x69,0x6e,0x67,0x06,0x75,0x74,0x69,0x6c,0x64,0x65,0x07,0x75,0x6e,0x69,0x31,
		0x45,0x37,0x39,0x06,0x77,0x61,0x63,0x75,0x74,0x65,0x0b,0x77,0x63,0x69,0x72,0x63,
		0x75,0x6d,0x66,0x6c,0x65,0x78,0x09,0x77,0x64,0x69,0x65,0x72,0x65,0x73,0x69,0x73,
		0x06,0x77,0x67,0x72,0x61,0x76,0x65,0x0b,0x79,0x63,0x69,0x72,0x63,0x75,0x6d,0x66,
		0x6c,0x65,0x78,0x07,0x75,0x6e,0x69,0x31,0x45,0x38,0x46,0x07,0x75,0x6e,0x69,0x31,
		0x45,0x46,0x35,0x06,0x79,0x67,0x72,0x61,0x76,0x65,0x07,0x75,0x6e,0x69,0x31,0x45,
		0x46,0x37,0x07,0x75,0x6e,0x69,0x30,0x32,0x33,0x33,0x07,0x75,0x6e,0x69,0x31,0x45,
		0x46,0x39,0x06,0x7a,0x61,0x63,0x75,0x74,0x65,0x0a,0x7a,0x64,0x6f,0x74,0x61,0x63,
		0x63,0x65,0x6e,0x74,0x07,0x75,0x6e,0x69,0x31,0x45,0x39,0x33,0x03,0x75,0x2e,0x69,
		0x07,0x75,0x6e,0x69,0x32,0x30,0x37,0x46,0x07,0x75,0x6e,0x69,0x32,0x31,0x32,0x34,
		0x09,0x7a,0x65,0x72,0x6f,0x2e,0x7a,0x65,0x72,0x6f,0x09,0x7a,0x65,0x72,0x6f,0x2e,
		0x73,0x73,0x30,0x32,0x07,0x75,0x6e,0x69,0x32,0x30,0x38,0x30,0x07,0x75,0x6e,0x69,
		0x32,0x30,0x38,0x31,0x07,0x75,0x6e,0x69,0x32,0x30,0x38,0x32,0x07,0x75,0x6e,0x69,
		0x32,0x30,0x38,0x33,0x07,0x75,0x6e,0x69,0x32,0x30,0x38,0x34,0x07,0x75,0x6e,0x69,
		0x32,0x30,0x38,0x35,0x07,0x75,0x6e,0x69,0x32,0x30,0x38,0x36,0x07,0x75,0x6e,0x69,
		0x32,0x30,0x38,0x37,0x07,0x75,0x6e,0x69,0x32,0x30,0x38,0x38,0x07,0x75,0x6e,0x69,
		0x32,0x30,0x38,0x39,0x09,0x7a,0x65,0x72,0x6f,0x2e,0x64,0x6e,0x6f,0x6d,0x08,0x6f,
		0x6e,0x65,0x2e,0x64,0x6e,0x6f,0x6d,0x08,0x74,0x77,0x6f,0x2e,0x64,0x6e,0x6f,0x6d,
		0x0a,0x74,0x68,0x72,0x65,0x65,0x2e,0x64,0x6e,0x6f,0x6d,0x09,0x66,0x6f,0x75,0x72,
		0x2e,0x64,0x6e,0x6f,0x6d,0x09,0x66,0x69,0x76,0x65,0x2e,0x64,0x6e,0x6f,0x6d,0x08,
		0x73,0x69,0x78,0x2e,0x64,0x6e,0x6f,0x6d,0x0a,0x73,0x65,0x76,0x65,0x6e,0x2e,0x64,
		0x6e,0x6f,0x6d,0x0a,0x65,0x69,0x67,0x68,0x74,0x2e,0x64,0x6e,0x6f,0x6d,0x09,0x6e,
		0x69,0x6e,0x65,0x2e,0x64,0x6e,0x6f,0x6d,0x09,0x7a,0x65,0x72,0x6f,0x2e,0x6e,0x75,
		0x6d,0x72,0x08,0x6f,0x6e,0x65,0x2e,0x6e,0x75,0x6d,0x72,0x08,0x74,0x77,0x6f,0x2e,
		0x6e,0x75,0x6d,0x72,0x0a,0x74,0x68,0x72,0x65,0x65,0x2e,0x6e,0x75,0x6d,0x72,0x09,
		0x66,0x6f,0x75,0x72,0x2e,0x6e,0x75,0x6d,0x72,0x09,0x66,0x69,0x76,0x65,0x2e,0x6e,
		0x75,0x6d,0x72,0x08,0x73,0x69,0x78,0x2e,0x6e,0x75,0x6d,0x72,0x0a,0x73,0x65,0x76,
		0x65,0x6e,0x2e,0x6e,0x75,0x6d,0x72,0x0a,0x65,0x69,0x67,0x68,0x74,0x2e,0x6e,0x75,
		0x6d,0x72,0x09,0x6e,0x69,0x6e,0x65,0x2e,0x6e,0x75,0x6d,0x72,0x07,0x75,0x6e,0x69,
		0x32,0x30,0x37,0x30,0x07,0x75,0x6e,0x69,0x30,0x30,0x42,0x39,0x07,0x75,0x6e,0x69,
		0x30,0x30,0x42,0x32,0x07,0x75,0x6e,0x69,0x30,0x30,0x42,0x33,0x07,0x75,0x6e,0x69,
		0x32,0x30,0x37,0x34,0x07,0x75,0x6e,0x69,0x32,0x30,0x37,0x35,0x07,0x75,0x6e,0x69,
		0x32,0x30,0x37,0x36,0x07,0x75,0x6e,0x69,0x32,0x30,0x37,0x37,0x07,0x75,0x6e,0x69,
		0x32,0x30,0x37,0x38,0x07,0x75,0x6e,0x69,0x32,0x30,0x37,0x39,0x0c,0x75,0x6e,0x69,
		0x32,0x30,0x38,0x30,0x2e,0x73,0x73,0x30,0x32,0x0e,0x7a,0x65,0x72,0x6f,0x2e,0x64,
		0x6e,0x6f,0x6d,0x2e,0x73,0x73,0x30,0x32,0x0e,0x7a,0x65,0x72,0x6f,0x2e,0x6e,0x75,
		0x6d,0x72,0x2e,0x73,0x73,0x30,0x32,0x0c,0x75,0x6e,0x69,0x32,0x30,0x37,0x30,0x2e,
		0x73,0x73,0x30,0x32,0x0c,0x75,0x6e,0x69,0x32,0x30,0x38,0x30,0x2e,0x7a,0x65,0x72,
		0x6f,0x0e,0x7a,0x65,0x72,0x6f,0x2e,0x64,0x6e,0x6f,0x6d,0x2e,0x7a,0x65,0x72,0x6f,
		0x0e,0x7a,0x65,0x72,0x6f,0x2e,0x6e,0x75,0x6d,0x72,0x2e,0x7a,0x65,0x72,0x6f,0x0c,
		0x75,0x6e,0x69,0x32,0x30,0x37,0x30,0x2e,0x7a,0x65,0x72,0x6f,0x07,0x75,0x6e,0x69,
		0x32,0x45,0x31,0x32,0x16,0x70,0x65,0x72,0x69,0x6f,0x64,0x63,0x65,0x6e,0x74,0x65,
		0x72,0x65,0x64,0x2e,0x6c,0x6f,0x63,0x6c,0x43,0x41,0x54,0x0d,0x61,0x73,0x74,0x65,
		0x72,0x69,0x73,0x6b,0x2e,0x73,0x73,0x30,0x31,0x07,0x75,0x6e,0x69,0x30,0x30,0x41,
		0x44,0x0a,0x66,0x69,0x67,0x75,0x72,0x65,0x64,0x61,0x73,0x68,0x07,0x75,0x6e,0x69,
		0x32,0x30,0x31,0x35,0x07,0x75,0x6e,0x69,0x32,0x30,0x31,0x30,0x0d,0x71,0x75,0x6f,
		0x74,0x65,0x64,0x62,0x6c,0x2e,0x73,0x73,0x30,0x33,0x10,0x71,0x75,0x6f,0x74,0x65,
		0x73,0x69,0x6e,0x67,0x6c,0x65,0x2e,0x73,0x73,0x30,0x33,0x13,0x68,0x79,0x70,0x68,
		0x65,0x6e,0x5f,0x67,0x72,0x65,0x61,0x74,0x65,0x72,0x2e,0x64,0x6c,0x69,0x67,0x17,
		0x65,0x78,0x63,0x6c,0x61,0x6d,0x5f,0x65,0x71,0x75,0x61,0x6c,0x5f,0x65,0x71,0x75,
		0x61,0x6c,0x2e,0x64,0x6c,0x69,0x67,0x07,0x75,0x6e,0x69,0x32,0x30,0x30,0x37,0x07,
		0x75,0x6e,0x69,0x32,0x30,0x30,0x41,0x07,0x75,0x6e,0x69,0x32,0x30,0x30,0x38,0x07,
		0x75,0x6e,0x69,0x30,0x30,0x41,0x30,0x07,0x75,0x6e,0x69,0x32,0x30,0x30,0x39,0x07,
		0x75,0x6e,0x69,0x32,0x30,0x30,0x42,0x02,0x43,0x52,0x07,0x75,0x6e,0x69,0x32,0x30,
		0x42,0x35,0x0d,0x63,0x6f,0x6c,0x6f,0x6e,0x6d,0x6f,0x6e,0x65,0x74,0x61,0x72,0x79,
		0x04,0x64,0x6f,0x6e,0x67,0x04,0x45,0x75,0x72,0x6f,0x07,0x75,0x6e,0x69,0x32,0x30,
		0x42,0x32,0x07,0x75,0x6e,0x69,0x32,0x30,0x41,0x44,0x04,0x6c,0x69,0x72,0x61,0x07,
		0x75,0x6e,0x69,0x32,0x30,0x42,0x41,0x07,0x75,0x6e,0x69,0x32,0x30,0x42,0x43,0x07,
		0x75,0x6e,0x69,0x32,0x30,0x41,0x36,0x06,0x70,0x65,0x73,0x65,0x74,0x61,0x07,0x75,
		0x6e,0x69,0x32,0x30,0x42,0x31,0x07,0x75,0x6e,0x69,0x32,0x30,0x42,0x44,0x07,0x75,
		0x6e,0x69,0x32,0x30,0x42,0x39,0x07,0x75,0x6e,0x69,0x32,0x30,0x41,0x39,0x0c,0x61,
		0x73,0x74,0x65,0x72,0x69,0x73,0x6b,0x6d,0x61,0x74,0x68,0x07,0x75,0x6e,0x69,0x32,
		0x32,0x31,0x39,0x07,0x75,0x6e,0x69,0x32,0x32,0x31,0x35,0x07,0x65,0x6c,0x65,0x6d,
		0x65,0x6e,0x74,0x07,0x75,0x6e,0x69,0x32,0x30,0x37,0x42,0x08,0x65,0x6d,0x70,0x74,
		0x79,0x73,0x65,0x74,0x07,0x75,0x6e,0x69,0x32,0x31,0x32,0x36,0x07,0x75,0x6e,0x69,
		0x32,0x32,0x30,0x36,0x07,0x75,0x6e,0x69,0x30,0x30,0x42,0x35,0x0a,0x63,0x69,0x72,
		0x63,0x6c,0x65,0x70,0x6c,0x75,0x73,0x0f,0x61,0x73,0x63,0x69,0x69,0x74,0x69,0x6c,
		0x64,0x65,0x2e,0x73,0x73,0x30,0x31,0x10,0x61,0x73,0x63,0x69,0x69,0x63,0x69,0x72,
		0x63,0x75,0x6d,0x2e,0x73,0x73,0x30,0x31,0x07,0x61,0x72,0x72,0x6f,0x77,0x75,0x70,
		0x07,0x75,0x6e,0x69,0x32,0x31,0x39,0x37,0x0a,0x61,0x72,0x72,0x6f,0x77,0x72,0x69,
		0x67,0x68,0x74,0x07,0x75,0x6e,0x69,0x32,0x31,0x39,0x38,0x09,0x61,0x72,0x72,0x6f,
		0x77,0x64,0x6f,0x77,0x6e,0x07,0x75,0x6e,0x69,0x32,0x31,0x39,0x39,0x09,0x61,0x72,
		0x72,0x6f,0x77,0x6c,0x65,0x66,0x74,0x07,0x75,0x6e,0x69,0x32,0x31,0x39,0x36,0x09,
		0x61,0x72,0x72,0x6f,0x77,0x62,0x6f,0x74,0x68,0x09,0x61,0x72,0x72,0x6f,0x77,0x75,
		0x70,0x64,0x6e,0x07,0x75,0x6e,0x69,0x32,0x31,0x45,0x37,0x07,0x75,0x6e,0x69,0x32,
		0x31,0x45,0x38,0x07,0x75,0x6e,0x69,0x32,0x31,0x45,0x39,0x07,0x75,0x6e,0x69,0x32,
		0x31,0x45,0x36,0x07,0x75,0x6e,0x69,0x32,0x42,0x30,0x36,0x07,0x75,0x6e,0x69,0x32,
		0x42,0x39,0x35,0x07,0x75,0x6e,0x69,0x32,0x42,0x30,0x37,0x07,0x75,0x6e,0x69,0x32,
		0x42,0x30,0x35,0x0d,0x64,0x6e,0x65,0x69,0x67,0x68,0x74,0x68,0x62,0x6c,0x6f,0x63,
		0x6b,0x0e,0x64,0x6e,0x71,0x75,0x61,0x72,0x74,0x65,0x72,0x62,0x6c,0x6f,0x63,0x6b,
		0x13,0x64,0x6e,0x74,0x68,0x72,0x65,0x65,0x65,0x69,0x67,0x68,0x74,0x68,0x73,0x62,
		0x6c,0x6f,0x63,0x6b,0x0b,0x64,0x6e,0x68,0x61,0x6c,0x66,0x62,0x6c,0x6f,0x63,0x6b,
		0x12,0x64,0x6e,0x66,0x69,0x76,0x65,0x65,0x69,0x67,0x68,0x74,0x68,0x73,0x62,0x6c,
		0x6f,0x63,0x6b,0x14,0x64,0x6e,0x74,0x68,0x72,0x65,0x65,0x71,0x75,0x61,0x72,0x74,
		0x65,0x72,0x73,0x62,0x6c,0x6f,0x63,0x6b,0x13,0x64,0x6e,0x73,0x65,0x76,0x65,0x6e,
		0x65,0x69,0x67,0x68,0x74,0x68,0x73,0x62,0x6c,0x6f,0x63,0x6b,0x09,0x66,0x75,0x6c,
		0x6c,0x62,0x6c,0x6f,0x63,0x6b,0x0b,0x75,0x70,0x68,0x61,0x6c,0x66,0x62,0x6c,0x6f,
		0x63,0x6b,0x0d,0x75,0x70,0x65,0x69,0x67,0x68,0x74,0x68,0x62,0x6c,0x6f,0x63,0x6b,
		0x0f,0x6c,0x65,0x66,0x74,0x65,0x69,0x67,0x68,0x74,0x68,0x62,0x6c,0x6f,0x63,0x6b,
		0x10,0x6c,0x65,0x66,0x74,0x71,0x75,0x61,0x72,0x74,0x65,0x72,0x62,0x6c,0x6f,0x63,
		0x6b,0x15,0x6c,0x65,0x66,0x74,0x74,0x68,0x72,0x65,0x65,0x65,0x69,0x67,0x68,0x74,
		0x68,0x73,0x62,0x6c,0x6f,0x63,0x6b,0x0d,0x6c,0x65,0x66,0x74,0x68,0x61,0x6c,0x66,
		0x62,0x6c,0x6f,0x63,0x6b,0x14,0x6c,0x65,0x66,0x74,0x66,0x69,0x76,0x65,0x65,0x69,
		0x67,0x68,0x74,0x68,0x73,0x62,0x6c,0x6f,0x63,0x6b,0x16,0x6c,0x65,0x66,0x74,0x74,
		0x68,0x72,0x65,0x65,0x71,0x75,0x61,0x72,0x74,0x65,0x72,0x73,0x62,0x6c,0x6f,0x63,
		0x6b,0x15,0x6c,0x65,0x66,0x74,0x73,0x65,0x76,0x65,0x6e,0x65,0x69,0x67,0x68,0x74,
		0x68,0x73,0x62,0x6c,0x6f,0x63,0x6b,0x0e,0x72,0x69,0x67,0x68,0x74,0x68,0x61,0x6c,
		0x66,0x62,0x6c,0x6f,0x63,0x6b,0x10,0x72,0x69,0x67,0x68,0x74,0x65,0x69,0x67,0x68,
		0x74,0x68,0x62,0x6c,0x6f,0x63,0x6b,0x0e,0x64,0x6e,0x6c,0x65,0x66,0x74,0x71,0x75,
		0x61,0x64,0x72,0x61,0x6e,0x74,0x0f,0x64,0x6e,0x72,0x69,0x67,0x68,0x74,0x71,0x75,
		0x61,0x64,0x72,0x61,0x6e,0x74,0x0e,0x75,0x70,0x6c,0x65,0x66,0x74,0x71,0x75,0x61,
		0x64,0x72,0x61,0x6e,0x74,0x1b,0x75,0x70,0x6c,0x65,0x66,0x74,0x64,0x6e,0x6c,0x65,
		0x66,0x74,0x64,0x6e,0x72,0x69,0x67,0x68,0x74,0x71,0x75,0x61,0x64,0x72,0x61,0x6e,
		0x74,0x15,0x75,0x70,0x6c,0x65,0x66,0x74,0x64,0x6e,0x72,0x69,0x67,0x68,0x74,0x71,
		0x75,0x61,0x64,0x72,0x61,0x6e,0x74,0x1b,0x75,0x70,0x6c,0x65,0x66,0x74,0x75,0x70,
		0x72,0x69,0x67,0x68,0x74,0x64,0x6e,0x6c,0x65,0x66,0x74,0x71,0x75,0x61,0x64,0x72,
		0x61,0x6e,0x74,0x1c,0x75,0x70,0x6c,0x65,0x66,0x74,0x75,0x70,0x72,0x69,0x67,0x68,
		0x74,0x64,0x6e,0x72,0x69,0x67,0x68,0x74,0x71,0x75,0x61,0x64,0x72,0x61,0x6e,0x74,
		0x0f,0x75,0x70,0x72,0x69,0x67,0x68,0x74,0x71,0x75,0x61,0x64,0x72,0x61,0x6e,0x74,
		0x15,0x75,0x70,0x72,0x69,0x67,0x68,0x74,0x64,0x6e,0x6c,0x65,0x66,0x74,0x71,0x75,
		0x61,0x64,0x72,0x61,0x6e,0x74,0x1c,0x75,0x70,0x72,0x69,0x67,0x68,0x74,0x64,0x6e,
		0x6c,0x65,0x66,0x74,0x64,0x6e,0x72,0x69,0x67,0x68,0x74,0x71,0x75,0x61,0x64,0x72,
		0x61,0x6e,0x74,0x0a,0x6c,0x69,0x67,0x68,0x74,0x73,0x68,0x61,0x64,0x65,0x0b,0x6d,
		0x65,0x64,0x69,0x75,0x6d,0x73,0x68,0x61,0x64,0x65,0x09,0x64,0x61,0x72,0x6b,0x73,
		0x68,0x61,0x64,0x65,0x07,0x75,0x6e,0x69,0x32,0x35,0x43,0x46,0x06,0x63,0x69,0x72,
		0x63,0x6c,0x65,0x07,0x75,0x6e,0x69,0x32,0x35,0x43,0x36,0x07,0x75,0x6e,0x69,0x32,
		0x35,0x43,0x37,0x0c,0x64,0x62,0x6c,0x64,0x6e,0x68,0x6f,0x72,0x7a,0x62,0x78,0x64,
		0x0c,0x64,0x62,0x6c,0x64,0x6e,0x6c,0x65,0x66,0x74,0x62,0x78,0x64,0x0d,0x64,0x62,
		0x6c,0x64,0x6e,0x72,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x0a,0x64,0x62,0x6c,0x68,
		0x6f,0x72,0x7a,0x62,0x78,0x64,0x0c,0x64,0x62,0x6c,0x75,0x70,0x68,0x6f,0x72,0x7a,
		0x62,0x78,0x64,0x0c,0x64,0x62,0x6c,0x75,0x70,0x6c,0x65,0x66,0x74,0x62,0x78,0x64,
		0x0d,0x64,0x62,0x6c,0x75,0x70,0x72,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x0a,0x64,
		0x62,0x6c,0x76,0x65,0x72,0x74,0x62,0x78,0x64,0x0e,0x64,0x62,0x6c,0x76,0x65,0x72,
		0x74,0x68,0x6f,0x72,0x7a,0x62,0x78,0x64,0x0e,0x64,0x62,0x6c,0x76,0x65,0x72,0x74,
		0x6c,0x65,0x66,0x74,0x62,0x78,0x64,0x0f,0x64,0x62,0x6c,0x76,0x65,0x72,0x74,0x72,
		0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x0f,0x64,0x6e,0x64,0x62,0x6c,0x68,0x6f,0x72,
		0x7a,0x73,0x6e,0x67,0x62,0x78,0x64,0x0f,0x64,0x6e,0x64,0x62,0x6c,0x6c,0x65,0x66,
		0x74,0x73,0x6e,0x67,0x62,0x78,0x64,0x10,0x64,0x6e,0x64,0x62,0x6c,0x72,0x69,0x67,
		0x68,0x74,0x73,0x6e,0x67,0x62,0x78,0x64,0x13,0x64,0x6e,0x68,0x65,0x61,0x76,0x79,
		0x68,0x6f,0x72,0x7a,0x6c,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x13,0x64,0x6e,0x68,
		0x65,0x61,0x76,0x79,0x6c,0x65,0x66,0x74,0x6c,0x69,0x67,0x68,0x74,0x62,0x78,0x64,
		0x15,0x64,0x6e,0x68,0x65,0x61,0x76,0x79,0x6c,0x65,0x66,0x74,0x75,0x70,0x6c,0x69,
		0x67,0x68,0x74,0x62,0x78,0x64,0x14,0x64,0x6e,0x68,0x65,0x61,0x76,0x79,0x72,0x69,
		0x67,0x68,0x74,0x6c,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x16,0x64,0x6e,0x68,0x65,
		0x61,0x76,0x79,0x72,0x69,0x67,0x68,0x74,0x75,0x70,0x6c,0x69,0x67,0x68,0x74,0x62,
		0x78,0x64,0x15,0x64,0x6e,0x68,0x65,0x61,0x76,0x79,0x75,0x70,0x68,0x6f,0x72,0x7a,
		0x6c,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x13,0x64,0x6e,0x6c,0x69,0x67,0x68,0x74,
		0x68,0x6f,0x72,0x7a,0x68,0x65,0x61,0x76,0x79,0x62,0x78,0x64,0x13,0x64,0x6e,0x6c,
		0x69,0x67,0x68,0x74,0x6c,0x65,0x66,0x74,0x68,0x65,0x61,0x76,0x79,0x62,0x78,0x64,
		0x15,0x64,0x6e,0x6c,0x69,0x67,0x68,0x74,0x6c,0x65,0x66,0x74,0x75,0x70,0x68,0x65,
		0x61,0x76,0x79,0x62,0x78,0x64,0x14,0x64,0x6e,0x6c,0x69,0x67,0x68,0x74,0x72,0x69,
		0x67,0x68,0x74,0x68,0x65,0x61,0x76,0x79,0x62,0x78,0x64,0x16,0x64,0x6e,0x6c,0x69,
		0x67,0x68,0x74,0x72,0x69,0x67,0x68,0x74,0x75,0x70,0x68,0x65,0x61,0x76,0x79,0x62,
		0x78,0x64,0x15,0x64,0x6e,0x6c,0x69,0x67,0x68,0x74,0x75,0x70,0x68,0x6f,0x72,0x7a,
		0x68,0x65,0x61,0x76,0x79,0x62,0x78,0x64,0x0f,0x64,0x6e,0x73,0x6e,0x67,0x68,0x6f,
		0x72,0x7a,0x64,0x62,0x6c,0x62,0x78,0x64,0x0f,0x64,0x6e,0x73,0x6e,0x67,0x6c,0x65,
		0x66,0x74,0x64,0x62,0x6c,0x62,0x78,0x64,0x10,0x64,0x6e,0x73,0x6e,0x67,0x72,0x69,
		0x67,0x68,0x74,0x64,0x62,0x6c,0x62,0x78,0x64,0x13,0x68,0x65,0x61,0x76,0x79,0x64,
		0x62,0x6c,0x64,0x61,0x73,0x68,0x68,0x6f,0x72,0x7a,0x62,0x78,0x64,0x13,0x68,0x65,
		0x61,0x76,0x79,0x64,0x62,0x6c,0x64,0x61,0x73,0x68,0x76,0x65,0x72,0x74,0x62,0x78,
		0x64,0x0a,0x68,0x65,0x61,0x76,0x79,0x64,0x6e,0x62,0x78,0x64,0x0e,0x68,0x65,0x61,
		0x76,0x79,0x64,0x6e,0x68,0x6f,0x72,0x7a,0x62,0x78,0x64,0x0e,0x68,0x65,0x61,0x76,
		0x79,0x64,0x6e,0x6c,0x65,0x66,0x74,0x62,0x78,0x64,0x0f,0x68,0x65,0x61,0x76,0x79,
		0x64,0x6e,0x72,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x0c,0x68,0x65,0x61,0x76,0x79,
		0x68,0x6f,0x72,0x7a,0x62,0x78,0x64,0x0c,0x68,0x65,0x61,0x76,0x79,0x6c,0x65,0x66,
		0x74,0x62,0x78,0x64,0x16,0x68,0x65,0x61,0x76,0x79,0x6c,0x65,0x66,0x74,0x6c,0x69,
		0x67,0x68,0x74,0x72,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x14,0x68,0x65,0x61,0x76,
		0x79,0x71,0x75,0x61,0x64,0x64,0x61,0x73,0x68,0x68,0x6f,0x72,0x7a,0x62,0x78,0x64,
		0x14,0x68,0x65,0x61,0x76,0x79,0x71,0x75,0x61,0x64,0x64,0x61,0x73,0x68,0x76,0x65,
		0x72,0x74,0x62,0x78,0x64,0x0d,0x68,0x65,0x61,0x76,0x79,0x72,0x69,0x67,0x68,0x74,
		0x62,0x78,0x64,0x14,0x68,0x65,0x61,0x76,0x79,0x74,0x72,0x70,0x6c,0x64,0x61,0x73,
		0x68,0x68,0x6f,0x72,0x7a,0x62,0x78,0x64,0x14,0x68,0x65,0x61,0x76,0x79,0x74,0x72,
		0x70,0x6c,0x64,0x61,0x73,0x68,0x76,0x65,0x72,0x74,0x62,0x78,0x64,0x0a,0x68,0x65,
		0x61,0x76,0x79,0x75,0x70,0x62,0x78,0x64,0x0e,0x68,0x65,0x61,0x76,0x79,0x75,0x70,
		0x68,0x6f,0x72,0x7a,0x62,0x78,0x64,0x0e,0x68,0x65,0x61,0x76,0x79,0x75,0x70,0x6c,
		0x65,0x66,0x74,0x62,0x78,0x64,0x11,0x68,0x65,0x61,0x76,0x79,0x75,0x70,0x6c,0x69,
		0x67,0x68,0x74,0x64,0x6e,0x62,0x78,0x64,0x0f,0x68,0x65,0x61,0x76,0x79,0x75,0x70,
		0x72,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x0c,0x68,0x65,0x61,0x76,0x79,0x76,0x65,
		0x72,0x74,0x62,0x78,0x64,0x10,0x68,0x65,0x61,0x76,0x79,0x76,0x65,0x72,0x74,0x68,
		0x6f,0x72,0x7a,0x62,0x78,0x64,0x10,0x68,0x65,0x61,0x76,0x79,0x76,0x65,0x72,0x74,
		0x6c,0x65,0x66,0x74,0x62,0x78,0x64,0x11,0x68,0x65,0x61,0x76,0x79,0x76,0x65,0x72,
		0x74,0x72,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x1a,0x6c,0x65,0x66,0x74,0x64,0x6e,
		0x68,0x65,0x61,0x76,0x79,0x72,0x69,0x67,0x68,0x74,0x75,0x70,0x6c,0x69,0x67,0x68,
		0x74,0x62,0x78,0x64,0x18,0x6c,0x65,0x66,0x74,0x68,0x65,0x61,0x76,0x79,0x72,0x69,
		0x67,0x68,0x74,0x64,0x6e,0x6c,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x18,0x6c,0x65,
		0x66,0x74,0x68,0x65,0x61,0x76,0x79,0x72,0x69,0x67,0x68,0x74,0x75,0x70,0x6c,0x69,
		0x67,0x68,0x74,0x62,0x78,0x64,0x1a,0x6c,0x65,0x66,0x74,0x68,0x65,0x61,0x76,0x79,
		0x72,0x69,0x67,0x68,0x74,0x76,0x65,0x72,0x74,0x6c,0x69,0x67,0x68,0x74,0x62,0x78,
		0x64,0x18,0x6c,0x65,0x66,0x74,0x6c,0x69,0x67,0x68,0x74,0x72,0x69,0x67,0x68,0x74,
		0x64,0x6e,0x68,0x65,0x61,0x76,0x79,0x62,0x78,0x64,0x18,0x6c,0x65,0x66,0x74,0x6c,
		0x69,0x67,0x68,0x74,0x72,0x69,0x67,0x68,0x74,0x75,0x70,0x68,0x65,0x61,0x76,0x79,
		0x62,0x78,0x64,0x1a,0x6c,0x65,0x66,0x74,0x6c,0x69,0x67,0x68,0x74,0x72,0x69,0x67,
		0x68,0x74,0x76,0x65,0x72,0x74,0x68,0x65,0x61,0x76,0x79,0x62,0x78,0x64,0x1a,0x6c,
		0x65,0x66,0x74,0x75,0x70,0x68,0x65,0x61,0x76,0x79,0x72,0x69,0x67,0x68,0x74,0x64,
		0x6e,0x6c,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x11,0x6c,0x69,0x67,0x68,0x74,0x61,
		0x72,0x63,0x64,0x6e,0x6c,0x65,0x66,0x74,0x62,0x78,0x64,0x12,0x6c,0x69,0x67,0x68,
		0x74,0x61,0x72,0x63,0x64,0x6e,0x72,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x11,0x6c,
		0x69,0x67,0x68,0x74,0x61,0x72,0x63,0x75,0x70,0x6c,0x65,0x66,0x74,0x62,0x78,0x64,
		0x12,0x6c,0x69,0x67,0x68,0x74,0x61,0x72,0x63,0x75,0x70,0x72,0x69,0x67,0x68,0x74,
		0x62,0x78,0x64,0x13,0x6c,0x69,0x67,0x68,0x74,0x64,0x62,0x6c,0x64,0x61,0x73,0x68,
		0x68,0x6f,0x72,0x7a,0x62,0x78,0x64,0x13,0x6c,0x69,0x67,0x68,0x74,0x64,0x62,0x6c,
		0x64,0x61,0x73,0x68,0x76,0x65,0x72,0x74,0x62,0x78,0x64,0x11,0x6c,0x69,0x67,0x68,
		0x74,0x64,0x69,0x61,0x67,0x63,0x72,0x6f,0x73,0x73,0x62,0x78,0x64,0x19,0x6c,0x69,
		0x67,0x68,0x74,0x64,0x69,0x61,0x67,0x75,0x70,0x6c,0x65,0x66,0x74,0x64,0x6e,0x72,
		0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x19,0x6c,0x69,0x67,0x68,0x74,0x64,0x69,0x61,
		0x67,0x75,0x70,0x72,0x69,0x67,0x68,0x74,0x64,0x6e,0x6c,0x65,0x66,0x74,0x62,0x78,
		0x64,0x0a,0x6c,0x69,0x67,0x68,0x74,0x64,0x6e,0x62,0x78,0x64,0x0e,0x6c,0x69,0x67,
		0x68,0x74,0x64,0x6e,0x68,0x6f,0x72,0x7a,0x62,0x78,0x64,0x0e,0x6c,0x69,0x67,0x68,
		0x74,0x64,0x6e,0x6c,0x65,0x66,0x74,0x62,0x78,0x64,0x0f,0x6c,0x69,0x67,0x68,0x74,
		0x64,0x6e,0x72,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x0c,0x6c,0x69,0x67,0x68,0x74,
		0x68,0x6f,0x72,0x7a,0x62,0x78,0x64,0x0c,0x6c,0x69,0x67,0x68,0x74,0x6c,0x65,0x66,
		0x74,0x62,0x78,0x64,0x16,0x6c,0x69,0x67,0x68,0x74,0x6c,0x65,0x66,0x74,0x68,0x65,
		0x61,0x76,0x79,0x72,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x14,0x6c,0x69,0x67,0x68,
		0x74,0x71,0x75,0x61,0x64,0x64,0x61,0x73,0x68,0x68,0x6f,0x72,0x7a,0x62,0x78,0x64,
		0x14,0x6c,0x69,0x67,0x68,0x74,0x71,0x75,0x61,0x64,0x64,0x61,0x73,0x68,0x76,0x65,
		0x72,0x74,0x62,0x78,0x64,0x0d,0x6c,0x69,0x67,0x68,0x74,0x72,0x69,0x67,0x68,0x74,
		0x62,0x78,0x64,0x14,0x6c,0x69,0x67,0x68,0x74,0x74,0x72,0x70,0x6c,0x64,0x61,0x73,
		0x68,0x68,0x6f,0x72,0x7a,0x62,0x78,0x64,0x14,0x6c,0x69,0x67,0x68,0x74,0x74,0x72,
		0x70,0x6c,0x64,0x61,0x73,0x68,0x76,0x65,0x72,0x74,0x62,0x78,0x64,0x0a,0x6c,0x69,
		0x67,0x68,0x74,0x75,0x70,0x62,0x78,0x64,0x11,0x6c,0x69,0x67,0x68,0x74,0x75,0x70,
		0x68,0x65,0x61,0x76,0x79,0x64,0x6e,0x62,0x78,0x64,0x0e,0x6c,0x69,0x67,0x68,0x74,
		0x75,0x70,0x68,0x6f,0x72,0x7a,0x62,0x78,0x64,0x0e,0x6c,0x69,0x67,0x68,0x74,0x75,
		0x70,0x6c,0x65,0x66,0x74,0x62,0x78,0x64,0x0f,0x6c,0x69,0x67,0x68,0x74,0x75,0x70,
		0x72,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x0c,0x6c,0x69,0x67,0x68,0x74,0x76,0x65,
		0x72,0x74,0x62,0x78,0x64,0x10,0x6c,0x69,0x67,0x68,0x74,0x76,0x65,0x72,0x74,0x68,
		0x6f,0x72,0x7a,0x62,0x78,0x64,0x10,0x6c,0x69,0x67,0x68,0x74,0x76,0x65,0x72,0x74,
		0x6c,0x65,0x66,0x74,0x62,0x78,0x64,0x11,0x6c,0x69,0x67,0x68,0x74,0x76,0x65,0x72,
		0x74,0x72,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x1a,0x72,0x69,0x67,0x68,0x74,0x64,
		0x6e,0x68,0x65,0x61,0x76,0x79,0x6c,0x65,0x66,0x74,0x75,0x70,0x6c,0x69,0x67,0x68,
		0x74,0x62,0x78,0x64,0x18,0x72,0x69,0x67,0x68,0x74,0x68,0x65,0x61,0x76,0x79,0x6c,
		0x65,0x66,0x74,0x64,0x6e,0x6c,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x18,0x72,0x69,
		0x67,0x68,0x74,0x68,0x65,0x61,0x76,0x79,0x6c,0x65,0x66,0x74,0x75,0x70,0x6c,0x69,
		0x67,0x68,0x74,0x62,0x78,0x64,0x1a,0x72,0x69,0x67,0x68,0x74,0x68,0x65,0x61,0x76,
		0x79,0x6c,0x65,0x66,0x74,0x76,0x65,0x72,0x74,0x6c,0x69,0x67,0x68,0x74,0x62,0x78,
		0x64,0x18,0x72,0x69,0x67,0x68,0x74,0x6c,0x69,0x67,0x68,0x74,0x6c,0x65,0x66,0x74,
		0x64,0x6e,0x68,0x65,0x61,0x76,0x79,0x62,0x78,0x64,0x18,0x72,0x69,0x67,0x68,0x74,
		0x6c,0x69,0x67,0x68,0x74,0x6c,0x65,0x66,0x74,0x75,0x70,0x68,0x65,0x61,0x76,0x79,
		0x62,0x78,0x64,0x1a,0x72,0x69,0x67,0x68,0x74,0x6c,0x69,0x67,0x68,0x74,0x6c,0x65,
		0x66,0x74,0x76,0x65,0x72,0x74,0x68,0x65,0x61,0x76,0x79,0x62,0x78,0x64,0x1a,0x72,
		0x69,0x67,0x68,0x74,0x75,0x70,0x68,0x65,0x61,0x76,0x79,0x6c,0x65,0x66,0x74,0x64,
		0x6e,0x6c,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x0f,0x75,0x70,0x64,0x62,0x6c,0x68,
		0x6f,0x72,0x7a,0x73,0x6e,0x67,0x62,0x78,0x64,0x0f,0x75,0x70,0x64,0x62,0x6c,0x6c,
		0x65,0x66,0x74,0x73,0x6e,0x67,0x62,0x78,0x64,0x10,0x75,0x70,0x64,0x62,0x6c,0x72,
		0x69,0x67,0x68,0x74,0x73,0x6e,0x67,0x62,0x78,0x64,0x15,0x75,0x70,0x68,0x65,0x61,
		0x76,0x79,0x64,0x6e,0x68,0x6f,0x72,0x7a,0x6c,0x69,0x67,0x68,0x74,0x62,0x78,0x64,
		0x13,0x75,0x70,0x68,0x65,0x61,0x76,0x79,0x68,0x6f,0x72,0x7a,0x6c,0x69,0x67,0x68,
		0x74,0x62,0x78,0x64,0x15,0x75,0x70,0x68,0x65,0x61,0x76,0x79,0x6c,0x65,0x66,0x74,
		0x64,0x6e,0x6c,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x13,0x75,0x70,0x68,0x65,0x61,
		0x76,0x79,0x6c,0x65,0x66,0x74,0x6c,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x16,0x75,
		0x70,0x68,0x65,0x61,0x76,0x79,0x72,0x69,0x67,0x68,0x74,0x64,0x6e,0x6c,0x69,0x67,
		0x68,0x74,0x62,0x78,0x64,0x14,0x75,0x70,0x68,0x65,0x61,0x76,0x79,0x72,0x69,0x67,
		0x68,0x74,0x6c,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x15,0x75,0x70,0x6c,0x69,0x67,
		0x68,0x74,0x64,0x6e,0x68,0x6f,0x72,0x7a,0x68,0x65,0x61,0x76,0x79,0x62,0x78,0x64,
		0x13,0x75,0x70,0x6c,0x69,0x67,0x68,0x74,0x68,0x6f,0x72,0x7a,0x68,0x65,0x61,0x76,
		0x79,0x62,0x78,0x64,0x15,0x75,0x70,0x6c,0x69,0x67,0x68,0x74,0x6c,0x65,0x66,0x74,
		0x64,0x6e,0x68,0x65,0x61,0x76,0x79,0x62,0x78,0x64,0x13,0x75,0x70,0x6c,0x69,0x67,
		0x68,0x74,0x6c,0x65,0x66,0x74,0x68,0x65,0x61,0x76,0x79,0x62,0x78,0x64,0x16,0x75,
		0x70,0x6c,0x69,0x67,0x68,0x74,0x72,0x69,0x67,0x68,0x74,0x64,0x6e,0x68,0x65,0x61,
		0x76,0x79,0x62,0x78,0x64,0x14,0x75,0x70,0x6c,0x69,0x67,0x68,0x74,0x72,0x69,0x67,
		0x68,0x74,0x68,0x65,0x61,0x76,0x79,0x62,0x78,0x64,0x0f,0x75,0x70,0x73,0x6e,0x67,
		0x68,0x6f,0x72,0x7a,0x64,0x62,0x6c,0x62,0x78,0x64,0x0f,0x75,0x70,0x73,0x6e,0x67,
		0x6c,0x65,0x66,0x74,0x64,0x62,0x6c,0x62,0x78,0x64,0x10,0x75,0x70,0x73,0x6e,0x67,
		0x72,0x69,0x67,0x68,0x74,0x64,0x62,0x6c,0x62,0x78,0x64,0x11,0x76,0x65,0x72,0x74,
		0x64,0x62,0x6c,0x68,0x6f,0x72,0x7a,0x73,0x6e,0x67,0x62,0x78,0x64,0x11,0x76,0x65,
		0x72,0x74,0x64,0x62,0x6c,0x6c,0x65,0x66,0x74,0x73,0x6e,0x67,0x62,0x78,0x64,0x12,
		0x76,0x65,0x72,0x74,0x64,0x62,0x6c,0x72,0x69,0x67,0x68,0x74,0x73,0x6e,0x67,0x62,
		0x78,0x64,0x15,0x76,0x65,0x72,0x74,0x68,0x65,0x61,0x76,0x79,0x68,0x6f,0x72,0x7a,
		0x6c,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x15,0x76,0x65,0x72,0x74,0x68,0x65,0x61,
		0x76,0x79,0x6c,0x65,0x66,0x74,0x6c,0x69,0x67,0x68,0x74,0x62,0x78,0x64,0x16,0x76,
		0x65,0x72,0x74,0x68,0x65,0x61,0x76,0x79,0x72,0x69,0x67,0x68,0x74,0x6c,0x69,0x67,
		0x68,0x74,0x62,0x78,0x64,0x15,0x76,0x65,0x72,0x74,0x6c,0x69,0x67,0x68,0x74,0x68,
		0x6f,0x72,0x7a,0x68,0x65,0x61,0x76,0x79,0x62,0x78,0x64,0x15,0x76,0x65,0x72,0x74,
		0x6c,0x69,0x67,0x68,0x74,0x6c,0x65,0x66,0x74,0x68,0x65,0x61,0x76,0x79,0x62,0x78,
		0x64,0x16,0x76,0x65,0x72,0x74,0x6c,0x69,0x67,0x68,0x74,0x72,0x69,0x67,0x68,0x74,
		0x68,0x65,0x61,0x76,0x79,0x62,0x78,0x64,0x11,0x76,0x65,0x72,0x74,0x73,0x6e,0x67,
		0x68,0x6f,0x72,0x7a,0x64,0x62,0x6c,0x62,0x78,0x64,0x11,0x76,0x65,0x72,0x74,0x73,
		0x6e,0x67,0x6c,0x65,0x66,0x74,0x64,0x62,0x6c,0x62,0x78,0x64,0x12,0x76,0x65,0x72,
		0x74,0x73,0x6e,0x67,0x72,0x69,0x67,0x68,0x74,0x64,0x62,0x6c,0x62,0x78,0x64,0x07,
		0x75,0x6e,0x69,0x32,0x36,0x33,0x39,0x09,0x73,0x6d,0x69,0x6c,0x65,0x66,0x61,0x63,
		0x65,0x0c,0x69,0x6e,0x76,0x73,0x6d,0x69,0x6c,0x65,0x66,0x61,0x63,0x65,0x05,0x73,
		0x70,0x61,0x64,0x65,0x04,0x63,0x6c,0x75,0x62,0x05,0x68,0x65,0x61,0x72,0x74,0x07,
		0x64,0x69,0x61,0x6d,0x6f,0x6e,0x64,0x07,0x75,0x6e,0x69,0x32,0x37,0x31,0x33,0x07,
		0x75,0x6e,0x69,0x32,0x37,0x31,0x34,0x07,0x75,0x6e,0x69,0x32,0x37,0x31,0x35,0x07,
		0x75,0x6e,0x69,0x32,0x37,0x31,0x37,0x07,0x75,0x6e,0x69,0x32,0x37,0x31,0x38,0x06,
		0x6d,0x69,0x6e,0x75,0x74,0x65,0x06,0x73,0x65,0x63,0x6f,0x6e,0x64,0x07,0x75,0x6e,
		0x69,0x32,0x31,0x31,0x33,0x07,0x75,0x6e,0x69,0x32,0x31,0x31,0x36,0x09,0x65,0x73,
		0x74,0x69,0x6d,0x61,0x74,0x65,0x64,0x07,0x75,0x6e,0x69,0x32,0x34,0x32,0x33,0x07,
		0x75,0x6e,0x69,0x32,0x33,0x38,0x42,0x05,0x68,0x6f,0x75,0x73,0x65,0x07,0x75,0x6e,
		0x69,0x32,0x31,0x45,0x41,0x07,0x75,0x6e,0x69,0x32,0x33,0x32,0x37,0x07,0x75,0x6e,
		0x69,0x32,0x33,0x32,0x42,0x07,0x75,0x6e,0x69,0x32,0x33,0x32,0x36,0x07,0x75,0x6e,
		0x69,0x32,0x33,0x32,0x35,0x07,0x75,0x6e,0x69,0x32,0x33,0x31,0x38,0x07,0x75,0x6e,
		0x69,0x32,0x33,0x43,0x45,0x07,0x75,0x6e,0x69,0x46,0x46,0x46,0x44,0x16,0x65,0x71,
		0x75,0x61,0x6c,0x5f,0x65,0x71,0x75,0x61,0x6c,0x5f,0x65,0x71,0x75,0x61,0x6c,0x2e,
		0x64,0x6c,0x69,0x67,0x12,0x65,0x71,0x75,0x61,0x6c,0x5f,0x67,0x72,0x65,0x61,0x74,
		0x65,0x72,0x2e,0x64,0x6c,0x69,0x67,0x12,0x67,0x72,0x65,0x61,0x74,0x65,0x72,0x5f,
		0x65,0x71,0x75,0x61,0x6c,0x2e,0x64,0x6c,0x69,0x67,0x10,0x6c,0x65,0x73,0x73,0x5f,
		0x68,0x79,0x70,0x68,0x65,0x6e,0x2e,0x64,0x6c,0x69,0x67,0x0f,0x6c,0x65,0x73,0x73,
		0x5f,0x65,0x71,0x75,0x61,0x6c,0x2e,0x64,0x6c,0x69,0x67,0x07,0x75,0x6e,0x69,0x30,
		0x33,0x37,0x35,0x07,0x75,0x6e,0x69,0x30,0x32,0x42,0x43,0x07,0x75,0x6e,0x69,0x30,
		0x32,0x42,0x42,0x07,0x75,0x6e,0x69,0x30,0x32,0x42,0x41,0x07,0x75,0x6e,0x69,0x30,
		0x32,0x43,0x39,0x07,0x75,0x6e,0x69,0x30,0x32,0x43,0x42,0x07,0x75,0x6e,0x69,0x30,
		0x32,0x42,0x39,0x07,0x75,0x6e,0x69,0x30,0x32,0x42,0x46,0x07,0x75,0x6e,0x69,0x30,
		0x32,0x42,0x45,0x07,0x75,0x6e,0x69,0x30,0x32,0x43,0x41,0x07,0x75,0x6e,0x69,0x30,
		0x32,0x43,0x43,0x07,0x75,0x6e,0x69,0x30,0x32,0x43,0x38,0x07,0x75,0x6e,0x69,0x30,
		0x33,0x30,0x38,0x07,0x75,0x6e,0x69,0x30,0x33,0x30,0x37,0x09,0x67,0x72,0x61,0x76,
		0x65,0x63,0x6f,0x6d,0x62,0x09,0x61,0x63,0x75,0x74,0x65,0x63,0x6f,0x6d,0x62,0x07,
		0x75,0x6e,0x69,0x30,0x33,0x30,0x42,0x07,0x75,0x6e,0x69,0x30,0x33,0x30,0x32,0x07,
		0x75,0x6e,0x69,0x30,0x33,0x30,0x43,0x07,0x75,0x6e,0x69,0x30,0x33,0x30,0x36,0x07,
		0x75,0x6e,0x69,0x30,0x33,0x30,0x41,0x09,0x74,0x69,0x6c,0x64,0x65,0x63,0x6f,0x6d,
		0x62,0x07,0x75,0x6e,0x69,0x30,0x33,0x30,0x34,0x0d,0x68,0x6f,0x6f,0x6b,0x61,0x62,
		0x6f,0x76,0x65,0x63,0x6f,0x6d,0x62,0x07,0x75,0x6e,0x69,0x30,0x33,0x30,0x46,0x07,
		0x75,0x6e,0x69,0x30,0x33,0x31,0x31,0x07,0x75,0x6e,0x69,0x30,0x33,0x31,0x32,0x07,
		0x75,0x6e,0x69,0x30,0x33,0x31,0x42,0x0c,0x64,0x6f,0x74,0x62,0x65,0x6c,0x6f,0x77,
		0x63,0x6f,0x6d,0x62,0x07,0x75,0x6e,0x69,0x30,0x33,0x32,0x34,0x07,0x75,0x6e,0x69,
		0x30,0x33,0x32,0x36,0x07,0x75,0x6e,0x69,0x30,0x33,0x32,0x37,0x07,0x75,0x6e,0x69,
		0x30,0x33,0x32,0x38,0x07,0x75,0x6e,0x69,0x30,0x33,0x32,0x45,0x07,0x75,0x6e,0x69,
		0x30,0x33,0x33,0x31,0x07,0x75,0x6e,0x69,0x30,0x33,0x33,0x35,0x07,0x75,0x6e,0x69,
		0x30,0x33,0x33,0x36,0x0c,0x75,0x6e,0x69,0x30,0x33,0x30,0x38,0x2e,0x63,0x61,0x73,
		0x65,0x0c,0x75,0x6e,0x69,0x30,0x33,0x30,0x37,0x2e,0x63,0x61,0x73,0x65,0x0e,0x67,
		0x72,0x61,0x76,0x65,0x63,0x6f,0x6d,0x62,0x2e,0x63,0x61,0x73,0x65,0x0e,0x61,0x63,
		0x75,0x74,0x65,0x63,0x6f,0x6d,0x62,0x2e,0x63,0x61,0x73,0x65,0x0c,0x75,0x6e,0x69,
		0x30,0x33,0x30,0x42,0x2e,0x63,0x61,0x73,0x65,0x0c,0x75,0x6e,0x69,0x30,0x33,0x30,
		0x32,0x2e,0x63,0x61,0x73,0x65,0x0c,0x75,0x6e,0x69,0x30,0x33,0x30,0x43,0x2e,0x63,
		0x61,0x73,0x65,0x0c,0x75,0x6e,0x69,0x30,0x33,0x30,0x36,0x2e,0x63,0x61,0x73,0x65,
		0x0c,0x75,0x6e,0x69,0x30,0x33,0x30,0x41,0x2e,0x63,0x61,0x73,0x65,0x0e,0x74,0x69,
		0x6c,0x64,0x65,0x63,0x6f,0x6d,0x62,0x2e,0x63,0x61,0x73,0x65,0x0c,0x75,0x6e,0x69,
		0x30,0x33,0x31,0x42,0x2e,0x63,0x61,0x73,0x65,0x0d,0x64,0x69,0x65,0x72,0x65,0x73,
		0x69,0x73,0x2e,0x63,0x61,0x73,0x65,0x0e,0x64,0x6f,0x74,0x61,0x63,0x63,0x65,0x6e,
		0x74,0x2e,0x63,0x61,0x73,0x65,0x0a,0x67,0x72,0x61,0x76,0x65,0x2e,0x63,0x61,0x73,
		0x65,0x0a,0x61,0x63,0x75,0x74,0x65,0x2e,0x63,0x61,0x73,0x65,0x11,0x68,0x75,0x6e,
		0x67,0x61,0x72,0x75,0x6d,0x6c,0x61,0x75,0x74,0x2e,0x63,0x61,0x73,0x65,0x0a,0x63,
		0x61,0x72,0x6f,0x6e,0x2e,0x63,0x61,0x73,0x65,0x0a,0x62,0x72,0x65,0x76,0x65,0x2e,
		0x63,0x61,0x73,0x65,0x09,0x72,0x69,0x6e,0x67,0x2e,0x63,0x61,0x73,0x65,0x0a,0x74,
		0x69,0x6c,0x64,0x65,0x2e,0x63,0x61,0x73,0x65,0x0b,0x74,0x69,0x6c,0x64,0x65,0x63,
		0x6f,0x6d,0x62,0x2e,0x69,0x0b,0x75,0x6e,0x69,0x30,0x33,0x30,0x36,0x30,0x33,0x30,
		0x31,0x0b,0x75,0x6e,0x69,0x30,0x33,0x30,0x36,0x30,0x33,0x30,0x30,0x0b,0x75,0x6e,
		0x69,0x30,0x33,0x30,0x36,0x30,0x33,0x30,0x39,0x0b,0x75,0x6e,0x69,0x30,0x33,0x30,
		0x36,0x30,0x33,0x30,0x33,0x0b,0x75,0x6e,0x69,0x30,0x33,0x30,0x32,0x30,0x33,0x30,
		0x31,0x0b,0x75,0x6e,0x69,0x30,0x33,0x30,0x32,0x30,0x33,0x30,0x30,0x0b,0x75,0x6e,
		0x69,0x30,0x33,0x30,0x32,0x30,0x33,0x30,0x39,0x0b,0x75,0x6e,0x69,0x30,0x33,0x30,
		0x32,0x30,0x33,0x30,0x33,0x10,0x75,0x6e,0x69,0x30,0x33,0x30,0x32,0x30,0x33,0x30,
		0x31,0x2e,0x63,0x61,0x73,0x65,0x10,0x75,0x6e,0x69,0x30,0x33,0x30,0x32,0x30,0x33,
		0x30,0x30,0x2e,0x63,0x61,0x73,0x65,0x10,0x75,0x6e,0x69,0x30,0x33,0x30,0x32,0x30,
		0x33,0x30,0x39,0x2e,0x63,0x61,0x73,0x65,0x10,0x75,0x6e,0x69,0x30,0x33,0x30,0x32,
		0x30,0x33,0x30,0x33,0x2e,0x63,0x61,0x73,0x65,0x04,0x4e,0x55,0x4c,0x4c,0x00,0x00,
		0x00,0x01,0x00,0x01,0xff,0xff,0x00,0x0f,0x00,0x01,0x00,0x02,0x00,0x0e,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0xf6,0x00,0x02,0x00,0x26,0x00,0x01,0x00,0x19,0x00,0x01,
		0x00,0x1c,0x00,0x24,0x00,0x01,0x00,0x26,0x00,0x26,0x00,0x01,0x00,0x28,0x00,0x40,
		0x00,0x01,0x00,0x42,0x00,0x5f,0x00,0x01,0x00,0x63,0x00,0x63,0x00,0x01,0x00,0x65,
		0x00,0x69,0x00,0x01,0x00,0x6b,0x00,0x6b,0x00,0x01,0x00,0x6d,0x00,0x99,0x00,0x01,
		0x00,0x9b,0x00,0x9b,0x00,0x01,0x00,0x9d,0x00,0xb0,0x00,0x01,0x00,0xb2,0x00,0xe6,
		0x00,0x01,0x00,0xe8,0x01,0x00,0x00,0x01,0x01,0x03,0x01,0x0c,0x00,0x01,0x01,0x0f,
		0x01,0x27,0x00,0x01,0x01,0x29,0x01,0x2a,0x00,0x01,0x01,0x2d,0x01,0x52,0x00,0x01,
		0x01,0x54,0x01,0x54,0x00,0x01,0x01,0x56,0x01,0x56,0x00,0x01,0x01,0x58,0x01,0x5f,
		0x00,0x01,0x01,0x61,0x01,0x84,0x00,0x01,0x01,0x86,0x01,0x86,0x00,0x01,0x01,0x89,
		0x01,0x8e,0x00,0x01,0x01,0x90,0x01,0x92,0x00,0x01,0x01,0x9f,0x01,0xd3,0x00,0x01,
		0x01,0xd7,0x01,0xd7,0x00,0x01,0x02,0x51,0x02,0x53,0x00,0x01,0x02,0x56,0x02,0x56,
		0x00,0x01,0x02,0x59,0x02,0x59,0x00,0x01,0x02,0x5f,0x02,0x5f,0x00,0x01,0x02,0x61,
		0x02,0x62,0x00,0x01,0x02,0x65,0x02,0x65,0x00,0x01,0x03,0x70,0x03,0x70,0x00,0x01,
		0x03,0x7a,0x03,0x92,0x00,0x03,0x03,0x95,0x03,0x95,0x00,0x01,0x03,0xa0,0x03,0xaa,
		0x00,0x03,0x03,0xb0,0x03,0xb0,0x00,0x01,0x03,0xb5,0x03,0xc0,0x00,0x03,0x00,0x01,
		0x00,0x03,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x36,0x00,0x01,
		0x00,0x06,0x03,0x8a,0x03,0x8b,0x03,0x8c,0x03,0x8d,0x03,0x8f,0x03,0x90,0x00,0x02,
		0x00,0x03,0x03,0x7a,0x03,0x88,0x00,0x00,0x03,0xa0,0x03,0xa9,0x00,0x0f,0x03,0xb5,
		0x03,0xc0,0x00,0x19,0x00,0x01,0x00,0x02,0x03,0x89,0x03,0xaa,0x00,0x01,0x00,0x00,
		0x00,0x0a,0x00,0x26,0x00,0x44,0x00,0x02,0x44,0x46,0x4c,0x54,0x00,0x0e,0x6c,0x61,
		0x74,0x6e,0x00,0x0e,0x00,0x04,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x02,0x00,0x00,
		0x00,0x01,0x00,0x02,0x6d,0x61,0x72,0x6b,0x00,0x0e,0x6d,0x6b,0x6d,0x6b,0x00,0x14,
		0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x01,0x00,0x02,0x00,0x03,
		0x00,0x04,0x00,0x0a,0x19,0x2c,0x19,0xbc,0x1c,0x14,0x00,0x04,0x00,0x00,0x00,0x01,
		0x00,0x08,0x00,0x01,0x00,0x0c,0x00,0x22,0x00,0x05,0x00,0xf8,0x01,0xc0,0x00,0x02,
		0x00,0x03,0x03,0x7a,0x03,0x92,0x00,0x00,0x03,0xa0,0x03,0xaa,0x00,0x19,0x03,0xb5,
		0x03,0xc0,0x00,0x24,0x00,0x02,0x00,0x23,0x00,0x01,0x00,0x19,0x00,0x00,0x00,0x1c,
		0x00,0x24,0x00,0x19,0x00,0x26,0x00,0x26,0x00,0x22,0x00,0x28,0x00,0x40,0x00,0x23,
		0x00,0x42,0x00,0x5f,0x00,0x3c,0x00,0x63,0x00,0x63,0x00,0x5a,0x00,0x65,0x00,0x69,
		0x00,0x5b,0x00,0x6b,0x00,0x6b,0x00,0x60,0x00,0x6d,0x00,0x99,0x00,0x61,0x00,0x9b,
		0x00,0x9b,0x00,0x8e,0x00,0x9d,0x00,0xb0,0x00,0x8f,0x00,0xb2,0x00,0xe6,0x00,0xa3,
		0x00,0xe8,0x01,0x00,0x00,0xd8,0x01,0x03,0x01,0x0c,0x00,0xf1,0x01,0x0f,0x01,0x27,
		0x00,0xfb,0x01,0x29,0x01,0x2a,0x01,0x14,0x01,0x2d,0x01,0x52,0x01,0x16,0x01,0x54,
		0x01,0x54,0x01,0x3c,0x01,0x56,0x01,0x56,0x01,0x3d,0x01,0x58,0x01,0x5f,0x01,0x3e,
		0x01,0x61,0x01,0x84,0x01,0x46,0x01,0x86,0x01,0x86,0x01,0x6a,0x01,0x89,0x01,0x8e,
		0x01,0x6b,0x01,0x90,0x01,0x92,0x01,0x71,0x01,0x9f,0x01,0xd3,0x01,0x74,0x01,0xd7,
		0x01,0xd7,0x01,0xa9,0x02,0x51,0x02,0x53,0x01,0xaa,0x02,0x56,0x02,0x56,0x01,0xad,
		0x02,0x59,0x02,0x59,0x01,0xae,0x02,0x5f,0x02,0x5f,0x01,0xaf,0x02,0x61,0x02,0x62,
		0x01,0xb0,0x02,0x65,0x02,0x65,0x01,0xb2,0x03,0x70,0x03,0x70,0x01,0xb3,0x03,0x95,
		0x03,0x95,0x01,0xb4,0x03,0xb0,0x03,0xb0,0x01,0xb5,0x00,0x30,0x00,0x00,0x19,0xc8,
		0x00,0x00,0x19,0x74,0x00,0x00,0x19,0x7a,0x00,0x00,0x19,0x7a,0x00,0x00,0x19,0x80,
		0x00,0x00,0x19,0x92,0x00,0x00,0x19,0xc2,0x00,0x00,0x19,0xce,0x00,0x00,0x19,0x86,
		0x00,0x00,0x19,0x8c,0x00,0x00,0x19,0x92,0x00,0x00,0x19,0x98,0x00,0x00,0x19,0x9e,
		0x00,0x00,0x19,0xce,0x00,0x00,0x19,0xa4,0x00,0x01,0x1b,0x38,0x00,0x02,0x18,0x62,
		0x00,0x02,0x18,0x68,0x00,0x02,0x18,0x6e,0x00,0x02,0x18,0x74,0x00,0x03,0x17,0xec,
		0x00,0x02,0x18,0x7a,0x00,0x02,0x18,0x7a,0x00,0x04,0x00,0xc2,0x00,0x04,0x00,0xc2,
		0x00,0x00,0x19,0xd4,0x00,0x00,0x19,0xd4,0x00,0x00,0x19,0xaa,0x00,0x00,0x19,0xb0,
		0x00,0x00,0x19,0xb6,0x00,0x00,0x19,0xe0,0x00,0x00,0x19,0xe0,0x00,0x00,0x19,0xe0,
		0x00,0x00,0x19,0xd4,0x00,0x00,0x19,0xd4,0x00,0x01,0x1b,0x3e,0x00,0x00,0x19,0xce,
		0x00,0x00,0x19,0xce,0x00,0x00,0x19,0xce,0x00,0x00,0x19,0xbc,0x00,0x00,0x19,0xc2,
		0x00,0x00,0x19,0xc2,0x00,0x00,0x19,0xc8,0x00,0x00,0x19,0xce,0x00,0x00,0x19,0xd4,
		0x00,0x00,0x19,0xe0,0x00,0x00,0x19,0xda,0x00,0x00,0x19,0xe0,0x00,0x01,0x00,0xfb,
		0x01,0x3b,0x01,0xb6,0x19,0x18,0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,0x13,0x5e,
		0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,0x19,0xee,0x00,0x00,0x17,0x42,0x11,0x3c,
		0x00,0x00,0x11,0x1e,0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,0x19,0xee,0x00,0x00,
		0x16,0xdc,0x11,0x3c,0x00,0x00,0x11,0x24,0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,
		0x11,0x2a,0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,0x11,0x30,0x00,0x00,0x17,0x42,
		0x11,0x3c,0x00,0x00,0x19,0xe2,0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,0x12,0x7a,
		0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,0x19,0xe2,0x00,0x00,0x16,0xdc,0x11,0x3c,
		0x00,0x00,0x1a,0x30,0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,0x12,0x80,0x00,0x00,
		0x17,0x42,0x11,0x3c,0x00,0x00,0x1a,0x3c,0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,
		0x12,0xec,0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,0x13,0x64,0x00,0x00,0x17,0x42,
		0x11,0x3c,0x00,0x00,0x19,0x18,0x00,0x00,0x16,0xdc,0x11,0x3c,0x00,0x00,0x13,0x76,
		0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,0x13,0x7c,0x00,0x00,0x17,0x42,0x11,0x3c,
		0x00,0x00,0x13,0x22,0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,0x13,0x82,0x00,0x00,
		0x17,0x42,0x11,0x3c,0x00,0x00,0x19,0x18,0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,
		0x13,0x2e,0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,0x11,0x36,0x00,0x00,0x17,0x42,
		0x11,0x3c,0x00,0x00,0x13,0x88,0x00,0x00,0x17,0x42,0x11,0x3c,0x00,0x00,0x19,0x18,
		0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x16,0xfa,0x00,0x00,0x17,0x00,0x00,0x00,
		0x00,0x00,0x11,0x48,0x00,0x00,0x17,0x00,0x00,0x00,0x00,0x00,0x11,0x42,0x00,0x00,
		0x17,0x00,0x00,0x00,0x00,0x00,0x16,0xfa,0x00,0x00,0x14,0x24,0x00,0x00,0x00,0x00,
		0x11,0x48,0x00,0x00,0x14,0x24,0x00,0x00,0x00,0x00,0x11,0x4e,0x00,0x00,0x17,0x00,
		0x00,0x00,0x00,0x00,0x11,0x54,0x00,0x00,0x17,0x00,0x00,0x00,0x00,0x00,0x11,0x60,
		0x00,0x00,0x17,0x42,0x00,0x00,0x13,0xd6,0x11,0x5a,0x00,0x00,0x17,0x42,0x00,0x00,
		0x13,0xd6,0x11,0x60,0x00,0x00,0x16,0xdc,0x00,0x00,0x13,0xd6,0x11,0x60,0x00,0x00,
		0x15,0xf2,0x00,0x00,0x13,0xd6,0x11,0xcc,0x00,0x00,0x17,0x42,0x13,0x1c,0x00,0x00,
		0x11,0x66,0x00,0x00,0x17,0x42,0x13,0x1c,0x00,0x00,0x11,0x72,0x00,0x00,0x17,0x42,
		0x13,0x1c,0x00,0x00,0x11,0x6c,0x00,0x00,0x17,0x42,0x13,0x1c,0x00,0x00,0x11,0x72,
		0x00,0x00,0x15,0xd4,0x13,0x1c,0x00,0x00,0x11,0x7e,0x00,0x00,0x17,0x42,0x13,0x1c,
		0x00,0x00,0x11,0x78,0x00,0x00,0x17,0x42,0x13,0x1c,0x00,0x00,0x11,0x7e,0x00,0x00,
		0x16,0xdc,0x13,0x1c,0x00,0x00,0x11,0x84,0x00,0x00,0x17,0x42,0x13,0x1c,0x00,0x00,
		0x11,0x8a,0x00,0x00,0x17,0x42,0x13,0x1c,0x00,0x00,0x11,0x90,0x00,0x00,0x17,0x42,
		0x13,0x1c,0x00,0x00,0x11,0x96,0x00,0x00,0x17,0x42,0x13,0x1c,0x00,0x00,0x11,0x9c,
		0x00,0x00,0x17,0x42,0x13,0x1c,0x00,0x00,0x11,0xa2,0x00,0x00,0x17,0x42,0x13,0x1c,
		0x00,0x00,0x11,0xcc,0x00,0x00,0x16,0xdc,0x13,0x1c,0x00,0x00,0x11,0xa8,0x00,0x00,
		0x17,0x42,0x13,0x1c,0x00,0x00,0x11,0xae,0x00,0x00,0x17,0x42,0x13,0x1c,0x00,0x00,
		0x11,0xb4,0x00,0x00,0x17,0x42,0x13,0x1c,0x00,0x00,0x11,0xba,0x00,0x00,0x17,0x42,
		0x13,0x1c,0x00,0x00,0x11,0xc0,0x00,0x00,0x17,0x42,0x13,0x1c,0x00,0x00,0x11,0xc6,
		0x00,0x00,0x17,0x42,0x13,0x1c,0x00,0x00,0x11,0xcc,0x00,0x00,0x17,0x42,0x13,0x1c,
		0x00,0x00,0x11,0xd2,0x00,0x00,0x17,0x42,0x13,0x1c,0x00,0x00,0x19,0x18,0x00,0x00,
		0x17,0x42,0x00,0x00,0x00,0x00,0x11,0xea,0x00,0x00,0x12,0x02,0x00,0x00,0x00,0x00,
		0x11,0xd8,0x00,0x00,0x12,0x02,0x00,0x00,0x00,0x00,0x11,0xde,0x00,0x00,0x12,0x02,
		0x00,0x00,0x00,0x00,0x11,0xe4,0x00,0x00,0x12,0x02,0x00,0x00,0x00,0x00,0x11,0xea,
		0x00,0x00,0x11,0xf0,0x00,0x00,0x00,0x00,0x11,0xf6,0x00,0x00,0x12,0x02,0x00,0x00,
		0x00,0x00,0x11,0xfc,0x00,0x00,0x12,0x02,0x00,0x00,0x00,0x00,0x19,0x18,0x00,0x00,
		0x17,0x42,0x00,0x00,0x13,0xd6,0x19,0x18,0x00,0x00,0x17,0x42,0x00,0x00,0x13,0xd6,
		0x19,0x18,0x00,0x00,0x14,0xc6,0x00,0x00,0x13,0xd6,0x19,0xe2,0x00,0x00,0x17,0x42,
		0x00,0x00,0x13,0xd6,0x19,0x18,0x00,0x00,0x16,0xdc,0x00,0x00,0x13,0xd6,0x12,0x4a,
		0x00,0x00,0x17,0x42,0x12,0x50,0x00,0x00,0x12,0x08,0x00,0x00,0x17,0x42,0x12,0x50,
		0x00,0x00,0x12,0x0e,0x00,0x00,0x17,0x42,0x12,0x50,0x00,0x00,0x12,0x14,0x00,0x00,
		0x17,0x42,0x12,0x50,0x00,0x00,0x12,0x1a,0x00,0x00,0x17,0x42,0x12,0x50,0x00,0x00,
		0x12,0x20,0x00,0x00,0x17,0x42,0x12,0x50,0x00,0x00,0x12,0x26,0x00,0x00,0x17,0x42,
		0x12,0x50,0x00,0x00,0x12,0x2c,0x00,0x00,0x17,0x42,0x12,0x50,0x00,0x00,0x12,0x4a,
		0x00,0x00,0x16,0xdc,0x12,0x50,0x00,0x00,0x12,0x32,0x00,0x00,0x17,0x42,0x12,0x50,
		0x00,0x00,0x12,0x38,0x00,0x00,0x17,0x42,0x12,0x50,0x00,0x00,0x12,0x3e,0x00,0x00,
		0x17,0x42,0x12,0x50,0x00,0x00,0x12,0x44,0x00,0x00,0x17,0x42,0x12,0x50,0x00,0x00,
		0x12,0x4a,0x00,0x00,0x17,0x42,0x12,0x50,0x00,0x00,0x12,0x4a,0x00,0x00,0x17,0x42,
		0x12,0x50,0x00,0x00,0x12,0x56,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x12,0x5c,
		0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x12,0x68,0x12,0x6e,0x17,0x42,0x00,0x00,
		0x12,0x74,0x12,0x62,0x12,0x6e,0x17,0x42,0x00,0x00,0x12,0x74,0x12,0x68,0x12,0x6e,
		0x17,0x42,0x00,0x00,0x12,0x74,0x12,0x68,0x12,0x6e,0x15,0xda,0x00,0x00,0x12,0x74,
		0x12,0x68,0x12,0x6e,0x17,0x42,0x00,0x00,0x12,0x74,0x12,0x68,0x12,0x6e,0x16,0xdc,
		0x00,0x00,0x12,0x74,0x12,0x68,0x12,0x6e,0x15,0xf2,0x00,0x00,0x12,0x74,0x19,0x18,
		0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x19,0x18,0x00,0x00,0x16,0xdc,0x00,0x00,
		0x00,0x00,0x19,0x18,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x13,0x5e,0x00,0x00,
		0x17,0x42,0x00,0x00,0x00,0x00,0x19,0xe8,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,
		0x19,0x18,0x00,0x00,0x15,0xda,0x00,0x00,0x00,0x00,0x13,0x6a,0x00,0x00,0x17,0x42,
		0x00,0x00,0x00,0x00,0x19,0x18,0x00,0x00,0x16,0xdc,0x00,0x00,0x00,0x00,0x19,0x18,
		0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x19,0x18,0x00,0x00,0x15,0xf2,0x00,0x00,
		0x00,0x00,0x13,0x88,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x19,0x18,0x13,0xca,
		0x17,0x42,0x13,0xd0,0x13,0xd6,0x13,0x5e,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,
		0x19,0xee,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,0x19,0xe2,0x13,0xca,0x17,0x42,
		0x13,0xd0,0x13,0xd6,0x12,0x7a,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,0x19,0xe2,
		0x13,0xca,0x16,0xdc,0x13,0xd0,0x13,0xd6,0x1a,0x30,0x13,0xca,0x17,0x42,0x13,0xd0,
		0x13,0xd6,0x12,0x80,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,0x1a,0x3c,0x13,0xca,
		0x17,0x42,0x13,0xd0,0x13,0xd6,0x12,0xec,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,
		0x13,0x64,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,0x13,0x28,0x13,0xca,0x17,0x42,
		0x13,0xd0,0x13,0xd6,0x12,0x86,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,0x19,0x18,
		0x13,0xca,0x16,0xdc,0x13,0xd0,0x13,0xd6,0x13,0x76,0x13,0xca,0x17,0x42,0x13,0xd0,
		0x13,0xd6,0x13,0x7c,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,0x19,0x18,0x13,0xca,
		0x17,0x42,0x13,0xd0,0x13,0xd6,0x13,0x5e,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,
		0x19,0x18,0x13,0xca,0x16,0xdc,0x13,0xd0,0x13,0xd6,0x13,0x76,0x13,0xca,0x17,0x42,
		0x13,0xd0,0x13,0xd6,0x13,0x7c,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,0x13,0x88,
		0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,0x13,0x22,0x13,0xca,0x17,0x42,0x13,0xd0,
		0x13,0xd6,0x13,0x22,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,0x13,0x82,0x13,0xca,
		0x17,0x42,0x13,0xd0,0x13,0xd6,0x12,0x8c,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,
		0x12,0x92,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,0x19,0x18,0x13,0xca,0x17,0x42,
		0x13,0xd0,0x13,0xd6,0x19,0x18,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,0x13,0x5e,
		0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,0x13,0x88,0x13,0xca,0x17,0x42,0x13,0xd0,
		0x13,0xd6,0x13,0x34,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,0x12,0x98,0x13,0xca,
		0x17,0x42,0x13,0xd0,0x13,0xd6,0x12,0x9e,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,
		0x19,0x18,0x00,0x00,0x17,0x2a,0x00,0x00,0x00,0x00,0x19,0x18,0x00,0x00,0x17,0x42,
		0x00,0x00,0x00,0x00,0x19,0x18,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x13,0x5e,
		0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x19,0xe8,0x00,0x00,0x17,0x42,0x00,0x00,
		0x00,0x00,0x19,0x18,0x00,0x00,0x15,0xda,0x00,0x00,0x00,0x00,0x12,0xec,0x00,0x00,
		0x17,0x42,0x00,0x00,0x00,0x00,0x19,0x18,0x00,0x00,0x16,0xdc,0x00,0x00,0x00,0x00,
		0x13,0x22,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x19,0x18,0x00,0x00,0x15,0xf2,
		0x00,0x00,0x00,0x00,0x12,0xd4,0x00,0x00,0x12,0xce,0x00,0x00,0x00,0x00,0x12,0xa4,
		0x00,0x00,0x12,0xce,0x00,0x00,0x00,0x00,0x12,0xaa,0x00,0x00,0x12,0xce,0x00,0x00,
		0x00,0x00,0x12,0xb0,0x00,0x00,0x12,0xce,0x00,0x00,0x00,0x00,0x12,0xb6,0x00,0x00,
		0x12,0xce,0x00,0x00,0x00,0x00,0x12,0xd4,0x00,0x00,0x12,0xbc,0x00,0x00,0x00,0x00,
		0x12,0xc2,0x00,0x00,0x12,0xce,0x00,0x00,0x00,0x00,0x12,0xd4,0x00,0x00,0x12,0xc8,
		0x00,0x00,0x00,0x00,0x12,0xda,0x00,0x00,0x12,0xce,0x00,0x00,0x00,0x00,0x12,0xd4,
		0x00,0x00,0x12,0xe0,0x00,0x00,0x00,0x00,0x12,0xda,0x00,0x00,0x12,0xe0,0x00,0x00,
		0x00,0x00,0x19,0x18,0x13,0xca,0x17,0x42,0x13,0xd0,0x13,0xd6,0x19,0x18,0x00,0x00,
		0x17,0x42,0x00,0x00,0x12,0xe6,0x19,0x18,0x00,0x00,0x17,0x42,0x00,0x00,0x12,0xe6,
		0x19,0xe8,0x00,0x00,0x17,0x42,0x00,0x00,0x12,0xe6,0x19,0x18,0x00,0x00,0x15,0xd4,
		0x00,0x00,0x12,0xe6,0x19,0x18,0x00,0x00,0x15,0xda,0x00,0x00,0x12,0xe6,0x19,0x18,
		0x00,0x00,0x16,0xdc,0x00,0x00,0x12,0xe6,0x19,0x18,0x00,0x00,0x15,0xf2,0x00,0x00,
		0x12,0xe6,0x19,0x18,0x13,0x3a,0x17,0x42,0x13,0x40,0x00,0x00,0x13,0x5e,0x13,0x3a,
		0x17,0x42,0x13,0x40,0x00,0x00,0x19,0xee,0x13,0x3a,0x17,0x42,0x13,0x40,0x00,0x00,
		0x19,0xe2,0x13,0x3a,0x17,0x42,0x13,0x40,0x00,0x00,0x12,0xec,0x13,0x3a,0x17,0x42,
		0x13,0x40,0x00,0x00,0x13,0x64,0x13,0x3a,0x17,0x42,0x13,0x40,0x00,0x00,0x19,0x18,
		0x13,0x3a,0x16,0xdc,0x13,0x40,0x00,0x00,0x13,0x76,0x13,0x3a,0x17,0x42,0x13,0x40,
		0x00,0x00,0x13,0x7c,0x13,0x3a,0x17,0x42,0x13,0x40,0x00,0x00,0x12,0xf8,0x1a,0x76,
		0x13,0x16,0x13,0x1c,0x00,0x00,0x12,0xf2,0x1a,0x76,0x13,0x16,0x13,0x1c,0x00,0x00,
		0x12,0xf8,0x1a,0x76,0x12,0xfe,0x13,0x1c,0x00,0x00,0x13,0x04,0x1a,0x76,0x13,0x16,
		0x13,0x1c,0x00,0x00,0x13,0x0a,0x1a,0x76,0x13,0x16,0x13,0x1c,0x00,0x00,0x13,0x10,
		0x1a,0x76,0x13,0x16,0x13,0x1c,0x00,0x00,0x13,0x22,0x13,0x3a,0x17,0x42,0x13,0x40,
		0x00,0x00,0x13,0x22,0x13,0x3a,0x17,0x42,0x13,0x40,0x00,0x00,0x13,0x82,0x13,0x3a,
		0x17,0x42,0x13,0x40,0x00,0x00,0x13,0x28,0x13,0x3a,0x17,0x42,0x13,0x40,0x00,0x00,
		0x19,0x18,0x13,0x3a,0x17,0x42,0x13,0x40,0x00,0x00,0x13,0x2e,0x13,0x3a,0x17,0x42,
		0x13,0x40,0x00,0x00,0x13,0x88,0x13,0x3a,0x17,0x42,0x13,0x40,0x00,0x00,0x13,0x34,
		0x13,0x3a,0x17,0x42,0x13,0x40,0x00,0x00,0x19,0x18,0x00,0x00,0x17,0x42,0x00,0x00,
		0x00,0x00,0x17,0x30,0x00,0x00,0x13,0x58,0x00,0x00,0x00,0x00,0x13,0x94,0x00,0x00,
		0x13,0x58,0x00,0x00,0x00,0x00,0x13,0x46,0x00,0x00,0x13,0x58,0x00,0x00,0x00,0x00,
		0x13,0x4c,0x00,0x00,0x13,0x58,0x00,0x00,0x00,0x00,0x13,0x52,0x00,0x00,0x13,0x58,
		0x00,0x00,0x00,0x00,0x19,0x18,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x19,0x18,
		0x00,0x00,0x13,0x8e,0x00,0x00,0x00,0x00,0x13,0x5e,0x00,0x00,0x13,0x8e,0x00,0x00,
		0x00,0x00,0x19,0xe2,0x00,0x00,0x13,0x8e,0x00,0x00,0x00,0x00,0x13,0x64,0x00,0x00,
		0x13,0x8e,0x00,0x00,0x00,0x00,0x13,0x6a,0x00,0x00,0x13,0x8e,0x00,0x00,0x00,0x00,
		0x19,0x18,0x00,0x00,0x13,0x70,0x00,0x00,0x00,0x00,0x13,0x76,0x00,0x00,0x13,0x8e,
		0x00,0x00,0x00,0x00,0x13,0x7c,0x00,0x00,0x13,0x8e,0x00,0x00,0x00,0x00,0x13,0x82,
		0x00,0x00,0x13,0x8e,0x00,0x00,0x00,0x00,0x13,0x88,0x00,0x00,0x13,0x8e,0x00,0x00,
		0x00,0x00,0x17,0x30,0x00,0x00,0x15,0xce,0x00,0x00,0x00,0x00,0x13,0x94,0x00,0x00,
		0x15,0xce,0x00,0x00,0x00,0x00,0x13,0x9a,0x00,0x00,0x15,0xce,0x00,0x00,0x00,0x00,
		0x13,0xa0,0x00,0x00,0x15,0xce,0x00,0x00,0x00,0x00,0x17,0x30,0x00,0x00,0x15,0xb6,
		0x00,0x00,0x00,0x00,0x18,0xca,0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,0x16,0xd0,
		0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,0x15,0xfe,0x00,0x00,0x17,0x42,0x13,0xbe,
		0x00,0x00,0x13,0xa6,0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,0x15,0xfe,0x00,0x00,
		0x16,0xdc,0x13,0xbe,0x00,0x00,0x13,0xa6,0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,
		0x13,0xac,0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,0x13,0xb2,0x00,0x00,0x17,0x42,
		0x13,0xbe,0x00,0x00,0x19,0x88,0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,0x15,0x50,
		0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,0x19,0x88,0x00,0x00,0x16,0xdc,0x13,0xbe,
		0x00,0x00,0x15,0x56,0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,0x15,0x5c,0x00,0x00,
		0x17,0x42,0x13,0xbe,0x00,0x00,0x15,0x62,0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,
		0x16,0x04,0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,0x16,0x82,0x00,0x00,0x17,0x42,
		0x13,0xbe,0x00,0x00,0x18,0xca,0x00,0x00,0x16,0xdc,0x13,0xbe,0x00,0x00,0x16,0x88,
		0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,0x16,0x10,0x00,0x00,0x17,0x42,0x13,0xbe,
		0x00,0x00,0x16,0x52,0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,0x19,0xa6,0x00,0x00,
		0x17,0x42,0x13,0xbe,0x00,0x00,0x18,0xca,0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,
		0x16,0x5e,0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,0x13,0xb8,0x00,0x00,0x17,0x42,
		0x13,0xbe,0x00,0x00,0x16,0x64,0x00,0x00,0x17,0x42,0x13,0xbe,0x00,0x00,0x18,0xca,
		0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x13,0xc4,0x13,0xca,0x17,0x42,0x13,0xd0,
		0x13,0xd6,0x13,0xe2,0x00,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x13,0xe8,0x00,0x00,
		0x14,0x00,0x00,0x00,0x00,0x00,0x13,0xdc,0x00,0x00,0x14,0x00,0x00,0x00,0x00,0x00,
		0x13,0xe2,0x00,0x00,0x13,0xee,0x00,0x00,0x00,0x00,0x13,0xe8,0x00,0x00,0x13,0xee,
		0x00,0x00,0x00,0x00,0x13,0xf4,0x00,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x13,0xfa,
		0x00,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x18,0xca,0x14,0x06,0x17,0x42,0x00,0x00,
		0x14,0x0c,0x18,0xca,0x14,0x06,0x17,0x42,0x00,0x00,0x14,0x0c,0x18,0xca,0x14,0x06,
		0x16,0xdc,0x00,0x00,0x14,0x0c,0x18,0xca,0x14,0x06,0x15,0xf2,0x00,0x00,0x14,0x0c,
		0x18,0xc4,0x00,0x00,0x17,0x00,0x14,0x84,0x00,0x00,0x14,0x12,0x00,0x00,0x17,0x00,
		0x14,0x84,0x00,0x00,0x14,0x1e,0x00,0x00,0x17,0x00,0x14,0x84,0x00,0x00,0x14,0x18,
		0x00,0x00,0x17,0x00,0x14,0x84,0x00,0x00,0x14,0x1e,0x00,0x00,0x14,0x24,0x14,0x84,
		0x00,0x00,0x14,0x30,0x00,0x00,0x17,0x00,0x14,0x84,0x00,0x00,0x14,0x2a,0x00,0x00,
		0x17,0x00,0x14,0x84,0x00,0x00,0x14,0x30,0x00,0x00,0x14,0x5a,0x14,0x84,0x00,0x00,
		0x14,0x36,0x00,0x00,0x17,0x00,0x14,0x84,0x00,0x00,0x14,0x3c,0x00,0x00,0x17,0x00,
		0x14,0x84,0x00,0x00,0x14,0x42,0x00,0x00,0x17,0x00,0x14,0x84,0x00,0x00,0x14,0x48,
		0x00,0x00,0x17,0x00,0x14,0x84,0x00,0x00,0x14,0x4e,0x00,0x00,0x17,0x00,0x14,0x84,
		0x00,0x00,0x14,0x54,0x00,0x00,0x17,0x00,0x14,0x84,0x00,0x00,0x18,0xc4,0x00,0x00,
		0x14,0x5a,0x14,0x84,0x00,0x00,0x14,0x60,0x00,0x00,0x17,0x00,0x14,0x84,0x00,0x00,
		0x14,0x66,0x00,0x00,0x17,0x00,0x14,0x84,0x00,0x00,0x14,0x6c,0x00,0x00,0x17,0x00,
		0x14,0x84,0x00,0x00,0x14,0x72,0x00,0x00,0x17,0x00,0x14,0x84,0x00,0x00,0x14,0x78,
		0x00,0x00,0x17,0x00,0x14,0x84,0x00,0x00,0x14,0x7e,0x00,0x00,0x17,0x00,0x14,0x84,
		0x00,0x00,0x18,0xc4,0x00,0x00,0x17,0x00,0x14,0x84,0x00,0x00,0x19,0xa0,0x00,0x00,
		0x17,0x00,0x14,0x84,0x00,0x00,0x14,0x8a,0x00,0x00,0x14,0x90,0x14,0x96,0x00,0x00,
		0x14,0x9c,0x00,0x00,0x14,0xc0,0x00,0x00,0x00,0x00,0x14,0x9c,0x00,0x00,0x14,0xc0,
		0x00,0x00,0x00,0x00,0x14,0xa2,0x00,0x00,0x14,0xc0,0x00,0x00,0x00,0x00,0x14,0xa8,
		0x00,0x00,0x14,0xc0,0x00,0x00,0x00,0x00,0x14,0xae,0x00,0x00,0x14,0xc0,0x00,0x00,
		0x00,0x00,0x14,0xb4,0x00,0x00,0x14,0xc0,0x00,0x00,0x00,0x00,0x14,0xba,0x00,0x00,
		0x14,0xc0,0x00,0x00,0x00,0x00,0x14,0xd2,0x00,0x00,0x17,0x42,0x00,0x00,0x14,0xd8,
		0x14,0xd2,0x00,0x00,0x17,0x42,0x00,0x00,0x14,0xd8,0x14,0xd2,0x00,0x00,0x14,0xc6,
		0x00,0x00,0x14,0xd8,0x14,0xcc,0x00,0x00,0x17,0x42,0x00,0x00,0x14,0xd8,0x14,0xd2,
		0x00,0x00,0x16,0xdc,0x00,0x00,0x14,0xd8,0x14,0xe4,0x00,0x00,0x17,0x42,0x14,0xea,
		0x00,0x00,0x18,0xca,0x00,0x00,0x17,0x42,0x14,0xea,0x00,0x00,0x18,0xca,0x00,0x00,
		0x17,0x42,0x14,0xea,0x00,0x00,0x15,0xfe,0x00,0x00,0x17,0x42,0x14,0xea,0x00,0x00,
		0x19,0x88,0x00,0x00,0x17,0x42,0x14,0xea,0x00,0x00,0x16,0x04,0x00,0x00,0x17,0x42,
		0x14,0xea,0x00,0x00,0x18,0xca,0x00,0x00,0x17,0x42,0x14,0xea,0x00,0x00,0x14,0xde,
		0x00,0x00,0x17,0x42,0x14,0xea,0x00,0x00,0x14,0xe4,0x00,0x00,0x17,0x42,0x14,0xea,
		0x00,0x00,0x14,0xe4,0x00,0x00,0x16,0xdc,0x14,0xea,0x00,0x00,0x16,0x88,0x00,0x00,
		0x17,0x42,0x14,0xea,0x00,0x00,0x16,0x10,0x00,0x00,0x17,0x42,0x14,0xea,0x00,0x00,
		0x16,0x52,0x00,0x00,0x17,0x42,0x14,0xea,0x00,0x00,0x19,0xa6,0x00,0x00,0x17,0x42,
		0x14,0xea,0x00,0x00,0x14,0xe4,0x00,0x00,0x17,0x42,0x14,0xea,0x00,0x00,0x16,0xd6,
		0x00,0x00,0x17,0x42,0x14,0xea,0x00,0x00,0x14,0xf0,0x00,0x00,0x15,0x02,0x00,0x00,
		0x00,0x00,0x14,0xf6,0x00,0x00,0x15,0x02,0x00,0x00,0x00,0x00,0x14,0xfc,0x00,0x00,
		0x15,0x02,0x00,0x00,0x00,0x00,0x15,0x08,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,
		0x15,0x08,0x00,0x00,0x15,0xda,0x00,0x00,0x00,0x00,0x15,0x0e,0x00,0x00,0x17,0x42,
		0x00,0x00,0x00,0x00,0x15,0x1a,0x15,0x20,0x17,0x42,0x00,0x00,0x15,0x92,0x15,0x14,
		0x15,0x20,0x17,0x42,0x00,0x00,0x15,0x92,0x15,0x1a,0x15,0x20,0x17,0x42,0x00,0x00,
		0x15,0x92,0x15,0x1a,0x15,0x20,0x15,0xda,0x00,0x00,0x15,0x92,0x15,0x1a,0x15,0x20,
		0x16,0xdc,0x00,0x00,0x15,0x92,0x15,0x1a,0x15,0x20,0x15,0xf2,0x00,0x00,0x15,0x92,
		0x18,0xca,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x18,0xca,0x00,0x00,0x16,0xdc,
		0x00,0x00,0x00,0x00,0x16,0xe2,0x00,0x00,0x16,0xe8,0x00,0x00,0x00,0x00,0x15,0x26,
		0x00,0x00,0x16,0xe8,0x00,0x00,0x00,0x00,0x15,0x2c,0x00,0x00,0x16,0xe8,0x00,0x00,
		0x00,0x00,0x16,0xe2,0x00,0x00,0x15,0x32,0x00,0x00,0x00,0x00,0x15,0x38,0x00,0x00,
		0x16,0xe8,0x00,0x00,0x00,0x00,0x16,0xe2,0x00,0x00,0x15,0x3e,0x00,0x00,0x00,0x00,
		0x16,0xe2,0x00,0x00,0x15,0x44,0x00,0x00,0x00,0x00,0x15,0x4a,0x00,0x00,0x16,0xe8,
		0x00,0x00,0x00,0x00,0x18,0xca,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x16,0xd0,
		0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x15,0xfe,0x15,0x86,0x17,0x42,0x15,0x8c,
		0x15,0x92,0x19,0x88,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x15,0x50,0x15,0x86,
		0x17,0x42,0x15,0x8c,0x15,0x92,0x19,0x88,0x15,0x86,0x16,0xdc,0x15,0x8c,0x15,0x92,
		0x15,0x56,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x15,0x5c,0x15,0x86,0x17,0x42,
		0x15,0x8c,0x15,0x92,0x15,0x62,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x16,0x04,
		0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x16,0x82,0x15,0x86,0x17,0x42,0x15,0x8c,
		0x15,0x92,0x16,0x58,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x15,0x68,0x15,0x86,
		0x17,0x42,0x15,0x8c,0x15,0x92,0x18,0xca,0x15,0x86,0x16,0xdc,0x15,0x8c,0x15,0x92,
		0x16,0x88,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x16,0x10,0x15,0x86,0x17,0x42,
		0x15,0x8c,0x15,0x92,0x18,0xca,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x16,0xd0,
		0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x18,0xca,0x15,0x86,0x16,0xdc,0x15,0x8c,
		0x15,0x92,0x16,0x88,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x16,0x10,0x15,0x86,
		0x17,0x42,0x15,0x8c,0x15,0x92,0x16,0x64,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,
		0x16,0x4c,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x16,0x52,0x15,0x86,0x17,0x42,
		0x15,0x8c,0x15,0x92,0x19,0xa6,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x15,0x6e,
		0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x15,0x74,0x15,0x86,0x17,0x42,0x15,0x8c,
		0x15,0x92,0x18,0xca,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x18,0xca,0x15,0x86,
		0x17,0x42,0x15,0x8c,0x15,0x92,0x16,0xd0,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,
		0x16,0x64,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x16,0x6a,0x15,0x86,0x17,0x42,
		0x15,0x8c,0x15,0x92,0x15,0x7a,0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x15,0x80,
		0x15,0x86,0x17,0x42,0x15,0x8c,0x15,0x92,0x15,0x98,0x00,0x00,0x15,0xce,0x00,0x00,
		0x00,0x00,0x15,0xc8,0x00,0x00,0x15,0xce,0x00,0x00,0x00,0x00,0x15,0x9e,0x00,0x00,
		0x15,0xce,0x00,0x00,0x00,0x00,0x15,0xa4,0x00,0x00,0x15,0xce,0x00,0x00,0x00,0x00,
		0x15,0xc8,0x00,0x00,0x15,0xaa,0x00,0x00,0x00,0x00,0x15,0xb0,0x00,0x00,0x15,0xce,
		0x00,0x00,0x00,0x00,0x15,0xc8,0x00,0x00,0x15,0xb6,0x00,0x00,0x00,0x00,0x15,0xbc,
		0x00,0x00,0x15,0xce,0x00,0x00,0x00,0x00,0x15,0xc8,0x00,0x00,0x15,0xc2,0x00,0x00,
		0x00,0x00,0x15,0xc8,0x00,0x00,0x15,0xce,0x00,0x00,0x00,0x00,0x15,0xe6,0x15,0xec,
		0x17,0x42,0x00,0x00,0x15,0xf8,0x15,0xe6,0x15,0xec,0x17,0x42,0x00,0x00,0x15,0xf8,
		0x15,0xe6,0x15,0xec,0x17,0x42,0x00,0x00,0x15,0xf8,0x15,0xe6,0x15,0xec,0x15,0xd4,
		0x00,0x00,0x15,0xf8,0x15,0xe6,0x15,0xec,0x15,0xda,0x00,0x00,0x15,0xf8,0x15,0xe0,
		0x15,0xec,0x17,0x42,0x00,0x00,0x15,0xf8,0x15,0xe6,0x15,0xec,0x16,0xdc,0x00,0x00,
		0x15,0xf8,0x15,0xe6,0x15,0xec,0x15,0xf2,0x00,0x00,0x15,0xf8,0x18,0xca,0x16,0x70,
		0x16,0x76,0x16,0x7c,0x00,0x00,0x16,0xd0,0x16,0x70,0x16,0x76,0x16,0x7c,0x00,0x00,
		0x15,0xfe,0x16,0x70,0x16,0x76,0x16,0x7c,0x00,0x00,0x19,0x88,0x16,0x70,0x16,0x76,
		0x16,0x7c,0x00,0x00,0x16,0x04,0x16,0x70,0x16,0x76,0x16,0x7c,0x00,0x00,0x16,0x82,
		0x16,0x70,0x16,0x76,0x16,0x7c,0x00,0x00,0x18,0xca,0x16,0x70,0x16,0x0a,0x16,0x7c,
		0x00,0x00,0x16,0x88,0x16,0x70,0x16,0x76,0x16,0x7c,0x00,0x00,0x16,0x10,0x16,0x70,
		0x16,0x76,0x16,0x7c,0x00,0x00,0x16,0x1c,0x16,0x3a,0x16,0x40,0x16,0x46,0x00,0x00,
		0x16,0x16,0x16,0x3a,0x16,0x40,0x16,0x46,0x00,0x00,0x16,0x1c,0x16,0x3a,0x16,0x22,
		0x16,0x46,0x00,0x00,0x16,0x28,0x16,0x3a,0x16,0x40,0x16,0x46,0x00,0x00,0x16,0x2e,
		0x16,0x3a,0x16,0x40,0x16,0x46,0x00,0x00,0x16,0x34,0x16,0x3a,0x16,0x40,0x16,0x46,
		0x00,0x00,0x16,0x4c,0x16,0x70,0x16,0x76,0x16,0x7c,0x00,0x00,0x16,0x52,0x16,0x70,
		0x16,0x76,0x16,0x7c,0x00,0x00,0x19,0xa6,0x16,0x70,0x16,0x76,0x16,0x7c,0x00,0x00,
		0x16,0x58,0x16,0x70,0x16,0x76,0x16,0x7c,0x00,0x00,0x18,0xca,0x16,0x70,0x16,0x76,
		0x16,0x7c,0x00,0x00,0x16,0x5e,0x16,0x70,0x16,0x76,0x16,0x7c,0x00,0x00,0x16,0x64,
		0x16,0x70,0x16,0x76,0x16,0x7c,0x00,0x00,0x16,0x6a,0x16,0x70,0x16,0x76,0x16,0x7c,
		0x00,0x00,0x18,0xca,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x18,0xca,0x00,0x00,
		0x17,0x42,0x00,0x00,0x00,0x00,0x16,0xd0,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,
		0x19,0x88,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x16,0x82,0x00,0x00,0x17,0x42,
		0x00,0x00,0x00,0x00,0x16,0x88,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x18,0xca,
		0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x16,0xa6,0x00,0x00,0x16,0xca,0x00,0x00,
		0x00,0x00,0x16,0x8e,0x00,0x00,0x16,0xca,0x00,0x00,0x00,0x00,0x16,0x94,0x00,0x00,
		0x16,0xca,0x00,0x00,0x00,0x00,0x16,0x9a,0x00,0x00,0x16,0xca,0x00,0x00,0x00,0x00,
		0x16,0xa0,0x00,0x00,0x16,0xca,0x00,0x00,0x00,0x00,0x16,0xa6,0x00,0x00,0x16,0xac,
		0x00,0x00,0x00,0x00,0x16,0xb2,0x00,0x00,0x16,0xca,0x00,0x00,0x00,0x00,0x16,0xb8,
		0x00,0x00,0x16,0xca,0x00,0x00,0x00,0x00,0x16,0xbe,0x00,0x00,0x16,0xca,0x00,0x00,
		0x00,0x00,0x16,0xc4,0x00,0x00,0x16,0xca,0x00,0x00,0x00,0x00,0x18,0xca,0x00,0x00,
		0x17,0x42,0x00,0x00,0x00,0x00,0x16,0xd0,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,
		0x16,0xd6,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x18,0xca,0x00,0x00,0x17,0x42,
		0x00,0x00,0x00,0x00,0x18,0xca,0x00,0x00,0x16,0xdc,0x00,0x00,0x00,0x00,0x16,0xe2,
		0x00,0x00,0x16,0xe8,0x00,0x00,0x00,0x00,0x16,0xfa,0x00,0x00,0x17,0x00,0x00,0x00,
		0x00,0x00,0x16,0xee,0x00,0x00,0x16,0xf4,0x00,0x00,0x00,0x00,0x16,0xfa,0x00,0x00,
		0x17,0x00,0x00,0x00,0x00,0x00,0x17,0x06,0x17,0x0c,0x17,0x12,0x00,0x00,0x17,0x18,
		0x19,0x18,0x00,0x00,0x17,0x42,0x00,0x00,0x00,0x00,0x17,0x1e,0x00,0x00,0x17,0x24,
		0x00,0x00,0x00,0x00,0x19,0x18,0x00,0x00,0x17,0x2a,0x00,0x00,0x00,0x00,0x17,0x30,
		0x00,0x00,0x17,0x36,0x00,0x00,0x00,0x00,0x17,0x3c,0x00,0x00,0x17,0x42,0x00,0x00,
		0x00,0x00,0x17,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x4e,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x54,0x00,0x00,0x00,0x00,
		0x00,0x01,0x01,0x18,0x03,0x54,0x00,0x01,0x00,0xe7,0x03,0xbb,0x00,0x01,0x00,0xf6,
		0x03,0x96,0x00,0x01,0x00,0xf5,0x03,0x53,0x00,0x01,0x00,0xfa,0x03,0x91,0x00,0x01,
		0x01,0x9e,0x00,0x00,0x00,0x01,0x01,0x0e,0x03,0x0d,0x00,0x01,0x01,0x0e,0x02,0xe5,
		0x00,0x01,0x01,0xa6,0x02,0xda,0x00,0x01,0x01,0x0c,0x02,0xdf,0x00,0x01,0x00,0xdc,
		0x03,0x0d,0x00,0x01,0x00,0xdc,0x02,0x6f,0x00,0x01,0x01,0x03,0x02,0xe5,0x00,0x01,
		0x01,0x03,0x03,0x0d,0x00,0x01,0x01,0x03,0x03,0x13,0x00,0x01,0x01,0x03,0x03,0x1e,
		0x00,0x01,0x01,0x9b,0x02,0xda,0x00,0x01,0x01,0x03,0x03,0xa1,0x00,0x01,0x01,0x03,
		0x03,0x17,0x00,0x01,0x01,0x03,0x03,0x97,0x00,0x01,0x00,0xef,0x03,0x1b,0x00,0x01,
		0x01,0x01,0x02,0xfd,0x00,0x01,0x01,0x01,0x02,0xdf,0x00,0x01,0x00,0xf0,0x03,0x17,
		0x00,0x01,0x01,0x09,0x03,0x45,0x00,0x01,0x01,0x03,0x03,0x2a,0x00,0x01,0x01,0x03,
		0x03,0x09,0x00,0x01,0x01,0x03,0x03,0x7f,0x00,0x01,0x00,0xf0,0x03,0xb1,0x00,0x01,
		0x01,0x03,0x02,0x6f,0x00,0x01,0x01,0x03,0x03,0x0a,0x00,0x01,0x01,0x12,0x03,0x13,
		0x00,0x01,0x01,0x12,0x03,0x0d,0x00,0x01,0x01,0xaa,0x02,0xda,0x00,0x01,0x01,0x12,
		0x02,0x6f,0x00,0x01,0x01,0x0a,0xfe,0xf3,0x00,0x01,0x01,0x10,0x02,0xdf,0x00,0x01,
		0x01,0x12,0x03,0x09,0x00,0x01,0x01,0x0a,0x00,0x00,0x00,0x01,0x00,0xef,0x02,0xe5,
		0x00,0x01,0x00,0xef,0x03,0x13,0x00,0x01,0x01,0x87,0x02,0xda,0x00,0x01,0x00,0xdb,
		0x03,0x1b,0x00,0x01,0x00,0xed,0x02,0xfd,0x00,0x01,0x00,0xed,0x03,0x73,0x00,0x01,
		0x00,0xed,0x02,0xdf,0x00,0x01,0x00,0xdc,0x03,0x17,0x00,0x01,0x00,0xf5,0x03,0x45,
		0x00,0x01,0x00,0xef,0x03,0x2a,0x00,0x01,0x00,0xef,0x03,0x09,0x00,0x01,0x00,0xef,
		0x02,0x6f,0x00,0x01,0x01,0x61,0x00,0x00,0x00,0x01,0x01,0x4a,0x02,0x6f,0x00,0x01,
		0x01,0xe2,0x02,0xda,0x00,0x01,0x00,0xc8,0x02,0xe5,0x00,0x01,0x00,0xc8,0x02,0x6f,
		0x00,0x01,0x00,0xb4,0x01,0xc9,0x00,0x01,0x00,0x6b,0x01,0x38,0x00,0x01,0x00,0xfa,
		0x03,0x1e,0x00,0x01,0x00,0xfa,0x03,0x17,0x00,0x01,0x00,0xf8,0x03,0x79,0x00,0x01,
		0x00,0xfa,0x03,0x7f,0x00,0x01,0x00,0xe7,0x03,0xb1,0x00,0x01,0x00,0xf8,0x03,0x98,
		0x00,0x01,0x00,0xf5,0x03,0x9c,0x00,0x01,0x01,0x05,0x02,0xe5,0x00,0x01,0x01,0x03,
		0x03,0x55,0x00,0x01,0x01,0x05,0x03,0x0d,0x00,0x01,0x01,0x03,0x03,0x7d,0x00,0x01,
		0x00,0xf7,0xff,0x4f,0x00,0x01,0x01,0x9d,0x02,0xda,0x00,0x01,0x00,0xf7,0xfe,0xf3,
		0x00,0x01,0x00,0xf7,0x00,0x00,0x00,0x01,0x01,0x05,0x02,0x6f,0x00,0x01,0x01,0x03,
		0x02,0xdf,0x00,0x01,0x00,0xf7,0xff,0x55,0x00,0x01,0x00,0xf4,0x01,0x38,0x00,0x01,
		0x00,0xe6,0x03,0x1b,0x00,0x01,0x00,0xdf,0x02,0xe5,0x00,0x01,0x00,0xdf,0x02,0x6f,
		0x00,0x01,0x00,0xde,0xff,0x55,0x00,0x01,0x00,0xcc,0x03,0x17,0x00,0x01,0x00,0xe5,
		0x03,0x45,0x00,0x01,0x00,0xdf,0x03,0x0a,0x00,0x01,0x00,0xde,0x00,0x00,0x00,0x01,
		0x01,0xc2,0x00,0x0a,0x00,0x01,0x00,0xfa,0x03,0x2a,0x00,0x01,0x00,0xf8,0x03,0x97,
		0x00,0x01,0x00,0xfa,0x03,0x1b,0x00,0x01,0x00,0xfa,0x03,0x80,0x00,0x01,0x01,0xc6,
		0x02,0x6f,0x00,0x01,0x01,0x2e,0x00,0x0a,0x00,0x01,0x01,0x9c,0x02,0xda,0x00,0x01,
		0x01,0x02,0x02,0xfd,0x00,0x01,0x00,0xf1,0x03,0x17,0x00,0x01,0x00,0xfe,0x00,0x00,
		0x00,0x01,0x00,0xfa,0x02,0xe5,0x00,0x01,0x00,0xf8,0x02,0xfd,0x00,0x01,0x00,0xf8,
		0x02,0xdf,0x00,0x01,0x01,0x02,0xff,0x55,0x00,0x01,0x00,0xe7,0x03,0x17,0x00,0x01,
		0x01,0x00,0x03,0x45,0x00,0x01,0x00,0xfa,0x03,0x09,0x00,0x01,0x00,0xfa,0x03,0x0a,
		0x00,0x01,0x01,0x02,0x00,0x00,0x00,0x01,0x01,0x04,0x02,0xe5,0x00,0x01,0x01,0x04,
		0x03,0x0d,0x00,0x01,0x01,0x02,0x02,0xdf,0x00,0x01,0x00,0xfa,0x03,0x20,0x00,0x01,
		0x00,0xf7,0x03,0x5a,0x00,0x01,0x00,0xfa,0x03,0x01,0x00,0x01,0x01,0x0d,0x03,0x4d,
		0x00,0x01,0x01,0x81,0x00,0x00,0x00,0x01,0x00,0xfd,0x01,0x39,0x00,0x01,0x01,0x7b,
		0x02,0x48,0x00,0x01,0x01,0x1f,0x00,0x0a,0x00,0x01,0x00,0xfa,0x01,0x38,0x00,0x01,
		0x01,0x1e,0x02,0x5c,0x00,0x01,0x01,0x1e,0x01,0xc9,0x00,0x01,0x01,0x31,0x02,0x61,
		0x00,0x01,0x01,0x1e,0xff,0x4f,0x00,0x01,0x01,0xaf,0x02,0x38,0x00,0x01,0x01,0x1e,
		0x02,0x5d,0x00,0x01,0x01,0x1e,0x00,0x00,0x00,0x01,0x01,0xd6,0x01,0xc9,0x00,0x01,
		0x01,0x68,0x02,0x25,0x00,0x01,0x01,0x17,0x02,0x61,0x00,0x01,0x01,0x04,0x02,0x5c,
		0x00,0x01,0x01,0x04,0x02,0x8e,0x00,0x01,0x01,0x18,0xff,0x4f,0x00,0x01,0x01,0x04,
		0x02,0xaf,0x00,0x01,0x01,0x95,0x02,0x38,0x00,0x01,0x01,0x04,0x02,0xce,0x00,0x01,
		0x01,0x04,0x03,0x25,0x00,0x01,0x01,0x04,0x03,0x02,0x00,0x01,0x00,0xf0,0x02,0x75,
		0x00,0x01,0x01,0x05,0x02,0x5d,0x00,0x01,0x01,0x04,0x02,0x5d,0x00,0x01,0x01,0x18,
		0xff,0x55,0x00,0x01,0x00,0xde,0x02,0x9f,0x00,0x01,0x01,0x0a,0x02,0x9f,0x00,0x01,
		0x01,0x04,0x02,0x84,0x00,0x01,0x01,0x04,0x02,0x63,0x00,0x01,0x01,0x17,0x02,0xfb,
		0x00,0x01,0x00,0xde,0x03,0x39,0x00,0x01,0x01,0x3e,0x00,0x09,0x00,0x01,0x00,0xdc,
		0x01,0xc9,0x00,0x01,0x00,0xf0,0x00,0x00,0x00,0x01,0x00,0xb6,0x01,0xc0,0x00,0x01,
		0x00,0xe2,0x01,0xc9,0x00,0x01,0x00,0xe2,0x02,0x5c,0x00,0x01,0x01,0x73,0x02,0x38,
		0x00,0x01,0x00,0xe2,0x03,0x28,0x00,0x01,0x00,0xe2,0x02,0x5d,0x00,0x01,0x00,0xe2,
		0x02,0x63,0x00,0x01,0x00,0xf0,0xff,0x5e,0x00,0x01,0x00,0xfa,0xff,0x44,0x00,0x01,
		0x01,0x0e,0x03,0x04,0x00,0x01,0x00,0x76,0x02,0x99,0x00,0x01,0x00,0x82,0x02,0x25,
		0x00,0x01,0x01,0x0e,0x02,0xf5,0x00,0x01,0x00,0xfa,0x02,0x5d,0x00,0x01,0x01,0x5a,
		0x00,0x00,0x00,0x01,0x01,0x48,0x02,0x5d,0x00,0x01,0x01,0x48,0x01,0xc9,0x00,0x01,
		0x01,0xd9,0x02,0x38,0x00,0x01,0x00,0xfa,0xff,0x42,0x00,0x01,0x00,0x68,0x02,0x99,
		0x00,0x01,0x00,0x68,0x01,0xc9,0x00,0x01,0x00,0xfa,0x03,0x0f,0x00,0x01,0x00,0xfa,
		0x02,0x99,0x00,0x01,0x01,0xe0,0x01,0xc9,0x00,0x01,0x01,0x1c,0x02,0x61,0x00,0x01,
		0x01,0x09,0x02,0x5c,0x00,0x01,0x01,0x04,0xfe,0xf3,0x00,0x01,0x01,0x09,0x02,0x5d,
		0x00,0x01,0x01,0x04,0xff,0x55,0x00,0x01,0x01,0x04,0xff,0x5a,0x00,0x01,0x01,0x09,
		0x02,0x7c,0x00,0x01,0x00,0xfa,0x02,0xaf,0x00,0x01,0x00,0xfa,0x02,0xce,0x00,0x01,
		0x00,0xfa,0x03,0x25,0x00,0x01,0x00,0xfa,0x03,0x02,0x00,0x01,0x00,0xfa,0x02,0xf7,
		0x00,0x01,0x01,0x0d,0x02,0xfb,0x00,0x01,0x00,0xd4,0x03,0x39,0x00,0x01,0x00,0xfb,
		0x03,0x10,0x00,0x01,0x00,0xfa,0x03,0x16,0x00,0x01,0x01,0x67,0x01,0xb4,0x00,0x01,
		0x01,0x1e,0x00,0x0a,0x00,0x01,0x00,0xfa,0x00,0xe5,0x00,0x01,0x01,0x0e,0x01,0xc9,
		0x00,0x01,0x01,0x35,0x02,0x61,0x00,0x01,0x01,0x22,0x02,0x5c,0x00,0x01,0x01,0x0e,
		0xfe,0xf3,0x00,0x01,0x01,0x0e,0x02,0x75,0x00,0x01,0x01,0x0e,0xff,0x55,0x00,0x01,
		0x01,0x22,0x02,0x84,0x00,0x01,0x01,0x0e,0xff,0x5a,0x00,0x01,0x01,0x22,0x01,0xc9,
		0x00,0x01,0x01,0x0e,0x00,0x00,0x00,0x01,0x00,0xfa,0xff,0x4f,0x00,0x01,0x00,0xfa,
		0xfe,0xf3,0x00,0x01,0x00,0xec,0x02,0xdb,0x00,0x01,0x00,0xeb,0x02,0x47,0x00,0x01,
		0x01,0x36,0x01,0xc9,0x00,0x01,0x00,0xfa,0xff,0x5a,0x00,0x01,0x00,0xd5,0x01,0x38,
		0x00,0x01,0x00,0xfa,0x02,0x8e,0x00,0x01,0x00,0xe6,0x02,0x75,0x00,0x01,0x00,0xe7,
		0xff,0x55,0x00,0x01,0x01,0x00,0x02,0x9f,0x00,0x01,0x00,0xf9,0x02,0x61,0x00,0x01,
		0x00,0xe6,0x01,0xc9,0x00,0x01,0x00,0xdc,0xff,0x55,0x00,0x01,0x00,0xc0,0x02,0x9f,
		0x00,0x01,0x00,0xec,0x02,0x9f,0x00,0x01,0x00,0xe6,0x02,0x5c,0x00,0x01,0x01,0x7d,
		0x01,0xc9,0x00,0x01,0x00,0xdc,0x00,0x00,0x00,0x01,0x01,0x5b,0x00,0x00,0x00,0x01,
		0x01,0x22,0x02,0xbb,0x00,0x01,0x00,0xfa,0x02,0x84,0x00,0x01,0x00,0xfb,0x02,0xf7,
		0x00,0x01,0x00,0xfa,0x02,0xb5,0x00,0x01,0x00,0xfa,0x02,0x7c,0x00,0x01,0x01,0x0d,
		0x03,0x14,0x00,0x01,0x01,0xb0,0x01,0xc9,0x00,0x01,0x00,0xe7,0x00,0x00,0x00,0x01,
		0x01,0x7a,0x00,0x00,0x00,0x01,0x00,0xfb,0x02,0x5d,0x00,0x01,0x00,0xd4,0x02,0x9f,
		0x00,0x01,0x01,0x10,0x02,0x61,0x00,0x01,0x01,0x8e,0x02,0x38,0x00,0x01,0x00,0xfe,
		0x02,0x5d,0x00,0x01,0x00,0xfd,0x02,0x5d,0x00,0x01,0x00,0xfd,0x01,0xc9,0x00,0x01,
		0x01,0x72,0xff,0x55,0x00,0x01,0x00,0xd7,0x02,0x9f,0x00,0x01,0x01,0x03,0x02,0x9f,
		0x00,0x01,0x00,0xfd,0x02,0x63,0x00,0x01,0x00,0xfd,0x02,0x7c,0x00,0x01,0x01,0x72,
		0x00,0x00,0x00,0x01,0x01,0x0d,0x02,0x61,0x00,0x01,0x00,0xfa,0x02,0x5c,0x00,0x01,
		0x00,0xfa,0xff,0x55,0x00,0x01,0x01,0x09,0x01,0xc9,0x00,0x01,0x01,0x04,0x00,0x00,
		0x00,0x01,0x01,0x1e,0x01,0xf4,0x00,0x01,0x01,0x1e,0x00,0x2b,0x00,0x01,0x01,0x0e,
		0x02,0x6f,0x00,0x01,0x01,0x18,0x00,0x00,0x00,0x01,0x00,0xe5,0x01,0xd9,0x00,0x01,
		0x01,0x95,0x01,0xd9,0x00,0x01,0x00,0xe5,0x00,0x6b,0x00,0x01,0x01,0x3d,0x02,0x22,
		0x00,0x01,0x00,0xf9,0x02,0x6f,0x00,0x01,0x00,0xf9,0x00,0x00,0x00,0x01,0x00,0x5d,
		0x00,0x00,0x00,0x01,0x01,0x04,0x02,0x6f,0x00,0x01,0x00,0x67,0x00,0x00,0x00,0x01,
		0x00,0xff,0x02,0x6f,0x00,0x01,0x00,0xfa,0x00,0x00,0x00,0x01,0x00,0xf5,0x02,0x75,
		0x00,0x01,0x00,0xe5,0x02,0x61,0x00,0x01,0x00,0x54,0x02,0xce,0x00,0x06,0x00,0x10,
		0x00,0x01,0x00,0x0a,0x00,0x00,0x00,0x01,0x00,0x0c,0x00,0x0c,0x00,0x01,0x00,0x1c,
		0x00,0x54,0x00,0x01,0x00,0x06,0x03,0x8a,0x03,0x8b,0x03,0x8c,0x03,0x8d,0x03,0x8f,
		0x03,0x90,0x00,0x06,0x00,0x00,0x00,0x1a,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x26,
		0x00,0x00,0x00,0x2c,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x32,0x00,0x01,0x00,0xef,
		0x00,0x00,0x00,0x01,0x00,0xfc,0x00,0x00,0x00,0x01,0x00,0xec,0x00,0x00,0x00,0x01,
		0x01,0x0f,0x00,0x00,0x00,0x01,0x00,0xf8,0x00,0x00,0x00,0x06,0x00,0x0e,0x00,0x14,
		0x00,0x1a,0x00,0x20,0x00,0x26,0x00,0x2c,0x00,0x01,0x00,0xef,0xff,0x55,0x00,0x01,
		0x00,0xfc,0xff,0x5a,0x00,0x01,0x00,0xec,0xfe,0xf3,0x00,0x01,0x01,0x0f,0xff,0x4f,
		0x00,0x01,0x00,0xf8,0xff,0x44,0x00,0x01,0x00,0xf8,0xff,0x5a,0x00,0x06,0x00,0x10,
		0x00,0x01,0x00,0x0a,0x00,0x01,0x00,0x01,0x00,0x0c,0x00,0x0c,0x00,0x01,0x00,0x22,
		0x01,0x2a,0x00,0x02,0x00,0x03,0x03,0x7a,0x03,0x88,0x00,0x00,0x03,0xa0,0x03,0xa9,
		0x00,0x0f,0x03,0xb5,0x03,0xc0,0x00,0x19,0x00,0x25,0x00,0x00,0x00,0xea,0x00,0x00,
		0x00,0x96,0x00,0x00,0x00,0x9c,0x00,0x00,0x00,0x9c,0x00,0x00,0x00,0xa2,0x00,0x00,
		0x00,0xb4,0x00,0x00,0x00,0xe4,0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0xa8,0x00,0x00,
		0x00,0xae,0x00,0x00,0x00,0xb4,0x00,0x00,0x00,0xba,0x00,0x00,0x00,0xc0,0x00,0x00,
		0x00,0xf0,0x00,0x00,0x00,0xc6,0x00,0x00,0x00,0xf6,0x00,0x00,0x00,0xf6,0x00,0x00,
		0x00,0xcc,0x00,0x00,0x00,0xd2,0x00,0x00,0x00,0xd8,0x00,0x00,0x01,0x02,0x00,0x00,
		0x01,0x02,0x00,0x00,0x01,0x02,0x00,0x00,0x00,0xf6,0x00,0x00,0x00,0xf6,0x00,0x00,
		0x00,0xf0,0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0xde,0x00,0x00,
		0x00,0xe4,0x00,0x00,0x00,0xe4,0x00,0x00,0x00,0xea,0x00,0x00,0x00,0xf0,0x00,0x00,
		0x00,0xf6,0x00,0x00,0x01,0x02,0x00,0x00,0x00,0xfc,0x00,0x00,0x01,0x02,0x00,0x01,
		0x00,0xff,0x01,0xc9,0x00,0x01,0x01,0x05,0x01,0xc9,0x00,0x01,0x00,0xef,0x01,0xc9,
		0x00,0x01,0x01,0x01,0x01,0xc9,0x00,0x01,0x01,0x04,0x01,0xc9,0x00,0x01,0x00,0xfa,
		0x01,0xc9,0x00,0x01,0x00,0xeb,0x01,0xc9,0x00,0x01,0x01,0x0f,0x01,0xc9,0x00,0x01,
		0x00,0xec,0x01,0xd3,0x00,0x01,0x01,0x08,0x02,0x6f,0x00,0x01,0x01,0x0d,0x02,0x6f,
		0x00,0x01,0x01,0x22,0x02,0x6f,0x00,0x01,0x01,0x06,0x01,0xc9,0x00,0x01,0x01,0x00,
		0x01,0xc9,0x00,0x01,0x00,0xfb,0x01,0xc9,0x00,0x01,0x01,0x02,0x01,0xc9,0x00,0x01,
		0x00,0xfb,0x02,0x6f,0x00,0x01,0x00,0xfe,0x02,0x6f,0x00,0x01,0x00,0xfa,0x02,0x6f,
		0x00,0x25,0x00,0x4c,0x00,0x52,0x00,0x58,0x00,0x5e,0x00,0x64,0x00,0x6a,0x00,0x70,
		0x00,0x76,0x00,0x7c,0x00,0x82,0x00,0x88,0x00,0x8e,0x00,0x94,0x00,0x9a,0x00,0xa0,
		0x00,0xa6,0x00,0xac,0x00,0xb2,0x00,0xb8,0x00,0xbe,0x00,0xc4,0x00,0xca,0x00,0xd0,
		0x00,0xd6,0x00,0xdc,0x00,0xe2,0x00,0xe2,0x00,0xe8,0x00,0xee,0x00,0xf4,0x00,0xfa,
		0x01,0x00,0x01,0x06,0x01,0x0c,0x01,0x12,0x01,0x18,0x01,0x1e,0x00,0x01,0x00,0xfc,
		0x02,0x5d,0x00,0x01,0x00,0xff,0x02,0x5d,0x00,0x01,0x00,0xdf,0x02,0x9f,0x00,0x01,
		0x01,0x18,0x02,0x61,0x00,0x01,0x01,0x17,0x02,0xbb,0x00,0x01,0x01,0x8b,0x02,0x38,
		0x00,0x01,0x01,0x00,0x02,0x5c,0x00,0x01,0x01,0x02,0x02,0x8e,0x00,0x01,0x01,0x01,
		0x02,0xb5,0x00,0x01,0x01,0x04,0x02,0x7c,0x00,0x01,0x00,0xfa,0x02,0x63,0x00,0x01,
		0x00,0xf1,0x02,0x9f,0x00,0x01,0x00,0xfb,0x02,0x75,0x00,0x01,0x01,0x02,0x02,0x84,
		0x00,0x01,0x00,0xec,0x03,0x32,0x00,0x01,0x00,0xf9,0x02,0xfd,0x00,0x01,0x00,0xf9,
		0x02,0xdf,0x00,0x01,0x00,0xf5,0x03,0x17,0x00,0x01,0x01,0x0d,0x02,0xe5,0x00,0x01,
		0x01,0x22,0x03,0x2a,0x00,0x01,0x01,0x92,0x02,0xda,0x00,0x01,0x00,0xfa,0x03,0x0d,
		0x00,0x01,0x00,0xfa,0x03,0x13,0x00,0x01,0x00,0xfb,0x03,0x1b,0x00,0x01,0x00,0xfb,
		0x03,0x0a,0x00,0x01,0x01,0x02,0x03,0x20,0x00,0x01,0x00,0xff,0x03,0x5a,0x00,0x01,
		0x01,0x06,0x03,0x01,0x00,0x01,0x01,0x00,0x02,0xaf,0x00,0x01,0x01,0x00,0x02,0xce,
		0x00,0x01,0x00,0xfb,0x03,0x25,0x00,0x01,0x01,0x02,0x03,0x02,0x00,0x01,0x00,0xfb,
		0x03,0x1e,0x00,0x01,0x00,0xfa,0x03,0xa1,0x00,0x01,0x00,0xfe,0x03,0x17,0x00,0x01,
		0x00,0xfa,0x03,0x97,0x00,0x06,0x00,0x10,0x00,0x01,0x00,0x0a,0x00,0x02,0x00,0x01,
		0x00,0x0c,0x00,0x0c,0x00,0x01,0x00,0x14,0x00,0x1e,0x00,0x01,0x00,0x02,0x03,0x89,
		0x03,0xaa,0x00,0x02,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x16,0x00,0x02,0x00,0x06,
		0x00,0x0c,0x00,0x01,0x01,0x8c,0x01,0xc9,0x00,0x01,0x01,0x98,0x02,0x6f,0x00,0x00,
		0x00,0x01,0x00,0x00,0x00,0x0a,0x01,0xc8,0x02,0xf8,0x00,0x02,0x44,0x46,0x4c,0x54,
		0x00,0x0e,0x6c,0x61,0x74,0x6e,0x00,0x36,0x00,0x04,0x00,0x00,0x00,0x00,0xff,0xff,
		0x00,0x0f,0x00,0x00,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x0f,
		0x00,0x10,0x00,0x11,0x00,0x12,0x00,0x13,0x00,0x14,0x00,0x15,0x00,0x16,0x00,0x17,
		0x00,0x34,0x00,0x08,0x41,0x5a,0x45,0x20,0x00,0x58,0x43,0x41,0x54,0x20,0x00,0x7e,
		0x43,0x52,0x54,0x20,0x00,0xa4,0x4b,0x41,0x5a,0x20,0x00,0xca,0x4d,0x4f,0x4c,0x20,
		0x00,0xf0,0x52,0x4f,0x4d,0x20,0x01,0x16,0x54,0x41,0x54,0x20,0x01,0x3c,0x54,0x52,
		0x4b,0x20,0x01,0x62,0x00,0x00,0xff,0xff,0x00,0x0f,0x00,0x00,0x00,0x01,0x00,0x03,
		0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x0f,0x00,0x10,0x00,0x11,0x00,0x12,0x00,0x13,
		0x00,0x14,0x00,0x15,0x00,0x16,0x00,0x17,0x00,0x00,0xff,0xff,0x00,0x10,0x00,0x00,
		0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x07,0x00,0x0f,0x00,0x10,
		0x00,0x11,0x00,0x12,0x00,0x13,0x00,0x14,0x00,0x15,0x00,0x16,0x00,0x17,0x00,0x00,
		0xff,0xff,0x00,0x10,0x00,0x00,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x05,0x00,0x06,
		0x00,0x08,0x00,0x0f,0x00,0x10,0x00,0x11,0x00,0x12,0x00,0x13,0x00,0x14,0x00,0x15,
		0x00,0x16,0x00,0x17,0x00,0x00,0xff,0xff,0x00,0x10,0x00,0x00,0x00,0x01,0x00,0x02,
		0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x09,0x00,0x0f,0x00,0x10,0x00,0x11,0x00,0x12,
		0x00,0x13,0x00,0x14,0x00,0x15,0x00,0x16,0x00,0x17,0x00,0x00,0xff,0xff,0x00,0x10,
		0x00,0x00,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x0a,0x00,0x0f,
		0x00,0x10,0x00,0x11,0x00,0x12,0x00,0x13,0x00,0x14,0x00,0x15,0x00,0x16,0x00,0x17,
		0x00,0x00,0xff,0xff,0x00,0x10,0x00,0x00,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x05,
		0x00,0x06,0x00,0x0b,0x00,0x0f,0x00,0x10,0x00,0x11,0x00,0x12,0x00,0x13,0x00,0x14,
		0x00,0x15,0x00,0x16,0x00,0x17,0x00,0x00,0xff,0xff,0x00,0x10,0x00,0x00,0x00,0x01,
		0x00,0x02,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x0c,0x00,0x0f,0x00,0x10,0x00,0x11,
		0x00,0x12,0x00,0x13,0x00,0x14,0x00,0x15,0x00,0x16,0x00,0x17,0x00,0x00,0xff,0xff,
		0x00,0x10,0x00,0x00,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x0d,
		0x00,0x0f,0x00,0x10,0x00,0x11,0x00,0x12,0x00,0x13,0x00,0x14,0x00,0x15,0x00,0x16,
		0x00,0x17,0x00,0x00,0xff,0xff,0x00,0x10,0x00,0x00,0x00,0x01,0x00,0x02,0x00,0x04,
		0x00,0x05,0x00,0x06,0x00,0x0e,0x00,0x0f,0x00,0x10,0x00,0x11,0x00,0x12,0x00,0x13,
		0x00,0x14,0x00,0x15,0x00,0x16,0x00,0x17,0x00,0x18,0x61,0x61,0x6c,0x74,0x00,0x92,
		0x63,0x61,0x73,0x65,0x00,0x9a,0x63,0x63,0x6d,0x70,0x00,0xa0,0x63,0x63,0x6d,0x70,
		0x00,0xa8,0x64,0x6c,0x69,0x67,0x00,0xb2,0x64,0x6e,0x6f,0x6d,0x00,0xb8,0x66,0x72,
		0x61,0x63,0x00,0xbe,0x6c,0x6f,0x63,0x6c,0x00,0xc8,0x6c,0x6f,0x63,0x6c,0x00,0xce,
		0x6c,0x6f,0x63,0x6c,0x00,0xd4,0x6c,0x6f,0x63,0x6c,0x00,0xda,0x6c,0x6f,0x63,0x6c,
		0x00,0xe0,0x6c,0x6f,0x63,0x6c,0x00,0xe6,0x6c,0x6f,0x63,0x6c,0x00,0xec,0x6c,0x6f,
		0x63,0x6c,0x00,0xf2,0x6e,0x75,0x6d,0x72,0x00,0xf8,0x6f,0x72,0x64,0x6e,0x00,0xfe,
		0x73,0x61,0x6c,0x74,0x01,0x06,0x73,0x73,0x30,0x31,0x01,0x0c,0x73,0x73,0x30,0x32,
		0x01,0x12,0x73,0x73,0x30,0x33,0x01,0x18,0x73,0x75,0x62,0x73,0x01,0x1e,0x73,0x75,
		0x70,0x73,0x01,0x24,0x7a,0x65,0x72,0x6f,0x01,0x2a,0x00,0x00,0x00,0x02,0x00,0x00,
		0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x1f,0x00,0x00,0x00,0x02,0x00,0x02,0x00,0x05,
		0x00,0x00,0x00,0x03,0x00,0x02,0x00,0x05,0x00,0x08,0x00,0x00,0x00,0x01,0x00,0x20,
		0x00,0x00,0x00,0x01,0x00,0x16,0x00,0x00,0x00,0x03,0x00,0x17,0x00,0x18,0x00,0x19,
		0x00,0x00,0x00,0x01,0x00,0x12,0x00,0x00,0x00,0x01,0x00,0x09,0x00,0x00,0x00,0x01,
		0x00,0x11,0x00,0x00,0x00,0x01,0x00,0x0e,0x00,0x00,0x00,0x01,0x00,0x0d,0x00,0x00,
		0x00,0x01,0x00,0x0c,0x00,0x00,0x00,0x01,0x00,0x0f,0x00,0x00,0x00,0x01,0x00,0x10,
		0x00,0x00,0x00,0x01,0x00,0x15,0x00,0x00,0x00,0x02,0x00,0x1c,0x00,0x1e,0x00,0x00,
		0x00,0x01,0x00,0x22,0x00,0x00,0x00,0x01,0x00,0x23,0x00,0x00,0x00,0x01,0x00,0x24,
		0x00,0x00,0x00,0x01,0x00,0x25,0x00,0x00,0x00,0x01,0x00,0x13,0x00,0x00,0x00,0x01,
		0x00,0x14,0x00,0x00,0x00,0x01,0x00,0x21,0x00,0x26,0x00,0x4e,0x01,0x28,0x01,0xfe,
		0x02,0x88,0x02,0x88,0x02,0xf8,0x05,0x8e,0x05,0x8e,0x03,0x36,0x03,0xb2,0x03,0xf0,
		0x03,0xf0,0x04,0x04,0x04,0x04,0x04,0x26,0x04,0x26,0x04,0x26,0x04,0x26,0x04,0x26,
		0x04,0x3a,0x04,0x48,0x04,0x9e,0x04,0x7c,0x04,0x8a,0x04,0x9e,0x04,0xac,0x04,0xea,
		0x04,0xea,0x05,0x02,0x05,0x4a,0x05,0x6c,0x05,0x8e,0x05,0xee,0x06,0x5a,0x06,0x72,
		0x06,0x72,0x06,0x90,0x06,0xb6,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x02,
		0x00,0x6a,0x00,0x32,0x01,0xd5,0x01,0xd6,0x00,0xad,0x00,0xb7,0x01,0xd5,0x01,0x4a,
		0x01,0xd6,0x01,0x9a,0x01,0xa3,0x01,0xf0,0x01,0xf1,0x01,0xf2,0x01,0xf3,0x01,0xf4,
		0x01,0xf5,0x01,0xf6,0x01,0xf7,0x01,0xf8,0x02,0x29,0x02,0x2a,0x02,0x0d,0x02,0x45,
		0x02,0x46,0x02,0x6b,0x02,0x88,0x02,0x89,0x03,0xa0,0x03,0xa1,0x03,0xa2,0x03,0xa3,
		0x03,0xa4,0x03,0xa5,0x03,0xa6,0x03,0xa7,0x03,0xa8,0x03,0xa9,0x03,0xaa,0x03,0xab,
		0x03,0xac,0x03,0xad,0x03,0xae,0x03,0xaf,0x03,0xb0,0x03,0xb1,0x03,0xb2,0x03,0xb3,
		0x03,0xbd,0x03,0xbe,0x03,0xbf,0x03,0xc0,0x00,0x01,0x00,0x32,0x00,0x01,0x00,0x78,
		0x00,0xab,0x00,0xb6,0x00,0xe8,0x01,0x49,0x01,0x63,0x01,0x98,0x01,0xa2,0x01,0xfa,
		0x01,0xfb,0x01,0xfc,0x01,0xfd,0x01,0xfe,0x01,0xff,0x02,0x00,0x02,0x01,0x02,0x02,
		0x02,0x22,0x02,0x24,0x02,0x27,0x02,0x43,0x02,0x44,0x02,0x6d,0x02,0x78,0x02,0x7a,
		0x03,0x7a,0x03,0x7b,0x03,0x7c,0x03,0x7d,0x03,0x7e,0x03,0x7f,0x03,0x80,0x03,0x81,
		0x03,0x82,0x03,0x83,0x03,0x89,0x03,0x93,0x03,0x94,0x03,0x95,0x03,0x96,0x03,0x97,
		0x03,0x99,0x03,0x9a,0x03,0x9b,0x03,0x9c,0x03,0xb9,0x03,0xba,0x03,0xbb,0x03,0xbc,
		0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x01,0x00,0xac,0x00,0x0f,0x00,0x24,
		0x00,0x2a,0x00,0x38,0x00,0x42,0x00,0x4c,0x00,0x56,0x00,0x60,0x00,0x6a,0x00,0x74,
		0x00,0x7e,0x00,0x88,0x00,0x92,0x00,0x98,0x00,0x9e,0x00,0xa6,0x00,0x02,0x01,0x3a,
		0x01,0x41,0x00,0x06,0x01,0xe3,0x01,0xe4,0x01,0xe5,0x01,0xef,0x01,0xf9,0x02,0x03,
		0x00,0x04,0x01,0xe6,0x01,0xf0,0x01,0xfa,0x02,0x04,0x00,0x04,0x01,0xe7,0x01,0xf1,
		0x01,0xfb,0x02,0x05,0x00,0x04,0x01,0xe8,0x01,0xf2,0x01,0xfc,0x02,0x06,0x00,0x04,
		0x01,0xe9,0x01,0xf3,0x01,0xfd,0x02,0x07,0x00,0x04,0x01,0xea,0x01,0xf4,0x01,0xfe,
		0x02,0x08,0x00,0x04,0x01,0xeb,0x01,0xf5,0x01,0xff,0x02,0x09,0x00,0x04,0x01,0xec,
		0x01,0xf6,0x02,0x00,0x02,0x0a,0x00,0x04,0x01,0xed,0x01,0xf7,0x02,0x01,0x02,0x0b,
		0x00,0x04,0x01,0xee,0x01,0xf8,0x02,0x02,0x02,0x0c,0x00,0x02,0x02,0x11,0x02,0x15,
		0x00,0x02,0x02,0x12,0x02,0x16,0x00,0x03,0x01,0xef,0x02,0x13,0x02,0x17,0x00,0x02,
		0x02,0x14,0x02,0x18,0x00,0x01,0x00,0x0f,0x01,0x39,0x01,0xd9,0x01,0xda,0x01,0xdb,
		0x01,0xdc,0x01,0xdd,0x01,0xde,0x01,0xdf,0x01,0xe0,0x01,0xe1,0x01,0xe2,0x01,0xe5,
		0x01,0xef,0x01,0xf9,0x02,0x03,0x00,0x06,0x00,0x00,0x00,0x04,0x00,0x0e,0x00,0x20,
		0x00,0x56,0x00,0x68,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x26,0x00,0x01,0x00,0x3e,
		0x00,0x01,0x00,0x00,0x00,0x03,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x14,0x00,0x02,
		0x00,0x1c,0x00,0x2c,0x00,0x01,0x00,0x00,0x00,0x04,0x00,0x01,0x00,0x02,0x01,0x39,
		0x01,0x49,0x00,0x02,0x00,0x02,0x03,0x89,0x03,0x8b,0x00,0x00,0x03,0x8d,0x03,0x92,
		0x00,0x03,0x00,0x02,0x00,0x01,0x03,0x7a,0x03,0x88,0x00,0x00,0x00,0x03,0x00,0x01,
		0x03,0x78,0x00,0x01,0x03,0x78,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x03,0x00,0x03,
		0x00,0x01,0x00,0x12,0x00,0x01,0x03,0x66,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x04,
		0x00,0x02,0x00,0x02,0x00,0x01,0x00,0xe6,0x00,0x00,0x01,0xd8,0x01,0xd8,0x00,0xe6,
		0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x02,0x00,0x3a,0x00,0x1a,0x01,0x3a,
		0x01,0x4a,0x03,0xa0,0x03,0xa1,0x03,0xa2,0x03,0xa3,0x03,0xa4,0x03,0xa5,0x03,0xa6,
		0x03,0xa7,0x03,0xa8,0x03,0xa9,0x03,0xaa,0x03,0xab,0x03,0xac,0x03,0xad,0x03,0xae,
		0x03,0xaf,0x03,0xb0,0x03,0xb1,0x03,0xb2,0x03,0xb3,0x03,0xbd,0x03,0xbe,0x03,0xbf,
		0x03,0xc0,0x00,0x02,0x00,0x07,0x01,0x39,0x01,0x39,0x00,0x00,0x01,0x49,0x01,0x49,
		0x00,0x01,0x03,0x7a,0x03,0x83,0x00,0x02,0x03,0x89,0x03,0x89,0x00,0x0c,0x03,0x93,
		0x03,0x97,0x00,0x0d,0x03,0x99,0x03,0x9c,0x00,0x12,0x03,0xb9,0x03,0xbc,0x00,0x16,
		0x00,0x06,0x00,0x00,0x00,0x02,0x00,0x0a,0x00,0x1c,0x00,0x03,0x00,0x00,0x00,0x01,
		0x02,0xca,0x00,0x01,0x00,0x24,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x03,0x00,0x01,
		0x00,0x12,0x00,0x01,0x02,0xb8,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x07,0x00,0x02,
		0x00,0x02,0x03,0xa0,0x03,0xb3,0x00,0x00,0x03,0xbd,0x03,0xc0,0x00,0x14,0x00,0x04,
		0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x01,0x00,0x6a,0x00,0x03,0x00,0x0c,0x00,0x2e,
		0x00,0x50,0x00,0x04,0x00,0x0a,0x00,0x10,0x00,0x16,0x00,0x1c,0x03,0xb9,0x00,0x02,
		0x03,0x7d,0x03,0xba,0x00,0x02,0x03,0x7c,0x03,0xbb,0x00,0x02,0x03,0x85,0x03,0xbc,
		0x00,0x02,0x03,0x83,0x00,0x04,0x00,0x0a,0x00,0x10,0x00,0x16,0x00,0x1c,0x03,0xb5,
		0x00,0x02,0x03,0x7d,0x03,0xb6,0x00,0x02,0x03,0x7c,0x03,0xb7,0x00,0x02,0x03,0x85,
		0x03,0xb8,0x00,0x02,0x03,0x83,0x00,0x03,0x00,0x08,0x00,0x0e,0x00,0x14,0x03,0xbd,
		0x00,0x02,0x03,0xa3,0x03,0xbe,0x00,0x02,0x03,0xa2,0x03,0xc0,0x00,0x02,0x03,0xa9,
		0x00,0x01,0x00,0x03,0x03,0x7f,0x03,0x81,0x03,0xa5,0x00,0x06,0x00,0x00,0x00,0x02,
		0x00,0x0a,0x00,0x24,0x00,0x03,0x00,0x01,0x00,0x14,0x00,0x01,0x00,0x42,0x00,0x01,
		0x00,0x14,0x00,0x01,0x00,0x00,0x00,0x0a,0x00,0x01,0x00,0x01,0x01,0x4f,0x00,0x03,
		0x00,0x01,0x00,0x14,0x00,0x01,0x00,0x28,0x00,0x01,0x00,0x14,0x00,0x01,0x00,0x00,
		0x00,0x0b,0x00,0x01,0x00,0x01,0x00,0x63,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x08,
		0x00,0x01,0x00,0x06,0x00,0x07,0x00,0x01,0x00,0x01,0x02,0x22,0x00,0x01,0x00,0x00,
		0x00,0x01,0x00,0x08,0x00,0x02,0x00,0x0e,0x00,0x04,0x00,0xad,0x00,0xb7,0x01,0x9a,
		0x01,0xa3,0x00,0x01,0x00,0x04,0x00,0xab,0x00,0xb6,0x01,0x98,0x01,0xa2,0x00,0x01,
		0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x01,0x00,0x06,0x00,0x08,0x00,0x01,0x00,0x01,
		0x01,0x39,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x01,0x00,0xf6,0x00,0x0c,
		0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x02,0x00,0x1c,0x00,0x0b,0x02,0x03,
		0x02,0x04,0x02,0x05,0x02,0x06,0x02,0x07,0x02,0x08,0x02,0x09,0x02,0x0a,0x02,0x0b,
		0x02,0x0c,0x02,0x6b,0x00,0x02,0x00,0x02,0x01,0xd9,0x01,0xe2,0x00,0x00,0x02,0x6d,
		0x02,0x6d,0x00,0x0a,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x01,0x00,0xb4,
		0x00,0x16,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x01,0x00,0x06,0xff,0xe6,
		0x00,0x01,0x00,0x01,0x02,0x27,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x01,
		0x00,0x92,0x00,0x20,0x00,0x06,0x00,0x00,0x00,0x02,0x00,0x0a,0x00,0x22,0x00,0x03,
		0x00,0x01,0x00,0x12,0x00,0x01,0x00,0x42,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x1a,
		0x00,0x01,0x00,0x01,0x02,0x0d,0x00,0x03,0x00,0x01,0x00,0x12,0x00,0x01,0x00,0x2a,
		0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x1b,0x00,0x02,0x00,0x01,0x01,0xef,0x01,0xf8,
		0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x01,0x00,0x06,0xff,0xf6,
		0x00,0x02,0x00,0x01,0x01,0xf9,0x02,0x02,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x02,
		0x00,0x0a,0x00,0x24,0x00,0x03,0x00,0x01,0x00,0x2c,0x00,0x01,0x00,0x12,0x00,0x00,
		0x00,0x01,0x00,0x00,0x00,0x1d,0x00,0x01,0x00,0x02,0x00,0x01,0x00,0xe8,0x00,0x03,
		0x00,0x01,0x00,0x12,0x00,0x01,0x00,0x1c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x1d,
		0x00,0x02,0x00,0x01,0x01,0xd9,0x01,0xe2,0x00,0x00,0x00,0x01,0x00,0x02,0x00,0x78,
		0x01,0x63,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x02,0x00,0x0e,0x00,0x04,
		0x01,0xd5,0x01,0xd6,0x01,0xd5,0x01,0xd6,0x00,0x01,0x00,0x04,0x00,0x01,0x00,0x78,
		0x00,0xe8,0x01,0x63,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x01,0x00,0x14,
		0x00,0x01,0x00,0x08,0x00,0x01,0x00,0x04,0x03,0x5c,0x00,0x03,0x01,0x63,0x02,0x19,
		0x00,0x01,0x00,0x01,0x00,0x6f,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x02,
		0x00,0x36,0x00,0x18,0x03,0xa0,0x03,0xa1,0x03,0xa2,0x03,0xa3,0x03,0xa4,0x03,0xa5,
		0x03,0xa6,0x03,0xa7,0x03,0xa8,0x03,0xa9,0x03,0xaa,0x03,0xab,0x03,0xac,0x03,0xad,
		0x03,0xae,0x03,0xaf,0x03,0xb0,0x03,0xb1,0x03,0xb2,0x03,0xb3,0x03,0xbd,0x03,0xbe,
		0x03,0xbf,0x03,0xc0,0x00,0x02,0x00,0x05,0x03,0x7a,0x03,0x83,0x00,0x00,0x03,0x89,
		0x03,0x89,0x00,0x0a,0x03,0x93,0x03,0x97,0x00,0x0b,0x03,0x99,0x03,0x9c,0x00,0x10,
		0x03,0xb9,0x03,0xbc,0x00,0x14,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x01,
		0x00,0x56,0x00,0x05,0x00,0x10,0x00,0x1c,0x00,0x26,0x00,0x3a,0x00,0x44,0x00,0x01,
		0x00,0x04,0x02,0x48,0x00,0x03,0x02,0x70,0x02,0x70,0x00,0x01,0x00,0x04,0x02,0x47,
		0x00,0x02,0x02,0x72,0x00,0x02,0x00,0x06,0x00,0x0e,0x03,0x69,0x00,0x03,0x02,0x70,
		0x02,0x70,0x03,0x6a,0x00,0x02,0x02,0x72,0x00,0x01,0x00,0x04,0x03,0x6b,0x00,0x02,
		0x02,0x70,0x00,0x02,0x00,0x06,0x00,0x0c,0x03,0x6d,0x00,0x02,0x02,0x70,0x03,0x6c,
		0x00,0x02,0x02,0x31,0x00,0x01,0x00,0x05,0x02,0x1e,0x02,0x31,0x02,0x70,0x02,0x72,
		0x02,0x73,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x02,0x00,0x46,0x00,0x05,
		0x01,0xe3,0x02,0x15,0x02,0x16,0x02,0x17,0x02,0x18,0x00,0x01,0x00,0x00,0x00,0x01,
		0x00,0x08,0x00,0x02,0x00,0x0c,0x00,0x03,0x02,0x2a,0x02,0x88,0x02,0x89,0x00,0x01,
		0x00,0x03,0x02,0x24,0x02,0x78,0x02,0x7a,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x08,
		0x00,0x02,0x00,0x10,0x00,0x05,0x01,0xe4,0x02,0x11,0x02,0x12,0x02,0x13,0x02,0x14,
		0x00,0x01,0x00,0x05,0x01,0xd9,0x01,0xe5,0x01,0xef,0x01,0xf9,0x02,0x03,0x00,0x01,
		0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x01,0x00,0x06,0x00,0x02,0x00,0x01,0x00,0x02,
		0x02,0x43,0x02,0x44,0x00,0x01,0x00,0x01,0x00,0x08,0x00,0x02,0x00,0x00,0x00,0x14,
		0x00,0x02,0x00,0x00,0x00,0x24,0x00,0x02,0x77,0x67,0x68,0x74,0x01,0x00,0x00,0x01,
		0x77,0x64,0x74,0x68,0x01,0x01,0x00,0x00,0x00,0x04,0x00,0x10,0x00,0x01,0x00,0x01,
		0x00,0x02,0x01,0x50,0x00,0x64,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x02,0x01,0x57,
		0x01,0x90,0x00,0x00,0x02,0xbc,0x00,0x00
	};

} // namespace imgui

#pragma endregion

#pragma region TriMesh

TriMesh::TriMesh()
{
}

TriMesh::TriMesh(grfx::IndexType indexType)
	: mIndexType(indexType)
{
}

TriMesh::TriMesh(TriMeshAttributeDim texCoordDim)
	: mTexCoordDim(texCoordDim)
{
}

TriMesh::TriMesh(grfx::IndexType indexType, TriMeshAttributeDim texCoordDim)
	: mIndexType(indexType), mTexCoordDim(texCoordDim)
{
}

TriMesh::~TriMesh()
{
}

uint32_t TriMesh::GetCountTriangles() const
{
	uint32_t count = 0;
	if (mIndexType != grfx::INDEX_TYPE_UNDEFINED) {
		uint32_t elementSize = grfx::IndexTypeSize(mIndexType);
		uint32_t elementCount = CountU32(mIndices) / elementSize;
		count = elementCount / 3;
	}
	else {
		count = CountU32(mPositions) / 3;
	}
	return count;
}

uint32_t TriMesh::GetCountIndices() const
{
	uint32_t indexSize = grfx::IndexTypeSize(mIndexType);
	if (indexSize == 0) {
		return 0;
	}

	uint32_t count = CountU32(mIndices) / indexSize;
	return count;
}

uint32_t TriMesh::GetCountPositions() const
{
	uint32_t count = CountU32(mPositions);
	return count;
}

uint32_t TriMesh::GetCountColors() const
{
	uint32_t count = CountU32(mColors);
	return count;
}

uint32_t TriMesh::GetCountNormals() const
{
	uint32_t count = CountU32(mNormals);
	return count;
}

uint32_t TriMesh::GetCountTexCoords() const
{
	if (mTexCoordDim == TRI_MESH_ATTRIBUTE_DIM_2) {
		uint32_t count = CountU32(mTexCoords) / 2;
		return count;
	}
	else if (mTexCoordDim == TRI_MESH_ATTRIBUTE_DIM_3) {
		uint32_t count = CountU32(mTexCoords) / 3;
		return count;
	}
	else if (mTexCoordDim == TRI_MESH_ATTRIBUTE_DIM_4) {
		uint32_t count = CountU32(mTexCoords) / 4;
		return count;
	}
	return 0;
}

uint32_t TriMesh::GetCountTangents() const
{
	uint32_t count = CountU32(mTangents);
	return count;
}

uint32_t TriMesh::GetCountBitangents() const
{
	uint32_t count = CountU32(mBitangents);
	return count;
}

uint64_t TriMesh::GetDataSizeIndices() const
{
	uint64_t size = static_cast<uint64_t>(mIndices.size());
	return size;
}

uint64_t TriMesh::GetDataSizePositions() const
{
	uint64_t size = static_cast<uint64_t>(mPositions.size() * sizeof(float3));
	return size;
}

uint64_t TriMesh::GetDataSizeColors() const
{
	uint64_t size = static_cast<uint64_t>(mColors.size() * sizeof(float3));
	return size;
}

uint64_t TriMesh::GetDataSizeNormalls() const
{
	uint64_t size = static_cast<uint64_t>(mNormals.size() * sizeof(float3));
	return size;
}

uint64_t TriMesh::GetDataSizeTexCoords() const
{
	uint64_t size = static_cast<uint64_t>(mTexCoords.size() * sizeof(float));
	return size;
}

uint64_t TriMesh::GetDataSizeTangents() const
{
	uint64_t size = static_cast<uint64_t>(mTangents.size() * sizeof(float3));
	return size;
}

uint64_t TriMesh::GetDataSizeBitangents() const
{
	uint64_t size = static_cast<uint64_t>(mBitangents.size() * sizeof(float3));
	return size;
}

const uint16_t* TriMesh::GetDataIndicesU16(uint32_t index) const
{
	if (mIndexType != grfx::INDEX_TYPE_UINT16) {
		return nullptr;
	}
	uint32_t count = GetCountIndices();
	if (index >= count) {
		return nullptr;
	}
	size_t      offset = sizeof(uint16_t) * index;
	const char* ptr = reinterpret_cast<const char*>(mIndices.data()) + offset;
	return reinterpret_cast<const uint16_t*>(ptr);
}

const uint32_t* TriMesh::GetDataIndicesU32(uint32_t index) const
{
	if (mIndexType != grfx::INDEX_TYPE_UINT32) {
		return nullptr;
	}
	uint32_t count = GetCountIndices();
	if (index >= count) {
		return nullptr;
	}
	size_t      offset = sizeof(uint32_t) * index;
	const char* ptr = reinterpret_cast<const char*>(mIndices.data()) + offset;
	return reinterpret_cast<const uint32_t*>(ptr);
}

const float3* TriMesh::GetDataPositions(uint32_t index) const
{
	if (index >= mPositions.size()) {
		return nullptr;
	}
	size_t      offset = sizeof(float3) * index;
	const char* ptr = reinterpret_cast<const char*>(mPositions.data()) + offset;
	return reinterpret_cast<const float3*>(ptr);
}

const float3* TriMesh::GetDataColors(uint32_t index) const
{
	if (index >= mColors.size()) {
		return nullptr;
	}
	size_t      offset = sizeof(float3) * index;
	const char* ptr = reinterpret_cast<const char*>(mColors.data()) + offset;
	return reinterpret_cast<const float3*>(ptr);
}

const float3* TriMesh::GetDataNormalls(uint32_t index) const
{
	if (index >= mNormals.size()) {
		return nullptr;
	}
	size_t      offset = sizeof(float3) * index;
	const char* ptr = reinterpret_cast<const char*>(mNormals.data()) + offset;
	return reinterpret_cast<const float3*>(ptr);
}

const float2* TriMesh::GetDataTexCoords2(uint32_t index) const
{
	if (mTexCoordDim != TRI_MESH_ATTRIBUTE_DIM_2) {
		return nullptr;
	}
	uint32_t count = GetCountTexCoords();
	if (index >= count) {
		return nullptr;
	}
	size_t      offset = sizeof(float2) * index;
	const char* ptr = reinterpret_cast<const char*>(mTexCoords.data()) + offset;
	return reinterpret_cast<const float2*>(ptr);
}

const float3* TriMesh::GetDataTexCoords3(uint32_t index) const
{
	if (mTexCoordDim != TRI_MESH_ATTRIBUTE_DIM_3) {
		return nullptr;
	}
	uint32_t count = GetCountTexCoords();
	if (index >= count) {
		return nullptr;
	}
	size_t      offset = sizeof(float3) * index;
	const char* ptr = reinterpret_cast<const char*>(mTexCoords.data()) + offset;
	return reinterpret_cast<const float3*>(ptr);
}

const float4* TriMesh::GetDataTexCoords4(uint32_t index) const
{
	if (mTexCoordDim != TRI_MESH_ATTRIBUTE_DIM_4) {
		return nullptr;
	}
	uint32_t count = GetCountTexCoords();
	if (index >= count) {
		return nullptr;
	}
	size_t      offset = sizeof(float4) * index;
	const char* ptr = reinterpret_cast<const char*>(mTexCoords.data()) + offset;
	return reinterpret_cast<const float4*>(ptr);
}

const float4* TriMesh::GetDataTangents(uint32_t index) const
{
	if (index >= mTangents.size()) {
		return nullptr;
	}
	size_t      offset = sizeof(float4) * index;
	const char* ptr = reinterpret_cast<const char*>(mTangents.data()) + offset;
	return reinterpret_cast<const float4*>(ptr);
}

const float3* TriMesh::GetDataBitangents(uint32_t index) const
{
	if (index >= mBitangents.size()) {
		return nullptr;
	}
	size_t      offset = sizeof(float3) * index;
	const char* ptr = reinterpret_cast<const char*>(mBitangents.data()) + offset;
	return reinterpret_cast<const float3*>(ptr);
}

void TriMesh::AppendIndexU16(uint16_t value)
{
	const uint8_t* pBytes = reinterpret_cast<const uint8_t*>(&value);
	mIndices.push_back(pBytes[0]);
	mIndices.push_back(pBytes[1]);
}

void TriMesh::AppendIndexU32(uint32_t value)
{
	const uint8_t* pBytes = reinterpret_cast<const uint8_t*>(&value);
	mIndices.push_back(pBytes[0]);
	mIndices.push_back(pBytes[1]);
	mIndices.push_back(pBytes[2]);
	mIndices.push_back(pBytes[3]);
}

void TriMesh::PreallocateForTriangleCount(size_t triangleCount, bool enableColors, bool enableNormals, bool enableTexCoords, bool enableTangents)
{
	size_t vertexCount = triangleCount * 3;

	// Reserve for triangles
	switch (mIndexType) {
	case grfx::INDEX_TYPE_UINT16:
		mIndices.reserve(vertexCount * sizeof(uint16_t));
		break;
	case grfx::INDEX_TYPE_UINT32:
		mIndices.reserve(vertexCount * sizeof(uint32_t));
		break;
	default:
		// Nothing to do; not indexing.
		return;
	}

	// Position per vertex
	mPositions.reserve(vertexCount);
	// Color per vertex
	if (enableColors) {
		mColors.reserve(vertexCount);
	}
	// Normal per vertex
	if (enableNormals) {
		mNormals.reserve(vertexCount);
	}
	// TexCoord per vertex
	if (enableTexCoords) {
		int32_t dimCount = (mTexCoordDim == TRI_MESH_ATTRIBUTE_DIM_4) ? 4 : ((mTexCoordDim == TRI_MESH_ATTRIBUTE_DIM_3) ? 3 : ((mTexCoordDim == TRI_MESH_ATTRIBUTE_DIM_2) ? 2 : 0));
		mTexCoords.reserve(vertexCount * dimCount);
	}
	// Tangents = 3 per triangle (NOT necessarily related to vertices!)
	if (enableTangents) {
		mTangents.reserve(triangleCount * 3);
		mBitangents.reserve(triangleCount * 3);
	}
}

uint32_t TriMesh::AppendTriangle(uint32_t v0, uint32_t v1, uint32_t v2)
{
	if (mIndexType == grfx::INDEX_TYPE_UINT16) {
		mIndices.reserve(mIndices.size() + 3 * sizeof(uint16_t));
		AppendIndexU16(static_cast<uint16_t>(v0));
		AppendIndexU16(static_cast<uint16_t>(v1));
		AppendIndexU16(static_cast<uint16_t>(v2));
	}
	else if (mIndexType == grfx::INDEX_TYPE_UINT32) {
		mIndices.reserve(mIndices.size() + 3 * sizeof(uint32_t));
		AppendIndexU32(v0);
		AppendIndexU32(v1);
		AppendIndexU32(v2);
	}
	else {
		ASSERT_MSG(false, "unknown index type");
		return 0;
	}
	uint32_t count = GetCountTriangles();
	return count;
}

uint32_t TriMesh::AppendPosition(const float3& value)
{
	mPositions.push_back(value);
	// Update bounding box
	uint32_t count = GetCountPositions();
	if (count > 1) {
		mBoundingBoxMin.x = std::min<float>(mBoundingBoxMin.x, value.x);
		mBoundingBoxMin.y = std::min<float>(mBoundingBoxMin.y, value.y);
		mBoundingBoxMin.z = std::min<float>(mBoundingBoxMin.z, value.z);
		mBoundingBoxMax.x = std::max<float>(mBoundingBoxMax.x, value.x);
		mBoundingBoxMax.y = std::max<float>(mBoundingBoxMax.y, value.y);
		mBoundingBoxMax.z = std::max<float>(mBoundingBoxMax.z, value.z);
	}
	else {
		mBoundingBoxMin = mBoundingBoxMax = value;
	}
	return count;
}

uint32_t TriMesh::AppendColor(const float3& value)
{
	mColors.push_back(value);
	uint32_t count = GetCountColors();
	return count;
}

uint32_t TriMesh::AppendTexCoord(const float2& value)
{
	if (mTexCoordDim != TRI_MESH_ATTRIBUTE_DIM_2) {
		ASSERT_MSG(false, "unknown tex coord dim");
		return 0;
	}
	mTexCoords.reserve(mTexCoords.size() + 2);
	mTexCoords.push_back(value.x);
	mTexCoords.push_back(value.y);
	uint32_t count = GetCountTexCoords();
	return count;
}

uint32_t TriMesh::AppendTexCoord(const float3& value)
{
	if (mTexCoordDim != TRI_MESH_ATTRIBUTE_DIM_3) {
		ASSERT_MSG(false, "unknown tex coord dim");
		return 0;
	}
	mTexCoords.reserve(mTexCoords.size() + 3);
	mTexCoords.push_back(value.x);
	mTexCoords.push_back(value.y);
	mTexCoords.push_back(value.z);
	uint32_t count = GetCountTexCoords();
	return count;
}

uint32_t TriMesh::AppendTexCoord(const float4& value)
{
	if (mTexCoordDim != TRI_MESH_ATTRIBUTE_DIM_4) {
		ASSERT_MSG(false, "unknown tex coord dim");
		return 0;
	}
	mTexCoords.reserve(mTexCoords.size() + 3);
	mTexCoords.push_back(value.x);
	mTexCoords.push_back(value.y);
	mTexCoords.push_back(value.z);
	mTexCoords.push_back(value.w);
	uint32_t count = GetCountTexCoords();
	return count;
}

uint32_t TriMesh::AppendNormal(const float3& value)
{
	mNormals.push_back(value);
	uint32_t count = GetCountNormals();
	return count;
}

uint32_t TriMesh::AppendTangent(const float4& value)
{
	mTangents.push_back(value);
	uint32_t count = GetCountTangents();
	return count;
}

uint32_t TriMesh::AppendBitangent(const float3& value)
{
	mBitangents.push_back(value);
	uint32_t count = GetCountBitangents();
	return count;
}

Result TriMesh::GetTriangle(uint32_t triIndex, uint32_t& v0, uint32_t& v1, uint32_t& v2) const
{
	if (mIndexType == grfx::INDEX_TYPE_UNDEFINED) {
		return ERROR_GEOMETRY_NO_INDEX_DATA;
	}

	uint32_t triCount = GetCountTriangles();
	if (triIndex >= triCount) {
		return ERROR_OUT_OF_RANGE;
	}

	const uint8_t* pData = mIndices.data();
	uint32_t       elementSize = grfx::IndexTypeSize(mIndexType);

	if (mIndexType == grfx::INDEX_TYPE_UINT16) {
		size_t          offset = 3 * triIndex * elementSize;
		const uint16_t* pIndexData = reinterpret_cast<const uint16_t*>(pData + offset);
		v0 = static_cast<uint32_t>(pIndexData[0]);
		v1 = static_cast<uint32_t>(pIndexData[1]);
		v2 = static_cast<uint32_t>(pIndexData[2]);
	}
	else if (mIndexType == grfx::INDEX_TYPE_UINT32) {
		size_t          offset = 3 * triIndex * elementSize;
		const uint32_t* pIndexData = reinterpret_cast<const uint32_t*>(pData + offset);
		v0 = static_cast<uint32_t>(pIndexData[0]);
		v1 = static_cast<uint32_t>(pIndexData[1]);
		v2 = static_cast<uint32_t>(pIndexData[2]);
	}

	return SUCCESS;
}

Result TriMesh::GetVertexData(uint32_t vtxIndex, TriMeshVertexData* pVertexData) const
{
	uint32_t vertexCount = GetCountPositions();
	if (vtxIndex >= vertexCount) {
		return ERROR_OUT_OF_RANGE;
	}

	const float3* pPosition = GetDataPositions(vtxIndex);
	const float3* pColor = GetDataColors(vtxIndex);
	const float3* pNormal = GetDataNormalls(vtxIndex);
	const float2* pTexCoord2 = GetDataTexCoords2(vtxIndex);
	const float4* pTangent = GetDataTangents(vtxIndex);
	const float3* pBitangent = GetDataBitangents(vtxIndex);

	pVertexData->position = *pPosition;

	if (!IsNull(pColor)) {
		pVertexData->color = *pColor;
	}

	if (!IsNull(pNormal)) {
		pVertexData->normal = *pNormal;
	}

	if (!IsNull(pTexCoord2)) {
		pVertexData->texCoord = *pTexCoord2;
	}

	if (!IsNull(pTangent)) {
		pVertexData->tangent = *pTangent;
	}
	if (!IsNull(pBitangent)) {
		pVertexData->bitangent = *pBitangent;
	}

	return SUCCESS;
}

void TriMesh::AppendIndexAndVertexData(
	std::vector<uint32_t>& indexData,
	const std::vector<float>& vertexData,
	const uint32_t            expectedVertexCount,
	const TriMeshOptions& options,
	TriMesh& mesh)
{
	grfx::IndexType indexType = options.mEnableIndices ? grfx::INDEX_TYPE_UINT32 : grfx::INDEX_TYPE_UNDEFINED;

	// Verify expected vertex count
	size_t vertexCount = (vertexData.size() * sizeof(float)) / sizeof(TriMeshVertexData);
	ASSERT_MSG(vertexCount == expectedVertexCount, "unexpected vertex count");

	// Get base pointer to vertex data
	const char* pData = reinterpret_cast<const char*>(vertexData.data());

	if (indexType != grfx::INDEX_TYPE_UNDEFINED) {
		for (size_t i = 0; i < vertexCount; ++i) {
			const TriMeshVertexData* pVertexData = reinterpret_cast<const TriMeshVertexData*>(pData + (i * sizeof(TriMeshVertexData)));

			mesh.AppendPosition(pVertexData->position * options.mScale);

			if (options.mEnableVertexColors || options.mEnableObjectColor) {
				float3 color = options.mEnableObjectColor ? options.mObjectColor : pVertexData->color;
				mesh.AppendColor(color);
			}

			if (options.mEnableNormals) {
				mesh.AppendNormal(pVertexData->normal);
			}

			if (options.mEnableTexCoords) {
				mesh.AppendTexCoord(pVertexData->texCoord * options.mTexCoordScale);
			}

			if (options.mEnableTangents) {
				mesh.AppendTangent(pVertexData->tangent);
				mesh.AppendBitangent(pVertexData->bitangent);
			}
		}

		size_t triCount = indexData.size() / 3;
		for (size_t triIndex = 0; triIndex < triCount; ++triIndex) {
			uint32_t v0 = indexData[3 * triIndex + 0];
			uint32_t v1 = indexData[3 * triIndex + 1];
			uint32_t v2 = indexData[3 * triIndex + 2];
			mesh.AppendTriangle(v0, v1, v2);
		}
	}
	else {
		for (size_t i = 0; i < indexData.size(); ++i) {
			uint32_t                 vi = indexData[i];
			const TriMeshVertexData* pVertexData = reinterpret_cast<const TriMeshVertexData*>(pData + (vi * sizeof(TriMeshVertexData)));

			mesh.AppendPosition(pVertexData->position * options.mScale);

			if (options.mEnableVertexColors) {
				mesh.AppendColor(pVertexData->color);
			}

			if (options.mEnableNormals) {
				mesh.AppendNormal(pVertexData->normal);
			}

			if (options.mEnableTexCoords) {
				mesh.AppendTexCoord(pVertexData->texCoord);
			}

			if (options.mEnableTangents) {
				mesh.AppendTangent(pVertexData->tangent);
				mesh.AppendBitangent(pVertexData->bitangent);
			}
		}
	}
}

TriMesh TriMesh::CreatePlane(TriMeshPlane plane, const float2& size, uint32_t usegs, uint32_t vsegs, const TriMeshOptions& options)
{
	const float    hs = size.x / 2.0f;
	const float    ht = size.y / 2.0f;
	const float    ds = size.x / static_cast<float>(usegs);
	const float    dt = size.y / static_cast<float>(vsegs);
	const uint32_t uverts = usegs + 1;
	const uint32_t vverts = vsegs + 1;

	std::vector<float> vertexData;
	for (uint32_t j = 0; j < vverts; ++j) {
		for (uint32_t i = 0; i < uverts; ++i) {
			float s = i * ds / size.x;
			float t = j * dt / size.y;
			float u = options.mTexCoordScale.x * s;
			float v = options.mTexCoordScale.y * t;

			// float3 position  = float3(s - hx, 0, t - hz);
			float3 position = float3(0);
			switch (plane) {
			default: {
				ASSERT_MSG(false, "unknown plane orientation");
			} break;

				   // case TRI_MESH_PLANE_POSITIVE_X: {
				   // } break;
				   //
				   // case TRI_MESH_PLANE_NEGATIVE_X: {
				   // } break;
				   //
			case TRI_MESH_PLANE_POSITIVE_Y: {
				position = float3(s * size.x - hs, 0, t * size.y - ht);
			} break;

			case TRI_MESH_PLANE_NEGATIVE_Y: {
				position = float3((1.0f - s) * size.x - hs, 0, (1.0f - t) * size.y - ht);
			} break;

										  // case TRI_MESH_PLANE_POSITIVE_Z: {
										  // } break;
										  //
										  // case TRI_MESH_PLANE_NEGATIVE_Z: {
										  // } break;
			}

			float3 color = float3(u, v, 0);
			float3 normal = float3(0, 1, 0);
			float2 texcoord = float2(u, v);
			float4 tangent = float4(0.0f, 0.0f, 0.0f, 1.0f);
			float3 bitangent = glm::cross(normal, float3(tangent));

			vertexData.push_back(position.x);
			vertexData.push_back(position.y);
			vertexData.push_back(position.z);
			vertexData.push_back(color.r);
			vertexData.push_back(color.g);
			vertexData.push_back(color.b);
			vertexData.push_back(normal.x);
			vertexData.push_back(normal.y);
			vertexData.push_back(normal.z);
			vertexData.push_back(texcoord.x);
			vertexData.push_back(texcoord.y);
			vertexData.push_back(tangent.x);
			vertexData.push_back(tangent.y);
			vertexData.push_back(tangent.z);
			vertexData.push_back(tangent.w);
			vertexData.push_back(bitangent.x);
			vertexData.push_back(bitangent.y);
			vertexData.push_back(bitangent.z);
		}
	}

	std::vector<uint32_t> indexData;
	for (uint32_t i = 1; i < uverts; ++i) {
		for (uint32_t j = 1; j < vverts; ++j) {
			uint32_t i0 = i - 1;
			uint32_t i1 = i;
			uint32_t j0 = j - 1;
			uint32_t j1 = j;
			uint32_t v0 = i1 * vverts + j0;
			uint32_t v1 = i1 * vverts + j1;
			uint32_t v2 = i0 * vverts + j1;
			uint32_t v3 = i0 * vverts + j0;

			switch (plane) {
			default: {
				ASSERT_MSG(false, "unknown plane orientation");
			} break;

				   // case TRI_MESH_PLANE_POSITIVE_X: {
				   // } break;
				   //
				   // case TRI_MESH_PLANE_NEGATIVE_X: {
				   // } break;

			case TRI_MESH_PLANE_POSITIVE_Y: {
				indexData.push_back(v0);
				indexData.push_back(v1);
				indexData.push_back(v2);

				indexData.push_back(v0);
				indexData.push_back(v2);
				indexData.push_back(v3);
			} break;

			case TRI_MESH_PLANE_NEGATIVE_Y: {
				indexData.push_back(v0);
				indexData.push_back(v2);
				indexData.push_back(v1);

				indexData.push_back(v0);
				indexData.push_back(v3);
				indexData.push_back(v2);
			} break;

										  // case TRI_MESH_PLANE_POSITIVE_Z: {
										  // } break;
										  //
										  // case TRI_MESH_PLANE_NEGATIVE_Z: {
										  // } break;
			}
		}
	}

	grfx::IndexType     indexType = options.mEnableIndices ? grfx::INDEX_TYPE_UINT32 : grfx::INDEX_TYPE_UNDEFINED;
	TriMeshAttributeDim texCoordDim = options.mEnableTexCoords ? TRI_MESH_ATTRIBUTE_DIM_2 : TRI_MESH_ATTRIBUTE_DIM_UNDEFINED;
	TriMesh             mesh = TriMesh(indexType, texCoordDim);

	uint32_t expectedVertexCount = uverts * vverts;
	AppendIndexAndVertexData(indexData, vertexData, expectedVertexCount, options, mesh);

	return mesh;

	/*
	const float hx = size.x / 2.0f;
	const float hz = size.y / 2.0f;
	// clang-format off
	std::vector<float> vertexData = {
		// position       // vertex color     // normal           // texcoord   // tangent                // bitangent
		-hx, 0.0f, -hz,   0.7f, 0.7f, 0.7f,   0.0f, 1.0f, 0.0f,   0.0f, 0.0f,   0.0f, 0.0f, 0.0f, 1.0f,   0.0f, 0.0f, 0.0f,
		-hx, 0.0f,  hz,   0.7f, 0.7f, 0.7f,   0.0f, 1.0f, 0.0f,   0.0f, 1.0f,   0.0f, 0.0f, 0.0f, 1.0f,   0.0f, 0.0f, 0.0f,
		 hx, 0.0f,  hz,   0.7f, 0.7f, 0.7f,   0.0f, 1.0f, 0.0f,   1.0f, 1.0f,   0.0f, 0.0f, 0.0f, 1.0f,   0.0f, 0.0f, 0.0f,
		 hx, 0.0f, -hz,   0.7f, 0.7f, 0.7f,   0.0f, 1.0f, 0.0f,   1.0f, 0.0f,   0.0f, 0.0f, 0.0f, 1.0f,   0.0f, 0.0f, 0.0f,
	};

	std::vector<uint32_t> indexData = {
		0, 1, 2,
		0, 2, 3
	};
	// clang-format on

	grfx::IndexType     indexType   = options.mEnableIndices ? grfx::INDEX_TYPE_UINT32 : grfx::INDEX_TYPE_UNDEFINED;
	TriMeshAttributeDim texCoordDim = options.mEnableTexCoords ? TRI_MESH_ATTRIBUTE_DIM_2 : TRI_MESH_ATTRIBUTE_DIM_UNDEFINED;
	TriMesh             mesh        = TriMesh(indexType, texCoordDim);

	AppendIndexAndVertexData(indexData, vertexData, 4, options, mesh);

	return mesh;
	*/
}

TriMesh TriMesh::CreateCube(const float3& size, const TriMeshOptions& options)
{
	const float hx = size.x / 2.0f;
	const float hy = size.y / 2.0f;
	const float hz = size.z / 2.0f;

	// clang-format off
	std::vector<float> vertexData = {
		// position      // vertex colors    // normal           // texcoords   // tangents               // bitangents
		 hx,  hy, -hz,    1.0f, 0.0f, 0.0f,   0.0f, 0.0f,-1.0f,   0.0f, 0.0f,  -1.0f, 0.0f, 0.0f, 1.0f,   0.0f,-1.0f, 0.0f,  //  0  -Z side
		 hx, -hy, -hz,    1.0f, 0.0f, 0.0f,   0.0f, 0.0f,-1.0f,   0.0f, 1.0f,  -1.0f, 0.0f, 0.0f, 1.0f,   0.0f,-1.0f, 0.0f,  //  1
		-hx, -hy, -hz,    1.0f, 0.0f, 0.0f,   0.0f, 0.0f,-1.0f,   1.0f, 1.0f,  -1.0f, 0.0f, 0.0f, 1.0f,   0.0f,-1.0f, 0.0f,  //  2
		-hx,  hy, -hz,    1.0f, 0.0f, 0.0f,   0.0f, 0.0f,-1.0f,   1.0f, 0.0f,  -1.0f, 0.0f, 0.0f, 1.0f,   0.0f,-1.0f, 0.0f,  //  3

		-hx,  hy,  hz,    0.0f, 1.0f, 0.0f,   0.0f, 0.0f, 1.0f,   0.0f, 0.0f,   1.0f, 0.0f, 0.0f, 1.0f,   0.0f,-1.0f, 0.0f,  //  4  +Z side
		-hx, -hy,  hz,    0.0f, 1.0f, 0.0f,   0.0f, 0.0f, 1.0f,   0.0f, 1.0f,   1.0f, 0.0f, 0.0f, 1.0f,   0.0f,-1.0f, 0.0f,  //  5
		 hx, -hy,  hz,    0.0f, 1.0f, 0.0f,   0.0f, 0.0f, 1.0f,   1.0f, 1.0f,   1.0f, 0.0f, 0.0f, 1.0f,   0.0f,-1.0f, 0.0f,  //  6
		 hx,  hy,  hz,    0.0f, 1.0f, 0.0f,   0.0f, 0.0f, 1.0f,   1.0f, 0.0f,   1.0f, 0.0f, 0.0f, 1.0f,   0.0f,-1.0f, 0.0f,  //  7

		-hx,  hy, -hz,   -0.0f, 0.0f, 1.0f,  -1.0f, 0.0f, 0.0f,   0.0f, 0.0f,   0.0f, 0.0f, 1.0f, 1.0f,   0.0f,-1.0f, 0.0f,  //  8  -X side
		-hx, -hy, -hz,   -0.0f, 0.0f, 1.0f,  -1.0f, 0.0f, 0.0f,   0.0f, 1.0f,   0.0f, 0.0f, 1.0f, 1.0f,   0.0f,-1.0f, 0.0f,  //  9
		-hx, -hy,  hz,   -0.0f, 0.0f, 1.0f,  -1.0f, 0.0f, 0.0f,   1.0f, 1.0f,   0.0f, 0.0f, 1.0f, 1.0f,   0.0f,-1.0f, 0.0f,  // 10
		-hx,  hy,  hz,   -0.0f, 0.0f, 1.0f,  -1.0f, 0.0f, 0.0f,   1.0f, 0.0f,   0.0f, 0.0f, 1.0f, 1.0f,   0.0f,-1.0f, 0.0f,  // 11

		 hx,  hy,  hz,    1.0f, 1.0f, 0.0f,   1.0f, 0.0f, 0.0f,   0.0f, 0.0f,   0.0f, 0.0f,-1.0f, 1.0f,   0.0f,-1.0f, 0.0f,  // 12  +X side
		 hx, -hy,  hz,    1.0f, 1.0f, 0.0f,   1.0f, 0.0f, 0.0f,   0.0f, 1.0f,   0.0f, 0.0f,-1.0f, 1.0f,   0.0f,-1.0f, 0.0f,  // 13
		 hx, -hy, -hz,    1.0f, 1.0f, 0.0f,   1.0f, 0.0f, 0.0f,   1.0f, 1.0f,   0.0f, 0.0f,-1.0f, 1.0f,   0.0f,-1.0f, 0.0f,  // 14
		 hx,  hy, -hz,    1.0f, 1.0f, 0.0f,   1.0f, 0.0f, 0.0f,   1.0f, 0.0f,   0.0f, 0.0f,-1.0f, 1.0f,   0.0f,-1.0f, 0.0f,  // 15

		-hx, -hy,  hz,    1.0f, 0.0f, 1.0f,   0.0f,-1.0f, 0.0f,   0.0f, 0.0f,   1.0f, 0.0f, 0.0f, 1.0f,   0.0f, 0.0f,-1.0f,  // 16  -Y side
		-hx, -hy, -hz,    1.0f, 0.0f, 1.0f,   0.0f,-1.0f, 0.0f,   0.0f, 1.0f,   1.0f, 0.0f, 0.0f, 1.0f,   0.0f, 0.0f,-1.0f,  // 17
		 hx, -hy, -hz,    1.0f, 0.0f, 1.0f,   0.0f,-1.0f, 0.0f,   1.0f, 1.0f,   1.0f, 0.0f, 0.0f, 1.0f,   0.0f, 0.0f,-1.0f,  // 18
		 hx, -hy,  hz,    1.0f, 0.0f, 1.0f,   0.0f,-1.0f, 0.0f,   1.0f, 0.0f,   1.0f, 0.0f, 0.0f, 1.0f,   0.0f, 0.0f,-1.0f,  // 19

		-hx,  hy, -hz,    0.0f, 1.0f, 1.0f,   0.0f, 1.0f, 0.0f,   0.0f, 0.0f,   1.0f, 0.0f, 0.0f, 1.0f,   0.0f, 0.0f, 1.0f,  // 20  +Y side
		-hx,  hy,  hz,    0.0f, 1.0f, 1.0f,   0.0f, 1.0f, 0.0f,   0.0f, 1.0f,   1.0f, 0.0f, 0.0f, 1.0f,   0.0f, 0.0f, 1.0f,  // 21
		 hx,  hy,  hz,    0.0f, 1.0f, 1.0f,   0.0f, 1.0f, 0.0f,   1.0f, 1.0f,   1.0f, 0.0f, 0.0f, 1.0f,   0.0f, 0.0f, 1.0f,  // 22
		 hx,  hy, -hz,    0.0f, 1.0f, 1.0f,   0.0f, 1.0f, 0.0f,   1.0f, 0.0f,   1.0f, 0.0f, 0.0f, 1.0f,   0.0f, 0.0f, 1.0f,  // 23
	};

	std::vector<uint32_t> indexData = {
		0,  1,  2, // -Z side
		0,  2,  3,

		4,  5,  6, // +Z side
		4,  6,  7,

		8,  9, 10, // -X side
		8, 10, 11,

		12, 13, 14, // +X side
		12, 14, 15,

		16, 17, 18, // -X side
		16, 18, 19,

		20, 21, 22, // +X side
		20, 22, 23,
	};
	// clang-format on

	grfx::IndexType     indexType = options.mEnableIndices ? grfx::INDEX_TYPE_UINT32 : grfx::INDEX_TYPE_UNDEFINED;
	TriMeshAttributeDim texCoordDim = options.mEnableTexCoords ? TRI_MESH_ATTRIBUTE_DIM_2 : TRI_MESH_ATTRIBUTE_DIM_UNDEFINED;
	TriMesh             mesh = TriMesh(indexType, texCoordDim);

	AppendIndexAndVertexData(indexData, vertexData, 24, options, mesh);

	return mesh;
}

TriMesh TriMesh::CreateSphere(float radius, uint32_t usegs, uint32_t vsegs, const TriMeshOptions& options)
{
	constexpr float kPi = glm::pi<float>();
	constexpr float kTwoPi = 2.0f * kPi;

	const uint32_t uverts = usegs + 1;
	const uint32_t vverts = vsegs + 1;

	float dt = kTwoPi / static_cast<float>(usegs);
	float dp = kPi / static_cast<float>(vsegs);

	std::vector<float> vertexData;
	for (uint32_t i = 0; i < uverts; ++i) {
		for (uint32_t j = 0; j < vverts; ++j) {
			float  theta = i * dt;
			float  phi = j * dp;
			float  u = options.mTexCoordScale.x * theta / kTwoPi;
			float  v = options.mTexCoordScale.y * phi / kPi;
			float3 P = SphericalToCartesian(theta, phi);
			float3 position = radius * P;
			float3 color = float3(u, v, 0);
			float3 normal = normalize(position);
			float2 texcoord = float2(u, v);
			float4 tangent = float4(-SphericalTangent(theta, phi), 1.0);
			float3 bitangent = glm::cross(normal, float3(tangent));

			vertexData.push_back(position.x);
			vertexData.push_back(position.y);
			vertexData.push_back(position.z);
			vertexData.push_back(color.r);
			vertexData.push_back(color.g);
			vertexData.push_back(color.b);
			vertexData.push_back(normal.x);
			vertexData.push_back(normal.y);
			vertexData.push_back(normal.z);
			vertexData.push_back(texcoord.x);
			vertexData.push_back(texcoord.y);
			vertexData.push_back(tangent.x);
			vertexData.push_back(tangent.y);
			vertexData.push_back(tangent.z);
			vertexData.push_back(tangent.w);
			vertexData.push_back(bitangent.x);
			vertexData.push_back(bitangent.y);
			vertexData.push_back(bitangent.z);
		}
	}

	std::vector<uint32_t> indexData;
	for (uint32_t i = 1; i < uverts; ++i) {
		for (uint32_t j = 1; j < vverts; ++j) {
			uint32_t i0 = i - 1;
			uint32_t i1 = i;
			uint32_t j0 = j - 1;
			uint32_t j1 = j;
			uint32_t v0 = i1 * vverts + j0;
			uint32_t v1 = i1 * vverts + j1;
			uint32_t v2 = i0 * vverts + j1;
			uint32_t v3 = i0 * vverts + j0;

			indexData.push_back(v0);
			indexData.push_back(v1);
			indexData.push_back(v2);

			indexData.push_back(v0);
			indexData.push_back(v2);
			indexData.push_back(v3);
		}
	}

	grfx::IndexType     indexType = options.mEnableIndices ? grfx::INDEX_TYPE_UINT32 : grfx::INDEX_TYPE_UNDEFINED;
	TriMeshAttributeDim texCoordDim = options.mEnableTexCoords ? TRI_MESH_ATTRIBUTE_DIM_2 : TRI_MESH_ATTRIBUTE_DIM_UNDEFINED;
	TriMesh             mesh = TriMesh(indexType, texCoordDim);

	uint32_t expectedVertexCount = uverts * vverts;
	AppendIndexAndVertexData(indexData, vertexData, expectedVertexCount, options, mesh);

	return mesh;
}

Result TriMesh::CreateFromOBJ(const std::filesystem::path& path, const TriMeshOptions& options, TriMesh* pTriMesh)
{
	if (IsNull(pTriMesh)) {
		return ERROR_UNEXPECTED_NULL_ARGUMENT;
	}

	Timer timer;
	ASSERT_MSG(timer.Start() == TIMER_RESULT_SUCCESS, "timer start failed");
	double fnStartTime = timer.SecondsSinceStart();

	// Determine index type and tex coord dim
	grfx::IndexType     indexType = options.mEnableIndices ? grfx::INDEX_TYPE_UINT32 : grfx::INDEX_TYPE_UNDEFINED;
	TriMeshAttributeDim texCoordDim = options.mEnableTexCoords ? TRI_MESH_ATTRIBUTE_DIM_2 : TRI_MESH_ATTRIBUTE_DIM_UNDEFINED;

	// Create new mesh
	*pTriMesh = TriMesh(indexType, texCoordDim);

	const std::vector<float3> colors = {
		{1.0f, 0.0f, 0.0f},
		{0.0f, 1.0f, 0.0f},
		{0.0f, 0.0f, 1.0f},
		{1.0f, 1.0f, 0.0f},
		{1.0f, 0.0f, 1.0f},
		{0.0f, 1.0f, 1.0f},
		{1.0f, 1.0f, 1.0f},
	};

	tinyobj::attrib_t                attrib;
	std::vector<tinyobj::shape_t>    shapes;
	std::vector<tinyobj::material_t> materials;

	fs::FileStream objStream;
	if (!objStream.Open(path.string().c_str())) {
		return ERROR_GEOMETRY_FILE_LOAD_FAILED;
	}

	std::string  warn;
	std::string  err;
	std::istream istr(&objStream);
	bool         loaded = tinyobj::LoadObj(&attrib, &shapes, &materials, &warn, &err, &istr, nullptr, true);
	if (!loaded || !err.empty()) {
		return ERROR_GEOMETRY_FILE_LOAD_FAILED;
	}

	size_t numShapes = shapes.size();
	if (numShapes == 0) {
		return ERROR_GEOMETRY_FILE_NO_DATA;
	}

	//// Check to see if data can be indexed
	// bool indexable = true;
	// for (size_t shapeIdx = 0; shapeIdx < numShapes; ++shapeIdx) {
	//     const tinyobj::shape_t& shape     = shapes[shapeIdx];
	//     const tinyobj::mesh_t&  shapeMesh = shape.mesh;
	//
	//     size_t numTriangles = shapeMesh.indices.size() / 3;
	//     for (size_t triIdx = 0; triIdx < numTriangles; ++triIdx) {
	//         size_t triVtxIdx0 = triIdx * 3 + 0;
	//         size_t triVtxIdx1 = triIdx * 3 + 1;
	//         size_t triVtxIdx2 = triIdx * 3 + 2;
	//
	//         // Index data
	//         const tinyobj::index_t& dataIdx0 = shapeMesh.indices[triVtxIdx0];
	//         const tinyobj::index_t& dataIdx1 = shapeMesh.indices[triVtxIdx1];
	//         const tinyobj::index_t& dataIdx2 = shapeMesh.indices[triVtxIdx2];
	//
	//         bool sameIdx0 = (dataIdx0.vertex_index == dataIdx0.normal_index) && (dataIdx0.normal_index == dataIdx0.texcoord_index);
	//         bool sameIdx1 = (dataIdx1.vertex_index == dataIdx1.normal_index) && (dataIdx1.normal_index == dataIdx1.texcoord_index);
	//         bool sameIdx2 = (dataIdx2.vertex_index == dataIdx2.normal_index) && (dataIdx2.normal_index == dataIdx2.texcoord_index);
	//         bool same     = sameIdx0 && sameIdx1 && sameIdx2;
	//         if (!same) {
	//            indexable = false;
	//            break;
	//         }
	//     }
	// }

	// Preallocate based on the total number of triangles.
	size_t totalTriangles = 0;
	for (size_t shapeIdx = 0; shapeIdx < numShapes; ++shapeIdx) {
		totalTriangles += shapes[shapeIdx].mesh.indices.size() / 3;
	}
	pTriMesh->PreallocateForTriangleCount(totalTriangles,
		/* enableColors= */ (options.mEnableVertexColors || options.mEnableObjectColor),
		options.mEnableNormals,
		options.mEnableTexCoords,
		options.mEnableTangents);

	// Build geometry
	for (size_t shapeIdx = 0; shapeIdx < numShapes; ++shapeIdx) {
		const tinyobj::shape_t& shape = shapes[shapeIdx];
		const tinyobj::mesh_t& shapeMesh = shape.mesh;

		size_t numTriangles = shapeMesh.indices.size() / 3;
		for (size_t triIdx = 0; triIdx < numTriangles; ++triIdx) {
			size_t triVtxIdx0 = triIdx * 3 + 0;
			size_t triVtxIdx1 = triIdx * 3 + 1;
			size_t triVtxIdx2 = triIdx * 3 + 2;

			// Index data
			const tinyobj::index_t& dataIdx0 = shapeMesh.indices[triVtxIdx0];
			const tinyobj::index_t& dataIdx1 = shapeMesh.indices[triVtxIdx1];
			const tinyobj::index_t& dataIdx2 = shapeMesh.indices[triVtxIdx2];

			// Vertex data
			TriMeshVertexData vtx0 = {};
			TriMeshVertexData vtx1 = {};
			TriMeshVertexData vtx2 = {};

			// Pick a face color
			float3 faceColor = colors[triIdx % colors.size()];
			vtx0.color = faceColor;
			vtx1.color = faceColor;
			vtx2.color = faceColor;

			// Vertex positions
			{
				int i0 = 3 * dataIdx0.vertex_index + 0;
				int i1 = 3 * dataIdx0.vertex_index + 1;
				int i2 = 3 * dataIdx0.vertex_index + 2;
				vtx0.position = float3(attrib.vertices[i0], attrib.vertices[i1], attrib.vertices[i2]);

				i0 = 3 * dataIdx1.vertex_index + 0;
				i1 = 3 * dataIdx1.vertex_index + 1;
				i2 = 3 * dataIdx1.vertex_index + 2;
				vtx1.position = float3(attrib.vertices[i0], attrib.vertices[i1], attrib.vertices[i2]);

				i0 = 3 * dataIdx2.vertex_index + 0;
				i1 = 3 * dataIdx2.vertex_index + 1;
				i2 = 3 * dataIdx2.vertex_index + 2;
				vtx2.position = float3(attrib.vertices[i0], attrib.vertices[i1], attrib.vertices[i2]);
			}

			// Normals
			if ((dataIdx0.normal_index != -1) && (dataIdx1.normal_index != -1) && (dataIdx2.normal_index != -1)) {
				int i0 = 3 * dataIdx0.normal_index + 0;
				int i1 = 3 * dataIdx0.normal_index + 1;
				int i2 = 3 * dataIdx0.normal_index + 2;
				vtx0.normal = float3(attrib.normals[i0], attrib.normals[i1], attrib.normals[i2]);

				i0 = 3 * dataIdx1.normal_index + 0;
				i1 = 3 * dataIdx1.normal_index + 1;
				i2 = 3 * dataIdx1.normal_index + 2;
				vtx1.normal = float3(attrib.normals[i0], attrib.normals[i1], attrib.normals[i2]);

				i0 = 3 * dataIdx2.normal_index + 0;
				i1 = 3 * dataIdx2.normal_index + 1;
				i2 = 3 * dataIdx2.normal_index + 2;
				vtx2.normal = float3(attrib.normals[i0], attrib.normals[i1], attrib.normals[i2]);
			}

			// Texture coordinates
			if ((dataIdx0.texcoord_index != -1) && (dataIdx1.texcoord_index != -1) && (dataIdx2.texcoord_index != -1)) {
				int i0 = 2 * dataIdx0.texcoord_index + 0;
				int i1 = 2 * dataIdx0.texcoord_index + 1;
				vtx0.texCoord = float2(attrib.texcoords[i0], attrib.texcoords[i1]);

				i0 = 2 * dataIdx1.texcoord_index + 0;
				i1 = 2 * dataIdx1.texcoord_index + 1;
				vtx1.texCoord = float2(attrib.texcoords[i0], attrib.texcoords[i1]);

				i0 = 2 * dataIdx2.texcoord_index + 0;
				i1 = 2 * dataIdx2.texcoord_index + 1;
				vtx2.texCoord = float2(attrib.texcoords[i0], attrib.texcoords[i1]);

				// Scale tex coords
				vtx0.texCoord *= options.mTexCoordScale;
				vtx1.texCoord *= options.mTexCoordScale;
				vtx2.texCoord *= options.mTexCoordScale;

				if (options.mInvertTexCoordsV) {
					vtx0.texCoord.y = 1.0f - vtx0.texCoord.y;
					vtx1.texCoord.y = 1.0f - vtx1.texCoord.y;
					vtx2.texCoord.y = 1.0f - vtx2.texCoord.y;
				}
			}

			float3 pos0 = (vtx0.position * options.mScale) + options.mTranslate;
			float3 pos1 = (vtx1.position * options.mScale) + options.mTranslate;
			float3 pos2 = (vtx2.position * options.mScale) + options.mTranslate;

			uint32_t triVtx0 = pTriMesh->AppendPosition(pos0) - 1;
			uint32_t triVtx1 = pTriMesh->AppendPosition(pos1) - 1;
			uint32_t triVtx2 = pTriMesh->AppendPosition(pos2) - 1;

			if (options.mEnableVertexColors || options.mEnableObjectColor) {
				if (options.mEnableObjectColor) {
					vtx0.color = options.mObjectColor;
					vtx1.color = options.mObjectColor;
					vtx2.color = options.mObjectColor;
				}
				pTriMesh->AppendColor(vtx0.color);
				pTriMesh->AppendColor(vtx1.color);
				pTriMesh->AppendColor(vtx2.color);
			}

			if (options.mEnableNormals) {
				pTriMesh->AppendNormal(vtx0.normal);
				pTriMesh->AppendNormal(vtx1.normal);
				pTriMesh->AppendNormal(vtx2.normal);
			}

			if (options.mEnableTexCoords) {
				pTriMesh->AppendTexCoord(vtx0.texCoord);
				pTriMesh->AppendTexCoord(vtx1.texCoord);
				pTriMesh->AppendTexCoord(vtx2.texCoord);
			}

			if (options.mEnableTangents) {
				float3 edge1 = vtx1.position - vtx0.position;
				float3 edge2 = vtx2.position - vtx0.position;
				float2 duv1 = vtx1.texCoord - vtx0.texCoord;
				float2 duv2 = vtx2.texCoord - vtx0.texCoord;
				float  r = 1.0f / (duv1.x * duv2.y - duv1.y * duv2.x);

				float3 tangent = float3(
					((edge1.x * duv2.y) - (edge2.x * duv1.y)) * r,
					((edge1.y * duv2.y) - (edge2.y * duv1.y)) * r,
					((edge1.z * duv2.y) - (edge2.z * duv1.y)) * r);

				float3 bitangent = float3(
					((edge1.x * duv2.x) - (edge2.x * duv1.x)) * r,
					((edge1.y * duv2.x) - (edge2.y * duv1.x)) * r,
					((edge1.z * duv2.x) - (edge2.z * duv1.x)) * r);

				tangent = glm::normalize(tangent - vtx0.normal * glm::dot(vtx0.normal, tangent));
				float w = 1.0f;

				pTriMesh->AppendTangent(float4(-tangent, w));
				pTriMesh->AppendTangent(float4(-tangent, w));
				pTriMesh->AppendTangent(float4(-tangent, w));
				pTriMesh->AppendBitangent(-bitangent);
				pTriMesh->AppendBitangent(-bitangent);
				pTriMesh->AppendBitangent(-bitangent);
			}

			if (indexType != grfx::INDEX_TYPE_UNDEFINED) {
				if (options.mInvertWinding) {
					pTriMesh->AppendTriangle(triVtx0, triVtx2, triVtx1);
				}
				else {
					pTriMesh->AppendTriangle(triVtx0, triVtx1, triVtx2);
				}
			}
		}
	}

	// if (options.mEnableTangents) {
	//     size_t numPositions  = mesh.mPositions.size();
	//     size_t numNormals    = mesh.mNormals.size();
	//     size_t numTangents   = mesh.mTangents.size();
	//     size_t numBitangents = mesh.mBitangents.size();
	//     ASSERT_MSG(numPositions == numNormals == numTangents == numBitangents, "misaligned data for tangent calculation");
	//
	//     for (size_t i = 0; i < numPositions; ++i) {
	//         const float3& T = mesh.mTangents[i];
	//         const float3& B = mesh.mBitangents[i];
	//     }
	// }

	double fnEndTime = timer.SecondsSinceStart();
	float  fnElapsed = static_cast<float>(fnEndTime - fnStartTime);
	LOG_INFO("Created mesh from OBJ file: " << path << " (" << FloatString(fnElapsed) << " seconds, " << numShapes << " shapes, " << totalTriangles << " triangles)");

	return SUCCESS;
}

TriMesh TriMesh::CreateFromOBJ(const std::filesystem::path& path, const TriMeshOptions& options)
{
	TriMesh mesh;
	CHECKED_CALL(CreateFromOBJ(path, options, &mesh));
	return mesh;
}

#pragma endregion

#pragma region WireMesh

WireMesh::WireMesh()
{
}

WireMesh::WireMesh(grfx::IndexType indexType)
	: mIndexType(indexType)
{
}

WireMesh::~WireMesh()
{
}

uint32_t WireMesh::GetCountEdges() const
{
	uint32_t count = 0;
	if (mIndexType != grfx::INDEX_TYPE_UNDEFINED) {
		uint32_t elementSize = grfx::IndexTypeSize(mIndexType);
		uint32_t elementCount = CountU32(mIndices) / elementSize;
		count = elementCount / 2;
	}
	else {
		count = CountU32(mPositions) / 2;
	}
	return count;
}

uint32_t WireMesh::GetCountIndices() const
{
	uint32_t indexSize = grfx::IndexTypeSize(mIndexType);
	if (indexSize == 0) {
		return 0;
	}

	uint32_t count = CountU32(mIndices) / indexSize;
	return count;
}

uint32_t WireMesh::GetCountPositions() const
{
	uint32_t count = CountU32(mPositions);
	return count;
}

uint32_t WireMesh::GetCountColors() const
{
	uint32_t count = CountU32(mColors);
	return count;
}

uint64_t WireMesh::GetDataSizeIndices() const
{
	uint64_t size = static_cast<uint64_t>(mIndices.size());
	return size;
}

uint64_t WireMesh::GetDataSizePositions() const
{
	uint64_t size = static_cast<uint64_t>(mPositions.size() * sizeof(float3));
	return size;
}

uint64_t WireMesh::GetDataSizeColors() const
{
	uint64_t size = static_cast<uint64_t>(mColors.size() * sizeof(float3));
	return size;
}

const uint16_t* WireMesh::GetDataIndicesU16(uint32_t index) const
{
	if (mIndexType != grfx::INDEX_TYPE_UINT16) {
		return nullptr;
	}
	uint32_t count = GetCountIndices();
	if (index >= count) {
		return nullptr;
	}
	size_t      offset = sizeof(uint16_t) * index;
	const char* ptr = reinterpret_cast<const char*>(mIndices.data()) + offset;
	return reinterpret_cast<const uint16_t*>(ptr);
}

const uint32_t* WireMesh::GetDataIndicesU32(uint32_t index) const
{
	if (mIndexType != grfx::INDEX_TYPE_UINT32) {
		return nullptr;
	}
	uint32_t count = GetCountIndices();
	if (index >= count) {
		return nullptr;
	}
	size_t      offset = sizeof(uint32_t) * index;
	const char* ptr = reinterpret_cast<const char*>(mIndices.data()) + offset;
	return reinterpret_cast<const uint32_t*>(ptr);
}

const float3* WireMesh::GetDataPositions(uint32_t index) const
{
	if (index >= mPositions.size()) {
		return nullptr;
	}
	size_t      offset = sizeof(float3) * index;
	const char* ptr = reinterpret_cast<const char*>(mPositions.data()) + offset;
	return reinterpret_cast<const float3*>(ptr);
}

const float3* WireMesh::GetDataColors(uint32_t index) const
{
	if (index >= mColors.size()) {
		return nullptr;
	}
	size_t      offset = sizeof(float3) * index;
	const char* ptr = reinterpret_cast<const char*>(mColors.data()) + offset;
	return reinterpret_cast<const float3*>(ptr);
}

void WireMesh::AppendIndexU16(uint16_t value)
{
	const uint8_t* pBytes = reinterpret_cast<const uint8_t*>(&value);
	mIndices.push_back(pBytes[0]);
	mIndices.push_back(pBytes[1]);
}

void WireMesh::AppendIndexU32(uint32_t value)
{
	const uint8_t* pBytes = reinterpret_cast<const uint8_t*>(&value);
	mIndices.push_back(pBytes[0]);
	mIndices.push_back(pBytes[1]);
	mIndices.push_back(pBytes[2]);
	mIndices.push_back(pBytes[3]);
}

uint32_t WireMesh::AppendEdge(uint32_t v0, uint32_t v1)
{
	if (mIndexType == grfx::INDEX_TYPE_UINT16) {
		ASSERT_MSG(v0 <= UINT16_MAX, "v0 is out of range for index type UINT16");
		ASSERT_MSG(v1 <= UINT16_MAX, "v1 is out of range for index type UINT16");
		mIndices.reserve(mIndices.size() + 2 * sizeof(uint16_t));
		AppendIndexU16(static_cast<uint16_t>(v0));
		AppendIndexU16(static_cast<uint16_t>(v1));
	}
	else if (mIndexType == grfx::INDEX_TYPE_UINT32) {
		mIndices.reserve(mIndices.size() + 2 * sizeof(uint32_t));
		AppendIndexU32(v0);
		AppendIndexU32(v1);
	}
	else {
		ASSERT_MSG(false, "unknown index type");
		return 0;
	}
	uint32_t count = GetCountEdges();
	return count;
}

uint32_t WireMesh::AppendPosition(const float3& value)
{
	mPositions.push_back(value);
	uint32_t count = GetCountPositions();
	if (count > 0) {
		mBoundingBoxMin.x = std::min<float>(mBoundingBoxMin.x, value.x);
		mBoundingBoxMin.y = std::min<float>(mBoundingBoxMin.y, value.y);
		mBoundingBoxMin.z = std::min<float>(mBoundingBoxMin.z, value.z);
		mBoundingBoxMax.x = std::min<float>(mBoundingBoxMax.x, value.x);
		mBoundingBoxMax.y = std::min<float>(mBoundingBoxMax.y, value.y);
		mBoundingBoxMax.z = std::min<float>(mBoundingBoxMax.z, value.z);
	}
	else {
		mBoundingBoxMin = mBoundingBoxMax = value;
	}
	return count;
}

uint32_t WireMesh::AppendColor(const float3& value)
{
	mColors.push_back(value);
	uint32_t count = GetCountColors();
	return count;
}

Result WireMesh::GetEdge(uint32_t triIndex, uint32_t& v0, uint32_t& v1) const
{
	if (mIndexType == grfx::INDEX_TYPE_UNDEFINED) {
		return ERROR_GEOMETRY_NO_INDEX_DATA;
	}

	uint32_t triCount = GetCountEdges();
	if (triIndex >= triCount) {
		return ERROR_OUT_OF_RANGE;
	}

	const uint8_t* pData = mIndices.data();
	uint32_t       elementSize = grfx::IndexTypeSize(mIndexType);

	if (mIndexType == grfx::INDEX_TYPE_UINT16) {
		size_t          offset = 2 * triIndex * elementSize;
		const uint16_t* pIndexData = reinterpret_cast<const uint16_t*>(pData + offset);
		v0 = static_cast<uint32_t>(pIndexData[0]);
		v1 = static_cast<uint32_t>(pIndexData[1]);
	}
	else if (mIndexType == grfx::INDEX_TYPE_UINT32) {
		size_t          offset = 2 * triIndex * elementSize;
		const uint32_t* pIndexData = reinterpret_cast<const uint32_t*>(pData + offset);
		v0 = static_cast<uint32_t>(pIndexData[0]);
		v1 = static_cast<uint32_t>(pIndexData[1]);
	}

	return SUCCESS;
}

Result WireMesh::GetVertexData(uint32_t vtxIndex, WireMeshVertexData* pVertexData) const
{
	uint32_t vertexCount = GetCountPositions();
	if (vtxIndex >= vertexCount) {
		return ERROR_OUT_OF_RANGE;
	}

	const float3* pPosition = GetDataPositions(vtxIndex);
	const float3* pColor = GetDataColors(vtxIndex);

	pVertexData->position = *pPosition;

	if (!IsNull(pColor)) {
		pVertexData->color = *pColor;
	}

	return SUCCESS;
}

void WireMesh::AppendIndexAndVertexData(
	std::vector<uint32_t>& indexData,
	const std::vector<float>& vertexData,
	const uint32_t            expectedVertexCount,
	const WireMeshOptions& options,
	WireMesh& mesh)
{
	grfx::IndexType indexType = options.mEnableIndices ? grfx::INDEX_TYPE_UINT32 : grfx::INDEX_TYPE_UNDEFINED;

	// Verify expected vertex count
	size_t vertexCount = (vertexData.size() * sizeof(float)) / sizeof(WireMeshVertexData);
	ASSERT_MSG(vertexCount == expectedVertexCount, "unexpected vertex count");

	// Get base pointer to vertex data
	const char* pData = reinterpret_cast<const char*>(vertexData.data());

	if (indexType != grfx::INDEX_TYPE_UNDEFINED) {
		for (size_t i = 0; i < vertexCount; ++i) {
			const WireMeshVertexData* pVertexData = reinterpret_cast<const WireMeshVertexData*>(pData + (i * sizeof(WireMeshVertexData)));

			mesh.AppendPosition(pVertexData->position * options.mScale);

			if (options.mEnableVertexColors || options.mEnableObjectColor) {
				float3 color = options.mEnableObjectColor ? options.mObjectColor : pVertexData->color;
				mesh.AppendColor(color);
			}
		}

		size_t edgeCount = indexData.size() / 2;
		for (size_t triIndex = 0; triIndex < edgeCount; ++triIndex) {
			uint32_t v0 = indexData[2 * triIndex + 0];
			uint32_t v1 = indexData[2 * triIndex + 1];
			mesh.AppendEdge(v0, v1);
		}
	}
	else {
		for (size_t i = 0; i < indexData.size(); ++i) {
			uint32_t                  vi = indexData[i];
			const WireMeshVertexData* pVertexData = reinterpret_cast<const WireMeshVertexData*>(pData + (vi * sizeof(WireMeshVertexData)));

			mesh.AppendPosition(pVertexData->position * options.mScale);

			if (options.mEnableVertexColors) {
				mesh.AppendColor(pVertexData->color);
			}
		}
	}
}

WireMesh WireMesh::CreatePlane(WireMeshPlane plane, const float2& size, uint32_t usegs, uint32_t vsegs, const WireMeshOptions& options)
{
	const float    hs = size.x / 2.0f;
	const float    ht = size.y / 2.0f;
	const float    ds = size.x / static_cast<float>(usegs);
	const float    dt = size.y / static_cast<float>(vsegs);
	const uint32_t uverts = usegs + 1;
	const uint32_t vverts = vsegs + 1;

	std::vector<float>    vertexData;
	std::vector<uint32_t> indexData;
	uint32_t              indexCount = 0;
	// U segemnts
	for (uint32_t i = 0; i < uverts; ++i) {
		float s = i * ds / size.x;
		float t0 = 0;
		float t1 = 1;

		float3 position0 = float3(0);
		float3 position1 = float3(0);
		switch (plane) {
		default: {
			ASSERT_MSG(false, "unknown plane orientation");
		} break;

			   // case WIRE_MESH_PLANE_POSITIVE_X: {
			   // } break;
			   //
			   // case WIRE_MESH_PLANE_NEGATIVE_X: {
			   // } break;
			   //
		case WIRE_MESH_PLANE_POSITIVE_Y: {
			position0 = float3(s * size.x - hs, 0, t0 * size.y - ht);
			position1 = float3(s * size.x - hs, 0, t1 * size.y - ht);
		} break;

		case WIRE_MESH_PLANE_NEGATIVE_Y: {
			position0 = float3((1.0f - s) * size.x - hs, 0, (1.0f - t0) * size.y - ht);
			position1 = float3((1.0f - s) * size.x - hs, 0, (1.0f - t1) * size.y - ht);
		} break;

									   // case WIRE_MESH_PLANE_POSITIVE_Z: {
									   // } break;
									   //
									   // case WIRE_MESH_PLANE_NEGATIVE_Z: {
									   // } break;
		}

		float3 color0 = float3(s, 0, 0);
		float3 color1 = float3(s, 1, 0);

		vertexData.push_back(position0.x);
		vertexData.push_back(position0.y);
		vertexData.push_back(position0.z);
		vertexData.push_back(color0.r);
		vertexData.push_back(color0.g);
		vertexData.push_back(color0.b);

		vertexData.push_back(position1.x);
		vertexData.push_back(position1.y);
		vertexData.push_back(position1.z);
		vertexData.push_back(color1.r);
		vertexData.push_back(color1.g);
		vertexData.push_back(color1.b);

		indexData.push_back(indexCount);
		indexCount += 1;
		indexData.push_back(indexCount);
		indexCount += 1;
	}
	// V segemnts
	for (uint32_t j = 0; j < vverts; ++j) {
		float s0 = 0;
		float s1 = 1;
		float t = j * dt / size.y;

		float3 position0 = float3(0);
		float3 position1 = float3(0);
		switch (plane) {
		default: {
			ASSERT_MSG(false, "unknown plane orientation");
		} break;

			   // case WIRE_MESH_PLANE_POSITIVE_X: {
			   // } break;
			   //
			   // case WIRE_MESH_PLANE_NEGATIVE_X: {
			   // } break;
			   //
		case WIRE_MESH_PLANE_POSITIVE_Y: {
			position0 = float3(s0 * size.x - hs, 0, t * size.y - ht);
			position1 = float3(s1 * size.x - hs, 0, t * size.y - ht);
		} break;

		case WIRE_MESH_PLANE_NEGATIVE_Y: {
			position0 = float3((1.0f - s0) * size.x - hs, 0, (1.0f - t) * size.y - ht);
			position1 = float3((1.0f - s1) * size.x - hs, 0, (1.0f - t) * size.y - ht);
		} break;

									   // case WIRE_MESH_PLANE_POSITIVE_Z: {
									   // } break;
									   //
									   // case WIRE_MESH_PLANE_NEGATIVE_Z: {
									   // } break;
		}

		float3 color0 = float3(0, t, 0);
		float3 color1 = float3(1, t, 0);

		vertexData.push_back(position0.x);
		vertexData.push_back(position0.y);
		vertexData.push_back(position0.z);
		vertexData.push_back(color0.r);
		vertexData.push_back(color0.g);
		vertexData.push_back(color0.b);

		vertexData.push_back(position1.x);
		vertexData.push_back(position1.y);
		vertexData.push_back(position1.z);
		vertexData.push_back(color1.r);
		vertexData.push_back(color1.g);
		vertexData.push_back(color1.b);

		indexData.push_back(indexCount);
		indexCount += 1;
		indexData.push_back(indexCount);
		indexCount += 1;
	}

	grfx::IndexType indexType = options.mEnableIndices ? grfx::INDEX_TYPE_UINT32 : grfx::INDEX_TYPE_UNDEFINED;
	WireMesh        mesh = WireMesh(indexType);

	uint32_t expectedVertexCount = 2 * (uverts + vverts);
	AppendIndexAndVertexData(indexData, vertexData, expectedVertexCount, options, mesh);

	return mesh;
}

WireMesh WireMesh::CreateCube(const float3& size, const WireMeshOptions& options)
{
	const float hx = size.x / 2.0f;
	const float hy = size.y / 2.0f;
	const float hz = size.z / 2.0f;

	// clang-format off
	std::vector<float> vertexData = {
		// position      // vertex colors    
		 hx,  hy, -hz,    1.0f, 0.0f, 0.0f,  //  0  -Z side
		 hx, -hy, -hz,    1.0f, 0.0f, 0.0f,  //  1
		-hx, -hy, -hz,    1.0f, 0.0f, 0.0f,  //  2
		-hx,  hy, -hz,    1.0f, 0.0f, 0.0f,  //  3

		-hx,  hy,  hz,    0.0f, 1.0f, 0.0f,  //  4  +Z side
		-hx, -hy,  hz,    0.0f, 1.0f, 0.0f,  //  5
		 hx, -hy,  hz,    0.0f, 1.0f, 0.0f,  //  6
		 hx,  hy,  hz,    0.0f, 1.0f, 0.0f,  //  7

		-hx,  hy, -hz,   -0.0f, 0.0f, 1.0f,  //  8  -X side
		-hx, -hy, -hz,   -0.0f, 0.0f, 1.0f,  //  9
		-hx, -hy,  hz,   -0.0f, 0.0f, 1.0f,  // 10
		-hx,  hy,  hz,   -0.0f, 0.0f, 1.0f,  // 11

		 hx,  hy,  hz,    1.0f, 1.0f, 0.0f,  // 12  +X side
		 hx, -hy,  hz,    1.0f, 1.0f, 0.0f,  // 13
		 hx, -hy, -hz,    1.0f, 1.0f, 0.0f,  // 14
		 hx,  hy, -hz,    1.0f, 1.0f, 0.0f,  // 15

		-hx, -hy,  hz,    1.0f, 0.0f, 1.0f,  // 16  -Y side
		-hx, -hy, -hz,    1.0f, 0.0f, 1.0f,  // 17
		 hx, -hy, -hz,    1.0f, 0.0f, 1.0f,  // 18
		 hx, -hy,  hz,    1.0f, 0.0f, 1.0f,  // 19

		-hx,  hy, -hz,    0.0f, 1.0f, 1.0f,  // 20  +Y side
		-hx,  hy,  hz,    0.0f, 1.0f, 1.0f,  // 21
		 hx,  hy,  hz,    0.0f, 1.0f, 1.0f,  // 22
		 hx,  hy, -hz,    0.0f, 1.0f, 1.0f,  // 23
	};

	std::vector<uint32_t> indexData = {
		0,  1, // -Z side
		1,  2,
		2,  3,
		3,  0,

		4,  5, // +Z side
		5,  6,
		6,  7,
		7,  4,

		8,  9, // -X side
		9, 10,
	   10, 11,
	   11,  8,

		12, 13, // +X side
		13, 14,
		14, 15,
		15, 12,

		16, 17, // -X side
		17, 18,
		18, 19,
		19, 16,

		20, 21, // +X side
		21, 22,
		22, 23,
		23, 20,
	};
	// clang-format on

	grfx::IndexType indexType = options.mEnableIndices ? grfx::INDEX_TYPE_UINT32 : grfx::INDEX_TYPE_UNDEFINED;
	WireMesh        mesh = WireMesh(indexType);

	AppendIndexAndVertexData(indexData, vertexData, 24, options, mesh);

	return mesh;
}

WireMesh WireMesh::CreateSphere(float radius, uint32_t usegs, uint32_t vsegs, const WireMeshOptions& options)
{
	constexpr float kPi = glm::pi<float>();
	constexpr float kTwoPi = 2.0f * kPi;

	const uint32_t uverts = usegs + 1;
	const uint32_t vverts = vsegs + 1;

	float dt = kTwoPi / static_cast<float>(usegs);
	float dp = kPi / static_cast<float>(vsegs);

	std::vector<float>    vertexData;
	std::vector<uint32_t> indexData;
	uint32_t              indexCount = 0;
	// U segemnts
	for (uint32_t j = 1; j < (vverts - 1); ++j) {
		for (uint32_t i = 1; i < uverts; ++i) {
			float  theta0 = (i - 1) * dt;
			float  theta1 = (i - 0) * dt;
			float  phi = j * dp;
			float  u0 = theta0 / kTwoPi;
			float  u1 = theta1 / kTwoPi;
			float  v = phi / kPi;
			float3 P0 = SphericalToCartesian(theta0, phi);
			float3 P1 = SphericalToCartesian(theta1, phi);
			float3 position0 = radius * P0;
			float3 position1 = radius * P1;
			float3 color0 = float3(u0, v, 0);
			float3 color1 = float3(u1, v, 0);

			vertexData.push_back(position0.x);
			vertexData.push_back(position0.y);
			vertexData.push_back(position0.z);
			vertexData.push_back(color0.r);
			vertexData.push_back(color0.g);
			vertexData.push_back(color0.b);

			vertexData.push_back(position1.x);
			vertexData.push_back(position1.y);
			vertexData.push_back(position1.z);
			vertexData.push_back(color1.r);
			vertexData.push_back(color1.g);
			vertexData.push_back(color1.b);

			indexData.push_back(indexCount);
			indexCount += 1;
			indexData.push_back(indexCount);
			indexCount += 1;
		}
	}
	// V segemnts
	for (uint32_t i = 0; i < (uverts - 1); ++i) {
		for (uint32_t j = 1; j < vverts; ++j) {
			float  theta = i * dt;
			float  phi0 = (j - 0) * dp;
			float  phi1 = (j - 1) * dp;
			float  u = theta / kTwoPi;
			float  v0 = phi0 / kPi;
			float  v1 = phi1 / kPi;
			float3 P0 = SphericalToCartesian(theta, phi0);
			float3 P1 = SphericalToCartesian(theta, phi1);
			float3 position0 = radius * P0;
			float3 position1 = radius * P1;
			float3 color0 = float3(u, v0, 0);
			float3 color1 = float3(u, v1, 0);

			vertexData.push_back(position0.x);
			vertexData.push_back(position0.y);
			vertexData.push_back(position0.z);
			vertexData.push_back(color0.r);
			vertexData.push_back(color0.g);
			vertexData.push_back(color0.b);

			vertexData.push_back(position1.x);
			vertexData.push_back(position1.y);
			vertexData.push_back(position1.z);
			vertexData.push_back(color1.r);
			vertexData.push_back(color1.g);
			vertexData.push_back(color1.b);

			indexData.push_back(indexCount);
			indexCount += 1;
			indexData.push_back(indexCount);
			indexCount += 1;
		}
	}

	grfx::IndexType indexType = options.mEnableIndices ? grfx::INDEX_TYPE_UINT32 : grfx::INDEX_TYPE_UNDEFINED;
	WireMesh        mesh = WireMesh(indexType);

	uint32_t expectedVertexCountU = (uverts - 1) * (vverts - 2);
	uint32_t expectedVertexCountV = (uverts - 1) * (vverts - 1);
	uint32_t expectedVertexCount = 2 * (expectedVertexCountU + expectedVertexCountV);
	AppendIndexAndVertexData(indexData, vertexData, expectedVertexCount, options, mesh);

	return mesh;
}

#pragma endregion

#pragma region Geometry

#define NOT_INTERLEAVED_MSG "cannot append interleaved data if attribute layout is not interleaved"
#define NOT_PLANAR_MSG      "cannot append planar data if attribute layout is not planar"

// -------------------------------------------------------------------------------------------------
// VertexDataProcessorBase
//     interface for all VertexDataProcessors
//     with helper functions to allow derived classes to access Geometry
// Note that the base and derived VertexDataProcessor classes do not have any data member
//     be careful when adding data members to any of these classes
//     it could create problems for multithreaded cases for multiple geometry objects
// -------------------------------------------------------------------------------------------------
template <typename T>
class VertexDataProcessorBase
{
public:
	// Validates the layout
	// returns false if the validation fails
	virtual bool Validate(Geometry* pGeom) = 0;
	// Updates the vertex buffer and the vertex buffer index
	// returns Result::ERROR_GEOMETRY_INVALID_VERTEX_SEMANTIC if the sematic is invalid
	virtual Result UpdateVertexBuffer(Geometry* pGeom) = 0;
	// Fetches vertex data from vtx and append it to the geometry
	// Returns 0 if the appending fails
	virtual uint32_t AppendVertexData(Geometry* pGeom, const T& vtx) = 0;
	virtual uint32_t AppendVertexData(Geometry* pGeom, const WireMeshVertexData& vtx) = 0;
	// Gets the vertex count of the geometry
	virtual uint32_t GetVertexCount(const Geometry* pGeom) = 0;

protected:
	// Prevent from being deleted explicitly
	virtual ~VertexDataProcessorBase() {}

	// ----------------------------------------
	// Helper functions to access Geometry data
	// ----------------------------------------

	// Missing attributes will also result in NOOP.
	// returns the element count of the vertex buffer with the bufferIndex
	// 0 is returned if the bufferIndex is ignored
	template <typename U>
	uint32_t AppendDataToVertexBuffer(Geometry* pGeom, uint32_t bufferIndex, const U& data)
	{
		if (bufferIndex != VALUE_IGNORED) {
			ASSERT_MSG((bufferIndex >= 0) && (bufferIndex < pGeom->mVertexBuffers.size()), "buffer index is not valid");
			pGeom->mVertexBuffers[bufferIndex].Append(data);
			return pGeom->mVertexBuffers[bufferIndex].GetElementCount();
		}
		return 0;
	}

	void AddVertexBuffer(Geometry* pGeom, uint32_t bindingIndex)
	{
		pGeom->mVertexBuffers.push_back(Geometry::Buffer(Geometry::BUFFER_TYPE_VERTEX, GetVertexBindingStride(pGeom, bindingIndex)));
	}

	uint32_t GetVertexBufferSize(const Geometry* pGeom, uint32_t bufferIndex) const
	{
		return pGeom->mVertexBuffers[bufferIndex].GetSize();
	}

	uint32_t GetVertexBufferElementCount(const Geometry* pGeom, uint32_t bufferIndex) const
	{
		return pGeom->mVertexBuffers[bufferIndex].GetElementCount();
	}

	uint32_t GetVertexBufferElementSize(const Geometry* pGeom, uint32_t bufferIndex) const
	{
		return pGeom->mVertexBuffers[bufferIndex].GetElementSize();
	}

	uint32_t GetVertexBindingAttributeCount(const Geometry* pGeom, uint32_t bindingIndex) const
	{
		return pGeom->mCreateInfo.vertexBindings[bindingIndex].GetAttributeCount();
	}

	uint32_t GetVertexBindingStride(const Geometry* pGeom, uint32_t bindingIndex) const
	{
		return pGeom->mCreateInfo.vertexBindings[bindingIndex].GetStride();
	}

	uint32_t GetVertexBindingCount(const Geometry* pGeom) const
	{
		return pGeom->mCreateInfo.vertexBindingCount;
	}

	grfx::VertexSemantic GetVertexBindingAttributeSematic(const Geometry* pGeom, uint32_t bindingIndex, uint32_t attrIndex) const
	{
		const grfx::VertexAttribute* pAttribute = nullptr;
		Result                       ppxres = pGeom->mCreateInfo.vertexBindings[bindingIndex].GetAttribute(attrIndex, &pAttribute);
		ASSERT_MSG(ppxres == SUCCESS, "attribute not found at index=" << attrIndex);
		return pAttribute->semantic;
	}

	uint32_t GetPositionBufferIndex(const Geometry* pGeom) const { return pGeom->mPositionBufferIndex; }
	uint32_t GetNormalBufferIndex(const Geometry* pGeom) const { return pGeom->mNormaBufferIndex; }
	uint32_t GetColorBufferIndex(const Geometry* pGeom) const { return pGeom->mColorBufferIndex; }
	uint32_t GetTexCoordBufferIndex(const Geometry* pGeom) const { return pGeom->mTexCoordBufferIndex; }
	uint32_t GetTangentBufferIndex(const Geometry* pGeom) const { return pGeom->mTangentBufferIndex; }
	uint32_t GetBitangentBufferIndex(const Geometry* pGeom) const { return pGeom->mBitangentBufferIndex; }

	void SetPositionBufferIndex(Geometry* pGeom, uint32_t index) { pGeom->mPositionBufferIndex = index; }
	void SetNormalBufferIndex(Geometry* pGeom, uint32_t index) { pGeom->mNormaBufferIndex = index; }
	void SetColorBufferIndex(Geometry* pGeom, uint32_t index) { pGeom->mColorBufferIndex = index; }
	void SetTexCoordBufferIndex(Geometry* pGeom, uint32_t index) { pGeom->mTexCoordBufferIndex = index; }
	void SetTangentBufferIndex(Geometry* pGeom, uint32_t index) { pGeom->mTangentBufferIndex = index; }
	void SetBitangentBufferIndex(Geometry* pGeom, uint32_t index) { pGeom->mBitangentBufferIndex = index; }
};

// -------------------------------------------------------------------------------------------------
// VertexDataProcessor for Planar vertex attribute layout
//     Planar: each attribute has its own vertex input binding
// -------------------------------------------------------------------------------------------------
template <typename T>
class VertexDataProcessorPlanar : public VertexDataProcessorBase<T>
{
public:
	virtual bool Validate(Geometry* pGeom) override
	{
		const uint32_t vertexBindingCount = this->GetVertexBindingCount(pGeom);
		for (uint32_t i = 0; i < vertexBindingCount; ++i) {
			if (this->GetVertexBindingAttributeCount(pGeom, i) != 1) {
				ASSERT_MSG(false, "planar layout must have 1 attribute");
				return false;
			}
		}
		return true;
	}

	virtual Result UpdateVertexBuffer(Geometry* pGeom) override
	{
		// Create buffers
		const uint32_t vertexBindingCount = this->GetVertexBindingCount(pGeom);
		for (uint32_t i = 0; i < vertexBindingCount; ++i) {
			this->AddVertexBuffer(pGeom, i);
			const grfx::VertexSemantic semantic = this->GetVertexBindingAttributeSematic(pGeom, i, 0);
			// clang-format off
			switch (semantic) {
			default: return Result::ERROR_GEOMETRY_INVALID_VERTEX_SEMANTIC;
			case grfx::VERTEX_SEMANTIC_POSITION: this->SetPositionBufferIndex(pGeom, i); break;
			case grfx::VERTEX_SEMANTIC_NORMAL: this->SetNormalBufferIndex(pGeom, i); break;
			case grfx::VERTEX_SEMANTIC_COLOR: this->SetColorBufferIndex(pGeom, i); break;
			case grfx::VERTEX_SEMANTIC_TANGENT: this->SetTangentBufferIndex(pGeom, i); break;
			case grfx::VERTEX_SEMANTIC_BITANGENT: this->SetBitangentBufferIndex(pGeom, i); break;
			case grfx::VERTEX_SEMANTIC_TEXCOORD: this->SetTexCoordBufferIndex(pGeom, i); break;
			}
			// clang-format on
		}
		return SUCCESS;
	}

	virtual uint32_t AppendVertexData(Geometry* pGeom, const T& vtx) override
	{
		const uint32_t n = this->AppendDataToVertexBuffer(pGeom, this->GetPositionBufferIndex(pGeom), vtx.position);
		ASSERT_MSG(n > 0, "position should always available");
		this->AppendDataToVertexBuffer(pGeom, this->GetNormalBufferIndex(pGeom), vtx.normal);
		this->AppendDataToVertexBuffer(pGeom, this->GetColorBufferIndex(pGeom), vtx.color);
		this->AppendDataToVertexBuffer(pGeom, this->GetTexCoordBufferIndex(pGeom), vtx.texCoord);
		this->AppendDataToVertexBuffer(pGeom, this->GetTangentBufferIndex(pGeom), vtx.tangent);
		this->AppendDataToVertexBuffer(pGeom, this->GetBitangentBufferIndex(pGeom), vtx.bitangent);
		return n;
	}

	virtual uint32_t AppendVertexData(Geometry* pGeom, const WireMeshVertexData& vtx) override
	{
		const uint32_t n = this->AppendDataToVertexBuffer(pGeom, this->GetPositionBufferIndex(pGeom), vtx.position);
		ASSERT_MSG(n > 0, "position should always available");
		this->AppendDataToVertexBuffer(pGeom, this->GetColorBufferIndex(pGeom), vtx.color);
		return n;
	}

	virtual uint32_t GetVertexCount(const Geometry* pGeom) override
	{
		return this->GetVertexBufferElementCount(pGeom, this->GetPositionBufferIndex(pGeom));
	}
};

// -------------------------------------------------------------------------------------------------
// VertexDataProcessor for Interleaved vertex attribute layout
//     Interleaved: only has 1 vertex input binding, data is interleaved
// -------------------------------------------------------------------------------------------------
template <typename T>
class VertexDataProcessorInterleaved : public VertexDataProcessorBase<T>
{
public:
	virtual bool Validate(Geometry* pGeom) override
	{
		const uint32_t vertexBindingCount = this->GetVertexBindingCount(pGeom);
		if (vertexBindingCount != 1) {
			ASSERT_MSG(false, "interleaved layout must have 1 binding");
		}
		return true;
	}

	virtual Result UpdateVertexBuffer(Geometry* pGeom) override
	{
		ASSERT_MSG(1 == this->GetVertexBindingCount(pGeom), "there should be only 1 binding for planar");
		this->AddVertexBuffer(pGeom, kBufferIndex);
		return SUCCESS;
	}

	virtual uint32_t AppendVertexData(Geometry* pGeom, const T& vtx) override
	{
		uint32_t       startSize = this->GetVertexBufferSize(pGeom, kBufferIndex);
		const uint32_t attrCount = this->GetVertexBindingAttributeCount(pGeom, kBufferIndex);
		for (uint32_t attrIndex = 0; attrIndex < attrCount; ++attrIndex) {
			const grfx::VertexSemantic semantic = this->GetVertexBindingAttributeSematic(pGeom, kBufferIndex, attrIndex);

			// clang-format off
			switch (semantic) {
			default: break;
			case grfx::VERTEX_SEMANTIC_POSITION:
			{
				const uint32_t n = this->AppendDataToVertexBuffer(pGeom, kBufferIndex, vtx.position);
				ASSERT_MSG(n > 0, "position should always available");
			}
			break;
			case grfx::VERTEX_SEMANTIC_NORMAL: this->AppendDataToVertexBuffer(pGeom, kBufferIndex, vtx.normal); break;
			case grfx::VERTEX_SEMANTIC_COLOR: this->AppendDataToVertexBuffer(pGeom, kBufferIndex, vtx.color); break;
			case grfx::VERTEX_SEMANTIC_TANGENT: this->AppendDataToVertexBuffer(pGeom, kBufferIndex, vtx.tangent); break;
			case grfx::VERTEX_SEMANTIC_BITANGENT: this->AppendDataToVertexBuffer(pGeom, kBufferIndex, vtx.bitangent); break;
			case grfx::VERTEX_SEMANTIC_TEXCOORD: this->AppendDataToVertexBuffer(pGeom, kBufferIndex, vtx.texCoord); break;
			}
			// clang-format on
		}
		uint32_t endSize = this->GetVertexBufferSize(pGeom, kBufferIndex);

		uint32_t       bytesWritten = (endSize - startSize);
		const uint32_t vertexBufferElementSize = this->GetVertexBufferElementSize(pGeom, kBufferIndex);
		ASSERT_MSG(bytesWritten == vertexBufferElementSize, "size of vertex data written does not match buffer's element size");

		return this->GetVertexBufferElementCount(pGeom, kBufferIndex);
	}

	virtual uint32_t AppendVertexData(Geometry* pGeom, const WireMeshVertexData& vtx) override
	{
		uint32_t       startSize = this->GetVertexBufferSize(pGeom, kBufferIndex);
		const uint32_t attrCount = this->GetVertexBindingAttributeCount(pGeom, kBufferIndex);
		for (uint32_t attrIndex = 0; attrIndex < attrCount; ++attrIndex) {
			const grfx::VertexSemantic semantic = this->GetVertexBindingAttributeSematic(pGeom, kBufferIndex, attrIndex);

			// clang-format off
			switch (semantic) {
			default: break;
			case grfx::VERTEX_SEMANTIC_POSITION:
			{
				const uint32_t n = this->AppendDataToVertexBuffer(pGeom, kBufferIndex, vtx.position);
				ASSERT_MSG(n > 0, "position should always available");
			}
			break;
			case grfx::VERTEX_SEMANTIC_COLOR: this->AppendDataToVertexBuffer(pGeom, kBufferIndex, vtx.color); break;
			}
			// clang-format on
		}
		uint32_t endSize = this->GetVertexBufferSize(pGeom, kBufferIndex);

		uint32_t       bytesWritten = (endSize - startSize);
		const uint32_t vertexBufferElementSize = this->GetVertexBufferElementSize(pGeom, kBufferIndex);
		ASSERT_MSG(bytesWritten == vertexBufferElementSize, "size of vertex data written does not match buffer's element size");

		return this->GetVertexBufferElementCount(pGeom, kBufferIndex);
	}

	virtual uint32_t GetVertexCount(const Geometry* pGeom) override
	{
		return this->GetVertexBufferElementCount(pGeom, kBufferIndex);
	}

private:
	// for VertexDataProcessorInterleaved, there is only 1 binding, so the index is always 0
	const uint32_t kBufferIndex = 0;
};

// -------------------------------------------------------------------------------------------------
// VertexDataProcessor for Position Planar vertex attribute layout
//     Position Planar: only has 2 vertex input bindings
//        - Binding 0 only has Position data
//        - Binding 1 contains all non-position data, interleaved
// -------------------------------------------------------------------------------------------------
template <typename T>
class VertexDataProcessorPositionPlanar : public VertexDataProcessorBase<T>
{
public:
	virtual bool Validate(Geometry* pGeom) override
	{
		const uint32_t vertexBindingCount = this->GetVertexBindingCount(pGeom);
		if (vertexBindingCount != 2) {
			ASSERT_MSG(false, "position planar layout must have 2 bindings");
		}
		return true;
	}

	virtual Result UpdateVertexBuffer(Geometry* pGeom) override
	{
		ASSERT_MSG(2 == this->GetVertexBindingCount(pGeom), "there should be 2 binding for position planar");
		// Position
		this->AddVertexBuffer(pGeom, kPositionBufferIndex);
		// Non-Position data
		this->AddVertexBuffer(pGeom, kNonPositionBufferIndex);

		this->SetPositionBufferIndex(pGeom, kPositionBufferIndex);

		const uint32_t attributeCount = this->GetVertexBindingAttributeCount(pGeom, kNonPositionBufferIndex);
		for (uint32_t i = 0; i < attributeCount; ++i) {
			const grfx::VertexSemantic semantic = this->GetVertexBindingAttributeSematic(pGeom, kNonPositionBufferIndex, i);
			// clang-format off
			switch (semantic) {
			default: return Result::ERROR_GEOMETRY_INVALID_VERTEX_SEMANTIC;
			case grfx::VERTEX_SEMANTIC_POSITION: ASSERT_MSG(false, "position should be in binding 0"); break;
			case grfx::VERTEX_SEMANTIC_NORMAL: this->SetNormalBufferIndex(pGeom, kNonPositionBufferIndex); break;
			case grfx::VERTEX_SEMANTIC_COLOR: this->SetColorBufferIndex(pGeom, kNonPositionBufferIndex); break;
			case grfx::VERTEX_SEMANTIC_TANGENT: this->SetTangentBufferIndex(pGeom, kNonPositionBufferIndex); break;
			case grfx::VERTEX_SEMANTIC_BITANGENT: this->SetBitangentBufferIndex(pGeom, kNonPositionBufferIndex); break;
			case grfx::VERTEX_SEMANTIC_TEXCOORD: this->SetTexCoordBufferIndex(pGeom, kNonPositionBufferIndex); break;
			}
			// clang-format on
		}

		return SUCCESS;
	}

	virtual uint32_t AppendVertexData(Geometry* pGeom, const T& vtx) override
	{
		const uint32_t n = this->AppendDataToVertexBuffer(pGeom, this->GetPositionBufferIndex(pGeom), vtx.position);
		ASSERT_MSG(n > 0, "position should always available");

		uint32_t       startSize = this->GetVertexBufferSize(pGeom, kNonPositionBufferIndex);
		const uint32_t attrCount = this->GetVertexBindingAttributeCount(pGeom, kNonPositionBufferIndex);
		for (uint32_t attrIndex = 0; attrIndex < attrCount; ++attrIndex) {
			const grfx::VertexSemantic semantic = this->GetVertexBindingAttributeSematic(pGeom, kNonPositionBufferIndex, attrIndex);

			// clang-format off
			switch (semantic) {
			default: ASSERT_MSG(false, "should not have other sematic"); break;
			case grfx::VERTEX_SEMANTIC_POSITION: ASSERT_MSG(false, "position should be in binding 0"); break;
			case grfx::VERTEX_SEMANTIC_NORMAL: this->AppendDataToVertexBuffer(pGeom, this->GetNormalBufferIndex(pGeom), vtx.normal); break;
			case grfx::VERTEX_SEMANTIC_COLOR: this->AppendDataToVertexBuffer(pGeom, this->GetColorBufferIndex(pGeom), vtx.color); break;
			case grfx::VERTEX_SEMANTIC_TANGENT: this->AppendDataToVertexBuffer(pGeom, this->GetTangentBufferIndex(pGeom), vtx.tangent); break;
			case grfx::VERTEX_SEMANTIC_BITANGENT: this->AppendDataToVertexBuffer(pGeom, this->GetBitangentBufferIndex(pGeom), vtx.bitangent); break;
			case grfx::VERTEX_SEMANTIC_TEXCOORD: this->AppendDataToVertexBuffer(pGeom, this->GetTexCoordBufferIndex(pGeom), vtx.texCoord); break;
			}
			// clang-format on
		}
		uint32_t endSize = this->GetVertexBufferSize(pGeom, kNonPositionBufferIndex);

		uint32_t       bytesWritten = (endSize - startSize);
		const uint32_t vertexBufferElementSize = this->GetVertexBufferElementSize(pGeom, kNonPositionBufferIndex);
		ASSERT_MSG(bytesWritten == vertexBufferElementSize, "size of vertex data written does not match buffer's element size");
		return n;
	}

	virtual uint32_t AppendVertexData(Geometry* pGeom, const WireMeshVertexData& vtx) override
	{
		const uint32_t n = this->AppendDataToVertexBuffer(pGeom, kPositionBufferIndex, vtx.position);
		ASSERT_MSG(n > 0, "position should always available");
		uint32_t       startSize = this->GetVertexBufferSize(pGeom, kNonPositionBufferIndex);
		const uint32_t attrCount = this->GetVertexBindingAttributeCount(pGeom, kNonPositionBufferIndex);
		for (uint32_t attrIndex = 0; attrIndex < attrCount; ++attrIndex) {
			const grfx::VertexSemantic semantic = this->GetVertexBindingAttributeSematic(pGeom, kNonPositionBufferIndex, attrIndex);

			// clang-format off
			switch (semantic) {
			default: ASSERT_MSG(false, "should not have other sematic"); break;
			case grfx::VERTEX_SEMANTIC_POSITION: ASSERT_MSG(false, "position should be in binding 0"); break;
			case grfx::VERTEX_SEMANTIC_COLOR: this->AppendDataToVertexBuffer(pGeom, this->GetColorBufferIndex(pGeom), vtx.color); break;
			}
			// clang-format on
		}
		uint32_t endSize = this->GetVertexBufferSize(pGeom, kNonPositionBufferIndex);

		uint32_t bytesWritten = (endSize - startSize);

		const uint32_t vertexBufferElementSize = this->GetVertexBufferElementSize(pGeom, kNonPositionBufferIndex);
		ASSERT_MSG(bytesWritten == vertexBufferElementSize, "size of vertex data written does not match buffer's element size");
		return n;
	}

	virtual uint32_t GetVertexCount(const Geometry* pGeom) override
	{
		return this->GetVertexBufferElementCount(pGeom, this->GetPositionBufferIndex(pGeom));
	}

private:
	const uint32_t kPositionBufferIndex = 0;
	const uint32_t kNonPositionBufferIndex = 1;
};

static VertexDataProcessorPlanar<TriMeshVertexData>                   sVDProcessorPlanar;
static VertexDataProcessorPlanar<TriMeshVertexDataCompressed>         sVDProcessorPlanarCompressed;
static VertexDataProcessorInterleaved<TriMeshVertexData>              sVDProcessorInterleaved;
static VertexDataProcessorInterleaved<TriMeshVertexDataCompressed>    sVDProcessorInterleavedCompressed;
static VertexDataProcessorPositionPlanar<TriMeshVertexData>           sVDProcessorPositionPlanar;
static VertexDataProcessorPositionPlanar<TriMeshVertexDataCompressed> sVDProcessorPositionPlanarCompressed;

// -------------------------------------------------------------------------------------------------
// GeometryCreateInfo
// -------------------------------------------------------------------------------------------------
GeometryCreateInfo GeometryCreateInfo::InterleavedU16(grfx::Format format)
{
	GeometryCreateInfo ci = {};
	ci.vertexAttributeLayout = GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_INTERLEAVED;
	ci.indexType = grfx::INDEX_TYPE_UINT16;
	ci.vertexBindingCount = 1; // Interleave attribute layout always has 1 vertex binding
	ci.AddPosition(format);
	return ci;
}

GeometryCreateInfo GeometryCreateInfo::InterleavedU32(grfx::Format format)
{
	GeometryCreateInfo ci = {};
	ci.vertexAttributeLayout = GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_INTERLEAVED;
	ci.indexType = grfx::INDEX_TYPE_UINT32;
	ci.vertexBindingCount = 1; // Interleave attribute layout always has 1 vertex binding
	ci.AddPosition(format);
	return ci;
}

GeometryCreateInfo GeometryCreateInfo::PlanarU16(grfx::Format format)
{
	GeometryCreateInfo ci = {};
	ci.vertexAttributeLayout = GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_PLANAR;
	ci.indexType = grfx::INDEX_TYPE_UINT16;
	ci.AddPosition(format);
	return ci;
}

GeometryCreateInfo GeometryCreateInfo::PlanarU32(grfx::Format format)
{
	GeometryCreateInfo ci = {};
	ci.vertexAttributeLayout = GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_PLANAR;
	ci.indexType = grfx::INDEX_TYPE_UINT32;
	ci.AddPosition(format);
	return ci;
}

GeometryCreateInfo GeometryCreateInfo::PositionPlanarU16(grfx::Format format)
{
	GeometryCreateInfo ci = {};
	ci.vertexAttributeLayout = GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_POSITION_PLANAR;
	ci.indexType = grfx::INDEX_TYPE_UINT16;
	ci.AddPosition(format);
	return ci;
}

GeometryCreateInfo GeometryCreateInfo::PositionPlanarU32(grfx::Format format)
{
	GeometryCreateInfo ci = {};
	ci.vertexAttributeLayout = GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_POSITION_PLANAR;
	ci.indexType = grfx::INDEX_TYPE_UINT32;
	ci.AddPosition(format);
	return ci;
}

GeometryCreateInfo GeometryCreateInfo::Interleaved()
{
	GeometryCreateInfo ci = {};
	ci.vertexAttributeLayout = GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_INTERLEAVED;
	ci.indexType = grfx::INDEX_TYPE_UNDEFINED;
	ci.vertexBindingCount = 1; // Interleave attribute layout always has 1 vertex binding
	ci.AddPosition();
	return ci;
}

GeometryCreateInfo GeometryCreateInfo::Planar()
{
	GeometryCreateInfo ci = {};
	ci.vertexAttributeLayout = GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_PLANAR;
	ci.indexType = grfx::INDEX_TYPE_UNDEFINED;
	ci.AddPosition();
	return ci;
}

GeometryCreateInfo GeometryCreateInfo::PositionPlanar()
{
	GeometryCreateInfo ci = {};
	ci.vertexAttributeLayout = GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_POSITION_PLANAR;
	ci.indexType = grfx::INDEX_TYPE_UNDEFINED;
	ci.AddPosition();
	return ci;
}

GeometryCreateInfo& GeometryCreateInfo::IndexType(grfx::IndexType indexType_)
{
	indexType = indexType_;
	return *this;
}

GeometryCreateInfo& GeometryCreateInfo::IndexTypeU16()
{
	return IndexType(grfx::INDEX_TYPE_UINT16);
}

GeometryCreateInfo& GeometryCreateInfo::IndexTypeU32()
{
	return IndexType(grfx::INDEX_TYPE_UINT32);
}

GeometryCreateInfo& GeometryCreateInfo::AddAttribute(grfx::VertexSemantic semantic, grfx::Format format)
{
	bool exists = false;
	for (uint32_t bindingIndex = 0; bindingIndex < vertexBindingCount; ++bindingIndex) {
		const grfx::VertexBinding& binding = vertexBindings[bindingIndex];
		for (uint32_t attrIndex = 0; attrIndex < binding.GetAttributeCount(); ++attrIndex) {
			const grfx::VertexAttribute* pAttribute = nullptr;
			binding.GetAttribute(attrIndex, &pAttribute);
			exists = (pAttribute->semantic == semantic);
			if (exists) {
				break;
			}
		}
		if (exists) {
			break;
		}
	}

	if (!exists) {
		uint32_t location = 0;
		for (uint32_t bindingIndex = 0; bindingIndex < vertexBindingCount; ++bindingIndex) {
			const grfx::VertexBinding& binding = vertexBindings[bindingIndex];
			location += binding.GetAttributeCount();
		}

		grfx::VertexAttribute attribute = {};
		attribute.semanticName = ToString(semantic);
		attribute.location = location;
		attribute.format = format;
		attribute.binding = VALUE_IGNORED; // Determined below
		attribute.offset = APPEND_OFFSET_ALIGNED;
		attribute.inputRate = grfx::VERTEX_INPUT_RATE_VERTEX;
		attribute.semantic = semantic;

		switch (vertexAttributeLayout) {
		case GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_INTERLEAVED:
			attribute.binding = 0;
			vertexBindings[0].AppendAttribute(attribute);
			vertexBindingCount = 1;
			break;
		case GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_PLANAR:
			ASSERT_MSG(vertexBindingCount < MAX_VERTEX_BINDINGS, "max vertex bindings exceeded");
			vertexBindings[vertexBindingCount].AppendAttribute(attribute);
			vertexBindings[vertexBindingCount].SetBinding(vertexBindingCount);
			vertexBindingCount += 1;
			break;
		case GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_POSITION_PLANAR:
			if (semantic == grfx::VERTEX_SEMANTIC_POSITION) {
				attribute.binding = 0;
				vertexBindings[0].AppendAttribute(attribute);
			}
			else {
				vertexBindings[1].AppendAttribute(attribute);
				vertexBindings[1].SetBinding(1);
			}
			vertexBindingCount = 2;
			break;
		default:
			ASSERT_MSG(false, "unsupported vertex attribute layout type");
			break;
		}
	}
	return *this;
}

GeometryCreateInfo& GeometryCreateInfo::AddPosition(grfx::Format format)
{
	AddAttribute(grfx::VERTEX_SEMANTIC_POSITION, format);
	return *this;
}

GeometryCreateInfo& GeometryCreateInfo::AddNormal(grfx::Format format)
{
	AddAttribute(grfx::VERTEX_SEMANTIC_NORMAL, format);
	return *this;
}

GeometryCreateInfo& GeometryCreateInfo::AddColor(grfx::Format format)
{
	AddAttribute(grfx::VERTEX_SEMANTIC_COLOR, format);
	return *this;
}

GeometryCreateInfo& GeometryCreateInfo::AddTexCoord(grfx::Format format)
{
	AddAttribute(grfx::VERTEX_SEMANTIC_TEXCOORD, format);
	return *this;
}

GeometryCreateInfo& GeometryCreateInfo::AddTangent(grfx::Format format)
{
	AddAttribute(grfx::VERTEX_SEMANTIC_TANGENT, format);
	return *this;
}

GeometryCreateInfo& GeometryCreateInfo::AddBitangent(grfx::Format format)
{
	AddAttribute(grfx::VERTEX_SEMANTIC_BITANGENT, format);
	return *this;
}

// -------------------------------------------------------------------------------------------------
// Geometry::Buffer
// -------------------------------------------------------------------------------------------------
uint32_t Geometry::Buffer::GetElementCount() const
{
	size_t sizeOfData = mUsedSize;
	// round up for the case of interleaved buffers
	uint32_t count = static_cast<uint32_t>(std::ceil(static_cast<double>(sizeOfData) / static_cast<double>(mElementSize)));
	return count;
}

// -------------------------------------------------------------------------------------------------
// Geometry
// -------------------------------------------------------------------------------------------------
Result Geometry::InternalCtor()
{
	switch (mCreateInfo.vertexAttributeLayout) {
	case GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_INTERLEAVED:
		mVDProcessor = &sVDProcessorInterleaved;
		mVDProcessorCompressed = &sVDProcessorInterleavedCompressed;
		break;
	case GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_PLANAR:
		mVDProcessor = &sVDProcessorPlanar;
		mVDProcessorCompressed = &sVDProcessorPlanarCompressed;
		break;
	case GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_POSITION_PLANAR:
		mVDProcessor = &sVDProcessorPositionPlanar;
		mVDProcessorCompressed = &sVDProcessorPositionPlanarCompressed;
		break;
	default:
		ASSERT_MSG(false, "unsupported vertex attribute layout type");
		return ERROR_FAILED;
	}

	if (!mVDProcessor->Validate(this)) {
		return ERROR_FAILED;
	}

	if (mCreateInfo.indexType != grfx::INDEX_TYPE_UNDEFINED) {
		uint32_t elementSize = grfx::IndexTypeSize(mCreateInfo.indexType);

		if (elementSize == 0) {
			// Shouldn't occur unless there's corruption
			ASSERT_MSG(false, "could not determine index type size");
			return ERROR_FAILED;
		}

		mIndexBuffer = Buffer(BUFFER_TYPE_INDEX, elementSize);
	}

	return mVDProcessor->UpdateVertexBuffer(this);
}

Result Geometry::Create(const GeometryCreateInfo& createInfo, Geometry* pGeometry)
{
	ASSERT_NULL_ARG(pGeometry);

	*pGeometry = Geometry();

	if (createInfo.primitiveTopology != grfx::PRIMITIVE_TOPOLOGY_TRIANGLE_LIST) {
		ASSERT_MSG(false, "only triangle list is supported");
		return ERROR_INVALID_CREATE_ARGUMENT;
	}

	if (createInfo.indexType != grfx::INDEX_TYPE_UNDEFINED) {
		uint32_t elementSize = 0;
		if (createInfo.indexType == grfx::INDEX_TYPE_UINT16) {
			elementSize = sizeof(uint16_t);
		}
		else if (createInfo.indexType == grfx::INDEX_TYPE_UINT32) {
			elementSize = sizeof(uint32_t);
		}
		else {
			ASSERT_MSG(false, "invalid index type");
			return ERROR_INVALID_CREATE_ARGUMENT;
		}
	}

	if (createInfo.vertexBindingCount == 0) {
		ASSERT_MSG(false, "must have at least one vertex binding");
		return ERROR_INVALID_CREATE_ARGUMENT;
	}

	pGeometry->mCreateInfo = createInfo;

	Result ppxres = pGeometry->InternalCtor();
	if (Failed(ppxres)) {
		return ppxres;
	}

	return SUCCESS;
}

Result Geometry::Create(
	const GeometryCreateInfo& createInfo,
	const TriMesh& mesh,
	Geometry* pGeometry)
{
	// Create geometry
	Result ppxres = Geometry::Create(createInfo, pGeometry);
	if (Failed(ppxres)) {
		ASSERT_MSG(false, "failed creating geometry");
		return ppxres;
	}

	//
	// Target geometry WITHOUT index data
	//
	if (createInfo.indexType == grfx::INDEX_TYPE_UNDEFINED) {
		// Mesh has index data
		if (mesh.GetIndexType() != grfx::INDEX_TYPE_UNDEFINED) {
			// Iterate through the meshes triangles and add vertex data for each triangle vertex
			uint32_t triCount = mesh.GetCountTriangles();
			for (uint32_t triIndex = 0; triIndex < triCount; ++triIndex) {
				uint32_t vtxIndex0 = VALUE_IGNORED;
				uint32_t vtxIndex1 = VALUE_IGNORED;
				uint32_t vtxIndex2 = VALUE_IGNORED;
				ppxres = mesh.GetTriangle(triIndex, vtxIndex0, vtxIndex1, vtxIndex2);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting triangle indices at triIndex=" << triIndex);
					return ppxres;
				}

				// First vertex
				TriMeshVertexData vertexData0 = {};
				ppxres = mesh.GetVertexData(vtxIndex0, &vertexData0);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting vertex data at vtxIndex0=" << vtxIndex0);
					return ppxres;
				}
				// Second vertex
				TriMeshVertexData vertexData1 = {};
				ppxres = mesh.GetVertexData(vtxIndex1, &vertexData1);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting vertex data at vtxIndex1=" << vtxIndex1);
					return ppxres;
				}
				// Third vertex
				TriMeshVertexData vertexData2 = {};
				ppxres = mesh.GetVertexData(vtxIndex2, &vertexData2);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting vertex data at vtxIndex2=" << vtxIndex2);
					return ppxres;
				}

				pGeometry->AppendVertexData(vertexData0);
				pGeometry->AppendVertexData(vertexData1);
				pGeometry->AppendVertexData(vertexData2);
			}
		}
		// Mesh does not have index data
		else {
			// Iterate through the meshes vertx data and add it to the geometry
			uint32_t vertexCount = mesh.GetCountPositions();
			for (uint32_t vertexIndex = 0; vertexIndex < vertexCount; ++vertexIndex) {
				TriMeshVertexData vertexData = {};
				ppxres = mesh.GetVertexData(vertexIndex, &vertexData);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting vertex data at vertexIndex=" << vertexIndex);
					return ppxres;
				}
				pGeometry->AppendVertexData(vertexData);
			}
		}
	}
	//
	// Target geometry WITH index data
	//
	else {
		// Mesh has index data
		if (mesh.GetIndexType() != grfx::INDEX_TYPE_UNDEFINED) {
			// Iterate the meshes triangles and add the vertex indices
			uint32_t triCount = mesh.GetCountTriangles();
			for (uint32_t triIndex = 0; triIndex < triCount; ++triIndex) {
				uint32_t v0 = VALUE_IGNORED;
				uint32_t v1 = VALUE_IGNORED;
				uint32_t v2 = VALUE_IGNORED;
				Result   ppxres = mesh.GetTriangle(triIndex, v0, v1, v2);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "couldn't get triangle at triIndex=" << triIndex);
					return ppxres;
				}
				pGeometry->AppendIndicesTriangle(v0, v1, v2);
			}

			// Iterate through the meshes vertx data and add it to the geometry
			uint32_t vertexCount = mesh.GetCountPositions();
			for (uint32_t vertexIndex = 0; vertexIndex < vertexCount; ++vertexIndex) {
				TriMeshVertexData vertexData = {};
				ppxres = mesh.GetVertexData(vertexIndex, &vertexData);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting vertex data at vertexIndex=" << vertexIndex);
					return ppxres;
				}
				pGeometry->AppendVertexData(vertexData);
			}
		}
		// Mesh does not have index data
		else {
			// Use every 3 vertices as a triangle and add each as an indexed triangle
			uint32_t triCount = mesh.GetCountPositions() / 3;
			for (uint32_t triIndex = 0; triIndex < triCount; ++triIndex) {
				uint32_t vtxIndex0 = 3 * triIndex + 0;
				uint32_t vtxIndex1 = 3 * triIndex + 1;
				uint32_t vtxIndex2 = 3 * triIndex + 2;

				// First vertex
				TriMeshVertexData vertexData0 = {};
				ppxres = mesh.GetVertexData(vtxIndex0, &vertexData0);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting vertex data at vtxIndex0=" << vtxIndex0);
					return ppxres;
				}
				// Second vertex
				TriMeshVertexData vertexData1 = {};
				ppxres = mesh.GetVertexData(vtxIndex1, &vertexData1);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting vertex data at vtxIndex1=" << vtxIndex1);
					return ppxres;
				}
				// Third vertex
				TriMeshVertexData vertexData2 = {};
				ppxres = mesh.GetVertexData(vtxIndex2, &vertexData2);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting vertex data at vtxIndex2=" << vtxIndex2);
					return ppxres;
				}

				// Will append indices if geometry has index buffer
				pGeometry->AppendTriangle(vertexData0, vertexData1, vertexData2);
			}
		}
	}

	return SUCCESS;
}

Result Geometry::Create(
	const GeometryCreateInfo& createInfo,
	const WireMesh& mesh,
	Geometry* pGeometry)
{
	// Create geometry
	Result ppxres = Geometry::Create(createInfo, pGeometry);
	if (Failed(ppxres)) {
		ASSERT_MSG(false, "failed creating geometry");
		return ppxres;
	}

	//
	// Target geometry WITHOUT index data
	//
	if (createInfo.indexType == grfx::INDEX_TYPE_UNDEFINED) {
		// Mesh has index data
		if (mesh.GetIndexType() != grfx::INDEX_TYPE_UNDEFINED) {
			// Iterate through the meshes edges and add vertex data for each edge vertex
			uint32_t edgeCount = mesh.GetCountEdges();
			for (uint32_t edgeIndex = 0; edgeIndex < edgeCount; ++edgeIndex) {
				uint32_t vtxIndex0 = VALUE_IGNORED;
				uint32_t vtxIndex1 = VALUE_IGNORED;
				ppxres = mesh.GetEdge(edgeIndex, vtxIndex0, vtxIndex1);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting triangle indices at edgeIndex=" << edgeIndex);
					return ppxres;
				}

				// First vertex
				WireMeshVertexData vertexData0 = {};
				ppxres = mesh.GetVertexData(vtxIndex0, &vertexData0);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting vertex data at vtxIndex0=" << vtxIndex0);
					return ppxres;
				}
				// Second vertex
				WireMeshVertexData vertexData1 = {};
				ppxres = mesh.GetVertexData(vtxIndex1, &vertexData1);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting vertex data at vtxIndex1=" << vtxIndex1);
					return ppxres;
				}

				pGeometry->AppendVertexData(vertexData0);
				pGeometry->AppendVertexData(vertexData1);
			}
		}
		// Mesh does not have index data
		else {
			// Iterate through the meshes vertx data and add it to the geometry
			uint32_t vertexCount = mesh.GetCountPositions();
			for (uint32_t vertexIndex = 0; vertexIndex < vertexCount; ++vertexIndex) {
				WireMeshVertexData vertexData = {};
				ppxres = mesh.GetVertexData(vertexIndex, &vertexData);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting vertex data at vertexIndex=" << vertexIndex);
					return ppxres;
				}
				pGeometry->AppendVertexData(vertexData);
			}
		}
	}
	//
	// Target geometry WITH index data
	//
	else {
		// Mesh has index data
		if (mesh.GetIndexType() != grfx::INDEX_TYPE_UNDEFINED) {
			// Iterate the meshes edges and add the vertex indices
			uint32_t edgeCount = mesh.GetCountEdges();
			for (uint32_t edgeIndex = 0; edgeIndex < edgeCount; ++edgeIndex) {
				uint32_t v0 = VALUE_IGNORED;
				uint32_t v1 = VALUE_IGNORED;
				Result   ppxres = mesh.GetEdge(edgeIndex, v0, v1);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "couldn't get triangle at edgeIndex=" << edgeIndex);
					return ppxres;
				}
				pGeometry->AppendIndicesEdge(v0, v1);
			}

			// Iterate through the meshes vertex data and add it to the geometry
			uint32_t vertexCount = mesh.GetCountPositions();
			for (uint32_t vertexIndex = 0; vertexIndex < vertexCount; ++vertexIndex) {
				WireMeshVertexData vertexData = {};
				ppxres = mesh.GetVertexData(vertexIndex, &vertexData);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting vertex data at vertexIndex=" << vertexIndex);
					return ppxres;
				}
				pGeometry->AppendVertexData(vertexData);
			}
		}
		// Mesh does not have index data
		else {
			// Use every 2 vertices as an edge and add each as an indexed edge
			uint32_t edgeCount = mesh.GetCountPositions() / 2;
			for (uint32_t edgeIndex = 0; edgeIndex < edgeCount; ++edgeIndex) {
				uint32_t vtxIndex0 = 2 * edgeIndex + 0;
				uint32_t vtxIndex1 = 2 * edgeIndex + 1;

				// First vertex
				WireMeshVertexData vertexData0 = {};
				ppxres = mesh.GetVertexData(vtxIndex0, &vertexData0);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting vertex data at vtxIndex0=" << vtxIndex0);
					return ppxres;
				}
				// Second vertex
				WireMeshVertexData vertexData1 = {};
				ppxres = mesh.GetVertexData(vtxIndex1, &vertexData1);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "failed getting vertex data at vtxIndex1=" << vtxIndex1);
					return ppxres;
				}

				// Will append indices if geometry has index buffer
				pGeometry->AppendEdge(vertexData0, vertexData1);
			}
		}
	}

	return SUCCESS;
}

Result Geometry::Create(const TriMesh& mesh, Geometry* pGeometry)
{
	GeometryCreateInfo createInfo = {};
	createInfo.vertexAttributeLayout = GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_PLANAR;
	createInfo.indexType = mesh.GetIndexType();
	createInfo.primitiveTopology = grfx::PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;

	createInfo.AddPosition();

	if (mesh.HasColors()) {
		createInfo.AddColor();
	}
	if (mesh.HasNormals()) {
		createInfo.AddNormal();
	}
	if (mesh.HasTexCoords()) {
		createInfo.AddTexCoord();
	}
	if (mesh.HasTangents()) {
		createInfo.AddTangent();
	}
	if (mesh.HasBitangents()) {
		createInfo.AddBitangent();
	}

	Result ppxres = Create(createInfo, mesh, pGeometry);
	if (Failed(ppxres)) {
		return ppxres;
	}

	return SUCCESS;
}

Result Geometry::Create(const WireMesh& mesh, Geometry* pGeometry)
{
	GeometryCreateInfo createInfo = {};
	createInfo.vertexAttributeLayout = GEOMETRY_VERTEX_ATTRIBUTE_LAYOUT_PLANAR;
	createInfo.indexType = mesh.GetIndexType();
	createInfo.primitiveTopology = grfx::PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;

	createInfo.AddPosition();

	if (mesh.HasColors()) {
		createInfo.AddColor();
	}

	Result ppxres = Create(createInfo, mesh, pGeometry);
	if (Failed(ppxres)) {
		return ppxres;
	}

	return SUCCESS;
}

const grfx::VertexBinding* Geometry::GetVertexBinding(uint32_t index) const
{
	const grfx::VertexBinding* pBinding = nullptr;
	if (index < mCreateInfo.vertexBindingCount) {
		pBinding = &mCreateInfo.vertexBindings[index];
	}
	return pBinding;
}

void Geometry::SetIndexBuffer(const Geometry::Buffer& newIndexBuffer)
{
	ASSERT_MSG(newIndexBuffer.GetType() == mIndexBuffer.GetType(), "New index buffer is not the same type");
	ASSERT_MSG(newIndexBuffer.GetElementSize() == mIndexBuffer.GetElementSize(), "New index buffer does not have the same element size");
	mIndexBuffer = newIndexBuffer;
}

uint32_t Geometry::GetIndexCount() const
{
	uint32_t count = 0;
	if (mCreateInfo.indexType != grfx::INDEX_TYPE_UNDEFINED) {
		count = mIndexBuffer.GetElementCount();
	}
	return count;
}

uint32_t Geometry::GetVertexCount() const
{
	ASSERT_MSG(mVDProcessor != nullptr, "Geometry is not initialized");
	return mVDProcessor->GetVertexCount(this);
}

const Geometry::Buffer* Geometry::GetVertexBuffer(uint32_t index) const
{
	ASSERT_MSG(IsIndexInRange(index, mVertexBuffers), "Vertex buffer does not exist at index: " << index);
	return &mVertexBuffers[index];
}

Geometry::Buffer* Geometry::GetVertexBuffer(uint32_t index)
{
	ASSERT_MSG(IsIndexInRange(index, mVertexBuffers), "Vertex buffer does not exist at index: " << index);
	return &mVertexBuffers[index];
}

uint32_t Geometry::GetLargestBufferSize() const
{
	uint32_t size = mIndexBuffer.GetSize();
	for (size_t i = 0; i < mVertexBuffers.size(); ++i) {
		size = std::max(size, mVertexBuffers[i].GetSize());
	}
	return size;
}

void Geometry::AppendIndex(uint32_t idx)
{
	if (mCreateInfo.indexType == grfx::INDEX_TYPE_UINT16) {
		mIndexBuffer.Append(static_cast<uint16_t>(idx));
	}
	else if (mCreateInfo.indexType == grfx::INDEX_TYPE_UINT32) {
		mIndexBuffer.Append(idx);
	}
}

void Geometry::AppendIndicesTriangle(uint32_t idx0, uint32_t idx1, uint32_t idx2)
{
	if (mCreateInfo.indexType == grfx::INDEX_TYPE_UINT16) {
		mIndexBuffer.Append(static_cast<uint16_t>(idx0));
		mIndexBuffer.Append(static_cast<uint16_t>(idx1));
		mIndexBuffer.Append(static_cast<uint16_t>(idx2));
	}
	else if (mCreateInfo.indexType == grfx::INDEX_TYPE_UINT32) {
		mIndexBuffer.Append(idx0);
		mIndexBuffer.Append(idx1);
		mIndexBuffer.Append(idx2);
	}
}

void Geometry::AppendIndicesEdge(uint32_t idx0, uint32_t idx1)
{
	if (mCreateInfo.indexType == grfx::INDEX_TYPE_UINT16) {
		mIndexBuffer.Append(static_cast<uint16_t>(idx0));
		mIndexBuffer.Append(static_cast<uint16_t>(idx1));
	}
	else if (mCreateInfo.indexType == grfx::INDEX_TYPE_UINT32) {
		mIndexBuffer.Append(idx0);
		mIndexBuffer.Append(idx1);
	}
}

void Geometry::AppendIndicesU32(uint32_t count, const uint32_t* pIndices)
{
	if (mCreateInfo.indexType != grfx::INDEX_TYPE_UINT32) {
		ASSERT_MSG(false, "Can't append UINT32 indices to buffer of type: " << ToString(mCreateInfo.indexType));
		return;
	}
	mIndexBuffer.Append(count, pIndices);
}

uint32_t Geometry::AppendVertexData(const TriMeshVertexData& vtx)
{
	return mVDProcessor->AppendVertexData(this, vtx);
}

uint32_t Geometry::AppendVertexData(const TriMeshVertexDataCompressed& vtx)
{
	return mVDProcessorCompressed->AppendVertexData(this, vtx);
}

uint32_t Geometry::AppendVertexData(const WireMeshVertexData& vtx)
{
	return mVDProcessor->AppendVertexData(this, vtx);
}

void Geometry::AppendTriangle(const TriMeshVertexData& vtx0, const TriMeshVertexData& vtx1, const TriMeshVertexData& vtx2)
{
	uint32_t n0 = AppendVertexData(vtx0) - 1;
	uint32_t n1 = AppendVertexData(vtx1) - 1;
	uint32_t n2 = AppendVertexData(vtx2) - 1;

	// Will only append indices if geometry has an index buffer
	AppendIndicesTriangle(n0, n1, n2);
}

void Geometry::AppendEdge(const WireMeshVertexData& vtx0, const WireMeshVertexData& vtx1)
{
	uint32_t n0 = AppendVertexData(vtx0) - 1;
	uint32_t n1 = AppendVertexData(vtx1) - 1;

	// Will only append indices if geometry has an index buffer
	AppendIndicesEdge(n0, n1);
}

#pragma endregion

#pragma region Sync

#define REQUIRES_TIMELINE_MSG "invalid semaphore type: operation requires timeline semaphore"

namespace grfx {

	// -------------------------------------------------------------------------------------------------
	// Fence
	// -------------------------------------------------------------------------------------------------
	Result Fence::WaitAndReset(uint64_t timeout)
	{
		Result ppxres = Wait(timeout);
		if (Failed(ppxres)) {
			return ppxres;
		}

		ppxres = Reset();
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	// -------------------------------------------------------------------------------------------------
	// Semaphore
	// -------------------------------------------------------------------------------------------------
	Result Semaphore::Wait(uint64_t value, uint64_t timeout) const
	{
		if (this->GetSemaphoreType() != grfx::SEMAPHORE_TYPE_TIMELINE) {
			ASSERT_MSG(false, REQUIRES_TIMELINE_MSG);
			return ERROR_GRFX_INVALID_SEMAPHORE_TYPE;
		}

		auto ppxres = this->TimelineWait(value, timeout);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	Result Semaphore::Signal(uint64_t value) const
	{
		if (this->GetSemaphoreType() != grfx::SEMAPHORE_TYPE_TIMELINE) {
			ASSERT_MSG(false, REQUIRES_TIMELINE_MSG);
			return ERROR_GRFX_INVALID_SEMAPHORE_TYPE;
		}

		auto ppxres = this->TimelineSignal(value);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	uint64_t Semaphore::GetCounterValue() const
	{
		if (this->GetSemaphoreType() != grfx::SEMAPHORE_TYPE_TIMELINE) {
			ASSERT_MSG(false, REQUIRES_TIMELINE_MSG);
			return UINT64_MAX;
		}

		uint64_t value = this->TimelineCounterValue();
		return value;
	}

} // namespace grfx

#pragma endregion

#pragma region Query

namespace grfx
{

	Result Query::Create(const grfx::QueryCreateInfo* pCreateInfo)
	{
		if (pCreateInfo->type == grfx::QUERY_TYPE_UNDEFINED)
		{
			return ERROR_GRFX_INVALID_QUERY_TYPE;
		}

		if (pCreateInfo->count == 0)
		{
			return ERROR_GRFX_INVALID_QUERY_COUNT;
		}

		Result ppxres = grfx::DeviceObject<grfx::QueryCreateInfo>::Create(pCreateInfo);
		if (Failed(ppxres))
		{
			return ppxres;
		}

		return SUCCESS;
	}

} // namespace grfx

#pragma endregion

#pragma region Buffer

namespace grfx {

	Result Buffer::Create(const grfx::BufferCreateInfo* pCreateInfo)
	{
#ifndef DISABLE_MINIMUM_BUFFER_SIZE_CHECK
		// Constant/uniform buffers need to be at least CONSTANT_BUFFER_ALIGNMENT in size
		if (pCreateInfo->usageFlags.bits.uniformBuffer && (pCreateInfo->size < CONSTANT_BUFFER_ALIGNMENT))
		{
			ASSERT_MSG(false, "constant/uniform buffer sizes must be at least CONSTANT_BUFFER_ALIGNMENT (" << CONSTANT_BUFFER_ALIGNMENT << ")");
			return ERROR_GRFX_MINIMUM_BUFFER_SIZE_NOT_MET;
		}

		// Storage/structured buffers need to be at least STORAGE_BUFFER_ALIGNMENT in size
		if (pCreateInfo->usageFlags.bits.uniformBuffer && (pCreateInfo->size < STUCTURED_BUFFER_ALIGNMENT)) {
			ASSERT_MSG(false, "storage/structured buffer sizes must be at least STUCTURED_BUFFER_ALIGNMENT (" << STUCTURED_BUFFER_ALIGNMENT << ")");
			return ERROR_GRFX_MINIMUM_BUFFER_SIZE_NOT_MET;
		}
#endif
		Result res = grfx::DeviceObject<grfx::BufferCreateInfo>::Create(pCreateInfo);
		if (Failed(res)) {
			return res;
		}

		return SUCCESS;
	}

	Result Buffer::CopyFromSource(uint32_t dataSize, const void* pSrcData)
	{
		if (dataSize > GetSize()) {
			return ERROR_LIMIT_EXCEEDED;
		}

		// Map
		void* pBufferAddress = nullptr;
		Result ppxres = MapMemory(0, &pBufferAddress);
		if (Failed(ppxres)) {
			return ppxres;
		}

		// Copy
		std::memcpy(pBufferAddress, pSrcData, dataSize);

		// Unmap
		UnmapMemory();

		return SUCCESS;
	}

	Result Buffer::CopyToDest(uint32_t dataSize, void* pDestData)
	{
		if (dataSize > GetSize()) {
			return ERROR_LIMIT_EXCEEDED;
		}

		// Map
		void* pBufferAddress = nullptr;
		Result ppxres = MapMemory(0, &pBufferAddress);
		if (Failed(ppxres)) {
			return ppxres;
		}

		// Copy
		std::memcpy(pDestData, pBufferAddress, dataSize);

		// Unmap
		UnmapMemory();

		return SUCCESS;
	}

} // namespace grfx

#pragma endregion

#pragma region Image

namespace grfx {

	ImageCreateInfo ImageCreateInfo::SampledImage2D(
		uint32_t          width,
		uint32_t          height,
		grfx::Format      format,
		grfx::SampleCount sampleCount,
		grfx::MemoryUsage memoryUsage)
	{
		ImageCreateInfo ci = {};
		ci.type = grfx::IMAGE_TYPE_2D;
		ci.width = width;
		ci.height = height;
		ci.depth = 1;
		ci.format = format;
		ci.sampleCount = sampleCount;
		ci.mipLevelCount = 1;
		ci.arrayLayerCount = 1;
		ci.usageFlags.bits.sampled = true;
		ci.memoryUsage = memoryUsage;
		ci.initialState = grfx::RESOURCE_STATE_SHADER_RESOURCE;
		ci.pApiObject = nullptr;
		return ci;
	}

	ImageCreateInfo ImageCreateInfo::DepthStencilTarget(
		uint32_t          width,
		uint32_t          height,
		grfx::Format      format,
		grfx::SampleCount sampleCount)
	{
		ImageCreateInfo ci = {};
		ci.type = grfx::IMAGE_TYPE_2D;
		ci.width = width;
		ci.height = height;
		ci.depth = 1;
		ci.format = format;
		ci.sampleCount = sampleCount;
		ci.mipLevelCount = 1;
		ci.arrayLayerCount = 1;
		ci.usageFlags.bits.sampled = true;
		ci.usageFlags.bits.depthStencilAttachment = true;
		ci.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;
		ci.initialState = grfx::RESOURCE_STATE_DEPTH_STENCIL_WRITE;
		ci.pApiObject = nullptr;
		return ci;
	}

	ImageCreateInfo ImageCreateInfo::RenderTarget2D(
		uint32_t          width,
		uint32_t          height,
		grfx::Format      format,
		grfx::SampleCount sampleCount)
	{
		ImageCreateInfo ci = {};
		ci.type = grfx::IMAGE_TYPE_2D;
		ci.width = width;
		ci.height = height;
		ci.depth = 1;
		ci.format = format;
		ci.sampleCount = sampleCount;
		ci.mipLevelCount = 1;
		ci.arrayLayerCount = 1;
		ci.usageFlags.bits.sampled = true;
		ci.usageFlags.bits.colorAttachment = true;
		ci.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;
		ci.pApiObject = nullptr;
		return ci;
	}

	// -------------------------------------------------------------------------------------------------
	// Image
	// -------------------------------------------------------------------------------------------------
	Result Image::Create(const grfx::ImageCreateInfo* pCreateInfo)
	{
		if ((pCreateInfo->type == grfx::IMAGE_TYPE_CUBE) && (pCreateInfo->arrayLayerCount != 6)) {
			ASSERT_MSG(false, "arrayLayerCount must be 6 if type is IMAGE_TYPE_CUBE");
			return ERROR_INVALID_CREATE_ARGUMENT;
		}

		Result ppxres = grfx::DeviceObject<grfx::ImageCreateInfo>::Create(pCreateInfo);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	grfx::ImageViewType Image::GuessImageViewType(bool isCube) const
	{
		const uint32_t arrayLayerCount = GetArrayLayerCount();

		if (isCube) {
			return (arrayLayerCount > 0) ? grfx::IMAGE_VIEW_TYPE_CUBE_ARRAY : grfx::IMAGE_VIEW_TYPE_CUBE;
		}
		else {
			// clang-format off
			switch (mCreateInfo.type) {
			default: break;
			case grfx::IMAGE_TYPE_1D: return (arrayLayerCount > 1) ? grfx::IMAGE_VIEW_TYPE_1D_ARRAY : grfx::IMAGE_VIEW_TYPE_1D; break;
			case grfx::IMAGE_TYPE_2D: return (arrayLayerCount > 1) ? grfx::IMAGE_VIEW_TYPE_2D_ARRAY : grfx::IMAGE_VIEW_TYPE_2D; break;
			case grfx::IMAGE_TYPE_CUBE: return (arrayLayerCount > 6) ? grfx::IMAGE_VIEW_TYPE_CUBE_ARRAY : grfx::IMAGE_VIEW_TYPE_CUBE; break;
			}
			// clang-format on
		}

		return grfx::IMAGE_VIEW_TYPE_UNDEFINED;
	}

	// -------------------------------------------------------------------------------------------------
	// DepthStencilView
	// -------------------------------------------------------------------------------------------------
	grfx::DepthStencilViewCreateInfo DepthStencilViewCreateInfo::GuessFromImage(grfx::Image* pImage)
	{
		grfx::DepthStencilViewCreateInfo ci = {};
		ci.pImage = pImage;
		ci.imageViewType = pImage->GuessImageViewType();
		ci.format = pImage->GetFormat();
		ci.mipLevel = 0;
		ci.mipLevelCount = 1;
		ci.arrayLayer = 0;
		ci.arrayLayerCount = 1;
		ci.components = {};
		ci.depthLoadOp = ATTACHMENT_LOAD_OP_LOAD;
		ci.depthStoreOp = ATTACHMENT_STORE_OP_STORE;
		ci.stencilLoadOp = ATTACHMENT_LOAD_OP_LOAD;
		ci.stencilStoreOp = ATTACHMENT_STORE_OP_STORE;
		ci.ownership = grfx::OWNERSHIP_REFERENCE;
		return ci;
	}

	// -------------------------------------------------------------------------------------------------
	// SampledImageView
	// -------------------------------------------------------------------------------------------------
	grfx::RenderTargetViewCreateInfo RenderTargetViewCreateInfo::GuessFromImage(grfx::Image* pImage)
	{
		grfx::RenderTargetViewCreateInfo ci = {};
		ci.pImage = pImage;
		ci.imageViewType = pImage->GuessImageViewType();
		ci.format = pImage->GetFormat();
		ci.mipLevel = 0;
		ci.mipLevelCount = 1;
		ci.arrayLayer = 0;
		ci.arrayLayerCount = 1;
		ci.components = {};
		ci.loadOp = ATTACHMENT_LOAD_OP_LOAD;
		ci.storeOp = ATTACHMENT_STORE_OP_STORE;
		ci.ownership = grfx::OWNERSHIP_REFERENCE;
		return ci;
	}

	// -------------------------------------------------------------------------------------------------
	// SampledImageView
	// -------------------------------------------------------------------------------------------------
	grfx::SampledImageViewCreateInfo SampledImageViewCreateInfo::GuessFromImage(grfx::Image* pImage)
	{
		grfx::SampledImageViewCreateInfo ci = {};
		ci.pImage = pImage;
		ci.imageViewType = pImage->GuessImageViewType();
		ci.format = pImage->GetFormat();
		ci.mipLevel = 0;
		ci.mipLevelCount = pImage->GetMipLevelCount();
		ci.arrayLayer = 0;
		ci.arrayLayerCount = pImage->GetArrayLayerCount();
		ci.components = {};
		ci.ownership = grfx::OWNERSHIP_REFERENCE;
		return ci;
	}

	// -------------------------------------------------------------------------------------------------
	// StorageImageView
	// -------------------------------------------------------------------------------------------------
	grfx::StorageImageViewCreateInfo StorageImageViewCreateInfo::GuessFromImage(grfx::Image* pImage)
	{
		grfx::StorageImageViewCreateInfo ci = {};
		ci.pImage = pImage;
		ci.imageViewType = pImage->GuessImageViewType();
		ci.format = pImage->GetFormat();
		ci.mipLevel = 0;
		ci.mipLevelCount = pImage->GetMipLevelCount();
		ci.arrayLayer = 0;
		ci.arrayLayerCount = pImage->GetArrayLayerCount();
		ci.components = {};
		ci.ownership = grfx::OWNERSHIP_REFERENCE;
		return ci;
	}

} // namespace grfx

#pragma endregion

#pragma region Texture

namespace grfx {

	Result Texture::Create(const grfx::TextureCreateInfo* pCreateInfo)
	{
		// Copy in case view types and formats are specified:
		//   - if an image is supplied, then the next section
		//     will overwrite all the image related fields with
		//     values from the supplied image.
		//   - if an image is NOT supplied, then nothing gets
		//     overwritten.
		//
		mCreateInfo = *pCreateInfo;

		if (!IsNull(pCreateInfo->pImage)) {
			mImage = pCreateInfo->pImage;
			mCreateInfo.imageType = mImage->GetType();
			mCreateInfo.width = mImage->GetWidth();
			mCreateInfo.height = mImage->GetHeight();
			mCreateInfo.depth = mImage->GetDepth();
			mCreateInfo.imageFormat = mImage->GetFormat();
			mCreateInfo.sampleCount = mImage->GetSampleCount();
			mCreateInfo.mipLevelCount = mImage->GetMipLevelCount();
			mCreateInfo.arrayLayerCount = mImage->GetArrayLayerCount();
			mCreateInfo.usageFlags = mImage->GetUsageFlags();
			mCreateInfo.memoryUsage = mImage->GetMemoryUsage();
			mCreateInfo.initialState = mImage->GetInitialState();
			mCreateInfo.RTVClearValue = mImage->GetRTVClearValue();
			mCreateInfo.DSVClearValue = mImage->GetDSVClearValue();
			mCreateInfo.concurrentMultiQueueUsage = mImage->GetConcurrentMultiQueueUsageEnabled();
		}

		// Yes, mCreateInfo will self overwrite in the following function call.
		//
		Result ppxres = grfx::DeviceObject<grfx::TextureCreateInfo>::Create(pCreateInfo);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	Result Texture::CreateApiObjects(const grfx::TextureCreateInfo* pCreateInfo)
	{
		// Image
		if (IsNull(pCreateInfo->pImage)) {
			if (pCreateInfo->usageFlags.bits.colorAttachment && pCreateInfo->usageFlags.bits.depthStencilAttachment) {
				ASSERT_MSG(false, "texture cannot be both color attachment and depth stencil attachment");
				return ERROR_INVALID_CREATE_ARGUMENT;
			}

			grfx::ImageCreateInfo ci = {};
			ci.type = pCreateInfo->imageType;
			ci.width = pCreateInfo->width;
			ci.height = pCreateInfo->height;
			ci.depth = pCreateInfo->depth;
			ci.format = pCreateInfo->imageFormat;
			ci.sampleCount = pCreateInfo->sampleCount;
			ci.mipLevelCount = pCreateInfo->mipLevelCount;
			ci.arrayLayerCount = pCreateInfo->arrayLayerCount;
			ci.usageFlags = pCreateInfo->usageFlags;
			ci.memoryUsage = pCreateInfo->memoryUsage;
			ci.initialState = pCreateInfo->initialState;
			ci.RTVClearValue = pCreateInfo->RTVClearValue;
			ci.DSVClearValue = pCreateInfo->DSVClearValue;
			ci.pApiObject = nullptr;
			ci.ownership = pCreateInfo->ownership;
			ci.concurrentMultiQueueUsage = pCreateInfo->concurrentMultiQueueUsage;
			ci.createFlags = pCreateInfo->imageCreateFlags;

			Result ppxres = GetDevice()->CreateImage(&ci, &mImage);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "texture create image failed");
				return ppxres;
			}
		}

		if (pCreateInfo->usageFlags.bits.sampled) {
			grfx::SampledImageViewCreateInfo ci = grfx::SampledImageViewCreateInfo::GuessFromImage(mImage);
			if (pCreateInfo->sampledImageViewType != grfx::IMAGE_VIEW_TYPE_UNDEFINED) {
				ci.imageViewType = pCreateInfo->sampledImageViewType;
			}
			ci.pYcbcrConversion = pCreateInfo->pSampledImageYcbcrConversion;

			Result ppxres = GetDevice()->CreateSampledImageView(&ci, &mSampledImageView);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "texture create sampled image view failed");
				return ppxres;
			}
		}

		if (pCreateInfo->usageFlags.bits.colorAttachment) {
			grfx::RenderTargetViewCreateInfo ci = grfx::RenderTargetViewCreateInfo::GuessFromImage(mImage);
			if (pCreateInfo->renderTargetViewFormat != grfx::FORMAT_UNDEFINED) {
				ci.format = pCreateInfo->renderTargetViewFormat;
			}

			Result ppxres = GetDevice()->CreateRenderTargetView(&ci, &mRenderTargetView);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "texture create render target view failed");
				return ppxres;
			}
		}

		if (pCreateInfo->usageFlags.bits.depthStencilAttachment) {
			grfx::DepthStencilViewCreateInfo ci = grfx::DepthStencilViewCreateInfo::GuessFromImage(mImage);
			if (pCreateInfo->depthStencilViewFormat != grfx::FORMAT_UNDEFINED) {
				ci.format = pCreateInfo->depthStencilViewFormat;
			}

			Result ppxres = GetDevice()->CreateDepthStencilView(&ci, &mDepthStencilView);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "texture create depth stencil view failed");
				return ppxres;
			}
		}

		if (pCreateInfo->usageFlags.bits.storage) {
			grfx::StorageImageViewCreateInfo ci = grfx::StorageImageViewCreateInfo::GuessFromImage(mImage);
			if (pCreateInfo->storageImageViewFormat != grfx::FORMAT_UNDEFINED) {
				ci.format = pCreateInfo->storageImageViewFormat;
			}

			Result ppxres = GetDevice()->CreateStorageImageView(&ci, &mStorageImageView);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "texture create storage image view failed");
				return ppxres;
			}
		}

		return SUCCESS;
	}

	void Texture::DestroyApiObjects()
	{
		if (mSampledImageView && (mSampledImageView->GetOwnership() != grfx::OWNERSHIP_REFERENCE)) {
			GetDevice()->DestroySampledImageView(mSampledImageView);
			mSampledImageView.Reset();
		}

		if (mRenderTargetView && (mRenderTargetView->GetOwnership() != grfx::OWNERSHIP_REFERENCE)) {
			GetDevice()->DestroyRenderTargetView(mRenderTargetView);
			mRenderTargetView.Reset();
		}

		if (mDepthStencilView && (mDepthStencilView->GetOwnership() != grfx::OWNERSHIP_REFERENCE)) {
			GetDevice()->DestroyDepthStencilView(mDepthStencilView);
			mDepthStencilView.Reset();
		}

		if (mStorageImageView && (mStorageImageView->GetOwnership() != grfx::OWNERSHIP_REFERENCE)) {
			GetDevice()->DestroyStorageImageView(mStorageImageView);
			mStorageImageView.Reset();
		}

		if (mImage && (mImage->GetOwnership() != grfx::OWNERSHIP_REFERENCE)) {
			GetDevice()->DestroyImage(mImage);
			mImage.Reset();
		}
	}

	grfx::ImageType Texture::GetImageType() const
	{
		return mImage->GetType();
	}

	uint32_t Texture::GetWidth() const
	{
		return mImage->GetWidth();
	}

	uint32_t Texture::GetHeight() const
	{
		return mImage->GetHeight();
	}

	uint32_t Texture::GetDepth() const
	{
		return mImage->GetDepth();
	}

	grfx::Format Texture::GetImageFormat() const
	{
		return mImage->GetFormat();
	}

	grfx::SampleCount Texture::GetSampleCount() const
	{
		return mImage->GetSampleCount();
	}

	uint32_t Texture::GetMipLevelCount() const
	{
		return mImage->GetMipLevelCount();
	}

	uint32_t Texture::GetArrayLayerCount() const
	{
		return mImage->GetArrayLayerCount();
	}

	const grfx::ImageUsageFlags& Texture::GetUsageFlags() const
	{
		return mImage->GetUsageFlags();
	}

	grfx::MemoryUsage Texture::GetMemoryUsage() const
	{
		return mImage->GetMemoryUsage();
	}

	grfx::Format Texture::GetSampledImageViewFormat() const
	{
		return mSampledImageView ? mSampledImageView->GetFormat() : grfx::FORMAT_UNDEFINED;
	}

	grfx::Format Texture::GetRenderTargetViewFormat() const
	{
		return mRenderTargetView ? mRenderTargetView->GetFormat() : grfx::FORMAT_UNDEFINED;
	}

	grfx::Format Texture::GetDepthStencilViewFormat() const
	{
		return mDepthStencilView ? mDepthStencilView->GetFormat() : grfx::FORMAT_UNDEFINED;
	}

	grfx::Format Texture::GetStorageImageViewFormat() const
	{
		return mStorageImageView ? mStorageImageView->GetFormat() : grfx::FORMAT_UNDEFINED;
	}

} // namespace grfx

#pragma endregion

#pragma region Descriptor

namespace grfx {

	// -------------------------------------------------------------------------------------------------
	// DescriptorSet
	// -------------------------------------------------------------------------------------------------
	Result DescriptorSet::UpdateSampler(
		uint32_t             binding,
		uint32_t             arrayIndex,
		const grfx::Sampler* pSampler)
	{
		grfx::WriteDescriptor write = {};
		write.binding = binding;
		write.arrayIndex = arrayIndex;
		write.type = grfx::DESCRIPTOR_TYPE_SAMPLER;
		write.pSampler = pSampler;

		Result ppxres = UpdateDescriptors(1, &write);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	Result DescriptorSet::UpdateSampledImage(
		uint32_t                      binding,
		uint32_t                      arrayIndex,
		const grfx::SampledImageView* pImageView)
	{
		grfx::WriteDescriptor write = {};
		write.binding = binding;
		write.arrayIndex = arrayIndex;
		write.type = grfx::DESCRIPTOR_TYPE_SAMPLED_IMAGE;
		write.pImageView = pImageView;

		return UpdateDescriptors(1, &write);
	}

	Result DescriptorSet::UpdateSampledImage(
		uint32_t             binding,
		uint32_t             arrayIndex,
		const grfx::Texture* pTexture)
	{
		grfx::WriteDescriptor write = {};
		write.binding = binding;
		write.arrayIndex = arrayIndex;
		write.type = grfx::DESCRIPTOR_TYPE_SAMPLED_IMAGE;
		write.pImageView = pTexture->GetSampledImageView();

		return UpdateDescriptors(1, &write);
	}

	Result DescriptorSet::UpdateStorageImage(
		uint32_t             binding,
		uint32_t             arrayIndex,
		const grfx::Texture* pTexture)
	{
		grfx::WriteDescriptor write = {};
		write.binding = binding;
		write.arrayIndex = arrayIndex;
		write.type = grfx::DESCRIPTOR_TYPE_STORAGE_IMAGE;
		write.pImageView = pTexture->GetStorageImageView();

		Result ppxres = UpdateDescriptors(1, &write);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	Result DescriptorSet::UpdateUniformBuffer(
		uint32_t            binding,
		uint32_t            arrayIndex,
		const grfx::Buffer* pBuffer,
		uint64_t            offset,
		uint64_t            range)
	{
		grfx::WriteDescriptor write = {};
		write.binding = binding;
		write.arrayIndex = arrayIndex;
		write.type = grfx::DESCRIPTOR_TYPE_UNIFORM_BUFFER;
		write.bufferOffset = offset;
		write.bufferRange = range;
		write.pBuffer = pBuffer;

		Result ppxres = UpdateDescriptors(1, &write);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	// -------------------------------------------------------------------------------------------------
	// DescriptorSetLayout
	// -------------------------------------------------------------------------------------------------
	Result DescriptorSetLayout::Create(const grfx::DescriptorSetLayoutCreateInfo* pCreateInfo)
	{
		// Bail if there's any binding overlaps - overlaps are not permitted to
		// make D3D12 and Vulkan agreeable. Even though we use descriptor arrays
		// in Vulkan, we do not allow the subsequent bindings to be occupied,
		// to keep descriptor binding register occupancy consistent between
		// Vulkan and D3D12.
		//
		std::vector<RangeU32> ranges;
		const size_t               bindingCount = pCreateInfo->bindings.size();
		for (size_t i = 0; i < bindingCount; ++i) {
			const grfx::DescriptorBinding& binding = pCreateInfo->bindings[i];

			// Calculate range
			RangeU32 range = {};
			range.start = binding.binding;
			range.end = binding.binding + binding.arrayCount;

			size_t rangeCount = ranges.size();
			for (size_t j = 0; j < rangeCount; ++j) {
				bool overlaps = HasOverlapHalfOpen(range, ranges[j]);
				if (overlaps) {
					std::stringstream ss;
					ss << "[DESCRIPTOR BINDING RANGE ALIASES]: "
						<< "binding at entry " << i << " aliases with binding at entry " << j;
					ASSERT_MSG(false, ss.str());
					return ERROR_RANGE_ALIASING_NOT_ALLOWED;
				}
			}

			ranges.push_back(range);
		}

		Result ppxres = grfx::DeviceObject<grfx::DescriptorSetLayoutCreateInfo>::Create(pCreateInfo);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

} // namespace grfx

#pragma endregion

#pragma region ShadingRate

namespace grfx {

	std::unique_ptr<Bitmap> ShadingRatePattern::CreateBitmap() const
	{
		auto bitmap = std::make_unique<Bitmap>();
		CHECKED_CALL(Bitmap::Create(
			GetAttachmentWidth(), GetAttachmentHeight(), GetBitmapFormat(), bitmap.get()));
		return bitmap;
	}

	Result ShadingRatePattern::LoadFromBitmap(Bitmap* bitmap)
	{
		return grfx_util::CopyBitmapToImage(
			GetDevice()->GetGraphicsQueue(), bitmap, mAttachmentImage, 0, 0, mAttachmentImage->GetInitialState(), mAttachmentImage->GetInitialState());
	}

} // namespace grfx

#pragma endregion

#pragma region Shading Rate Utils

namespace grfx {

	void FillShadingRateUniformFragmentSize(ShadingRatePatternPtr pattern, uint32_t fragmentWidth, uint32_t fragmentHeight, Bitmap* bitmap)
	{
		FillShadingRateUniformFragmentDensity(pattern, 255u / fragmentWidth, 255u / fragmentHeight, bitmap);
	}

	void FillShadingRateUniformFragmentDensity(ShadingRatePatternPtr pattern, uint32_t xDensity, uint32_t yDensity, Bitmap* bitmap)
	{
		auto     encoder = pattern->GetShadingRateEncoder();
		uint32_t encoded = encoder->EncodeFragmentDensity(xDensity, yDensity);
		uint8_t* encodedBytes = reinterpret_cast<uint8_t*>(&encoded);
		bitmap->Fill<uint8_t>(encodedBytes[0], encodedBytes[1], 0, 0);
	}

	void FillShadingRateRadial(ShadingRatePatternPtr pattern, float scale, Bitmap* bitmap)
	{
		auto encoder = pattern->GetShadingRateEncoder();
		scale /= std::min<uint32_t>(bitmap->GetWidth(), bitmap->GetHeight());
		for (uint32_t j = 0; j < bitmap->GetHeight(); ++j) {
			float    y = scale * (2.0 * j - bitmap->GetHeight());
			uint8_t* addr = bitmap->GetPixel8u(0, j);
			for (uint32_t i = 0; i < bitmap->GetWidth(); ++i, addr += bitmap->GetPixelStride()) {
				float          x = scale * (2.0 * i - bitmap->GetWidth());
				float          r2 = x * x + y * y;
				uint32_t       encoded = encoder->EncodeFragmentSize(r2 + 1, r2 + 1);
				const uint8_t* encodedBytes = reinterpret_cast<const uint8_t*>(&encoded);
				for (uint32_t k = 0; k < bitmap->GetChannelCount(); ++k) {
					addr[k] = encodedBytes[k];
				}
			}
		}
	}

	void FillShadingRateAnisotropic(ShadingRatePatternPtr pattern, float scale, Bitmap* bitmap)
	{
		auto encoder = pattern->GetShadingRateEncoder();
		scale /= std::min<uint32_t>(bitmap->GetWidth(), bitmap->GetHeight());
		for (uint32_t j = 0; j < bitmap->GetHeight(); ++j) {
			float    y = scale * (2.0 * j - bitmap->GetHeight());
			uint8_t* addr = bitmap->GetPixel8u(0, j);
			for (uint32_t i = 0; i < bitmap->GetWidth(); ++i, addr += bitmap->GetPixelStride()) {
				float          x = scale * (2.0 * i - bitmap->GetWidth());
				uint32_t       encoded = encoder->EncodeFragmentSize(x * x + 1, y * y + 1);
				const uint8_t* encodedBytes = reinterpret_cast<const uint8_t*>(&encoded);
				for (uint32_t k = 0; k < bitmap->GetChannelCount(); ++k) {
					addr[k] = encodedBytes[k];
				}
			}
		}
	}

} // namespace grfx

#pragma endregion

#pragma region Pipeline

namespace grfx {

	// -------------------------------------------------------------------------------------------------
	// BlendAttachmentState
	// -------------------------------------------------------------------------------------------------
	grfx::BlendAttachmentState BlendAttachmentState::BlendModeAdditive()
	{
		grfx::BlendAttachmentState state = {};
		state.blendEnable = true;
		state.srcColorBlendFactor = grfx::BLEND_FACTOR_SRC_ALPHA;
		state.dstColorBlendFactor = grfx::BLEND_FACTOR_ONE;
		state.colorBlendOp = grfx::BLEND_OP_ADD;
		state.srcAlphaBlendFactor = grfx::BLEND_FACTOR_SRC_ALPHA;
		state.dstAlphaBlendFactor = grfx::BLEND_FACTOR_ONE;
		state.alphaBlendOp = grfx::BLEND_OP_ADD;
		state.colorWriteMask = grfx::ColorComponentFlags::RGBA();

		return state;
	}

	grfx::BlendAttachmentState BlendAttachmentState::BlendModeAlpha()
	{
		grfx::BlendAttachmentState state = {};
		state.blendEnable = true;
		state.srcColorBlendFactor = grfx::BLEND_FACTOR_SRC_ALPHA;
		state.dstColorBlendFactor = grfx::BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
		state.colorBlendOp = grfx::BLEND_OP_ADD;
		state.srcAlphaBlendFactor = grfx::BLEND_FACTOR_SRC_ALPHA;
		state.dstAlphaBlendFactor = grfx::BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
		state.alphaBlendOp = grfx::BLEND_OP_ADD;
		state.colorWriteMask = grfx::ColorComponentFlags::RGBA();

		return state;
	}

	grfx::BlendAttachmentState BlendAttachmentState::BlendModeOver()
	{
		grfx::BlendAttachmentState state = {};
		state.blendEnable = true;
		state.srcColorBlendFactor = grfx::BLEND_FACTOR_SRC_ALPHA;
		state.dstColorBlendFactor = grfx::BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
		state.colorBlendOp = grfx::BLEND_OP_ADD;
		state.srcAlphaBlendFactor = grfx::BLEND_FACTOR_SRC_ALPHA;
		state.dstAlphaBlendFactor = grfx::BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
		state.alphaBlendOp = grfx::BLEND_OP_ADD;
		state.colorWriteMask = grfx::ColorComponentFlags::RGBA();

		return state;
	}

	grfx::BlendAttachmentState BlendAttachmentState::BlendModeUnder()
	{
		grfx::BlendAttachmentState state = {};
		state.blendEnable = true;
		state.srcColorBlendFactor = grfx::BLEND_FACTOR_DST_ALPHA;
		state.dstColorBlendFactor = grfx::BLEND_FACTOR_ONE;
		state.colorBlendOp = grfx::BLEND_OP_ADD;
		state.srcAlphaBlendFactor = grfx::BLEND_FACTOR_ZERO;
		state.dstAlphaBlendFactor = grfx::BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
		state.alphaBlendOp = grfx::BLEND_OP_ADD;
		state.colorWriteMask = grfx::ColorComponentFlags::RGBA();

		return state;
	}

	grfx::BlendAttachmentState BlendAttachmentState::BlendModePremultAlpha()
	{
		grfx::BlendAttachmentState state = {};
		state.blendEnable = true;
		state.srcColorBlendFactor = grfx::BLEND_FACTOR_ONE;
		state.dstColorBlendFactor = grfx::BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
		state.colorBlendOp = grfx::BLEND_OP_ADD;
		state.srcAlphaBlendFactor = grfx::BLEND_FACTOR_ONE;
		state.dstAlphaBlendFactor = grfx::BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
		state.alphaBlendOp = grfx::BLEND_OP_ADD;
		state.colorWriteMask = grfx::ColorComponentFlags::RGBA();

		return state;
	}

	namespace internal {

		// -------------------------------------------------------------------------------------------------
		// internal
		// -------------------------------------------------------------------------------------------------
		void FillOutGraphicsPipelineCreateInfo(
			const grfx::GraphicsPipelineCreateInfo2* pSrcCreateInfo,
			grfx::GraphicsPipelineCreateInfo* pDstCreateInfo)
		{
			// Set to default values
			*pDstCreateInfo = {};

			pDstCreateInfo->dynamicRenderPass = pSrcCreateInfo->dynamicRenderPass;

			// Shaders
			pDstCreateInfo->VS = pSrcCreateInfo->VS;
			pDstCreateInfo->PS = pSrcCreateInfo->PS;

			// Vertex input
			{
				pDstCreateInfo->vertexInputState.bindingCount = pSrcCreateInfo->vertexInputState.bindingCount;
				for (uint32_t i = 0; i < pDstCreateInfo->vertexInputState.bindingCount; ++i) {
					pDstCreateInfo->vertexInputState.bindings[i] = pSrcCreateInfo->vertexInputState.bindings[i];
				}
			}

			// Input aasembly
			{
				pDstCreateInfo->inputAssemblyState.topology = pSrcCreateInfo->topology;
			}

			// Raster
			{
				pDstCreateInfo->rasterState.polygonMode = pSrcCreateInfo->polygonMode;
				pDstCreateInfo->rasterState.cullMode = pSrcCreateInfo->cullMode;
				pDstCreateInfo->rasterState.frontFace = pSrcCreateInfo->frontFace;
			}

			// Depth/stencil
			{
				pDstCreateInfo->depthStencilState.depthTestEnable = pSrcCreateInfo->depthReadEnable;
				pDstCreateInfo->depthStencilState.depthWriteEnable = pSrcCreateInfo->depthWriteEnable;
				pDstCreateInfo->depthStencilState.depthCompareOp = pSrcCreateInfo->depthCompareOp;
				pDstCreateInfo->depthStencilState.depthBoundsTestEnable = false;
				pDstCreateInfo->depthStencilState.minDepthBounds = 0.0f;
				pDstCreateInfo->depthStencilState.maxDepthBounds = 1.0f;
				pDstCreateInfo->depthStencilState.stencilTestEnable = false;
				pDstCreateInfo->depthStencilState.front = {};
				pDstCreateInfo->depthStencilState.back = {};
			}

			// Color blend
			{
				pDstCreateInfo->colorBlendState.blendAttachmentCount = pSrcCreateInfo->outputState.renderTargetCount;
				for (uint32_t i = 0; i < pDstCreateInfo->colorBlendState.blendAttachmentCount; ++i) {
					switch (pSrcCreateInfo->blendModes[i]) {
					default: break;

					case grfx::BLEND_MODE_ADDITIVE: {
						pDstCreateInfo->colorBlendState.blendAttachments[i] = grfx::BlendAttachmentState::BlendModeAdditive();
					} break;

					case grfx::BLEND_MODE_ALPHA: {
						pDstCreateInfo->colorBlendState.blendAttachments[i] = grfx::BlendAttachmentState::BlendModeAlpha();
					} break;

					case grfx::BLEND_MODE_OVER: {
						pDstCreateInfo->colorBlendState.blendAttachments[i] = grfx::BlendAttachmentState::BlendModeOver();
					} break;

					case grfx::BLEND_MODE_UNDER: {
						pDstCreateInfo->colorBlendState.blendAttachments[i] = grfx::BlendAttachmentState::BlendModeUnder();
					} break;

					case grfx::BLEND_MODE_PREMULT_ALPHA: {
						pDstCreateInfo->colorBlendState.blendAttachments[i] = grfx::BlendAttachmentState::BlendModePremultAlpha();
					} break;
					}
					pDstCreateInfo->colorBlendState.blendAttachments[i].colorWriteMask = grfx::ColorComponentFlags::RGBA();
				}
			}

			// Output
			{
				pDstCreateInfo->outputState.renderTargetCount = pSrcCreateInfo->outputState.renderTargetCount;
				for (uint32_t i = 0; i < pDstCreateInfo->outputState.renderTargetCount; ++i) {
					pDstCreateInfo->outputState.renderTargetFormats[i] = pSrcCreateInfo->outputState.renderTargetFormats[i];
				}

				pDstCreateInfo->outputState.depthStencilFormat = pSrcCreateInfo->outputState.depthStencilFormat;
			}

			// Shading rate mode
			pDstCreateInfo->shadingRateMode = pSrcCreateInfo->shadingRateMode;

			// Pipeline internface
			pDstCreateInfo->pPipelineInterface = pSrcCreateInfo->pPipelineInterface;

			// MultiView details
			pDstCreateInfo->multiViewState = pSrcCreateInfo->multiViewState;
		}

	} // namespace internal

	// -------------------------------------------------------------------------------------------------
	// ComputePipeline
	// -------------------------------------------------------------------------------------------------
	Result ComputePipeline::Create(const grfx::ComputePipelineCreateInfo* pCreateInfo)
	{
		if (IsNull(pCreateInfo->pPipelineInterface)) {
			ASSERT_MSG(false, "pipeline interface is null (compute pipeline)");
			return ERROR_GRFX_OPERATION_NOT_PERMITTED;
		}

		Result ppxres = grfx::DeviceObject<grfx::ComputePipelineCreateInfo>::Create(pCreateInfo);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	// -------------------------------------------------------------------------------------------------
	// GraphicsPipeline
	// -------------------------------------------------------------------------------------------------
	Result GraphicsPipeline::Create(const grfx::GraphicsPipelineCreateInfo* pCreateInfo)
	{
		//// Checked binding range
		// for (uint32_t i = 0; i < pCreateInfo->vertexInputState.attributeCount; ++i) {
		//     const grfx::VertexAttribute& attribute = pCreateInfo->vertexInputState.attributes[i];
		//     if (attribute.binding >= MAX_VERTEX_BINDINGS) {
		//         ASSERT_MSG(false, "binding exceeds MAX_VERTEX_ATTRIBUTES");
		//         return ERROR_GRFX_MAX_VERTEX_BINDING_EXCEEDED;
		//     }
		//     if (attribute.format == grfx::FORMAT_UNDEFINED) {
		//         ASSERT_MSG(false, "vertex attribute format is undefined");
		//         return ERROR_GRFX_VERTEX_ATTRIBUTE_FROMAT_UNDEFINED;
		//     }
		// }
		//
		//// Build input bindings
		//{
		//    // Collect attributes into bindings
		//    for (uint32_t i = 0; i < pCreateInfo->vertexInputState.attributeCount; ++i) {
		//        const grfx::VertexAttribute& attribute = pCreateInfo->vertexInputState.attributes[i];
		//
		//        auto it = std::find_if(
		//            std::begin(mInputBindings),
		//            std::end(mInputBindings),
		//            [attribute](const VertexInputBinding& elem) -> bool {
		//            bool isSame = attribute.binding == elem.binding;
		//            return isSame; });
		//        if (it != std::end(mInputBindings)) {
		//            it->attributes.push_back(attribute);
		//        }
		//        else {
		//            VertexInputBinding set = {attribute.binding};
		//            mInputBindings.push_back(set);
		//            mInputBindings.back().attributes.push_back(attribute);
		//        }
		//    }
		//
		//    // Calculate offsets and stride
		//    for (auto& elem : mInputBindings) {
		//        elem.CalculateOffsetsAndStride();
		//    }
		//
		//    // Check classifactions
		//    for (auto& elem : mInputBindings) {
		//        uint32_t inputRateVertexCount   = 0;
		//        uint32_t inputRateInstanceCount = 0;
		//        for (auto& attr : elem.attributes) {
		//            inputRateVertexCount += (attr.inputRate == grfx::VERTEX_INPUT_RATE_VERTEX) ? 1 : 0;
		//            inputRateInstanceCount += (attr.inputRate == grfx::VERETX_INPUT_RATE_INSTANCE) ? 1 : 0;
		//        }
		//        // Cannot mix input rates
		//        if ((inputRateInstanceCount > 0) && (inputRateVertexCount > 0)) {
		//            ASSERT_MSG(false, "cannot mix vertex input rates in same binding");
		//            return ERROR_GRFX_CANNOT_MIX_VERTEX_INPUT_RATES;
		//        }
		//    }
		//}

		if (IsNull(pCreateInfo->pPipelineInterface)) {
			ASSERT_MSG(false, "pipeline interface is null (graphics pipeline)");
			return ERROR_GRFX_OPERATION_NOT_PERMITTED;
		}

		if (pCreateInfo->dynamicRenderPass && !GetDevice()->DynamicRenderingSupported()) {
			ASSERT_MSG(false, "Cannot create a pipeline with dynamic render pass, dynamic rendering is not supported.");
			return ERROR_GRFX_OPERATION_NOT_PERMITTED;
		}

		Result ppxres = grfx::DeviceObject<grfx::GraphicsPipelineCreateInfo>::Create(pCreateInfo);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	// -------------------------------------------------------------------------------------------------
	// PipelineInterface
	// -------------------------------------------------------------------------------------------------
	Result PipelineInterface::Create(const grfx::PipelineInterfaceCreateInfo* pCreateInfo)
	{
		if (pCreateInfo->setCount > MAX_BOUND_DESCRIPTOR_SETS) {
			ASSERT_MSG(false, "set count exceeds MAX_BOUND_DESCRIPTOR_SETS");
			return ERROR_LIMIT_EXCEEDED;
		}

		// If we have more than one set...we need to do some checks
		if (pCreateInfo->setCount > 0) {
			// Paranoid clear
			mSetNumbers.clear();
			// Copy set numbers
			std::vector<uint32_t> sortedSetNumbers;
			for (uint32_t i = 0; i < pCreateInfo->setCount; ++i) {
				uint32_t set = pCreateInfo->sets[i].set;
				sortedSetNumbers.push_back(set); // Sortable array
				mSetNumbers.push_back(set);      // Preserves declared ordering
			}
			// Sort set numbers
			std::sort(std::begin(sortedSetNumbers), std::end(sortedSetNumbers));
			// Check for uniqueness
			for (size_t i = 1; i < sortedSetNumbers.size(); ++i) {
				uint32_t setB = sortedSetNumbers[i];
				uint32_t setA = sortedSetNumbers[i - 1];
				uint32_t diff = setB - setA;
				if (diff == 0) {
					ASSERT_MSG(false, "set numbers are not unique");
					return ERROR_GRFX_NON_UNIQUE_SET;
				}
			}
			// Check for consecutive ness
			//
			// Assume consecutive
			mHasConsecutiveSetNumbers = true;
			for (size_t i = 1; i < mSetNumbers.size(); ++i) {
				int32_t setB = static_cast<int32_t>(sortedSetNumbers[i]);
				int32_t setA = static_cast<int32_t>(sortedSetNumbers[i - 1]);
				int32_t diff = setB - setA;
				if (diff != 1) {
					mHasConsecutiveSetNumbers = false;
					break;
				}
			}
		}

		// Check limit and make sure the push constants binding/set doesn't collide
		// with an existing binding in the set layouts.
		//
		if (pCreateInfo->pushConstants.count > 0) {
			if (pCreateInfo->pushConstants.count > MAX_PUSH_CONSTANTS) {
				ASSERT_MSG(false, "push constants count (" << pCreateInfo->pushConstants.count << ") exceeds MAX_PUSH_CONSTANTS (" << MAX_PUSH_CONSTANTS << ")");
				return ERROR_LIMIT_EXCEEDED;
			}

			if (pCreateInfo->pushConstants.binding == VALUE_IGNORED) {
				ASSERT_MSG(false, "push constants binding number is invalid");
				return ERROR_GRFX_INVALID_BINDING_NUMBER;
			}
			if (pCreateInfo->pushConstants.set == VALUE_IGNORED) {
				ASSERT_MSG(false, "push constants set number is invalid");
				return ERROR_GRFX_INVALID_SET_NUMBER;
			}

			for (uint32_t i = 0; i < pCreateInfo->setCount; ++i) {
				auto& set = pCreateInfo->sets[i];
				// Skip if set number doesn't match
				if (set.set != pCreateInfo->pushConstants.set) {
					continue;
				}
				// See if the layout has a binding that's the same as the push constants binding
				const uint32_t pushConstantsBinding = pCreateInfo->pushConstants.binding;
				auto& bindings = set.pLayout->GetBindings();
				auto           it = std::find_if(
					bindings.begin(),
					bindings.end(),
					[pushConstantsBinding](const grfx::DescriptorBinding& elem) -> bool {
						bool match = (elem.binding == pushConstantsBinding);
						return match; });
				// Error out if a match is found
				if (it != bindings.end()) {
					ASSERT_MSG(false, "push constants binding and set overlaps with a binding in set " << set.set);
					return ERROR_GRFX_NON_UNIQUE_BINDING;
				}
			}
		}

		Result ppxres = grfx::DeviceObject<grfx::PipelineInterfaceCreateInfo>::Create(pCreateInfo);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	const grfx::DescriptorSetLayout* PipelineInterface::GetSetLayout(uint32_t setNumber) const
	{
		const grfx::DescriptorSetLayout* pLayout = nullptr;
		for (uint32_t i = 0; i < mCreateInfo.setCount; ++i) {
			if (mCreateInfo.sets[i].set == setNumber) {
				pLayout = mCreateInfo.sets[i].pLayout;
				break;
			}
		}
		return pLayout;
	}

} // namespace grfx

#pragma endregion

#pragma region DrawPass

namespace grfx {

	// -------------------------------------------------------------------------------------------------
	// internal
	// -------------------------------------------------------------------------------------------------
	namespace internal {

		DrawPassCreateInfo::DrawPassCreateInfo(const grfx::DrawPassCreateInfo& obj)
		{
			this->version = CREATE_INFO_VERSION_1;
			this->width = obj.width;
			this->height = obj.height;
			this->renderTargetCount = obj.renderTargetCount;
			this->pShadingRatePattern = obj.pShadingRatePattern;

			// Formats
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->V1.renderTargetFormats[i] = obj.renderTargetFormats[i];
			}
			this->V1.depthStencilFormat = obj.depthStencilFormat;

			// Sample count
			this->V1.sampleCount = obj.sampleCount;

			// Usage flags
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->V1.renderTargetUsageFlags[i] = obj.renderTargetUsageFlags[i] | grfx::IMAGE_USAGE_COLOR_ATTACHMENT;
			}
			this->V1.depthStencilUsageFlags = obj.depthStencilUsageFlags | grfx::IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT;

			// Clear values
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->V1.renderTargetInitialStates[i] = obj.renderTargetInitialStates[i];
			}
			this->V1.depthStencilInitialState = obj.depthStencilInitialState;

			// Clear values
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->renderTargetClearValues[i] = obj.renderTargetClearValues[i];
			}
			this->depthStencilClearValue = obj.depthStencilClearValue;

			this->V1.imageCreateFlags = obj.imageCreateFlags;
		}

		DrawPassCreateInfo::DrawPassCreateInfo(const grfx::DrawPassCreateInfo2& obj)
		{
			this->version = CREATE_INFO_VERSION_2;
			this->width = obj.width;
			this->height = obj.height;
			this->renderTargetCount = obj.renderTargetCount;
			this->depthStencilState = obj.depthStencilState;
			this->pShadingRatePattern = obj.pShadingRatePattern;

			// Images
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->V2.pRenderTargetImages[i] = obj.pRenderTargetImages[i];
			}
			this->V2.pDepthStencilImage = obj.pDepthStencilImage;

			// Clear values
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->renderTargetClearValues[i] = obj.renderTargetClearValues[i];
			}
			this->depthStencilClearValue = obj.depthStencilClearValue;
		}

		DrawPassCreateInfo::DrawPassCreateInfo(const grfx::DrawPassCreateInfo3& obj)
		{
			this->version = CREATE_INFO_VERSION_3;
			this->width = obj.width;
			this->height = obj.height;
			this->renderTargetCount = obj.renderTargetCount;
			this->depthStencilState = obj.depthStencilState;
			this->pShadingRatePattern = obj.pShadingRatePattern;

			// Textures
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->V3.pRenderTargetTextures[i] = obj.pRenderTargetTextures[i];
			}
			this->V3.pDepthStencilTexture = obj.pDepthStencilTexture;
		}

	} // namespace internal

	// -------------------------------------------------------------------------------------------------
	// DrawPass
	// -------------------------------------------------------------------------------------------------
	Result DrawPass::CreateTexturesV1(const grfx::internal::DrawPassCreateInfo* pCreateInfo)
	{
		// Create textures
		{
			// Create render target textures
			for (uint32_t i = 0; i < pCreateInfo->renderTargetCount; ++i) {
				grfx::TextureCreateInfo ci = {};
				ci.pImage = nullptr;
				ci.imageType = grfx::IMAGE_TYPE_2D;
				ci.width = pCreateInfo->width;
				ci.height = pCreateInfo->height;
				ci.depth = 1;
				ci.imageFormat = pCreateInfo->V1.renderTargetFormats[i];
				ci.sampleCount = pCreateInfo->V1.sampleCount;
				ci.mipLevelCount = 1;
				ci.arrayLayerCount = 1;
				ci.usageFlags = pCreateInfo->V1.renderTargetUsageFlags[i];
				ci.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;
				ci.initialState = pCreateInfo->V1.renderTargetInitialStates[i];
				ci.RTVClearValue = pCreateInfo->renderTargetClearValues[i];
				ci.sampledImageViewType = grfx::IMAGE_VIEW_TYPE_UNDEFINED;
				ci.sampledImageViewFormat = grfx::FORMAT_UNDEFINED;
				ci.renderTargetViewFormat = grfx::FORMAT_UNDEFINED;
				ci.depthStencilViewFormat = grfx::FORMAT_UNDEFINED;
				ci.storageImageViewFormat = grfx::FORMAT_UNDEFINED;
				ci.ownership = grfx::OWNERSHIP_EXCLUSIVE;
				ci.imageCreateFlags = pCreateInfo->V1.imageCreateFlags;

				grfx::TexturePtr texture;
				Result           ppxres = GetDevice()->CreateTexture(&ci, &texture);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "render target texture create failed");
					return ppxres;
				}

				mRenderTargetTextures.push_back(texture);
			}

			// DSV image
			if (pCreateInfo->V1.depthStencilFormat != grfx::FORMAT_UNDEFINED) {
				grfx::TextureCreateInfo ci = {};
				ci.pImage = nullptr;
				ci.imageType = grfx::IMAGE_TYPE_2D;
				ci.width = pCreateInfo->width;
				ci.height = pCreateInfo->height;
				ci.depth = 1;
				ci.imageFormat = pCreateInfo->V1.depthStencilFormat;
				ci.sampleCount = pCreateInfo->V1.sampleCount;
				ci.mipLevelCount = 1;
				ci.arrayLayerCount = 1;
				ci.usageFlags = pCreateInfo->V1.depthStencilUsageFlags;
				ci.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;
				ci.initialState = pCreateInfo->V1.depthStencilInitialState;
				ci.DSVClearValue = pCreateInfo->depthStencilClearValue;
				ci.sampledImageViewType = grfx::IMAGE_VIEW_TYPE_UNDEFINED;
				ci.sampledImageViewFormat = grfx::FORMAT_UNDEFINED;
				ci.renderTargetViewFormat = grfx::FORMAT_UNDEFINED;
				ci.depthStencilViewFormat = grfx::FORMAT_UNDEFINED;
				ci.storageImageViewFormat = grfx::FORMAT_UNDEFINED;
				ci.ownership = grfx::OWNERSHIP_EXCLUSIVE;
				ci.imageCreateFlags = pCreateInfo->V1.imageCreateFlags;

				grfx::TexturePtr texture;
				Result           ppxres = GetDevice()->CreateTexture(&ci, &texture);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "depth stencil texture create failed");
					return ppxres;
				}

				mDepthStencilTexture = texture;
			}
		}
		return SUCCESS;
	}

	Result DrawPass::CreateTexturesV2(const grfx::internal::DrawPassCreateInfo* pCreateInfo)
	{
		// Create textures
		{
			// Create render target textures
			for (uint32_t i = 0; i < pCreateInfo->renderTargetCount; ++i) {
				grfx::TextureCreateInfo ci = {};
				ci.pImage = pCreateInfo->V2.pRenderTargetImages[i];

				grfx::TexturePtr texture;
				Result           ppxres = GetDevice()->CreateTexture(&ci, &texture);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "render target texture create failed");
					return ppxres;
				}

				mRenderTargetTextures.push_back(texture);
			}

			// DSV image
			if (!IsNull(pCreateInfo->V2.pDepthStencilImage)) {
				grfx::TextureCreateInfo ci = {};
				ci.pImage = pCreateInfo->V2.pDepthStencilImage;

				grfx::TexturePtr texture;
				Result           ppxres = GetDevice()->CreateTexture(&ci, &texture);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "dpeth stencil texture create failed");
					return ppxres;
				}

				mDepthStencilTexture = texture;
			}
		}
		return SUCCESS;
	}

	Result DrawPass::CreateTexturesV3(const grfx::internal::DrawPassCreateInfo* pCreateInfo)
	{
		// Create textures
		{
			// Create render target textures
			for (uint32_t i = 0; i < pCreateInfo->renderTargetCount; ++i) {
				grfx::TexturePtr texture = pCreateInfo->V3.pRenderTargetTextures[i];
				mRenderTargetTextures.push_back(texture);
			}

			// DSV image
			if (!IsNull(pCreateInfo->V3.pDepthStencilTexture)) {
				mDepthStencilTexture = pCreateInfo->V3.pDepthStencilTexture;
			}
		}
		return SUCCESS;
	}

	Result DrawPass::CreateApiObjects(const grfx::internal::DrawPassCreateInfo* pCreateInfo)
	{
		mRenderArea = { 0, 0, pCreateInfo->width, pCreateInfo->height };

		// Create backing resources
		switch (pCreateInfo->version) {
		default: return ERROR_INVALID_CREATE_ARGUMENT; break;

		case grfx::internal::DrawPassCreateInfo::CREATE_INFO_VERSION_1: {
			Result ppxres = CreateTexturesV1(pCreateInfo);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "create textures(V1) failed");
				return ppxres;
			}
		} break;

		case grfx::internal::DrawPassCreateInfo::CREATE_INFO_VERSION_2: {
			Result ppxres = CreateTexturesV2(pCreateInfo);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "create textures(V2) failed");
				return ppxres;
			}
		} break;

		case grfx::internal::DrawPassCreateInfo::CREATE_INFO_VERSION_3: {
			Result ppxres = CreateTexturesV3(pCreateInfo);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "create textures(V3) failed");
				return ppxres;
			}
		} break;
		}

		// Create render passes
		for (uint32_t clearMask = 0; clearMask <= static_cast<uint32_t>(DRAW_PASS_CLEAR_FLAG_CLEAR_ALL); ++clearMask) {
			grfx::AttachmentLoadOp renderTargetLoadOp = grfx::ATTACHMENT_LOAD_OP_LOAD;
			grfx::AttachmentLoadOp depthLoadOp = grfx::ATTACHMENT_LOAD_OP_LOAD;
			grfx::AttachmentLoadOp stencilLoadOp = grfx::ATTACHMENT_LOAD_OP_LOAD;

			if ((clearMask & DRAW_PASS_CLEAR_FLAG_CLEAR_RENDER_TARGETS) != 0) {
				renderTargetLoadOp = grfx::ATTACHMENT_LOAD_OP_CLEAR;
			}
			if (mDepthStencilTexture) {
				if ((clearMask & DRAW_PASS_CLEAR_FLAG_CLEAR_DEPTH) != 0) {
					if (GetFormatDescription(mDepthStencilTexture->GetImageFormat())->aspect & FORMAT_ASPECT_DEPTH) {
						depthLoadOp = grfx::ATTACHMENT_LOAD_OP_CLEAR;
					}
				}
				if ((clearMask & DRAW_PASS_CLEAR_FLAG_CLEAR_STENCIL) != 0) {
					if (GetFormatDescription(mDepthStencilTexture->GetImageFormat())->aspect & FORMAT_ASPECT_STENCIL) {
						stencilLoadOp = grfx::ATTACHMENT_LOAD_OP_CLEAR;
					}
				}
			}

			// If the the depth/stencil state has READ for either depth or stecil
			// then skip creating any LOAD_OP_CLEAR render passes for it.
			// Not skipping will result in API errors.
			//
			bool skip = false;
			if (depthLoadOp == grfx::ATTACHMENT_LOAD_OP_CLEAR) {
				switch (pCreateInfo->depthStencilState) {
				default: break;
				case grfx::RESOURCE_STATE_DEPTH_STENCIL_READ:
				case grfx::RESOURCE_STATE_DEPTH_READ_STENCIL_WRITE: {
					skip = true;
				} break;
				}
			}
			if (stencilLoadOp == grfx::ATTACHMENT_LOAD_OP_CLEAR) {
				switch (pCreateInfo->depthStencilState) {
				default: break;
				case grfx::RESOURCE_STATE_DEPTH_STENCIL_READ:
				case grfx::RESOURCE_STATE_DEPTH_WRITE_STENCIL_READ: {
					skip = true;
				} break;
				}
			}
			if (skip) {
				continue;
			}

			grfx::RenderPassCreateInfo3 rpCreateInfo = {};
			rpCreateInfo.width = pCreateInfo->width;
			rpCreateInfo.height = pCreateInfo->height;
			rpCreateInfo.renderTargetCount = pCreateInfo->renderTargetCount;
			rpCreateInfo.depthStencilState = pCreateInfo->depthStencilState;

			for (uint32_t i = 0; i < rpCreateInfo.renderTargetCount; ++i) {
				if (!mRenderTargetTextures[i]) {
					continue;
				}
				rpCreateInfo.pRenderTargetImages[i] = mRenderTargetTextures[i]->GetImage();
				rpCreateInfo.renderTargetClearValues[i] = mRenderTargetTextures[i]->GetImage()->GetRTVClearValue();
				rpCreateInfo.renderTargetLoadOps[i] = renderTargetLoadOp;
				rpCreateInfo.renderTargetStoreOps[i] = grfx::ATTACHMENT_STORE_OP_STORE;
			}

			if (mDepthStencilTexture) {
				rpCreateInfo.pDepthStencilImage = mDepthStencilTexture->GetImage();
				rpCreateInfo.depthStencilClearValue = mDepthStencilTexture->GetImage()->GetDSVClearValue();
				rpCreateInfo.depthLoadOp = depthLoadOp;
				rpCreateInfo.depthStoreOp = grfx::ATTACHMENT_STORE_OP_STORE;
				rpCreateInfo.stencilLoadOp = stencilLoadOp;
				rpCreateInfo.stencilStoreOp = grfx::ATTACHMENT_STORE_OP_STORE;
			}

			if (!IsNull(pCreateInfo->pShadingRatePattern) && pCreateInfo->pShadingRatePattern->GetShadingRateMode() != grfx::SHADING_RATE_NONE) {
				rpCreateInfo.pShadingRatePattern = pCreateInfo->pShadingRatePattern;
			}

			Pass pass = {};
			pass.clearMask = clearMask;

			Result ppxres = GetDevice()->CreateRenderPass(&rpCreateInfo, &pass.renderPass);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "create render pass failed for clearMask=" << clearMask);
				return ppxres;
			}

			mPasses.push_back(pass);
		}

		return SUCCESS;
	}

	void DrawPass::DestroyApiObjects()
	{
		for (size_t i = 0; i < mPasses.size(); ++i) {
			if (mPasses[i].renderPass) {
				GetDevice()->DestroyRenderPass(mPasses[i].renderPass);
				mPasses[i].renderPass.Reset();
			}
		}
		mPasses.clear();

		for (size_t i = 0; i < mRenderTargetTextures.size(); ++i) {
			if (mRenderTargetTextures[i] && (mRenderTargetTextures[i]->GetOwnership() == grfx::OWNERSHIP_EXCLUSIVE)) {
				GetDevice()->DestroyTexture(mRenderTargetTextures[i]);
				mRenderTargetTextures[i].Reset();
			}
		}
		mRenderTargetTextures.clear();

		if (mDepthStencilTexture && (mDepthStencilTexture->GetOwnership() == grfx::OWNERSHIP_EXCLUSIVE)) {
			GetDevice()->DestroyTexture(mDepthStencilTexture);
			mDepthStencilTexture.Reset();
		}

		for (size_t i = 0; i < mPasses.size(); ++i) {
			if (mPasses[i].renderPass) {
				GetDevice()->DestroyRenderPass(mPasses[i].renderPass);
				mPasses[i].renderPass.Reset();
			}
		}
		mPasses.clear();
	}

	const grfx::Rect& DrawPass::GetRenderArea() const
	{
		ASSERT_MSG(mPasses.size() > 0, "no render passes");
		ASSERT_MSG(!IsNull(mPasses[0].renderPass.Get()), "first render pass not valid");
		return mPasses[0].renderPass->GetRenderArea();
	}

	const grfx::Rect& DrawPass::GetScissor() const
	{
		ASSERT_MSG(mPasses.size() > 0, "no render passes");
		ASSERT_MSG(!IsNull(mPasses[0].renderPass.Get()), "first render pass not valid");
		return mPasses[0].renderPass->GetScissor();
	}

	const grfx::Viewport& DrawPass::GetViewport() const
	{
		ASSERT_MSG(mPasses.size() > 0, "no render passes");
		ASSERT_MSG(!IsNull(mPasses[0].renderPass.Get()), "first render pass not valid");
		return mPasses[0].renderPass->GetViewport();
	}

	Result DrawPass::GetRenderTargetTexture(uint32_t index, grfx::Texture** ppRenderTarget) const
	{
		if (index >= mCreateInfo.renderTargetCount) {
			return ERROR_OUT_OF_RANGE;
		}
		*ppRenderTarget = mRenderTargetTextures[index];
		return SUCCESS;
	}

	grfx::Texture* DrawPass::GetRenderTargetTexture(uint32_t index) const
	{
		grfx::Texture* pTexture = nullptr;
		GetRenderTargetTexture(index, &pTexture);
		return pTexture;
	}

	Result DrawPass::GetDepthStencilTexture(grfx::Texture** ppDepthStencil) const
	{
		if (!HasDepthStencil()) {
			return ERROR_ELEMENT_NOT_FOUND;
		}
		*ppDepthStencil = mDepthStencilTexture;
		return SUCCESS;
	}

	grfx::Texture* DrawPass::GetDepthStencilTexture() const
	{
		grfx::Texture* pTexture = nullptr;
		GetDepthStencilTexture(&pTexture);
		return pTexture;
	}

	void DrawPass::PrepareRenderPassBeginInfo(const grfx::DrawPassClearFlags& clearFlags, grfx::RenderPassBeginInfo* pBeginInfo) const
	{
		uint32_t clearMask = clearFlags.flags;

		auto it = FindIf(
			mPasses,
			[clearMask](const Pass& elem) -> bool {
				bool isMatch = (elem.clearMask == clearMask);
				return isMatch; });
		if (it == std::end(mPasses)) {
			ASSERT_MSG(false, "couldn't find matching pass for clearMask=" << clearMask);
			return;
		}

		pBeginInfo->pRenderPass = it->renderPass;
		pBeginInfo->renderArea = GetRenderArea();
		pBeginInfo->RTVClearCount = mCreateInfo.renderTargetCount;

		if (clearFlags & grfx::DRAW_PASS_CLEAR_FLAG_CLEAR_RENDER_TARGETS) {
			for (uint32_t i = 0; i < mCreateInfo.renderTargetCount; ++i) {
				pBeginInfo->RTVClearValues[i] = mCreateInfo.renderTargetClearValues[i];
			}
		}

		if ((clearFlags & grfx::DRAW_PASS_CLEAR_FLAG_CLEAR_DEPTH) || (clearFlags & grfx::DRAW_PASS_CLEAR_FLAG_CLEAR_STENCIL)) {
			pBeginInfo->DSVClearValue = mCreateInfo.depthStencilClearValue;
		}
	}

} // namespace grfx

#pragma endregion

#pragma region RenderPass

namespace grfx {

	// -------------------------------------------------------------------------------------------------
	// RenderPassCreateInfo
	// -------------------------------------------------------------------------------------------------
	void RenderPassCreateInfo::SetAllRenderTargetClearValue(const grfx::RenderTargetClearValue& value)
	{
		for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
			this->renderTargetClearValues[i] = value;
		}
	}

	// -------------------------------------------------------------------------------------------------
	// RenderPassCreateInfo2
	// -------------------------------------------------------------------------------------------------
	void RenderPassCreateInfo2::SetAllRenderTargetUsageFlags(const grfx::ImageUsageFlags& flags)
	{
		for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
			this->renderTargetUsageFlags[i] = flags;
		}
	}

	void RenderPassCreateInfo2::SetAllRenderTargetClearValue(const grfx::RenderTargetClearValue& value)
	{
		for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
			this->renderTargetClearValues[i] = value;
		}
	}

	void RenderPassCreateInfo2::SetAllRenderTargetLoadOp(grfx::AttachmentLoadOp op)
	{
		for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
			this->renderTargetLoadOps[i] = op;
		}
	}

	void RenderPassCreateInfo2::SetAllRenderTargetStoreOp(grfx::AttachmentStoreOp op)
	{
		for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
			this->renderTargetStoreOps[i] = op;
		}
	}

	void RenderPassCreateInfo2::SetAllRenderTargetToClear()
	{
		SetAllRenderTargetLoadOp(grfx::ATTACHMENT_LOAD_OP_CLEAR);
	}

	// -------------------------------------------------------------------------------------------------
	// RenderPassCreateInfo3
	// -------------------------------------------------------------------------------------------------
	void RenderPassCreateInfo3::SetAllRenderTargetClearValue(const grfx::RenderTargetClearValue& value)
	{
		for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
			this->renderTargetClearValues[i] = value;
		}
	}

	void RenderPassCreateInfo3::SetAllRenderTargetLoadOp(grfx::AttachmentLoadOp op)
	{
		for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
			this->renderTargetLoadOps[i] = op;
		}
	}

	void RenderPassCreateInfo3::SetAllRenderTargetStoreOp(grfx::AttachmentStoreOp op)
	{
		for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
			this->renderTargetStoreOps[i] = op;
		}
	}

	void RenderPassCreateInfo3::SetAllRenderTargetToClear()
	{
		SetAllRenderTargetLoadOp(grfx::ATTACHMENT_LOAD_OP_CLEAR);
	}

	// -------------------------------------------------------------------------------------------------
	// internal
	// -------------------------------------------------------------------------------------------------
	namespace internal {

		RenderPassCreateInfo::RenderPassCreateInfo(const grfx::RenderPassCreateInfo& obj)
		{
			this->version = CREATE_INFO_VERSION_1;
			this->width = obj.width;
			this->height = obj.height;
			this->renderTargetCount = obj.renderTargetCount;
			this->depthStencilState = obj.depthStencilState;
			this->pShadingRatePattern = obj.pShadingRatePattern;
			this->multiViewState = obj.multiViewState;

			// Views
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->V1.pRenderTargetViews[i] = obj.pRenderTargetViews[i];
			}
			this->V1.pDepthStencilView = obj.pDepthStencilView;

			// Clear values
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->renderTargetClearValues[i] = obj.renderTargetClearValues[i];
			}
			this->depthStencilClearValue = obj.depthStencilClearValue;
		}

		RenderPassCreateInfo::RenderPassCreateInfo(const grfx::RenderPassCreateInfo2& obj)
		{
			this->version = CREATE_INFO_VERSION_2;
			this->width = obj.width;
			this->height = obj.height;
			this->renderTargetCount = obj.renderTargetCount;
			this->pShadingRatePattern = obj.pShadingRatePattern;

			// Formats
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->V2.renderTargetFormats[i] = obj.renderTargetFormats[i];
			}
			this->V2.depthStencilFormat = obj.depthStencilFormat;

			// Sample count
			this->V2.sampleCount = obj.sampleCount;

			// Usage flags
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->V2.renderTargetUsageFlags[i] = obj.renderTargetUsageFlags[i];
			}
			this->V2.depthStencilUsageFlags = obj.depthStencilUsageFlags;

			// Clear values
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->renderTargetClearValues[i] = obj.renderTargetClearValues[i];
			}
			this->depthStencilClearValue = obj.depthStencilClearValue;

			// Load/store ops
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->renderTargetLoadOps[i] = obj.renderTargetLoadOps[i];
				this->renderTargetStoreOps[i] = obj.renderTargetStoreOps[i];
			}
			this->depthLoadOp = obj.depthLoadOp;
			this->depthStoreOp = obj.depthStoreOp;
			this->stencilLoadOp = obj.stencilLoadOp;
			this->stencilStoreOp = obj.stencilStoreOp;

			// Initial states
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->V2.renderTargetInitialStates[i] = obj.renderTargetInitialStates[i];
			}
			this->V2.depthStencilInitialState = obj.depthStencilInitialState;

			// MultiView
			this->arrayLayerCount = obj.arrayLayerCount;
			this->multiViewState = obj.multiViewState;
		}

		RenderPassCreateInfo::RenderPassCreateInfo(const grfx::RenderPassCreateInfo3& obj)
		{
			this->version = CREATE_INFO_VERSION_3;
			this->width = obj.width;
			this->height = obj.height;
			this->renderTargetCount = obj.renderTargetCount;
			this->depthStencilState = obj.depthStencilState;
			this->pShadingRatePattern = obj.pShadingRatePattern;

			// Images
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->V3.pRenderTargetImages[i] = obj.pRenderTargetImages[i];
			}
			this->V3.pDepthStencilImage = obj.pDepthStencilImage;

			// Clear values
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->renderTargetClearValues[i] = obj.renderTargetClearValues[i];
			}
			this->depthStencilClearValue = obj.depthStencilClearValue;

			// Load/store ops
			for (uint32_t i = 0; i < this->renderTargetCount; ++i) {
				this->renderTargetLoadOps[i] = obj.renderTargetLoadOps[i];
				this->renderTargetStoreOps[i] = obj.renderTargetStoreOps[i];
			}
			this->depthLoadOp = obj.depthLoadOp;
			this->depthStoreOp = obj.depthStoreOp;
			this->stencilLoadOp = obj.stencilLoadOp;
			this->stencilStoreOp = obj.stencilStoreOp;

			// MultiView
			this->arrayLayerCount = obj.arrayLayerCount;
			this->multiViewState = obj.multiViewState;
		}

	} // namespace internal

	// -------------------------------------------------------------------------------------------------
	// RenderPass
	// -------------------------------------------------------------------------------------------------
	Result RenderPass::CreateImagesAndViewsV1(const grfx::internal::RenderPassCreateInfo* pCreateInfo)
	{
		// Copy RTV and images
		for (uint32_t i = 0; i < pCreateInfo->renderTargetCount; ++i) {
			grfx::RenderTargetViewPtr rtv = pCreateInfo->V1.pRenderTargetViews[i];
			if (!rtv) {
				ASSERT_MSG(false, "RTV << " << i << " is null");
				return ERROR_UNEXPECTED_NULL_ARGUMENT;
			}
			if (!rtv->GetImage()) {
				ASSERT_MSG(false, "image << " << i << " is null");
				return ERROR_UNEXPECTED_NULL_ARGUMENT;
			}

			mRenderTargetViews.push_back(rtv);
			mRenderTargetImages.push_back(rtv->GetImage());

			mHasLoadOpClear |= (rtv->GetLoadOp() == grfx::ATTACHMENT_LOAD_OP_CLEAR);
		}
		// Copy DSV and image
		if (!IsNull(pCreateInfo->V1.pDepthStencilView)) {
			grfx::DepthStencilViewPtr dsv = pCreateInfo->V1.pDepthStencilView;

			mDepthStencilView = dsv;
			mDepthStencilImage = dsv->GetImage();

			mHasLoadOpClear |= (dsv->GetDepthLoadOp() == grfx::ATTACHMENT_LOAD_OP_CLEAR);
			mHasLoadOpClear |= (dsv->GetStencilLoadOp() == grfx::ATTACHMENT_LOAD_OP_CLEAR);
		}

		return SUCCESS;
	}

	Result RenderPass::CreateImagesAndViewsV2(const grfx::internal::RenderPassCreateInfo* pCreateInfo)
	{
		// Create images
		{
			// RTV images
			for (uint32_t i = 0; i < pCreateInfo->renderTargetCount; ++i) {
				grfx::ResourceState initialState = grfx::RESOURCE_STATE_RENDER_TARGET;
				if (pCreateInfo->V2.renderTargetInitialStates[i] != grfx::RESOURCE_STATE_UNDEFINED) {
					initialState = pCreateInfo->V2.renderTargetInitialStates[i];
				}
				grfx::ImageCreateInfo imageCreateInfo = {};
				imageCreateInfo.type = grfx::IMAGE_TYPE_2D;
				imageCreateInfo.width = pCreateInfo->width;
				imageCreateInfo.height = pCreateInfo->height;
				imageCreateInfo.depth = 1;
				imageCreateInfo.format = pCreateInfo->V2.renderTargetFormats[i];
				imageCreateInfo.sampleCount = pCreateInfo->V2.sampleCount;
				imageCreateInfo.mipLevelCount = 1;
				imageCreateInfo.arrayLayerCount = pCreateInfo->arrayLayerCount;
				imageCreateInfo.usageFlags = pCreateInfo->V2.renderTargetUsageFlags[i];
				imageCreateInfo.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;
				imageCreateInfo.initialState = grfx::RESOURCE_STATE_RENDER_TARGET;
				imageCreateInfo.RTVClearValue = pCreateInfo->renderTargetClearValues[i];
				imageCreateInfo.ownership = pCreateInfo->ownership;

				grfx::ImagePtr image;
				Result         ppxres = GetDevice()->CreateImage(&imageCreateInfo, &image);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "RTV image create failed");
					return ppxres;
				}

				mRenderTargetImages.push_back(image);
			}

			// DSV image
			if (pCreateInfo->V2.depthStencilFormat != grfx::FORMAT_UNDEFINED) {
				grfx::ResourceState initialState = grfx::RESOURCE_STATE_DEPTH_STENCIL_WRITE;
				if (pCreateInfo->V2.depthStencilInitialState != grfx::RESOURCE_STATE_UNDEFINED) {
					initialState = pCreateInfo->V2.depthStencilInitialState;
				}

				grfx::ImageCreateInfo imageCreateInfo = {};
				imageCreateInfo.type = grfx::IMAGE_TYPE_2D;
				imageCreateInfo.width = pCreateInfo->width;
				imageCreateInfo.height = pCreateInfo->height;
				imageCreateInfo.depth = 1;
				imageCreateInfo.format = pCreateInfo->V2.depthStencilFormat;
				imageCreateInfo.sampleCount = pCreateInfo->V2.sampleCount;
				imageCreateInfo.mipLevelCount = 1;
				imageCreateInfo.arrayLayerCount = pCreateInfo->arrayLayerCount;
				imageCreateInfo.usageFlags = pCreateInfo->V2.depthStencilUsageFlags;
				imageCreateInfo.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;
				imageCreateInfo.initialState = initialState;
				imageCreateInfo.DSVClearValue = pCreateInfo->depthStencilClearValue;
				imageCreateInfo.ownership = pCreateInfo->ownership;

				grfx::ImagePtr image;
				Result         ppxres = GetDevice()->CreateImage(&imageCreateInfo, &image);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "DSV image create failed");
					return ppxres;
				}

				mDepthStencilImage = image;
			}
		}

		// Create views
		{
			// RTVs
			for (uint32_t i = 0; i < pCreateInfo->renderTargetCount; ++i) {
				grfx::ImagePtr image = mRenderTargetImages[i];

				grfx::RenderTargetViewCreateInfo rtvCreateInfo = {};
				rtvCreateInfo.pImage = image;
				rtvCreateInfo.imageViewType = grfx::IMAGE_VIEW_TYPE_2D;
				rtvCreateInfo.format = pCreateInfo->V2.renderTargetFormats[i];
				rtvCreateInfo.mipLevel = 0;
				rtvCreateInfo.mipLevelCount = 1;
				rtvCreateInfo.arrayLayer = 0;
				rtvCreateInfo.arrayLayerCount = pCreateInfo->arrayLayerCount;
				rtvCreateInfo.components = {};
				rtvCreateInfo.loadOp = pCreateInfo->renderTargetLoadOps[i];
				rtvCreateInfo.storeOp = pCreateInfo->renderTargetStoreOps[i];
				rtvCreateInfo.ownership = pCreateInfo->ownership;

				grfx::RenderTargetViewPtr rtv;
				Result                    ppxres = GetDevice()->CreateRenderTargetView(&rtvCreateInfo, &rtv);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "RTV create failed");
					return ppxres;
				}

				mRenderTargetViews.push_back(rtv);

				mHasLoadOpClear |= (rtvCreateInfo.loadOp == grfx::ATTACHMENT_LOAD_OP_CLEAR);
			}

			// DSV
			if (pCreateInfo->V2.depthStencilFormat != grfx::FORMAT_UNDEFINED) {
				grfx::ImagePtr image = mDepthStencilImage;

				grfx::DepthStencilViewCreateInfo dsvCreateInfo = {};
				dsvCreateInfo.pImage = image;
				dsvCreateInfo.imageViewType = grfx::IMAGE_VIEW_TYPE_2D;
				dsvCreateInfo.format = pCreateInfo->V2.depthStencilFormat;
				dsvCreateInfo.mipLevel = 0;
				dsvCreateInfo.mipLevelCount = 1;
				dsvCreateInfo.arrayLayer = 0;
				dsvCreateInfo.arrayLayerCount = pCreateInfo->arrayLayerCount;
				dsvCreateInfo.components = {};
				dsvCreateInfo.depthLoadOp = pCreateInfo->depthLoadOp;
				dsvCreateInfo.depthStoreOp = pCreateInfo->depthStoreOp;
				dsvCreateInfo.stencilLoadOp = pCreateInfo->stencilLoadOp;
				dsvCreateInfo.stencilStoreOp = pCreateInfo->stencilStoreOp;
				dsvCreateInfo.ownership = pCreateInfo->ownership;

				grfx::DepthStencilViewPtr dsv;
				Result                    ppxres = GetDevice()->CreateDepthStencilView(&dsvCreateInfo, &dsv);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "RTV create failed");
					return ppxres;
				}

				mDepthStencilView = dsv;

				mHasLoadOpClear |= (dsvCreateInfo.depthLoadOp == grfx::ATTACHMENT_LOAD_OP_CLEAR);
				mHasLoadOpClear |= (dsvCreateInfo.stencilLoadOp == grfx::ATTACHMENT_LOAD_OP_CLEAR);
			}
		}

		return SUCCESS;
	}

	Result RenderPass::CreateImagesAndViewsV3(const grfx::internal::RenderPassCreateInfo* pCreateInfo)
	{
		// Copy images
		{
			// Copy RTV images
			for (uint32_t i = 0; i < pCreateInfo->renderTargetCount; ++i) {
				grfx::ImagePtr image = pCreateInfo->V3.pRenderTargetImages[i];
				if (!image) {
					ASSERT_MSG(false, "image << " << i << " is null");
					return ERROR_UNEXPECTED_NULL_ARGUMENT;
				}

				mRenderTargetImages.push_back(image);
			}
			// Copy DSV image
			if (!IsNull(pCreateInfo->V3.pDepthStencilImage)) {
				mDepthStencilImage = pCreateInfo->V3.pDepthStencilImage;
			}
		}

		// Create views
		{
			// RTVs
			for (uint32_t i = 0; i < pCreateInfo->renderTargetCount; ++i) {
				grfx::ImagePtr image = mRenderTargetImages[i];

				grfx::RenderTargetViewCreateInfo rtvCreateInfo = {};
				rtvCreateInfo.pImage = image;
				rtvCreateInfo.imageViewType = image->GuessImageViewType();
				rtvCreateInfo.format = image->GetFormat();
				rtvCreateInfo.mipLevel = 0;
				rtvCreateInfo.mipLevelCount = image->GetMipLevelCount();
				rtvCreateInfo.arrayLayer = 0;
				rtvCreateInfo.arrayLayerCount = image->GetArrayLayerCount();
				rtvCreateInfo.components = {};
				rtvCreateInfo.loadOp = pCreateInfo->renderTargetLoadOps[i];
				rtvCreateInfo.storeOp = pCreateInfo->renderTargetStoreOps[i];
				rtvCreateInfo.ownership = pCreateInfo->ownership;

				grfx::RenderTargetViewPtr rtv;
				Result                    ppxres = GetDevice()->CreateRenderTargetView(&rtvCreateInfo, &rtv);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "RTV create failed");
					return ppxres;
				}

				mRenderTargetViews.push_back(rtv);

				mHasLoadOpClear |= (rtvCreateInfo.loadOp == grfx::ATTACHMENT_LOAD_OP_CLEAR);
			}

			// DSV
			if (mDepthStencilImage) {
				grfx::ImagePtr image = mDepthStencilImage;

				grfx::DepthStencilViewCreateInfo dsvCreateInfo = {};
				dsvCreateInfo.pImage = image;
				dsvCreateInfo.imageViewType = image->GuessImageViewType();
				dsvCreateInfo.format = image->GetFormat();
				dsvCreateInfo.mipLevel = 0;
				dsvCreateInfo.mipLevelCount = image->GetMipLevelCount();
				dsvCreateInfo.arrayLayer = 0;
				dsvCreateInfo.arrayLayerCount = image->GetArrayLayerCount();
				dsvCreateInfo.components = {};
				dsvCreateInfo.depthLoadOp = pCreateInfo->depthLoadOp;
				dsvCreateInfo.depthStoreOp = pCreateInfo->depthStoreOp;
				dsvCreateInfo.stencilLoadOp = pCreateInfo->stencilLoadOp;
				dsvCreateInfo.stencilStoreOp = pCreateInfo->stencilStoreOp;
				dsvCreateInfo.ownership = pCreateInfo->ownership;

				grfx::DepthStencilViewPtr dsv;
				Result                    ppxres = GetDevice()->CreateDepthStencilView(&dsvCreateInfo, &dsv);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "DSV create failed");
					return ppxres;
				}

				mDepthStencilView = dsv;

				mHasLoadOpClear |= (dsvCreateInfo.depthLoadOp == grfx::ATTACHMENT_LOAD_OP_CLEAR);
				mHasLoadOpClear |= (dsvCreateInfo.stencilLoadOp == grfx::ATTACHMENT_LOAD_OP_CLEAR);
			}
		}

		return SUCCESS;
	}

	Result RenderPass::Create(const grfx::internal::RenderPassCreateInfo* pCreateInfo)
	{
		mRenderArea = { 0, 0, pCreateInfo->width, pCreateInfo->height };
		mViewport = { 0.0f, 0.0f, static_cast<float>(pCreateInfo->width), static_cast<float>(pCreateInfo->height), 0.0f, 1.0f };

		switch (pCreateInfo->version) {
		default: return ERROR_INVALID_CREATE_ARGUMENT; break;

		case grfx::internal::RenderPassCreateInfo::CREATE_INFO_VERSION_1: {
			Result ppxres = CreateImagesAndViewsV1(pCreateInfo);
			if (Failed(ppxres)) {
				return ppxres;
			}
		} break;

		case grfx::internal::RenderPassCreateInfo::CREATE_INFO_VERSION_2: {
			Result ppxres = CreateImagesAndViewsV2(pCreateInfo);
			if (Failed(ppxres)) {
				return ppxres;
			}
		} break;

		case grfx::internal::RenderPassCreateInfo::CREATE_INFO_VERSION_3: {
			Result ppxres = CreateImagesAndViewsV3(pCreateInfo);
			if (Failed(ppxres)) {
				return ppxres;
			}
		} break;
		}

		Result ppxres = grfx::DeviceObject<grfx::internal::RenderPassCreateInfo>::Create(pCreateInfo);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	void RenderPass::Destroy()
	{
		for (uint32_t i = 0; i < mCreateInfo.renderTargetCount; ++i) {
			grfx::RenderTargetViewPtr& rtv = mRenderTargetViews[i];
			if (rtv && (rtv->GetOwnership() != grfx::OWNERSHIP_REFERENCE)) {
				GetDevice()->DestroyRenderTargetView(rtv);
				rtv.Reset();
			}

			grfx::ImagePtr& image = mRenderTargetImages[i];
			if (image && (image->GetOwnership() != grfx::OWNERSHIP_REFERENCE)) {
				GetDevice()->DestroyImage(image);
				image.Reset();
			}
		}
		mRenderTargetViews.clear();
		mRenderTargetImages.clear();

		if (mDepthStencilView && (mDepthStencilView->GetOwnership() != grfx::OWNERSHIP_REFERENCE)) {
			GetDevice()->DestroyDepthStencilView(mDepthStencilView);
			mDepthStencilView.Reset();
		}

		if (mDepthStencilImage && (mDepthStencilImage->GetOwnership() != grfx::OWNERSHIP_REFERENCE)) {
			GetDevice()->DestroyImage(mDepthStencilImage);
			mDepthStencilImage.Reset();
		}

		grfx::DeviceObject<grfx::internal::RenderPassCreateInfo>::Destroy();
	}

	Result RenderPass::GetRenderTargetView(uint32_t index, grfx::RenderTargetView** ppView) const
	{
		if (!IsIndexInRange(index, mRenderTargetViews)) {
			return ERROR_OUT_OF_RANGE;
		}
		*ppView = mRenderTargetViews[index];
		return SUCCESS;
	}

	Result RenderPass::GetDepthStencilView(grfx::DepthStencilView** ppView) const
	{
		if (!mDepthStencilView) {
			return ERROR_ELEMENT_NOT_FOUND;
		}
		*ppView = mDepthStencilView;
		return SUCCESS;
	}

	Result RenderPass::GetRenderTargetImage(uint32_t index, grfx::Image** ppImage) const
	{
		if (!IsIndexInRange(index, mRenderTargetImages)) {
			return ERROR_OUT_OF_RANGE;
		}
		*ppImage = mRenderTargetImages[index];
		return SUCCESS;
	}

	Result RenderPass::GetDepthStencilImage(grfx::Image** ppImage) const
	{
		if (!mDepthStencilImage) {
			return ERROR_ELEMENT_NOT_FOUND;
		}
		*ppImage = mDepthStencilImage;
		return SUCCESS;
	}

	grfx::RenderTargetViewPtr RenderPass::GetRenderTargetView(uint32_t index) const
	{
		grfx::RenderTargetViewPtr object;
		GetRenderTargetView(index, &object);
		return object;
	}

	grfx::DepthStencilViewPtr RenderPass::GetDepthStencilView() const
	{
		grfx::DepthStencilViewPtr object;
		GetDepthStencilView(&object);
		return object;
	}

	grfx::ImagePtr RenderPass::GetRenderTargetImage(uint32_t index) const
	{
		grfx::ImagePtr object;
		GetRenderTargetImage(index, &object);
		return object;
	}

	grfx::ImagePtr RenderPass::GetDepthStencilImage() const
	{
		grfx::ImagePtr object;
		GetDepthStencilImage(&object);
		return object;
	}

	uint32_t RenderPass::GetRenderTargetImageIndex(const grfx::Image* pImage) const
	{
		uint32_t index = UINT32_MAX;
		for (uint32_t i = 0; i < CountU32(mRenderTargetImages); ++i) {
			if (mRenderTargetImages[i] == pImage) {
				index = i;
				break;
			}
		}
		return index;
	}

	Result RenderPass::DisownRenderTargetView(uint32_t index, grfx::RenderTargetView** ppView)
	{
		if (IsIndexInRange(index, mRenderTargetViews)) {
			return ERROR_OUT_OF_RANGE;
		}
		if (mRenderTargetViews[index]->GetOwnership() == grfx::OWNERSHIP_RESTRICTED) {
			return ERROR_GRFX_OBJECT_OWNERSHIP_IS_RESTRICTED;
		}

		mRenderTargetViews[index]->SetOwnership(grfx::OWNERSHIP_REFERENCE);

		if (!IsNull(ppView)) {
			*ppView = mRenderTargetViews[index];
		}
		return SUCCESS;
	}

	Result RenderPass::DisownDepthStencilView(grfx::DepthStencilView** ppView)
	{
		if (!mDepthStencilView) {
			return ERROR_ELEMENT_NOT_FOUND;
		}
		if (mDepthStencilView->GetOwnership() == grfx::OWNERSHIP_RESTRICTED) {
			return ERROR_GRFX_OBJECT_OWNERSHIP_IS_RESTRICTED;
		}

		mDepthStencilView->SetOwnership(grfx::OWNERSHIP_REFERENCE);

		if (!IsNull(ppView)) {
			*ppView = mDepthStencilView;
		}
		return SUCCESS;
	}

	Result RenderPass::DisownRenderTargetImage(uint32_t index, grfx::Image** ppImage)
	{
		if (IsIndexInRange(index, mRenderTargetImages)) {
			return ERROR_OUT_OF_RANGE;
		}
		if (mRenderTargetImages[index]->GetOwnership() == grfx::OWNERSHIP_RESTRICTED) {
			return ERROR_GRFX_OBJECT_OWNERSHIP_IS_RESTRICTED;
		}

		mRenderTargetImages[index]->SetOwnership(grfx::OWNERSHIP_REFERENCE);

		if (!IsNull(ppImage)) {
			*ppImage = mRenderTargetImages[index];
		}
		return SUCCESS;
	}

	Result RenderPass::DisownDepthStencilImage(grfx::Image** ppImage)
	{
		if (!mDepthStencilImage) {
			return ERROR_ELEMENT_NOT_FOUND;
		}
		if (mDepthStencilImage->GetOwnership() == grfx::OWNERSHIP_RESTRICTED) {
			return ERROR_GRFX_OBJECT_OWNERSHIP_IS_RESTRICTED;
		}

		mDepthStencilImage->SetOwnership(grfx::OWNERSHIP_REFERENCE);

		if (!IsNull(ppImage)) {
			*ppImage = mDepthStencilImage;
		}
		return SUCCESS;
	}

} // namespace grfx

#pragma endregion

#pragma region Command

namespace grfx {

	CommandType CommandPool::GetCommandType() const
	{
		return mCreateInfo.pQueue->GetCommandType();
	}

	bool CommandBuffer::HasActiveRenderPass() const
	{
		return !IsNull(mCurrentRenderPass) || mDynamicRenderPassActive;
	}

	void CommandBuffer::BeginRenderPass(const grfx::RenderPassBeginInfo* pBeginInfo)
	{
		if (HasActiveRenderPass()) {
			ASSERT_MSG(false, "cannot nest render passes");
		}

		if (pBeginInfo->pRenderPass->HasLoadOpClear()) {
			uint32_t rtvCount = pBeginInfo->pRenderPass->GetRenderTargetCount();
			uint32_t clearCount = pBeginInfo->RTVClearCount;
			if (clearCount < rtvCount) {
				ASSERT_MSG(false, "clear count cannot less than RTV count");
			}
		}

		BeginRenderPassImpl(pBeginInfo);
		mCurrentRenderPass = pBeginInfo->pRenderPass;
	}

	void CommandBuffer::EndRenderPass()
	{
		if (IsNull(mCurrentRenderPass)) {
			ASSERT_MSG(false, "no render pass to end");
		}
		ASSERT_MSG(!mDynamicRenderPassActive, "Dynamic render pass active, use EndRendering instead");

		EndRenderPassImpl();
		mCurrentRenderPass = nullptr;
	}

	void CommandBuffer::BeginRendering(const grfx::RenderingInfo* pRenderingInfo)
	{
		ASSERT_NULL_ARG(pRenderingInfo);
		ASSERT_MSG(!HasActiveRenderPass(), "cannot nest render passes");

		BeginRenderingImpl(pRenderingInfo);
		mDynamicRenderPassActive = true;
		mDynamicRenderPassInfo.mRenderArea = pRenderingInfo->renderArea;
		auto views = pRenderingInfo->pRenderTargetViews;
		for (uint32_t i = 0; i < pRenderingInfo->renderTargetCount; ++i) {
			const grfx::RenderTargetViewPtr& rtv = views[i];
			mDynamicRenderPassInfo.mRenderTargetViews.push_back(rtv);
		}
		mDynamicRenderPassInfo.mDepthStencilView = pRenderingInfo->pDepthStencilView;
	}

	void CommandBuffer::EndRendering()
	{
		ASSERT_MSG(mDynamicRenderPassActive, "no render pass to end")
			ASSERT_MSG(IsNull(mCurrentRenderPass), "Non-dynamic render pass active, use EndRendering instead");

		EndRenderingImpl();
		mDynamicRenderPassActive = false;
		mDynamicRenderPassInfo = {};
	}

	void CommandBuffer::BeginRenderPass(const grfx::RenderPass* pRenderPass)
	{
		ASSERT_NULL_ARG(pRenderPass);

		grfx::RenderPassBeginInfo beginInfo = {};
		beginInfo.pRenderPass = pRenderPass;
		beginInfo.renderArea = pRenderPass->GetRenderArea();

		beginInfo.RTVClearCount = pRenderPass->GetRenderTargetCount();
		for (uint32_t i = 0; i < beginInfo.RTVClearCount; ++i) {
			grfx::ImagePtr rtvImage = pRenderPass->GetRenderTargetImage(i);
			beginInfo.RTVClearValues[i] = rtvImage->GetRTVClearValue();
		}

		grfx::ImagePtr dsvImage = pRenderPass->GetDepthStencilImage();
		if (dsvImage) {
			beginInfo.DSVClearValue = dsvImage->GetDSVClearValue();
		}

		BeginRenderPass(&beginInfo);
	}

	void CommandBuffer::BeginRenderPass(
		const grfx::DrawPass* pDrawPass,
		const grfx::DrawPassClearFlags& clearFlags)
	{
		ASSERT_NULL_ARG(pDrawPass);

		grfx::RenderPassBeginInfo beginInfo = {};
		pDrawPass->PrepareRenderPassBeginInfo(clearFlags, &beginInfo);

		BeginRenderPass(&beginInfo);
	}

	void CommandBuffer::TransitionImageLayout(
		grfx::RenderPass* pRenderPass,
		grfx::ResourceState renderTargetBeforeState,
		grfx::ResourceState renderTargetAfterState,
		grfx::ResourceState depthStencilTargetBeforeState,
		grfx::ResourceState depthStencilTargetAfterState)
	{
		ASSERT_NULL_ARG(pRenderPass);

		const uint32_t n = pRenderPass->GetRenderTargetCount();
		for (uint32_t i = 0; i < n; ++i) {
			grfx::ImagePtr renderTarget;
			Result         ppxres = pRenderPass->GetRenderTargetImage(i, &renderTarget);
			ASSERT_MSG(ppxres == SUCCESS, "failed getting render pass render target");

			TransitionImageLayout(
				renderTarget,
				ALL_SUBRESOURCES,
				renderTargetBeforeState,
				renderTargetAfterState);
		}

		if (pRenderPass->HasDepthStencil()) {
			grfx::ImagePtr depthStencil;
			Result         ppxres = pRenderPass->GetDepthStencilImage(&depthStencil);
			ASSERT_MSG(ppxres == SUCCESS, "failed getting render pass depth/stencil");

			TransitionImageLayout(
				depthStencil,
				ALL_SUBRESOURCES,
				depthStencilTargetBeforeState,
				depthStencilTargetAfterState);
		}
	}

	void CommandBuffer::TransitionImageLayout(
		const grfx::Texture* pTexture,
		uint32_t             mipLevel,
		uint32_t             mipLevelCount,
		uint32_t             arrayLayer,
		uint32_t             arrayLayerCount,
		grfx::ResourceState  beforeState,
		grfx::ResourceState  afterState,
		const grfx::Queue* pSrcQueue,
		const grfx::Queue* pDstQueue)
	{
		TransitionImageLayout(
			pTexture->GetImage(),
			mipLevel,
			mipLevelCount,
			arrayLayer,
			arrayLayerCount,
			beforeState,
			afterState,
			pSrcQueue,
			pDstQueue);
	}

	void CommandBuffer::TransitionImageLayout(
		grfx::DrawPass* pDrawPass,
		grfx::ResourceState renderTargetBeforeState,
		grfx::ResourceState renderTargetAfterState,
		grfx::ResourceState depthStencilTargetBeforeState,
		grfx::ResourceState depthStencilTargetAfterState)
	{
		ASSERT_NULL_ARG(pDrawPass);

		const uint32_t n = pDrawPass->GetRenderTargetCount();
		for (uint32_t i = 0; i < n; ++i) {
			grfx::TexturePtr renderTarget;
			Result           ppxres = pDrawPass->GetRenderTargetTexture(i, &renderTarget);
			ASSERT_MSG(ppxres == SUCCESS, "failed getting draw pass render target");

			TransitionImageLayout(
				renderTarget->GetImage(),
				ALL_SUBRESOURCES,
				renderTargetBeforeState,
				renderTargetAfterState);
		}

		if (pDrawPass->HasDepthStencil()) {
			grfx::TexturePtr depthSencil;
			Result           ppxres = pDrawPass->GetDepthStencilTexture(&depthSencil);
			ASSERT_MSG(ppxres == SUCCESS, "failed getting draw pass depth/stencil");

			TransitionImageLayout(
				depthSencil->GetImage(),
				ALL_SUBRESOURCES,
				depthStencilTargetBeforeState,
				depthStencilTargetAfterState);
		}
	}

	void CommandBuffer::SetViewports(const grfx::Viewport& viewport)
	{
		SetViewports(1, &viewport);
	}

	void CommandBuffer::SetScissors(const grfx::Rect& scissor)
	{
		SetScissors(1, &scissor);
	}

	void CommandBuffer::BindIndexBuffer(const grfx::Buffer* pBuffer, grfx::IndexType indexType, uint64_t offset)
	{
		ASSERT_NULL_ARG(pBuffer);

		grfx::IndexBufferView view = {};
		view.pBuffer = pBuffer;
		view.indexType = indexType;
		view.offset = offset;

		BindIndexBuffer(&view);
	}

	void CommandBuffer::BindIndexBuffer(const grfx::Mesh* pMesh, uint64_t offset)
	{
		ASSERT_NULL_ARG(pMesh);

		BindIndexBuffer(pMesh->GetIndexBuffer(), pMesh->GetIndexType(), offset);
	}

	void CommandBuffer::BindVertexBuffers(
		uint32_t                   bufferCount,
		const grfx::Buffer* const* buffers,
		const uint32_t* pStrides,
		const uint64_t* pOffsets)
	{
		ASSERT_NULL_ARG(buffers);
		ASSERT_NULL_ARG(pStrides);
		ASSERT_MSG(bufferCount < MAX_VERTEX_BINDINGS, "bufferCount exceeds MAX_VERTEX_ATTRIBUTES");

		grfx::VertexBufferView views[MAX_VERTEX_BINDINGS] = {};
		for (uint32_t i = 0; i < bufferCount; ++i) {
			views[i].pBuffer = buffers[i];
			views[i].stride = pStrides[i];
			if (!IsNull(pOffsets)) {
				views[i].offset = pOffsets[i];
			}
		}

		BindVertexBuffers(bufferCount, views);
	}

	void CommandBuffer::BindVertexBuffers(const grfx::Mesh* pMesh, const uint64_t* pOffsets)
	{
		ASSERT_NULL_ARG(pMesh);

		const grfx::Buffer* buffers[MAX_VERTEX_BINDINGS] = { nullptr };
		uint32_t            strides[MAX_VERTEX_BINDINGS] = { 0 };

		uint32_t bufferCount = pMesh->GetVertexBufferCount();
		for (uint32_t i = 0; i < bufferCount; ++i) {
			buffers[i] = pMesh->GetVertexBuffer(i);
			strides[i] = pMesh->GetVertexBufferDescription(i)->stride;
		}

		BindVertexBuffers(bufferCount, buffers, strides, pOffsets);
	}

	void CommandBuffer::Draw(const grfx::FullscreenQuad* pQuad, uint32_t setCount, const grfx::DescriptorSet* const* ppSets)
	{
		BindGraphicsDescriptorSets(pQuad->GetPipelineInterface(), setCount, ppSets);
		BindGraphicsPipeline(pQuad->GetPipeline());
		Draw(3, 1);
	}

	void CommandBuffer::PushGraphicsUniformBuffer(
		const grfx::PipelineInterface* pInterface,
		uint32_t                       binding,
		uint32_t                       set,
		uint32_t                       bufferOffset,
		const grfx::Buffer* pBuffer)
	{
		PushDescriptorImpl(
			grfx::COMMAND_TYPE_GRAPHICS,          // pipelineBindPoint
			pInterface,                           // pInterface
			grfx::DESCRIPTOR_TYPE_UNIFORM_BUFFER, // descriptorType
			binding,                              // binding
			set,                                  // set
			bufferOffset,                         // bufferOffset
			pBuffer,                              // pBuffer
			nullptr,                              // pSampledImageView
			nullptr,                              // pStorageImageView
			nullptr);                             // pSampler
	}

	void CommandBuffer::PushGraphicsStructuredBuffer(
		const grfx::PipelineInterface* pInterface,
		uint32_t                       binding,
		uint32_t                       set,
		uint32_t                       bufferOffset,
		const grfx::Buffer* pBuffer)
	{
		PushDescriptorImpl(
			grfx::COMMAND_TYPE_GRAPHICS,                // pipelineBindPoint
			pInterface,                                 // pInterface
			grfx::DESCRIPTOR_TYPE_RO_STRUCTURED_BUFFER, // descriptorType
			binding,                                    // binding
			set,                                        // set
			bufferOffset,                               // bufferOffset
			pBuffer,                                    // pBuffer
			nullptr,                                    // pSampledImageView
			nullptr,                                    // pStorageImageView
			nullptr);                                   // pSampler
	}

	void CommandBuffer::PushGraphicsStorageBuffer(
		const grfx::PipelineInterface* pInterface,
		uint32_t                       binding,
		uint32_t                       set,
		uint32_t                       bufferOffset,
		const grfx::Buffer* pBuffer)
	{
		PushDescriptorImpl(
			grfx::COMMAND_TYPE_GRAPHICS,                // pipelineBindPoint
			pInterface,                                 // pInterface
			grfx::DESCRIPTOR_TYPE_RW_STRUCTURED_BUFFER, // descriptorType
			binding,                                    // binding
			set,                                        // set
			bufferOffset,                               // bufferOffset
			pBuffer,                                    // pBuffer
			nullptr,                                    // pSampledImageView
			nullptr,                                    // pStorageImageView
			nullptr);                                   // pSampler
	}

	void CommandBuffer::PushGraphicsSampledImage(
		const grfx::PipelineInterface* pInterface,
		uint32_t                       binding,
		uint32_t                       set,
		const grfx::SampledImageView* pView)
	{
		PushDescriptorImpl(
			grfx::COMMAND_TYPE_GRAPHICS,         // pipelineBindPoint
			pInterface,                          // pInterface
			grfx::DESCRIPTOR_TYPE_SAMPLED_IMAGE, // descriptorType
			binding,                             // binding
			set,                                 // set
			0,                                   // bufferOffset
			nullptr,                             // pBuffer
			pView,                               // pSampledImageView
			nullptr,                             // pStorageImageView
			nullptr);                            // pSampler
	}

	void CommandBuffer::PushGraphicsStorageImage(
		const grfx::PipelineInterface* pInterface,
		uint32_t                       binding,
		uint32_t                       set,
		const grfx::StorageImageView* pView)
	{
		PushDescriptorImpl(
			grfx::COMMAND_TYPE_GRAPHICS,         // pipelineBindPoint
			pInterface,                          // pInterface
			grfx::DESCRIPTOR_TYPE_STORAGE_IMAGE, // descriptorType
			binding,                             // binding
			set,                                 // set
			0,                                   // bufferOffset
			nullptr,                             // pBuffer
			nullptr,                             // pSampledImageView
			pView,                               // pStorageImageView
			nullptr);                            // pSampler
	}

	void CommandBuffer::PushGraphicsSampler(
		const grfx::PipelineInterface* pInterface,
		uint32_t                       binding,
		uint32_t                       set,
		const grfx::Sampler* pSampler)
	{
		PushDescriptorImpl(
			grfx::COMMAND_TYPE_GRAPHICS,   // pipelineBindPoint
			pInterface,                    // pInterface
			grfx::DESCRIPTOR_TYPE_SAMPLER, // descriptorType
			binding,                       // binding
			set,                           // set
			0,                             // bufferOffset
			nullptr,                       // pBuffer
			nullptr,                       // pSampledImageView
			nullptr,                       // pStorageImageView
			pSampler);                     // pSampler
	}

	void CommandBuffer::PushComputeUniformBuffer(
		const grfx::PipelineInterface* pInterface,
		uint32_t                       binding,
		uint32_t                       set,
		uint32_t                       bufferOffset,
		const grfx::Buffer* pBuffer)
	{
		PushDescriptorImpl(
			grfx::COMMAND_TYPE_COMPUTE,           // pipelineBindPoint
			pInterface,                           // pInterface
			grfx::DESCRIPTOR_TYPE_UNIFORM_BUFFER, // descriptorType
			binding,                              // binding
			set,                                  // set
			bufferOffset,                         // bufferOffset
			pBuffer,                              // pBuffer
			nullptr,                              // pSampledImageView
			nullptr,                              // pStorageImageView
			nullptr);                             // pSampler
	}

	void CommandBuffer::PushComputeStructuredBuffer(
		const grfx::PipelineInterface* pInterface,
		uint32_t                       binding,
		uint32_t                       set,
		uint32_t                       bufferOffset,
		const grfx::Buffer* pBuffer)
	{
		PushDescriptorImpl(
			grfx::COMMAND_TYPE_COMPUTE,                 // pipelineBindPoint
			pInterface,                                 // pInterface
			grfx::DESCRIPTOR_TYPE_RO_STRUCTURED_BUFFER, // descriptorType
			binding,                                    // binding
			set,                                        // set
			bufferOffset,                               // bufferOffset
			pBuffer,                                    // pBuffer
			nullptr,                                    // pSampledImageView
			nullptr,                                    // pStorageImageView
			nullptr);                                   // pSampler
	}

	void CommandBuffer::PushComputeStorageBuffer(
		const grfx::PipelineInterface* pInterface,
		uint32_t                       binding,
		uint32_t                       set,
		uint32_t                       bufferOffset,
		const grfx::Buffer* pBuffer)
	{
		PushDescriptorImpl(
			grfx::COMMAND_TYPE_COMPUTE,                 // pipelineBindPoint
			pInterface,                                 // pInterface
			grfx::DESCRIPTOR_TYPE_RW_STRUCTURED_BUFFER, // descriptorType
			binding,                                    // binding
			set,                                        // set
			bufferOffset,                               // bufferOffset
			pBuffer,                                    // pBuffer
			nullptr,                                    // pSampledImageView
			nullptr,                                    // pStorageImageView
			nullptr);                                   // pSampler
	}

	void CommandBuffer::PushComputeSampledImage(
		const grfx::PipelineInterface* pInterface,
		uint32_t                       binding,
		uint32_t                       set,
		const grfx::SampledImageView* pView)
	{
		PushDescriptorImpl(
			grfx::COMMAND_TYPE_COMPUTE,          // pipelineBindPoint
			pInterface,                          // pInterface
			grfx::DESCRIPTOR_TYPE_SAMPLED_IMAGE, // descriptorType
			binding,                             // binding
			set,                                 // set
			0,                                   // bufferOffset
			nullptr,                             // pBuffer
			pView,                               // pSampledImageView
			nullptr,                             // pStorageImageView
			nullptr);                            // pSampler
	}

	void CommandBuffer::PushComputeStorageImage(
		const grfx::PipelineInterface* pInterface,
		uint32_t                       binding,
		uint32_t                       set,
		const grfx::StorageImageView* pView)
	{
		PushDescriptorImpl(
			grfx::COMMAND_TYPE_COMPUTE,          // pipelineBindPoint
			pInterface,                          // pInterface
			grfx::DESCRIPTOR_TYPE_STORAGE_IMAGE, // descriptorType
			binding,                             // binding
			set,                                 // set
			0,                                   // bufferOffset
			nullptr,                             // pBuffer
			nullptr,                             // pSampledImageView
			pView,                               // pStorageImageView
			nullptr);                            // pSampler
	}

	void CommandBuffer::PushComputeSampler(
		const grfx::PipelineInterface* pInterface,
		uint32_t                       binding,
		uint32_t                       set,
		const grfx::Sampler* pSampler)
	{
		PushDescriptorImpl(
			grfx::COMMAND_TYPE_COMPUTE,    // pipelineBindPoint
			pInterface,                    // pInterface
			grfx::DESCRIPTOR_TYPE_SAMPLER, // descriptorType
			binding,                       // binding
			set,                           // set
			0,                             // bufferOffset
			nullptr,                       // pBuffer
			nullptr,                       // pSampledImageView
			nullptr,                       // pStorageImageView
			pSampler);                     // pSampler
	}

} // namespace grfx

#pragma endregion

#pragma region Queue

namespace grfx {

	Result Queue::CreateCommandBuffer(
		grfx::CommandBuffer** ppCommandBuffer,
		uint32_t              resourceDescriptorCount,
		uint32_t              samplerDescriptorCount)
	{
		std::lock_guard<std::mutex> lock(mCommandSetMutex);

		CommandSet set = {};

		grfx::CommandPoolCreateInfo ci = {};
		ci.pQueue = this;

		Result ppxres = GetDevice()->CreateCommandPool(&ci, &set.commandPool);
		if (Failed(ppxres)) {
			return ppxres;
		}

		ppxres = GetDevice()->AllocateCommandBuffer(set.commandPool, &set.commandBuffer, resourceDescriptorCount, samplerDescriptorCount);
		if (Failed(ppxres)) {
			GetDevice()->DestroyCommandPool(set.commandPool);
			return ppxres;
		}

		*ppCommandBuffer = set.commandBuffer;

		mCommandSets.push_back(set);

		return SUCCESS;
	}

	void Queue::DestroyCommandBuffer(const grfx::CommandBuffer* pCommandBuffer)
	{
		std::lock_guard<std::mutex> lock(mCommandSetMutex);

		auto it = std::find_if(
			std::begin(mCommandSets),
			std::end(mCommandSets),
			[pCommandBuffer](const CommandSet& elem) -> bool {
				bool isSame = (elem.commandBuffer.Get() == pCommandBuffer);
				return isSame; });
		if (it == std::end(mCommandSets)) {
			return;
		}

		CommandSet& set = *it;

		GetDevice()->FreeCommandBuffer(set.commandBuffer);
		GetDevice()->DestroyCommandPool(set.commandPool);

		RemoveElementIf(
			mCommandSets,
			[set](const CommandSet& elem) -> bool {
				bool isSamePool = (elem.commandPool == set.commandPool);
				bool isSameBuffer = (elem.commandBuffer == set.commandBuffer);
				bool isSame = isSamePool && isSameBuffer;
				return isSame; });
	}

	Result Queue::CopyBufferToBuffer(
		const grfx::BufferToBufferCopyInfo* pCopyInfo,
		grfx::Buffer* pSrcBuffer,
		grfx::Buffer* pDstBuffer,
		grfx::ResourceState                 stateBefore,
		grfx::ResourceState                 stateAfter)
	{
		grfx::ScopeDestroyer SCOPED_DESTROYER(GetDevice());

		// Create command buffer
		grfx::CommandBufferPtr cmd;
		Result                 ppxres = CreateCommandBuffer(&cmd, 0, 0);
		if (Failed(ppxres)) {
			return ppxres;
		}
		SCOPED_DESTROYER.AddObject(this, cmd);

		// Build command buffer
		{
			ppxres = cmd->Begin();
			if (Failed(ppxres)) {
				return ppxres;
			}

			cmd->BufferResourceBarrier(pDstBuffer, stateBefore, grfx::RESOURCE_STATE_COPY_DST);
			cmd->CopyBufferToBuffer(pCopyInfo, pSrcBuffer, pDstBuffer);
			cmd->BufferResourceBarrier(pDstBuffer, grfx::RESOURCE_STATE_COPY_DST, stateAfter);

			ppxres = cmd->End();
			if (Failed(ppxres)) {
				return ppxres;
			}
		}

		// Submit command buffer
		grfx::SubmitInfo submit;
		submit.commandBufferCount = 1;
		submit.ppCommandBuffers = &cmd;
		//
		ppxres = Submit(&submit);
		if (Failed(ppxres)) {
			return ppxres;
		}

		// Wait work completion
		ppxres = WaitIdle();
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	Result Queue::CopyBufferToImage(
		const std::vector<grfx::BufferToImageCopyInfo>& pCopyInfos,
		grfx::Buffer* pSrcBuffer,
		grfx::Image* pDstImage,
		uint32_t                                        mipLevel,
		uint32_t                                        mipLevelCount,
		uint32_t                                        arrayLayer,
		uint32_t                                        arrayLayerCount,
		grfx::ResourceState                             stateBefore,
		grfx::ResourceState                             stateAfter)
	{
		grfx::ScopeDestroyer SCOPED_DESTROYER(GetDevice());

		// Create command buffer
		grfx::CommandBufferPtr cmd;
		Result                 ppxres = CreateCommandBuffer(&cmd, 0, 0);
		if (Failed(ppxres)) {
			return ppxres;
		}
		SCOPED_DESTROYER.AddObject(this, cmd);

		// Build command buffer
		{
			ppxres = cmd->Begin();
			if (Failed(ppxres)) {
				return ppxres;
			}

			cmd->TransitionImageLayout(pDstImage, ALL_SUBRESOURCES, stateBefore, grfx::RESOURCE_STATE_COPY_DST);
			cmd->CopyBufferToImage(pCopyInfos, pSrcBuffer, pDstImage);
			cmd->TransitionImageLayout(pDstImage, ALL_SUBRESOURCES, grfx::RESOURCE_STATE_COPY_DST, stateAfter);

			ppxres = cmd->End();
			if (Failed(ppxres)) {
				return ppxres;
			}
		}

		// Submit command buffer
		grfx::SubmitInfo submit;
		submit.commandBufferCount = 1;
		submit.ppCommandBuffers = &cmd;
		//
		ppxres = Submit(&submit);
		if (Failed(ppxres)) {
			return ppxres;
		}

		// Wait work completion
		ppxres = WaitIdle();
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

} // namespace grfx

#pragma endregion

#pragma region Scope

#define NULL_ARGUMENT_MSG   "unexpected null argument"
#define WRONG_OWNERSHIP_MSG "object has invalid ownership value"

namespace grfx {

	ScopeDestroyer::ScopeDestroyer(grfx::Device* pDevice)
		: mDevice(pDevice)
	{
		ASSERT_MSG(!IsNull(pDevice), NULL_ARGUMENT_MSG);
	}

	ScopeDestroyer::~ScopeDestroyer()
	{
		for (auto& object : mImages) {
			if (object->GetOwnership() == grfx::OWNERSHIP_EXCLUSIVE) {
				mDevice->DestroyImage(object);
			}
		}
		mImages.clear();

		for (auto& object : mBuffers) {
			if (object->GetOwnership() == grfx::OWNERSHIP_EXCLUSIVE) {
				mDevice->DestroyBuffer(object);
			}
		}
		mBuffers.clear();

		for (auto& object : mMeshes) {
			if (object->GetOwnership() == grfx::OWNERSHIP_EXCLUSIVE) {
				mDevice->DestroyMesh(object);
			}
		}
		mMeshes.clear();

		for (auto& object : mTextures) {
			if (object->GetOwnership() == grfx::OWNERSHIP_EXCLUSIVE) {
				mDevice->DestroyTexture(object);
			}
		}
		mTextures.clear();

		for (auto& object : mSamplers) {
			if (object->GetOwnership() == grfx::OWNERSHIP_EXCLUSIVE) {
				mDevice->DestroySampler(object);
			}
		}
		mSamplers.clear();

		for (auto& object : mSampledImageViews) {
			if (object->GetOwnership() == grfx::OWNERSHIP_EXCLUSIVE) {
				mDevice->DestroySampledImageView(object);
			}
		}
		mSampledImageViews.clear();

		for (auto& object : mTransientCommandBuffers) {
			if (object.second->GetOwnership() == grfx::OWNERSHIP_EXCLUSIVE) {
				object.first->DestroyCommandBuffer(object.second);
			}
		}
	}

	Result ScopeDestroyer::AddObject(grfx::Image* pObject)
	{
		if (IsNull(pObject)) {
			ASSERT_MSG(false, NULL_ARGUMENT_MSG);
			return ERROR_UNEXPECTED_NULL_ARGUMENT;
		}
		if (pObject->GetOwnership() != grfx::OWNERSHIP_REFERENCE) {
			ASSERT_MSG(false, WRONG_OWNERSHIP_MSG);
			return ERROR_GRFX_INVALID_OWNERSHIP;
		}
		pObject->SetOwnership(grfx::OWNERSHIP_EXCLUSIVE);
		mImages.push_back(pObject);
		return SUCCESS;
	}

	Result ScopeDestroyer::AddObject(grfx::Buffer* pObject)
	{
		if (IsNull(pObject)) {
			ASSERT_MSG(false, NULL_ARGUMENT_MSG);
			return ERROR_UNEXPECTED_NULL_ARGUMENT;
		}
		if (pObject->GetOwnership() != grfx::OWNERSHIP_REFERENCE) {
			ASSERT_MSG(false, WRONG_OWNERSHIP_MSG);
			return ERROR_GRFX_INVALID_OWNERSHIP;
		}
		pObject->SetOwnership(grfx::OWNERSHIP_EXCLUSIVE);
		mBuffers.push_back(pObject);
		return SUCCESS;
	}

	Result ScopeDestroyer::AddObject(grfx::Mesh* pObject)
	{
		if (IsNull(pObject)) {
			ASSERT_MSG(false, NULL_ARGUMENT_MSG);
			return ERROR_UNEXPECTED_NULL_ARGUMENT;
		}
		if (pObject->GetOwnership() != grfx::OWNERSHIP_REFERENCE) {
			ASSERT_MSG(false, WRONG_OWNERSHIP_MSG);
			return ERROR_GRFX_INVALID_OWNERSHIP;
		}
		pObject->SetOwnership(grfx::OWNERSHIP_EXCLUSIVE);
		mMeshes.push_back(pObject);
		return SUCCESS;
	}

	Result ScopeDestroyer::AddObject(grfx::Texture* pObject)
	{
		if (IsNull(pObject)) {
			ASSERT_MSG(false, NULL_ARGUMENT_MSG);
			return ERROR_UNEXPECTED_NULL_ARGUMENT;
		}
		if (pObject->GetOwnership() != grfx::OWNERSHIP_REFERENCE) {
			ASSERT_MSG(false, WRONG_OWNERSHIP_MSG);
			return ERROR_GRFX_INVALID_OWNERSHIP;
		}
		pObject->SetOwnership(grfx::OWNERSHIP_EXCLUSIVE);
		mTextures.push_back(pObject);
		return SUCCESS;
	}

	Result ScopeDestroyer::AddObject(grfx::Sampler* pObject)
	{
		if (IsNull(pObject)) {
			ASSERT_MSG(false, NULL_ARGUMENT_MSG);
			return ERROR_UNEXPECTED_NULL_ARGUMENT;
		}
		if (pObject->GetOwnership() != grfx::OWNERSHIP_REFERENCE) {
			ASSERT_MSG(false, WRONG_OWNERSHIP_MSG);
			return ERROR_GRFX_INVALID_OWNERSHIP;
		}
		pObject->SetOwnership(grfx::OWNERSHIP_EXCLUSIVE);
		mSamplers.push_back(pObject);
		return SUCCESS;
	}

	Result ScopeDestroyer::AddObject(grfx::SampledImageView* pObject)
	{
		if (IsNull(pObject)) {
			ASSERT_MSG(false, NULL_ARGUMENT_MSG);
			return ERROR_UNEXPECTED_NULL_ARGUMENT;
		}
		if (pObject->GetOwnership() != grfx::OWNERSHIP_REFERENCE) {
			ASSERT_MSG(false, WRONG_OWNERSHIP_MSG);
			return ERROR_GRFX_INVALID_OWNERSHIP;
		}
		pObject->SetOwnership(grfx::OWNERSHIP_EXCLUSIVE);
		mSampledImageViews.push_back(pObject);
		return SUCCESS;
	}

	Result ScopeDestroyer::AddObject(grfx::Queue* pParent, grfx::CommandBuffer* pObject)
	{
		if (IsNull(pParent) || IsNull(pObject)) {
			ASSERT_MSG(false, NULL_ARGUMENT_MSG);
			return ERROR_UNEXPECTED_NULL_ARGUMENT;
		}
		if (pObject->GetOwnership() != grfx::OWNERSHIP_REFERENCE) {
			ASSERT_MSG(false, WRONG_OWNERSHIP_MSG);
			return ERROR_GRFX_INVALID_OWNERSHIP;
		}
		pObject->SetOwnership(grfx::OWNERSHIP_EXCLUSIVE);
		mTransientCommandBuffers.push_back(std::make_pair(pParent, pObject));
		return SUCCESS;
	}

	void ScopeDestroyer::ReleaseAll()
	{
		mImages.clear();
		mBuffers.clear();
		mMeshes.clear();
		mTextures.clear();
		mSamplers.clear();
		mSampledImageViews.clear();
		mTransientCommandBuffers.clear();
	}

} // namespace grfx

#pragma endregion

#pragma region FullscreenQuad

namespace grfx {

	Result FullscreenQuad::CreateApiObjects(const grfx::FullscreenQuadCreateInfo* pCreateInfo)
	{
		ASSERT_NULL_ARG(pCreateInfo);

		Result ppxres = ERROR_FAILED;

		// Pipeline interface
		{
			grfx::PipelineInterfaceCreateInfo createInfo = {};
			createInfo.setCount = pCreateInfo->setCount;
			for (uint32_t i = 0; i < createInfo.setCount; ++i) {
				createInfo.sets[i].set = pCreateInfo->sets[i].set;
				createInfo.sets[i].pLayout = pCreateInfo->sets[i].pLayout;
			}

			ppxres = GetDevice()->CreatePipelineInterface(&createInfo, &mPipelineInterface);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "failed creating pipeline interface");
				return ppxres;
			}
		}

		// Pipeline
		{
			grfx::GraphicsPipelineCreateInfo2 createInfo = {};
			createInfo.VS = { pCreateInfo->VS, "vsmain" };
			createInfo.PS = { pCreateInfo->PS, "psmain" };
			createInfo.depthReadEnable = false;
			createInfo.depthWriteEnable = false;
			createInfo.pPipelineInterface = mPipelineInterface;
			createInfo.outputState.depthStencilFormat = pCreateInfo->depthStencilFormat;
			// Render target formats
			createInfo.outputState.renderTargetCount = pCreateInfo->renderTargetCount;
			for (uint32_t i = 0; i < createInfo.outputState.renderTargetCount; ++i) {
				createInfo.blendModes[i] = grfx::BLEND_MODE_NONE;
				createInfo.outputState.renderTargetFormats[i] = pCreateInfo->renderTargetFormats[i];
			}

			ppxres = GetDevice()->CreateGraphicsPipeline(&createInfo, &mPipeline);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "failed creating graphics pipeline");
				return ppxres;
			}
		}

		return SUCCESS;
	}

	void FullscreenQuad::DestroyApiObjects()
	{
		if (mPipeline) {
			GetDevice()->DestroyGraphicsPipeline(mPipeline);
			mPipeline.Reset();
		}

		if (mPipelineInterface) {
			GetDevice()->DestroyPipelineInterface(mPipelineInterface);
			mPipelineInterface.Reset();
		}
	}

} // namespace grfx

#pragma endregion

#pragma region Mesh

namespace grfx {

	// -------------------------------------------------------------------------------------------------
	// MeshCreateInfo
	// -------------------------------------------------------------------------------------------------
	MeshCreateInfo::MeshCreateInfo(const Geometry& geometry)
	{
		this->indexType = geometry.GetIndexType();
		this->indexCount = geometry.GetIndexCount();
		this->vertexCount = geometry.GetVertexCount();
		this->vertexBufferCount = geometry.GetVertexBufferCount();
		this->memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;
		std::memset(&this->vertexBuffers, 0, MAX_VERTEX_BINDINGS * sizeof(grfx::MeshVertexBufferDescription));

		const uint32_t bindingCount = geometry.GetVertexBindingCount();
		for (uint32_t bindingIdx = 0; bindingIdx < bindingCount; ++bindingIdx) {
			const uint32_t attrCount = geometry.GetVertexBinding(bindingIdx)->GetAttributeCount();

			this->vertexBuffers[bindingIdx].attributeCount = attrCount;
			for (uint32_t attrIdx = 0; attrIdx < attrCount; ++attrIdx) {
				const grfx::VertexAttribute* pAttribute = nullptr;
				geometry.GetVertexBinding(bindingIdx)->GetAttribute(attrIdx, &pAttribute);

				this->vertexBuffers[bindingIdx].attributes[attrIdx].format = pAttribute->format;
				this->vertexBuffers[bindingIdx].attributes[attrIdx].stride = 0; // Calculated later
				this->vertexBuffers[bindingIdx].attributes[attrIdx].vertexSemantic = pAttribute->semantic;
			}

			this->vertexBuffers[bindingIdx].vertexInputRate = grfx::VERTEX_INPUT_RATE_VERTEX;
		}
	}

	// -------------------------------------------------------------------------------------------------
	// Mesh
	// -------------------------------------------------------------------------------------------------
	Result Mesh::CreateApiObjects(const grfx::MeshCreateInfo* pCreateInfo)
	{
		// Bail if both index count and vertex count are 0
		if ((pCreateInfo->indexCount == 0) && (pCreateInfo->vertexCount) == 0) {
			return Result::ERROR_GRFX_INVALID_GEOMETRY_CONFIGURATION;
		}
		// Bail if vertexCount is not 0 but vertex buffer count is 0
		if ((pCreateInfo->vertexCount > 0) && (pCreateInfo->vertexBufferCount == 0)) {
			return Result::ERROR_GRFX_INVALID_GEOMETRY_CONFIGURATION;
		}

		// Index buffer
		if (pCreateInfo->indexCount > 0) {
			// Bail if index type doesn't make sense
			if ((pCreateInfo->indexType != grfx::INDEX_TYPE_UINT16) && (pCreateInfo->indexType != grfx::INDEX_TYPE_UINT32)) {
				return Result::ERROR_GRFX_INVALID_INDEX_TYPE;
			}

			grfx::BufferCreateInfo createInfo = {};
			createInfo.size = pCreateInfo->indexCount * grfx::IndexTypeSize(pCreateInfo->indexType);
			createInfo.usageFlags.bits.indexBuffer = true;
			createInfo.usageFlags.bits.transferDst = true;
			createInfo.memoryUsage = pCreateInfo->memoryUsage;
			createInfo.initialState = grfx::RESOURCE_STATE_GENERAL;
			createInfo.ownership = grfx::OWNERSHIP_REFERENCE;

			auto ppxres = GetDevice()->CreateBuffer(&createInfo, &mIndexBuffer);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "create mesh index buffer failed");
				return ppxres;
			}
		}

		// Vertex buffers
		if (pCreateInfo->vertexCount > 0) {
			mVertexBuffers.resize(pCreateInfo->vertexBufferCount);

			// Iterate through all the vertex buffer descriptions and create appropriately sized buffers
			for (uint32_t vbIdx = 0; vbIdx < pCreateInfo->vertexBufferCount; ++vbIdx) {
				// Copy vertex buffer description
				std::memcpy(&mVertexBuffers[vbIdx].second, &pCreateInfo->vertexBuffers[vbIdx], sizeof(MeshVertexBufferDescription));

				auto& vertexBufferDesc = mVertexBuffers[vbIdx].second;
				// Bail if attribute count is 0
				if (vertexBufferDesc.attributeCount == 0) {
					return Result::ERROR_GRFX_INVALID_VERTEX_ATTRIBUTE_COUNT;
				}

				// Calculate vertex stride (if needed) and attribute offsets
				bool calculateVertexStride = (mVertexBuffers[vbIdx].second.stride == 0);
				for (uint32_t attrIdx = 0; attrIdx < vertexBufferDesc.attributeCount; ++attrIdx) {
					auto& attr = vertexBufferDesc.attributes[attrIdx];
					grfx::Format format = attr.format;
					if (format == grfx::FORMAT_UNDEFINED) {
						return Result::ERROR_GRFX_VERTEX_ATTRIBUTE_FORMAT_UNDEFINED;
					}

					auto* pFormatDesc = grfx::GetFormatDescription(format);
					// Bail if the format's size is zero
					if (pFormatDesc->bytesPerTexel == 0) {
						return Result::ERROR_GRFX_INVALID_VERTEX_ATTRIBUTE_STRIDE;
					}
					// Bail if the attribute stride is NOT 0 and less than the format size
					if ((attr.stride != 0) && (attr.stride < pFormatDesc->bytesPerTexel)) {
						return Result::ERROR_GRFX_INVALID_VERTEX_ATTRIBUTE_STRIDE;
					}

					// Calculate stride if needed
					if (attr.stride == 0) {
						attr.stride = pFormatDesc->bytesPerTexel;
					}

					// Set offset
					attr.offset = mVertexBuffers[vbIdx].second.stride;

					// Increment vertex stride
					if (calculateVertexStride) {
						mVertexBuffers[vbIdx].second.stride += attr.stride;
					}
				}

				grfx::BufferCreateInfo createInfo = {};
				createInfo.size = pCreateInfo->vertexCount * mVertexBuffers[vbIdx].second.stride;
				createInfo.usageFlags.bits.vertexBuffer = true;
				createInfo.usageFlags.bits.transferDst = true;
				createInfo.memoryUsage = pCreateInfo->memoryUsage;
				createInfo.initialState = grfx::RESOURCE_STATE_GENERAL;
				createInfo.ownership = grfx::OWNERSHIP_REFERENCE;

				auto ppxres = GetDevice()->CreateBuffer(&createInfo, &mVertexBuffers[vbIdx].first);
				if (Failed(ppxres)) {
					ASSERT_MSG(false, "create mesh vertex buffer failed");
					return ppxres;
				}
			}
		}

		// Derived vertex bindings
		{
			uint32_t location = 0;
			for (uint32_t bufferIndex = 0; bufferIndex < GetVertexBufferCount(); ++bufferIndex) {
				auto pBufferDesc = GetVertexBufferDescription(bufferIndex);

				grfx::VertexBinding binding = grfx::VertexBinding(bufferIndex, pBufferDesc->vertexInputRate);
				binding.SetBinding(bufferIndex);

				for (uint32_t attrIdx = 0; attrIdx < pBufferDesc->attributeCount; ++attrIdx) {
					auto& srcAttr = pBufferDesc->attributes[attrIdx];

					std::string semanticName = SEMANTIC_NAME_CUSTOM;
					// clang-format off
					switch (srcAttr.vertexSemantic) {
					default: break;
					case grfx::VERTEX_SEMANTIC_POSITION: semanticName = SEMANTIC_NAME_POSITION;  break;
					case grfx::VERTEX_SEMANTIC_NORMAL: semanticName = SEMANTIC_NAME_NORMAL;    break;
					case grfx::VERTEX_SEMANTIC_COLOR: semanticName = SEMANTIC_NAME_COLOR;     break;
					case grfx::VERTEX_SEMANTIC_TEXCOORD: semanticName = SEMANTIC_NAME_TEXCOORD;  break;
					case grfx::VERTEX_SEMANTIC_TANGENT: semanticName = SEMANTIC_NAME_TANGENT;   break;
					case grfx::VERTEX_SEMANTIC_BITANGENT: semanticName = SEMANTIC_NAME_BITANGENT; break;
					}
					// clang-format on

					grfx::VertexAttribute attr = {};
					attr.semanticName = semanticName;
					attr.location = location;
					attr.format = srcAttr.format;
					attr.binding = bufferIndex;
					attr.offset = srcAttr.offset;
					attr.inputRate = pBufferDesc->vertexInputRate;
					attr.semantic = srcAttr.vertexSemantic;

					binding.AppendAttribute(attr);

					++location;
				}

				binding.SetStride(pBufferDesc->stride);

				mDerivedVertexBindings.push_back(binding);
			}
		}

		return Result::SUCCESS;
	}

	void Mesh::DestroyApiObjects()
	{
		if (mIndexBuffer) {
			GetDevice()->DestroyBuffer(mIndexBuffer);
		}

		for (auto& elem : mVertexBuffers) {
			GetDevice()->DestroyBuffer(elem.first);
		}
		mVertexBuffers.clear();
	}

	grfx::BufferPtr Mesh::GetVertexBuffer(uint32_t index) const
	{
		const uint32_t vertexBufferCount = CountU32(mVertexBuffers);
		if (index >= vertexBufferCount) {
			return nullptr;
		}
		return mVertexBuffers[index].first;
	}

	const grfx::MeshVertexBufferDescription* Mesh::GetVertexBufferDescription(uint32_t index) const
	{
		const uint32_t vertexBufferCount = CountU32(mVertexBuffers);
		if (index >= vertexBufferCount) {
			return nullptr;
		}
		return &mVertexBuffers[index].second;
	}

} // namespace grfx

#pragma endregion

#pragma region Text Draw

namespace grfx {

	// -------------------------------------------------------------------------------------------------
	// TextureFont
	// -------------------------------------------------------------------------------------------------
	std::string TextureFont::GetDefaultCharacters()
	{
		std::string characters;
		for (char c = 32; c < 127; ++c) {
			characters.push_back(c);
		}
		return characters;
	}

	Result TextureFont::CreateApiObjects(const grfx::TextureFontCreateInfo* pCreateInfo)
	{
		std::string characters = pCreateInfo->characters;
		if (characters.empty()) {
			characters = GetDefaultCharacters();
			mCreateInfo.characters = characters;
		}

		if (!utf8::is_valid(characters.cbegin(), characters.cend())) {
			return ERROR_INVALID_UTF8_STRING;
		}

		// Font metrics
		pCreateInfo->font.GetFontMetrics(pCreateInfo->size, &mFontMetrics);

		// Subpixel shift
		float subpixelShiftX = 0.5f;
		float subpixelShiftY = 0.5f;

		// Get glyph metrics and max bounds
		utf8::iterator<std::string::iterator> it(characters.begin(), characters.begin(), characters.end());
		utf8::iterator<std::string::iterator> it_end(characters.end(), characters.begin(), characters.end());
		bool                                  hasSpace = false;
		while (it != it_end) {
			const uint32_t codepoint = utf8::next(it, it_end);
			GlyphMetrics   metrics = {};
			pCreateInfo->font.GetGlyphMetrics(pCreateInfo->size, codepoint, subpixelShiftX, subpixelShiftY, &metrics);
			mGlyphMetrics.emplace_back(grfx::TextureFontGlyphMetrics{ codepoint, metrics });

			if (!hasSpace) {
				hasSpace = (codepoint == 32);
			}
		}
		if (!hasSpace) {
			const uint32_t codepoint = 32;
			GlyphMetrics   metrics = {};
			pCreateInfo->font.GetGlyphMetrics(pCreateInfo->size, codepoint, subpixelShiftX, subpixelShiftY, &metrics);
			mGlyphMetrics.emplace_back(grfx::TextureFontGlyphMetrics{ codepoint, metrics });
		}

		// Figure out a squarish somewhat texture size
		const size_t  nc = characters.size();
		const int32_t sqrtnc = static_cast<int32_t>(sqrtf(static_cast<float>(nc)) + 0.5f) + 1;
		int32_t       bitmapWidth = 0;
		int32_t       bitmapHeight = 0;
		size_t        glyphIndex = 0;
		for (int32_t i = 0; (i < sqrtnc) && (glyphIndex < nc); ++i) {
			int32_t height = 0;
			int32_t width = 0;
			for (int32_t j = 0; (j < sqrtnc) && (glyphIndex < nc); ++j, ++glyphIndex) {
				const GlyphMetrics& metrics = mGlyphMetrics[glyphIndex].glyphMetrics;
				int32_t             w = (metrics.box.x1 - metrics.box.x0) + 1;
				int32_t             h = (metrics.box.y1 - metrics.box.y0) + 1;
				width = width + w;
				height = std::max<int32_t>(height, h);
			}
			bitmapWidth = std::max<int32_t>(bitmapWidth, width);
			bitmapHeight = bitmapHeight + height;
		}

		// Storage bitmap
		Bitmap bitmap = Bitmap::Create(bitmapWidth, bitmapHeight, Bitmap::Format::FORMAT_R_UINT8);

		// Render glyph bitmaps
		const float    invBitmapWidth = 1.0f / static_cast<float>(bitmapWidth);
		const float    invBitmapHeight = 1.0f / static_cast<float>(bitmapHeight);
		const uint32_t rowStride = bitmap.GetRowStride();
		const uint32_t pixelStride = bitmap.GetPixelStride();
		uint32_t       y = 0;
		glyphIndex = 0;
		for (int32_t i = 0; (i < sqrtnc) && (glyphIndex < nc); ++i) {
			uint32_t x = 0;
			uint32_t height = 0;
			for (int32_t j = 0; (j < sqrtnc) && (glyphIndex < nc); ++j, ++glyphIndex) {
				uint32_t            codepoint = mGlyphMetrics[glyphIndex].codepoint;
				const GlyphMetrics& metrics = mGlyphMetrics[glyphIndex].glyphMetrics;
				uint32_t            w = static_cast<uint32_t>(metrics.box.x1 - metrics.box.x0) + 1;
				uint32_t            h = static_cast<uint32_t>(metrics.box.y1 - metrics.box.y0) + 1;

				uint32_t offset = (y * rowStride) + (x * pixelStride);
				char* pOutput = bitmap.GetData() + offset;
				pCreateInfo->font.RenderGlyphBitmap(pCreateInfo->size, codepoint, subpixelShiftX, subpixelShiftY, w, h, rowStride, reinterpret_cast<unsigned char*>(pOutput));

				mGlyphMetrics[glyphIndex].size.x = static_cast<float>(w);
				mGlyphMetrics[glyphIndex].size.y = static_cast<float>(h);

				mGlyphMetrics[glyphIndex].uvRect.u0 = x * invBitmapWidth;
				mGlyphMetrics[glyphIndex].uvRect.v0 = y * invBitmapHeight;
				mGlyphMetrics[glyphIndex].uvRect.u1 = (x + w - 1) * invBitmapWidth;
				mGlyphMetrics[glyphIndex].uvRect.v1 = (y + h - 1) * invBitmapHeight;

				x = x + w;
				height = std::max<int32_t>(height, h);
			}
			y += height;
		}

		Result ppxres = grfx_util::CreateTextureFromBitmap(GetDevice()->GetGraphicsQueue(), &bitmap, &mTexture);
		if (Failed(ppxres)) {
			return ppxres;
		}

		// Release the font since we don't need it anymore
		mCreateInfo.font = Font();

		return SUCCESS;
	}

	void TextureFont::DestroyApiObjects()
	{
		if (mTexture) {
			GetDevice()->DestroyTexture(mTexture);
			mTexture.Reset();
		}
	}

	const grfx::TextureFontGlyphMetrics* TextureFont::GetGlyphMetrics(uint32_t codepoint) const
	{
		const grfx::TextureFontGlyphMetrics* ptr = nullptr;
		auto                                 it = FindIf(
			mGlyphMetrics,
			[codepoint](const grfx::TextureFontGlyphMetrics& elem) -> bool {
				bool match = (elem.codepoint == codepoint);
				return match; });
		if (it != std::end(mGlyphMetrics)) {
			ptr = &(*it);
		}
		return ptr;
	}

	// -------------------------------------------------------------------------------------------------
	// TextDraw
	// -------------------------------------------------------------------------------------------------
	struct Vertex
	{
		float2   position;
		float2   uv;
		uint32_t rgba;
	};

	constexpr size_t kGlyphIndicesSize = 6 * sizeof(uint32_t);
	constexpr size_t kGlyphVerticesSize = 4 * sizeof(Vertex);

	static grfx::SamplerPtr sSampler;

	Result TextDraw::CreateApiObjects(const grfx::TextDrawCreateInfo* pCreateInfo)
	{
		if (IsNull(pCreateInfo->pFont)) {
			ASSERT_MSG(false, "Pointer to texture font object is null");
			return ERROR_UNEXPECTED_NULL_ARGUMENT;
		}

		// Index buffer
		{
			uint64_t size = pCreateInfo->maxTextLength * kGlyphIndicesSize;

			grfx::BufferCreateInfo createInfo = {};
			createInfo.size = size;
			createInfo.usageFlags.bits.transferSrc = true;
			createInfo.memoryUsage = grfx::MEMORY_USAGE_CPU_TO_GPU;
			createInfo.initialState = grfx::RESOURCE_STATE_COPY_SRC;

			Result ppxres = GetDevice()->CreateBuffer(&createInfo, &mCpuIndexBuffer);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "failed creating CPU index buffer");
				return ppxres;
			}

			createInfo.usageFlags.bits.transferSrc = false;
			createInfo.usageFlags.bits.transferDst = true;
			createInfo.usageFlags.bits.indexBuffer = true;
			createInfo.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;
			createInfo.initialState = grfx::RESOURCE_STATE_INDEX_BUFFER;

			ppxres = GetDevice()->CreateBuffer(&createInfo, &mGpuIndexBuffer);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "failed creating GPU index buffer");
				return ppxres;
			}

			mIndexBufferView.pBuffer = mGpuIndexBuffer;
			mIndexBufferView.indexType = grfx::INDEX_TYPE_UINT32;
			mIndexBufferView.offset = 0;
		}

		// Vertex buffer
		{
			uint64_t size = pCreateInfo->maxTextLength * kGlyphVerticesSize;

			grfx::BufferCreateInfo createInfo = {};
			createInfo.size = size;
			createInfo.usageFlags.bits.transferSrc = true;
			createInfo.memoryUsage = grfx::MEMORY_USAGE_CPU_TO_GPU;
			createInfo.initialState = grfx::RESOURCE_STATE_COPY_SRC;

			Result ppxres = GetDevice()->CreateBuffer(&createInfo, &mCpuVertexBuffer);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "failed creating CPU vertex buffer");
				return ppxres;
			}

			createInfo.usageFlags.bits.transferSrc = false;
			createInfo.usageFlags.bits.transferDst = true;
			createInfo.usageFlags.bits.vertexBuffer = true;
			createInfo.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;
			createInfo.initialState = grfx::RESOURCE_STATE_VERTEX_BUFFER;

			ppxres = GetDevice()->CreateBuffer(&createInfo, &mGpuVertexBuffer);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "failed creating GPU vertex buffer");
				return ppxres;
			}

			mVertexBufferView.pBuffer = mGpuVertexBuffer;
			mVertexBufferView.stride = sizeof(Vertex);
			mVertexBufferView.offset = 0;
		}

		if (!sSampler) {
			grfx::SamplerCreateInfo createInfo = {};
			createInfo.magFilter = grfx::FILTER_LINEAR;
			createInfo.minFilter = grfx::FILTER_LINEAR;
			createInfo.mipmapMode = grfx::SAMPLER_MIPMAP_MODE_LINEAR;
			createInfo.addressModeU = grfx::SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;
			createInfo.addressModeV = grfx::SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;
			createInfo.addressModeW = grfx::SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;
			createInfo.mipLodBias = 0.0f;
			createInfo.anisotropyEnable = false;
			createInfo.maxAnisotropy = 0.0f;
			createInfo.compareEnable = false;
			createInfo.compareOp = grfx::COMPARE_OP_NEVER;
			createInfo.minLod = 0.0f;
			createInfo.maxLod = 1.0f;
			createInfo.borderColor = grfx::BORDER_COLOR_FLOAT_TRANSPARENT_BLACK;

			Result ppxres = GetDevice()->CreateSampler(&createInfo, &sSampler);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "failed creating sampler");
				return ppxres;
			}
		}

		// Constant buffer
		{
			uint64_t size = MINIMUM_CONSTANT_BUFFER_SIZE;

			grfx::BufferCreateInfo createInfo = {};
			createInfo.size = size;
			createInfo.usageFlags.bits.transferSrc = true;
			createInfo.memoryUsage = grfx::MEMORY_USAGE_CPU_TO_GPU;
			createInfo.initialState = grfx::RESOURCE_STATE_COPY_SRC;

			Result ppxres = GetDevice()->CreateBuffer(&createInfo, &mCpuConstantBuffer);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "failed creating CPU constant buffer");
				return ppxres;
			}

			createInfo.usageFlags.bits.transferSrc = false;
			createInfo.usageFlags.bits.transferDst = true;
			createInfo.usageFlags.bits.uniformBuffer = true;
			createInfo.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;
			createInfo.initialState = grfx::RESOURCE_STATE_CONSTANT_BUFFER;

			ppxres = GetDevice()->CreateBuffer(&createInfo, &mGpuConstantBuffer);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "failed creating GPU constant buffer");
				return ppxres;
			}
		}

		// Descriptor pool
		{
			grfx::DescriptorPoolCreateInfo createInfo = {};
			createInfo.sampler = 1;
			createInfo.sampledImage = 1;
			createInfo.uniformBuffer = 1;

			Result ppxres = GetDevice()->CreateDescriptorPool(&createInfo, &mDescriptorPool);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "failed creating descriptor pool");
				return ppxres;
			}
		}

		// Descriptor set layout
		{
			std::vector<grfx::DescriptorBinding> bindings = {
				{0, grfx::DESCRIPTOR_TYPE_UNIFORM_BUFFER, 1, grfx::SHADER_STAGE_ALL_GRAPHICS},
				{1, grfx::DESCRIPTOR_TYPE_SAMPLED_IMAGE, 1, grfx::SHADER_STAGE_ALL_GRAPHICS},
				{2, grfx::DESCRIPTOR_TYPE_SAMPLER, 1, grfx::SHADER_STAGE_ALL_GRAPHICS},
			};

			grfx::DescriptorSetLayoutCreateInfo createInfo = {};
			createInfo.bindings = bindings;

			Result ppxres = GetDevice()->CreateDescriptorSetLayout(&createInfo, &mDescriptorSetLayout);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "failed creating descriptor set layout");
				return ppxres;
			}
		}

		// Descriptor Set
		{
			Result ppxres = GetDevice()->AllocateDescriptorSet(mDescriptorPool, mDescriptorSetLayout, &mDescriptorSet);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "failed allocating descriptor set");
				return ppxres;
			}

			mDescriptorSet->UpdateUniformBuffer(0, 0, mGpuConstantBuffer);
			mDescriptorSet->UpdateSampledImage(1, 0, pCreateInfo->pFont->GetTexture());
			mDescriptorSet->UpdateSampler(2, 0, sSampler);
		}

		// Pipeline interface
		{
			grfx::PipelineInterfaceCreateInfo createInfo = {};
			createInfo.setCount = 1;
			createInfo.sets[0].set = 0;
			createInfo.sets[0].pLayout = mDescriptorSetLayout;

			Result ppxres = GetDevice()->CreatePipelineInterface(&createInfo, &mPipelineInterface);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "failed creating pipeline interface");
				return ppxres;
			}
		}

		// Pipeline
		{
			grfx::VertexBinding vertexBinding;
			vertexBinding.AppendAttribute({ "POSITION", 0, grfx::FORMAT_R32G32_FLOAT, 0, APPEND_OFFSET_ALIGNED, grfx::VERTEX_INPUT_RATE_VERTEX });
			vertexBinding.AppendAttribute({ "TEXCOORD", 1, grfx::FORMAT_R32G32_FLOAT, 0, APPEND_OFFSET_ALIGNED, grfx::VERTEX_INPUT_RATE_VERTEX });
			vertexBinding.AppendAttribute({ "COLOR", 2, grfx::FORMAT_R8G8B8A8_UNORM, 0, APPEND_OFFSET_ALIGNED, grfx::VERTEX_INPUT_RATE_VERTEX });

			grfx::GraphicsPipelineCreateInfo2 createInfo = {};
			createInfo.VS = { pCreateInfo->VS.pModule, pCreateInfo->VS.entryPoint };
			createInfo.PS = { pCreateInfo->PS.pModule, pCreateInfo->PS.entryPoint };
			createInfo.vertexInputState.bindingCount = 1;
			createInfo.vertexInputState.bindings[0] = vertexBinding;
			createInfo.topology = grfx::PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
			createInfo.polygonMode = grfx::POLYGON_MODE_FILL;
			createInfo.cullMode = grfx::CULL_MODE_BACK;
			createInfo.frontFace = grfx::FRONT_FACE_CCW;
			createInfo.depthReadEnable = false;
			createInfo.depthWriteEnable = false;
			createInfo.blendModes[0] = pCreateInfo->blendMode;
			createInfo.outputState.renderTargetCount = 1;
			createInfo.outputState.renderTargetFormats[0] = pCreateInfo->renderTargetFormat;
			createInfo.outputState.depthStencilFormat = pCreateInfo->depthStencilFormat;
			createInfo.pPipelineInterface = mPipelineInterface;

			Result ppxres = GetDevice()->CreateGraphicsPipeline(&createInfo, &mPipeline);
			if (Failed(ppxres)) {
				ASSERT_MSG(false, "failed creating pipeline");
				return ppxres;
			}
		}

		return SUCCESS;
	}

	void TextDraw::DestroyApiObjects()
	{
		if (mCpuIndexBuffer) {
			GetDevice()->DestroyBuffer(mCpuIndexBuffer);
			mCpuIndexBuffer.Reset();
		}

		if (mGpuIndexBuffer) {
			GetDevice()->DestroyBuffer(mGpuIndexBuffer);
			mGpuIndexBuffer.Reset();
		}

		if (mCpuVertexBuffer) {
			GetDevice()->DestroyBuffer(mCpuVertexBuffer);
			mCpuVertexBuffer.Reset();
		}

		if (mGpuVertexBuffer) {
			GetDevice()->DestroyBuffer(mGpuVertexBuffer);
			mGpuVertexBuffer.Reset();
		}

		if (mCpuConstantBuffer) {
			GetDevice()->DestroyBuffer(mCpuConstantBuffer);
			mCpuConstantBuffer.Reset();
		}

		if (mGpuConstantBuffer) {
			GetDevice()->DestroyBuffer(mGpuConstantBuffer);
			mGpuConstantBuffer.Reset();
		}

		if (mPipeline) {
			GetDevice()->DestroyGraphicsPipeline(mPipeline);
			mPipeline.Reset();
		}

		if (mPipelineInterface) {
			GetDevice()->DestroyPipelineInterface(mPipelineInterface);
			mPipelineInterface.Reset();
		}

		if (mDescriptorSet) {
			GetDevice()->FreeDescriptorSet(mDescriptorSet);
			mDescriptorSet.Reset();
		}

		if (mDescriptorSetLayout) {
			GetDevice()->DestroyDescriptorSetLayout(mDescriptorSetLayout);
			mDescriptorSetLayout.Reset();
		}

		if (mDescriptorPool) {
			GetDevice()->DestroyDescriptorPool(mDescriptorPool);
			mDescriptorPool.Reset();
		}
	}

	void TextDraw::Clear()
	{
		mTextLength = 0;
	}

	void TextDraw::AddString(
		const float2& position,
		const std::string& string,
		float              tabSpacing,
		float              lineSpacing,
		const float3& color,
		float              opacity)
	{
		if (mTextLength >= mCreateInfo.maxTextLength) {
			return;
		}

		// Map index buffer
		void* mappedAddress = nullptr;
		Result ppxres = mCpuIndexBuffer->MapMemory(0, &mappedAddress);
		if (Failed(ppxres)) {
			return;
		}
		uint8_t* pIndicesBaseAddr = static_cast<uint8_t*>(mappedAddress);

		// Map vertex buffer
		ppxres = mCpuVertexBuffer->MapMemory(0, &mappedAddress);
		if (Failed(ppxres)) {
			return;
		}
		uint8_t* pVerticesBaseAddr = static_cast<uint8_t*>(mappedAddress);

		// Convert to 8 bit color
		uint32_t r = std::min<uint32_t>(static_cast<uint32_t>(color.r * 255.0f), 255);
		uint32_t g = std::min<uint32_t>(static_cast<uint32_t>(color.g * 255.0f), 255);
		uint32_t b = std::min<uint32_t>(static_cast<uint32_t>(color.b * 255.0f), 255);
		uint32_t a = std::min<uint32_t>(static_cast<uint32_t>(opacity * 255.0f), 255);
		uint32_t rgba = (a << 24) | (b << 16) | (g << 8) | (r << 0);

		utf8::iterator<std::string::const_iterator> it(string.begin(), string.begin(), string.end());
		utf8::iterator<std::string::const_iterator> it_end(string.end(), string.begin(), string.end());
		float2                                      baseline = position;
		float                                       ascent = mCreateInfo.pFont->GetAscent();
		float                                       descent = mCreateInfo.pFont->GetDescent();
		float                                       lineGap = mCreateInfo.pFont->GetLineGap();
		lineSpacing = lineSpacing * (ascent - descent + lineGap);

		while (it != it_end) {
			uint32_t codepoint = utf8::next(it, it_end);
			if (codepoint == '\n') {
				baseline.x = position.x;
				baseline.y += lineSpacing;
				continue;
			}
			else if (codepoint == '\t') {
				const grfx::TextureFontGlyphMetrics* pMetrics = mCreateInfo.pFont->GetGlyphMetrics(32);
				baseline.x += tabSpacing * pMetrics->glyphMetrics.advance;
				continue;
			}

			const grfx::TextureFontGlyphMetrics* pMetrics = mCreateInfo.pFont->GetGlyphMetrics(codepoint);
			if (IsNull(pMetrics)) {
				pMetrics = mCreateInfo.pFont->GetGlyphMetrics(32);
			}

			size_t indexBufferOffset = mTextLength * kGlyphIndicesSize;
			size_t vertexBufferOffset = mTextLength * kGlyphVerticesSize;
			bool   exceededIndexBuffer = (indexBufferOffset >= mCpuIndexBuffer->GetSize());
			bool   exceededVertexBuffer = (vertexBufferOffset >= mCpuVertexBuffer->GetSize());
			if (exceededIndexBuffer || exceededVertexBuffer) {
				break;
			}

			uint32_t* pIndices = reinterpret_cast<uint32_t*>(pIndicesBaseAddr + indexBufferOffset);
			Vertex* pVertices = reinterpret_cast<Vertex*>(pVerticesBaseAddr + vertexBufferOffset);

			float2 P = baseline + float2(pMetrics->glyphMetrics.box.x0, pMetrics->glyphMetrics.box.y0);
			float2 P0 = P;
			float2 P1 = P + float2(0, pMetrics->size.y);
			float2 P2 = P + pMetrics->size;
			float2 P3 = P + float2(pMetrics->size.x, 0);
			float2 uv0 = float2(pMetrics->uvRect.u0, pMetrics->uvRect.v0);
			float2 uv1 = float2(pMetrics->uvRect.u0, pMetrics->uvRect.v1);
			float2 uv2 = float2(pMetrics->uvRect.u1, pMetrics->uvRect.v1);
			float2 uv3 = float2(pMetrics->uvRect.u1, pMetrics->uvRect.v0);

			pVertices[0] = Vertex{ P0, uv0, rgba };
			pVertices[1] = Vertex{ P1, uv1, rgba };
			pVertices[2] = Vertex{ P2, uv2, rgba };
			pVertices[3] = Vertex{ P3, uv3, rgba };

			uint32_t vertexCount = mTextLength * 4;
			pIndices[0] = vertexCount + 0;
			pIndices[1] = vertexCount + 1;
			pIndices[2] = vertexCount + 2;
			pIndices[3] = vertexCount + 0;
			pIndices[4] = vertexCount + 2;
			pIndices[5] = vertexCount + 3;

			mTextLength += 1;
			baseline.x += pMetrics->glyphMetrics.advance;
		}

		mCpuIndexBuffer->UnmapMemory();
		mCpuVertexBuffer->UnmapMemory();
	}

	void TextDraw::AddString(
		const float2& position,
		const std::string& string,
		const float3& color,
		float              opacity)
	{
		AddString(position, string, 3.0f, 1.0f, color, opacity);
	}

	Result TextDraw::UploadToGpu(grfx::Queue* pQueue)
	{
		grfx::BufferToBufferCopyInfo copyInfo = {};
		copyInfo.size = mCpuIndexBuffer->GetSize();
		copyInfo.srcBuffer.offset = 0;
		copyInfo.dstBuffer.offset = 0;

		Result ppxres = pQueue->CopyBufferToBuffer(&copyInfo, mCpuIndexBuffer, mGpuIndexBuffer, grfx::RESOURCE_STATE_INDEX_BUFFER, grfx::RESOURCE_STATE_INDEX_BUFFER);
		if (Failed(ppxres)) {
			return ppxres;
		}

		copyInfo.size = mCpuVertexBuffer->GetSize();
		ppxres = pQueue->CopyBufferToBuffer(&copyInfo, mCpuVertexBuffer, mGpuVertexBuffer, grfx::RESOURCE_STATE_VERTEX_BUFFER, grfx::RESOURCE_STATE_VERTEX_BUFFER);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	void TextDraw::UploadToGpu(grfx::CommandBuffer* pCommandBuffer)
	{
		grfx::BufferToBufferCopyInfo copyInfo = {};
		copyInfo.size = mTextLength * kGlyphIndicesSize;
		copyInfo.srcBuffer.offset = 0;
		copyInfo.dstBuffer.offset = 0;

		pCommandBuffer->BufferResourceBarrier(mGpuIndexBuffer, grfx::RESOURCE_STATE_INDEX_BUFFER, grfx::RESOURCE_STATE_COPY_DST);
		pCommandBuffer->CopyBufferToBuffer(&copyInfo, mCpuIndexBuffer, mGpuIndexBuffer);
		pCommandBuffer->BufferResourceBarrier(mGpuIndexBuffer, grfx::RESOURCE_STATE_COPY_DST, grfx::RESOURCE_STATE_INDEX_BUFFER);

		copyInfo.size = mTextLength * kGlyphVerticesSize;
		pCommandBuffer->BufferResourceBarrier(mGpuVertexBuffer, grfx::RESOURCE_STATE_VERTEX_BUFFER, grfx::RESOURCE_STATE_COPY_DST);
		pCommandBuffer->CopyBufferToBuffer(&copyInfo, mCpuVertexBuffer, mGpuVertexBuffer);
		pCommandBuffer->BufferResourceBarrier(mGpuVertexBuffer, grfx::RESOURCE_STATE_COPY_DST, grfx::RESOURCE_STATE_VERTEX_BUFFER);
	}

	void TextDraw::PrepareDraw(const float4x4& MVP, grfx::CommandBuffer* pCommandBuffer)
	{
		void* mappedAddress = nullptr;
		Result ppxres = mCpuConstantBuffer->MapMemory(0, &mappedAddress);
		if (Failed(ppxres)) {
			return;
		}

		std::memcpy(mappedAddress, &MVP, sizeof(float4x4));

		mCpuConstantBuffer->UnmapMemory();

		grfx::BufferToBufferCopyInfo copyInfo = {};
		copyInfo.size = mCpuConstantBuffer->GetSize();
		copyInfo.srcBuffer.offset = 0;
		copyInfo.dstBuffer.offset = 0;

		pCommandBuffer->BufferResourceBarrier(mGpuConstantBuffer, grfx::RESOURCE_STATE_CONSTANT_BUFFER, grfx::RESOURCE_STATE_COPY_DST);
		pCommandBuffer->CopyBufferToBuffer(&copyInfo, mCpuConstantBuffer, mGpuConstantBuffer);
		pCommandBuffer->BufferResourceBarrier(mGpuConstantBuffer, grfx::RESOURCE_STATE_COPY_DST, grfx::RESOURCE_STATE_CONSTANT_BUFFER);
	}

	void TextDraw::Draw(grfx::CommandBuffer* pCommandBuffer)
	{
		pCommandBuffer->BindIndexBuffer(&mIndexBufferView);
		pCommandBuffer->BindVertexBuffers(1, &mVertexBufferView);
		pCommandBuffer->BindGraphicsDescriptorSets(mPipelineInterface, 1, &mDescriptorSet);
		pCommandBuffer->BindGraphicsPipeline(mPipeline);
		pCommandBuffer->DrawIndexed(mTextLength * 6);
	}

} // namespace grfx

#pragma endregion

#pragma region MipMap

static uint32_t CalculatActualLevelCount(uint32_t width, uint32_t height, uint32_t levelCount)
{
	uint32_t actualLevelCount = 0;
	for (uint32_t i = 0; i < levelCount; ++i) {
		if ((width > 0) && (height > 0)) {
			actualLevelCount += 1;
		}

		width = width / 2;
		height = height / 2;

		if ((width == 0) || (height == 0)) {
			break;
		}
	}
	return actualLevelCount;
}

static uint64_t CalculateDataSize(uint32_t width, uint32_t height, Bitmap::Format format, uint32_t levelCount)
{
	bool isValidWidth = (width > 0);
	bool isValidHeight = (height > 0);
	bool isValidFormat = (format != Bitmap::FORMAT_UNDEFINED);
	bool isValidLevelCount = (levelCount > 0);
	bool isValid = isValidWidth && isValidHeight && isValidFormat && isValidLevelCount;
	if (!isValid) {
		return 0;
	}

	uint64_t totalSize = 0;
	for (uint32_t i = 0; i < levelCount; ++i) {
		uint64_t pixelStride = Bitmap::FormatSize(format);
		uint64_t rowStride = static_cast<uint64_t>(width) * pixelStride;
		uint64_t size = rowStride * static_cast<uint64_t>(height);
		totalSize += size;

		width = width / 2;
		height = height / 2;
	}

	return totalSize;
}

std::vector<char> Mipmap::mStaticData = {};

Mipmap::Mipmap(uint32_t width, uint32_t height, Bitmap::Format format, uint32_t levelCount)
	: Mipmap(width, height, format, levelCount, /* useStaticPool= */ false)
{
}

Mipmap::Mipmap(uint32_t width, uint32_t height, Bitmap::Format format, uint32_t levelCount, bool useStaticPool)
	: mUseStaticPool(useStaticPool)
{
	levelCount = CalculatActualLevelCount(width, height, levelCount);

	size_t dataSize = static_cast<size_t>(CalculateDataSize(width, height, format, levelCount));
	if (dataSize == 0) {
		return;
	}

	// Choose between static pool use and internal data.
	// NOTE: This is designed for single-threaded use ONLY!
	// This will need locks if the consuming paths ever become multi-threaded.
	std::vector<char>& targetData = mUseStaticPool ? mStaticData : mData;
	if (targetData.size() < dataSize) {
		targetData.resize(dataSize);
	}

	mMips.resize(levelCount);

	const size_t pixelWidth = static_cast<size_t>(Bitmap::FormatSize(format));
	size_t       offset = 0;
	for (uint32_t i = 0; i < levelCount; ++i) {
		char* pStorage = targetData.data() + offset;

		Bitmap& mip = mMips[i];

		Result ppxres = Bitmap::Create(width, height, format, pStorage, &mip);
		if (Failed(ppxres)) {
			mMips.clear();
			return;
		}

		size_t rowStride = width * pixelWidth;
		size_t size = rowStride * height;
		offset += size;

		width = width / 2;
		height = height / 2;
	}
}

Mipmap::Mipmap(const Bitmap& bitmap, uint32_t levelCount)
	: Mipmap(bitmap, levelCount, /* useStaticPool= */ false)
{
}

Mipmap::Mipmap(const Bitmap& bitmap, uint32_t levelCount, bool useStaticPool)
	: Mipmap(bitmap.GetWidth(), bitmap.GetHeight(), bitmap.GetFormat(), levelCount, useStaticPool)
{
	Bitmap* pMip0 = GetMip(0);
	if (!IsNull(pMip0)) {
		uint64_t    srcSize = bitmap.GetFootprintSize();
		const char* pSrcData = bitmap.GetData();
		uint64_t    dstSize = pMip0->GetFootprintSize();
		char* pDstData = pMip0->GetData();
		if ((srcSize > 0) && (srcSize == dstSize) && !IsNull(pSrcData) && !IsNull(pDstData)) {
			memcpy(pDstData, pSrcData, srcSize);

			// Generate mip
			for (uint32_t level = 1; level < levelCount; ++level) {
				uint32_t prevLevel = level - 1;
				Bitmap* pPrevMip = GetMip(prevLevel);
				Bitmap* pMip = GetMip(level);

				Result ppxres = pPrevMip->ScaleTo(pMip, STBIR_FILTER_BOX);
				if (Failed(ppxres)) {
					mData.clear();
					mMips.clear();
					return;
				}
			}
		}
	}
}

bool Mipmap::IsOk() const
{
	uint32_t levelCount = GetLevelCount();
	if (levelCount == 0) {
		return false;
	}

	const Bitmap& bitmap = mMips[0];

	Bitmap::Format format = bitmap.GetFormat();
	if (format == Bitmap::FORMAT_UNDEFINED) {
		return false;
	}

	uint32_t width = bitmap.GetWidth();
	uint32_t height = bitmap.GetHeight();
	uint64_t dataSize = CalculateDataSize(width, height, format, levelCount);
	uint64_t storageSize = mUseStaticPool
		? static_cast<uint64_t>(mStaticData.size())
		: static_cast<uint64_t>(mData.size());

	if (storageSize < dataSize) {
		return false;
	}

	return true;
}

Bitmap::Format Mipmap::GetFormat() const
{
	const Bitmap* pMip = GetMip(0);
	return IsNull(pMip) ? Bitmap::FORMAT_UNDEFINED : pMip->GetFormat();
}

Bitmap* Mipmap::GetMip(uint32_t level)
{
	Bitmap* ptr = nullptr;
	if (level < GetLevelCount()) {
		ptr = &mMips[level];
	}
	return ptr;
}

const Bitmap* Mipmap::GetMip(uint32_t level) const
{
	const Bitmap* ptr = nullptr;
	if (level < GetLevelCount()) {
		ptr = &mMips[level];
	}
	return ptr;
}

uint32_t Mipmap::GetWidth(uint32_t level) const
{
	const Bitmap* pMip = GetMip(0);
	return IsNull(pMip) ? 0 : pMip->GetWidth();
}

uint32_t Mipmap::GetHeight(uint32_t level) const
{
	const Bitmap* pMip = GetMip(0);
	return IsNull(pMip) ? 0 : pMip->GetHeight();
}

uint32_t Mipmap::CalculateLevelCount(uint32_t width, uint32_t height)
{
	uint32_t levelCount = CalculatActualLevelCount(width, height, UINT32_MAX);
	return levelCount;
}

Result Mipmap::LoadFile(const std::filesystem::path& path, uint32_t baseWidth, uint32_t baseHeight, Mipmap* pMipmap, uint32_t levelCount)
{
	ASSERT_NULL_ARG(pMipmap);

	// Figure out level count
	uint32_t maxLevelCount = CalculateLevelCount(baseWidth, baseHeight);
	levelCount = std::min<uint32_t>(levelCount, maxLevelCount);

	// Read file properites
	uint32_t       width = 0;
	uint32_t       height = 0;
	Bitmap::Format format = Bitmap::FORMAT_UNDEFINED;

	Result ppxres = Bitmap::GetFileProperties(path, &width, &height, &format);
	if (Failed(ppxres)) {
		return ppxres;
	}

	// Calculate total height of all mip levels
	uint32_t totalHeight = 0;
	for (uint32_t i = 0; i < levelCount; ++i) {
		totalHeight += (baseHeight >> i);
	}

	// Verify that dimensions make sense
	if ((width != baseWidth) || (height < totalHeight)) {
		return ERROR_BITMAP_FOOTPRINT_MISMATCH;
	}

	// Load file
	auto fileBytes = fs::load_file(path);
	if (!fileBytes.has_value()) {
		return ERROR_IMAGE_FILE_LOAD_FAILED;
	}

	// Load bitmap
	void* pStbiData = nullptr;
	int   stbiWidth = 0;
	int   stbiHeight = 0;
	int   stbiChannels = 0;
	int   stbiRequiredChannels = 4; // Force to 4 chanenls to make things easier for the graphics APIs
	if (Bitmap::ChannelDataType(format) == Bitmap::DATA_TYPE_UINT8) {
		pStbiData = stbi_load_from_memory(
			reinterpret_cast<const stbi_uc*>(fileBytes.value().data()),
			static_cast<int>(fileBytes.value().size()),
			&stbiWidth,
			&stbiHeight,
			&stbiChannels,
			stbiRequiredChannels);
	}
	else if (Bitmap::ChannelDataType(format) == Bitmap::DATA_TYPE_FLOAT) {
		pStbiData = stbi_loadf_from_memory(
			reinterpret_cast<const stbi_uc*>(fileBytes.value().data()),
			static_cast<int>(fileBytes.value().size()),
			&stbiWidth,
			&stbiHeight,
			&stbiChannels,
			stbiRequiredChannels);
	}

	if (IsNull(pStbiData)) {
		return ERROR_BAD_DATA_SOURCE;
	}

	// Row stride
	uint32_t rowStride = baseWidth * Bitmap::FormatSize(format);
	uint32_t totalDataSize = rowStride * totalHeight;

	// Allocate storage
	pMipmap->mData.resize(totalDataSize);

	// Copy data
	std::memcpy(pMipmap->mData.data(), pStbiData, totalDataSize);

	// Free stbi data
	stbi_image_free(pStbiData);

	// Allocate mips up front to prevent bitmap's internal copy
	pMipmap->mMips.resize(levelCount);

	// Build mips
	uint32_t y = 0;
	uint32_t mipWidth = baseWidth;
	uint32_t mipHeight = baseHeight;
	for (uint32_t level = 0; level < levelCount; ++level) {
		uint32_t dataOffset = y * rowStride;
		char* pExternalStorage = pMipmap->mData.data() + dataOffset;

		Bitmap mip = {};
		ppxres = Bitmap::Create(mipWidth, mipHeight, format, rowStride, pExternalStorage, &pMipmap->mMips[level]);
		if (Failed(ppxres)) {
			return ppxres;
		}

		y += mipHeight;
		mipWidth >>= 1;
		mipHeight >>= 1;
	}

	return SUCCESS;
}

Result Mipmap::SaveFile(const std::filesystem::path& path, const Mipmap* pMipmap, uint32_t levelCount)
{
	// TODO: Implement
	return ERROR_FAILED;
}

#pragma endregion

#pragma region Graphics Utils

namespace grfx_util {

	grfx::Format ToGrfxFormat(Bitmap::Format value)
	{
		// clang-format off
		switch (value) {
		default: break;
		case Bitmap::FORMAT_R_UINT8: return grfx::FORMAT_R8_UNORM; break;
		case Bitmap::FORMAT_RG_UINT8: return grfx::FORMAT_R8G8_UNORM; break;
		case Bitmap::FORMAT_RGB_UINT8: return grfx::FORMAT_R8G8B8_UNORM; break;
		case Bitmap::FORMAT_RGBA_UINT8: return grfx::FORMAT_R8G8B8A8_UNORM; break;
		case Bitmap::FORMAT_R_UINT16: return grfx::FORMAT_R16_UNORM; break;
		case Bitmap::FORMAT_RG_UINT16: return grfx::FORMAT_R16G16_UNORM; break;
		case Bitmap::FORMAT_RGB_UINT16: return grfx::FORMAT_R16G16B16_UNORM; break;
		case Bitmap::FORMAT_RGBA_UINT16: return grfx::FORMAT_R16G16B16A16_UNORM; break;
			//case Bitmap::FORMAT_R_UINT32    : return grfx::FORMAT_R32_UNORM; break;
			//case Bitmap::FORMAT_RG_UINT32   : return grfx::FORMAT_R32G32_UNORM; break;
			//case Bitmap::FORMAT_RGB_UINT32  : return grfx::FORMAT_R32G32B32_UNORM; break;
			//case Bitmap::FORMAT_RGBA_UINT32 : return grfx::FORMAT_R32G32B32A32_UNORM; break;
		case Bitmap::FORMAT_R_FLOAT: return grfx::FORMAT_R32_FLOAT; break;
		case Bitmap::FORMAT_RG_FLOAT: return grfx::FORMAT_R32G32_FLOAT; break;
		case Bitmap::FORMAT_RGB_FLOAT: return grfx::FORMAT_R32G32B32_FLOAT; break;
		case Bitmap::FORMAT_RGBA_FLOAT: return grfx::FORMAT_R32G32B32A32_FLOAT; break;
		}
		// clang-format on
		return grfx::FORMAT_UNDEFINED;
	}

	grfx::Format ToGrfxFormat(gli::format value)
	{
		// clang-format off
		switch (value) {
		case gli::FORMAT_RGB_DXT1_UNORM_BLOCK8: return grfx::FORMAT_BC1_RGB_UNORM;
		case gli::FORMAT_RGB_DXT1_SRGB_BLOCK8: return grfx::FORMAT_BC1_RGB_SRGB;
		case gli::FORMAT_RGBA_DXT1_UNORM_BLOCK8: return grfx::FORMAT_BC1_RGBA_UNORM;
		case gli::FORMAT_RGBA_DXT1_SRGB_BLOCK8: return grfx::FORMAT_BC1_RGBA_SRGB;
		case gli::FORMAT_RGBA_DXT3_SRGB_BLOCK16: return grfx::FORMAT_BC2_SRGB;
		case gli::FORMAT_RGBA_DXT3_UNORM_BLOCK16: return grfx::FORMAT_BC2_UNORM;
		case gli::FORMAT_RGBA_DXT5_SRGB_BLOCK16: return grfx::FORMAT_BC3_SRGB;
		case gli::FORMAT_RGBA_DXT5_UNORM_BLOCK16: return grfx::FORMAT_BC3_UNORM;
		case gli::FORMAT_R_ATI1N_UNORM_BLOCK8: return grfx::FORMAT_BC4_UNORM;
		case gli::FORMAT_R_ATI1N_SNORM_BLOCK8: return grfx::FORMAT_BC4_SNORM;
		case gli::FORMAT_RG_ATI2N_UNORM_BLOCK16: return grfx::FORMAT_BC5_UNORM;
		case gli::FORMAT_RG_ATI2N_SNORM_BLOCK16: return grfx::FORMAT_BC5_SNORM;
		case gli::FORMAT_RGB_BP_UFLOAT_BLOCK16: return grfx::FORMAT_BC6H_UFLOAT;
		case gli::FORMAT_RGB_BP_SFLOAT_BLOCK16: return grfx::FORMAT_BC6H_SFLOAT;
		case gli::FORMAT_RGBA_BP_UNORM_BLOCK16: return grfx::FORMAT_BC7_UNORM;
		case gli::FORMAT_RGBA_BP_SRGB_BLOCK16: return grfx::FORMAT_BC7_SRGB;
		default:
			return grfx::FORMAT_UNDEFINED;
		}
		// clang-format on
	}

	// -------------------------------------------------------------------------------------------------

	Result CopyBitmapToImage(
		grfx::Queue* pQueue,
		const Bitmap* pBitmap,
		grfx::Image* pImage,
		uint32_t            mipLevel,
		uint32_t            arrayLayer,
		grfx::ResourceState stateBefore,
		grfx::ResourceState stateAfter)
	{
		ASSERT_NULL_ARG(pQueue);
		ASSERT_NULL_ARG(pBitmap);
		ASSERT_NULL_ARG(pImage);

		Result ppxres = ERROR_FAILED;

		// Scoped destroy
		grfx::ScopeDestroyer SCOPED_DESTROYER(pQueue->GetDevice());

		// This is the number of bytes we're going to copy per row.
		uint32_t rowCopySize = pBitmap->GetWidth() * pBitmap->GetPixelStride();

		// When copying from a buffer to a image/texture, D3D12 requires that the rows
		// stored in the source buffer (aka staging buffer) are aligned to 256 bytes.
		// Vulkan does not have this requirement. So for the staging buffer, we want
		// to enforce the alignment for D3D12 but not for Vulkan.
		//
		uint32_t apiRowStrideAligement = grfx::IsDx12(pQueue->GetDevice()->GetApi()) ? D3D12_TEXTURE_DATA_PITCH_ALIGNMENT : 1;
		// The staging buffer's row stride alignemnt needs to be based off the bitmap's
		// width (i.e. the number of bytes we're going to copy) and not the bitmap's row
		// stride. The bitmap's may be padded beyond width * pixel stride.
		//
		uint32_t stagingBufferRowStride = RoundUp<uint32_t>(rowCopySize, apiRowStrideAligement);

		// Create staging buffer
		grfx::BufferPtr stagingBuffer;
		{
			uint64_t bufferSize = stagingBufferRowStride * pBitmap->GetHeight();

			grfx::BufferCreateInfo ci = {};
			ci.size = bufferSize;
			ci.usageFlags.bits.transferSrc = true;
			ci.memoryUsage = grfx::MEMORY_USAGE_CPU_TO_GPU;

			ppxres = pQueue->GetDevice()->CreateBuffer(&ci, &stagingBuffer);
			if (Failed(ppxres)) {
				return ppxres;
			}
			SCOPED_DESTROYER.AddObject(stagingBuffer);

			// Map and copy to staging buffer
			void* pBufferAddress = nullptr;
			ppxres = stagingBuffer->MapMemory(0, &pBufferAddress);
			if (Failed(ppxres)) {
				return ppxres;
			}

			const char* pSrc = pBitmap->GetData();
			char* pDst = static_cast<char*>(pBufferAddress);
			const uint32_t srcRowStride = pBitmap->GetRowStride();
			const uint32_t dstRowStride = stagingBufferRowStride;
			for (uint32_t y = 0; y < pBitmap->GetHeight(); ++y) {
				memcpy(pDst, pSrc, rowCopySize);
				pSrc += srcRowStride;
				pDst += dstRowStride;
			}

			stagingBuffer->UnmapMemory();
		}

		// Copy info
		grfx::BufferToImageCopyInfo copyInfo = {};
		copyInfo.srcBuffer.imageWidth = pBitmap->GetWidth();
		copyInfo.srcBuffer.imageHeight = pBitmap->GetHeight();
		copyInfo.srcBuffer.imageRowStride = stagingBufferRowStride;
		copyInfo.srcBuffer.footprintOffset = 0;
		copyInfo.srcBuffer.footprintWidth = pBitmap->GetWidth();
		copyInfo.srcBuffer.footprintHeight = pBitmap->GetHeight();
		copyInfo.srcBuffer.footprintDepth = 1;
		copyInfo.dstImage.mipLevel = mipLevel;
		copyInfo.dstImage.arrayLayer = arrayLayer;
		copyInfo.dstImage.arrayLayerCount = 1;
		copyInfo.dstImage.x = 0;
		copyInfo.dstImage.y = 0;
		copyInfo.dstImage.z = 0;
		copyInfo.dstImage.width = pBitmap->GetWidth();
		copyInfo.dstImage.height = pBitmap->GetHeight();
		copyInfo.dstImage.depth = 1;

		// Copy to GPU image
		ppxres = pQueue->CopyBufferToImage(
			std::vector<grfx::BufferToImageCopyInfo>{copyInfo},
			stagingBuffer,
			pImage,
			mipLevel,
			1,
			arrayLayer,
			1,
			stateBefore,
			stateAfter);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	// -------------------------------------------------------------------------------------------------

	Result CreateImageFromBitmap(
		grfx::Queue* pQueue,
		const Bitmap* pBitmap,
		grfx::Image** ppImage,
		const ImageOptions& options)
	{
		ASSERT_NULL_ARG(pQueue);
		ASSERT_NULL_ARG(pBitmap);
		ASSERT_NULL_ARG(ppImage);

		Result ppxres = ERROR_FAILED;

		// Scoped destroy
		grfx::ScopeDestroyer SCOPED_DESTROYER(pQueue->GetDevice());

		// Cap mip level count
		uint32_t maxMipLevelCount = Mipmap::CalculateLevelCount(pBitmap->GetWidth(), pBitmap->GetHeight());
		uint32_t mipLevelCount = std::min<uint32_t>(options.mMipLevelCount, maxMipLevelCount);

		// Create target image
		grfx::ImagePtr targetImage;
		{
			grfx::ImageCreateInfo ci = {};
			ci.type = grfx::IMAGE_TYPE_2D;
			ci.width = pBitmap->GetWidth();
			ci.height = pBitmap->GetHeight();
			ci.depth = 1;
			ci.format = ToGrfxFormat(pBitmap->GetFormat());
			ci.sampleCount = grfx::SAMPLE_COUNT_1;
			ci.mipLevelCount = mipLevelCount;
			ci.arrayLayerCount = 1;
			ci.usageFlags.bits.transferDst = true;
			ci.usageFlags.bits.sampled = true;
			ci.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;
			ci.initialState = grfx::RESOURCE_STATE_SHADER_RESOURCE;

			ci.usageFlags.flags |= options.mAdditionalUsage;

			ppxres = pQueue->GetDevice()->CreateImage(&ci, &targetImage);
			if (Failed(ppxres)) {
				return ppxres;
			}
			SCOPED_DESTROYER.AddObject(targetImage);
		}

		// Since this mipmap is temporary, it's safe to use the static pool.
		Mipmap mipmap = Mipmap(*pBitmap, mipLevelCount, /* useStaticPool= */ true);
		if (!mipmap.IsOk()) {
			return ERROR_FAILED;
		}

		// Copy mips to image
		for (uint32_t mipLevel = 0; mipLevel < mipLevelCount; ++mipLevel) {
			const Bitmap* pMip = mipmap.GetMip(mipLevel);

			ppxres = CopyBitmapToImage(
				pQueue,
				pMip,
				targetImage,
				mipLevel,
				0,
				grfx::RESOURCE_STATE_SHADER_RESOURCE,
				grfx::RESOURCE_STATE_SHADER_RESOURCE);
			if (Failed(ppxres)) {
				return ppxres;
			}
		}

		// Change ownership to reference so object doesn't get destroyed
		targetImage->SetOwnership(grfx::OWNERSHIP_REFERENCE);

		// Assign output
		*ppImage = targetImage;

		return SUCCESS;
	}

	Result CreateImageFromBitmapGpu(
		grfx::Queue* pQueue,
		const Bitmap* pBitmap,
		grfx::Image** ppImage,
		const ImageOptions& options)
	{
		ASSERT_NULL_ARG(pQueue);
		ASSERT_NULL_ARG(pBitmap);
		ASSERT_NULL_ARG(ppImage);

		// Scoped destroy
		grfx::ScopeDestroyer SCOPED_DESTROYER(pQueue->GetDevice());

		Result ppxres = ERROR_FAILED;

		// Cap mip level count
		uint32_t maxMipLevelCount = Mipmap::CalculateLevelCount(pBitmap->GetWidth(), pBitmap->GetHeight());
		uint32_t mipLevelCount = std::min<uint32_t>(options.mMipLevelCount, maxMipLevelCount);

		// Create target image
		grfx::ImagePtr targetImage;
		{
			grfx::ImageCreateInfo ci = {};
			ci.type = grfx::IMAGE_TYPE_2D;
			ci.width = pBitmap->GetWidth();
			ci.height = pBitmap->GetHeight();
			ci.depth = 1;
			ci.format = ToGrfxFormat(pBitmap->GetFormat());
			ci.sampleCount = grfx::SAMPLE_COUNT_1;
			ci.mipLevelCount = mipLevelCount;
			ci.arrayLayerCount = 1;
			ci.usageFlags.bits.transferDst = true;
			ci.usageFlags.bits.transferSrc = true; // For CS
			ci.usageFlags.bits.sampled = true;
			ci.usageFlags.bits.storage = true; // For CS
			ci.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;
			ci.initialState = grfx::RESOURCE_STATE_SHADER_RESOURCE;

			ci.usageFlags.flags |= options.mAdditionalUsage;

			ppxres = pQueue->GetDevice()->CreateImage(&ci, &targetImage);
			if (Failed(ppxres)) {
				return ppxres;
			}
			SCOPED_DESTROYER.AddObject(targetImage);
		}

		// Copy first level mip into image
		ppxres = CopyBitmapToImage(
			pQueue,
			pBitmap,
			targetImage,
			0,
			0,
			grfx::RESOURCE_STATE_SHADER_RESOURCE,
			grfx::RESOURCE_STATE_SHADER_RESOURCE);

		if (Failed(ppxres)) {
			return ppxres;
		}

		// Transition image mips from 1 to rest to general layout
		{
			// Create a command buffer
			grfx::CommandBufferPtr cmdBuffer;
			CHECKED_CALL(pQueue->CreateCommandBuffer(&cmdBuffer));
			// Record command buffer
			CHECKED_CALL(cmdBuffer->Begin());
			cmdBuffer->TransitionImageLayout(targetImage, 1, mipLevelCount - 1, 0, 1, grfx::RESOURCE_STATE_SHADER_RESOURCE, grfx::RESOURCE_STATE_GENERAL);
			CHECKED_CALL(cmdBuffer->End());
			// Submitt to queue
			grfx::SubmitInfo submitInfo = {};
			submitInfo.commandBufferCount = 1;
			submitInfo.ppCommandBuffers = &cmdBuffer;
			submitInfo.waitSemaphoreCount = 0;
			submitInfo.ppWaitSemaphores = nullptr;
			submitInfo.signalSemaphoreCount = 0;
			submitInfo.ppSignalSemaphores = nullptr;
			submitInfo.pFence = nullptr;
			CHECKED_CALL(pQueue->Submit(&submitInfo));
		}

		// Requiered to setup compute shader
		grfx::ShaderModulePtr        computeShader;
		grfx::PipelineInterfacePtr   computePipelineInterface;
		grfx::ComputePipelinePtr     computePipeline;
		grfx::DescriptorSetLayoutPtr computeDescriptorSetLayout;
		grfx::DescriptorPoolPtr      descriptorPool;
		grfx::DescriptorSetPtr       computeDescriptorSet;
		grfx::BufferPtr              uniformBuffer;
		grfx::SamplerPtr             sampler;

		{ // Uniform buffer
			grfx::BufferCreateInfo bufferCreateInfo = {};
			bufferCreateInfo.size = MINIMUM_UNIFORM_BUFFER_SIZE;
			bufferCreateInfo.usageFlags.bits.uniformBuffer = true;
			bufferCreateInfo.memoryUsage = grfx::MEMORY_USAGE_CPU_TO_GPU;
			CHECKED_CALL(pQueue->GetDevice()->CreateBuffer(&bufferCreateInfo, &uniformBuffer));
		}

		{ // Sampler
			grfx::SamplerCreateInfo samplerCreateInfo = {};
			CHECKED_CALL(pQueue->GetDevice()->CreateSampler(&samplerCreateInfo, &sampler));
		}

		{ // Descriptors
			grfx::DescriptorPoolCreateInfo poolCreateInfo = {};
			poolCreateInfo.storageImage = 1;
			poolCreateInfo.uniformBuffer = 1;
			poolCreateInfo.sampledImage = 1;
			poolCreateInfo.sampler = 1;

			CHECKED_CALL(pQueue->GetDevice()->CreateDescriptorPool(&poolCreateInfo, &descriptorPool));

			{ // Shader inputs
				grfx::DescriptorSetLayoutCreateInfo layoutCreateInfo = {};
				layoutCreateInfo.bindings.push_back(grfx::DescriptorBinding(0, grfx::DESCRIPTOR_TYPE_STORAGE_IMAGE));
				layoutCreateInfo.bindings.push_back(grfx::DescriptorBinding(1, grfx::DESCRIPTOR_TYPE_UNIFORM_BUFFER));
				layoutCreateInfo.bindings.push_back(grfx::DescriptorBinding(2, grfx::DESCRIPTOR_TYPE_SAMPLED_IMAGE));
				layoutCreateInfo.bindings.push_back(grfx::DescriptorBinding(3, grfx::DESCRIPTOR_TYPE_SAMPLER));

				CHECKED_CALL(pQueue->GetDevice()->CreateDescriptorSetLayout(&layoutCreateInfo, &computeDescriptorSetLayout));

				CHECKED_CALL(pQueue->GetDevice()->AllocateDescriptorSet(descriptorPool, computeDescriptorSetLayout, &computeDescriptorSet));

				grfx::WriteDescriptor write = {};
				write.binding = 1;
				write.type = grfx::DESCRIPTOR_TYPE_UNIFORM_BUFFER;
				write.bufferOffset = 0;
				write.bufferRange = WHOLE_SIZE;
				write.pBuffer = uniformBuffer;
				CHECKED_CALL(computeDescriptorSet->UpdateDescriptors(1, &write));

				write = {};
				write.binding = 3;
				write.type = grfx::DESCRIPTOR_TYPE_SAMPLER;
				write.pSampler = sampler;
				CHECKED_CALL(computeDescriptorSet->UpdateDescriptors(1, &write));
			}
		}

		// Compute pipeline
		{
			grfx::Api         api = pQueue->GetDevice()->GetApi();
			std::vector<char> bytecode;
			switch (api) {
			case grfx::API_VK_1_1:
			case grfx::API_VK_1_2:
				bytecode = { std::begin(GenerateMipShaderVK), std::end(GenerateMipShaderVK) };
				break;
			case grfx::API_DX_12_0:
			case grfx::API_DX_12_1:
				bytecode = { std::begin(GenerateMipShaderDX), std::end(GenerateMipShaderDX) };
				break;
			default:
				ASSERT_MSG(false, "CS shader for this API is not present");
			}

			ASSERT_MSG(!bytecode.empty(), "CS shader bytecode load failed");
			grfx::ShaderModuleCreateInfo shaderCreateInfo = { static_cast<uint32_t>(bytecode.size()), bytecode.data() };
			CHECKED_CALL(pQueue->GetDevice()->CreateShaderModule(&shaderCreateInfo, &computeShader));

			grfx::PipelineInterfaceCreateInfo piCreateInfo = {};
			piCreateInfo.setCount = 1;
			piCreateInfo.sets[0].set = 0;
			piCreateInfo.sets[0].pLayout = computeDescriptorSetLayout;
			CHECKED_CALL(pQueue->GetDevice()->CreatePipelineInterface(&piCreateInfo, &computePipelineInterface));

			grfx::ComputePipelineCreateInfo cpCreateInfo = {};
			cpCreateInfo.CS = { computeShader.Get(), "CSMain" };
			cpCreateInfo.pPipelineInterface = computePipelineInterface;
			CHECKED_CALL(pQueue->GetDevice()->CreateComputePipeline(&cpCreateInfo, &computePipeline));
		}

		// Prepare data for CS
		int srcCurrentWidth = pBitmap->GetWidth();
		int srcCurrentHeight = pBitmap->GetHeight();

		// For the uniform (constant) data
		struct alignas(16) ShaderConstantData
		{
			float texel_size[2]; // 1.0 / srcTex.Dimensions
			int   src_mip_level;
			// Case to filter according the parity of the dimensions in the src texture.
			// Must be one of 0, 1, 2 or 3
			// See CSMain function bellow
			int dimension_case;
			// Ignored for now, if we want to use a different filter strategy. Current one is bi-linear filter
			int filter_option;
		};

		// Generate the rest of the mips
		for (uint32_t i = 1; i < mipLevelCount; ++i) {
			grfx::StorageImageViewPtr storageImageView;
			grfx::SampledImageViewPtr sampledImageView;

			{ // Pass uniform data into shader
				ShaderConstantData constants;
				// Calculate current texel size
				constants.texel_size[0] = 1.0f / float(srcCurrentWidth);
				constants.texel_size[1] = 1.0f / float(srcCurrentHeight);
				// Calculate current dimension case
				// If width is even
				if ((srcCurrentWidth % 2) == 0) {
					// Test the height
					constants.dimension_case = (srcCurrentHeight % 2) == 0 ? 0 : 1;
				}
				else { // width is odd
					// Test the height
					constants.dimension_case = (srcCurrentHeight % 2) == 0 ? 2 : 3;
				}
				constants.src_mip_level = i - 1; // We calculate mip level i with level i - 1
				constants.filter_option = 1;     // Ignored for now, defaults to bilinear
				void* pData = nullptr;
				CHECKED_CALL(uniformBuffer->MapMemory(0, &pData));
				memcpy(pData, &constants, sizeof(constants));
				uniformBuffer->UnmapMemory();
			}

			{ // Storage Image view
				grfx::StorageImageViewCreateInfo storageViewCreateInfo = grfx::StorageImageViewCreateInfo::GuessFromImage(targetImage);
				storageViewCreateInfo.mipLevel = i;
				storageViewCreateInfo.mipLevelCount = 1;

				CHECKED_CALL(pQueue->GetDevice()->CreateStorageImageView(&storageViewCreateInfo, &storageImageView));

				grfx::WriteDescriptor write = {};
				write.binding = 0;
				write.type = grfx::DESCRIPTOR_TYPE_STORAGE_IMAGE;
				write.pImageView = storageImageView;
				CHECKED_CALL(computeDescriptorSet->UpdateDescriptors(1, &write));
			}

			{ // Sampler Image View
				grfx::SampledImageViewCreateInfo sampledViewCreateInfo = grfx::SampledImageViewCreateInfo::GuessFromImage(targetImage);
				sampledViewCreateInfo.mipLevel = i - 1;
				sampledViewCreateInfo.mipLevelCount = 1;

				CHECKED_CALL(pQueue->GetDevice()->CreateSampledImageView(&sampledViewCreateInfo, &sampledImageView));

				grfx::WriteDescriptor write = {};
				write.binding = 2;
				write.type = grfx::DESCRIPTOR_TYPE_SAMPLED_IMAGE;
				write.pImageView = sampledImageView;
				CHECKED_CALL(computeDescriptorSet->UpdateDescriptors(1, &write));
			}

			{ // Create a command buffer
				grfx::CommandBufferPtr cmdBuffer;
				CHECKED_CALL(pQueue->CreateCommandBuffer(&cmdBuffer));
				// Record command buffer
				CHECKED_CALL(cmdBuffer->Begin());
				cmdBuffer->BindComputeDescriptorSets(computePipelineInterface, 1, &computeDescriptorSet);
				cmdBuffer->BindComputePipeline(computePipeline);
				// Update width and height for the next iteration
				srcCurrentWidth = srcCurrentWidth > 1 ? srcCurrentWidth / 2 : 1;
				srcCurrentHeight = srcCurrentHeight > 1 ? srcCurrentHeight / 2 : 1;
				// Launch the CS once per dst size (which is half of src size)
				cmdBuffer->Dispatch(srcCurrentWidth, srcCurrentHeight, 1);
				CHECKED_CALL(cmdBuffer->End());
				// Submitt to queue
				grfx::SubmitInfo submitInfo = {};
				submitInfo.commandBufferCount = 1;
				submitInfo.ppCommandBuffers = &cmdBuffer;
				submitInfo.waitSemaphoreCount = 0;
				submitInfo.ppWaitSemaphores = nullptr;
				submitInfo.signalSemaphoreCount = 0;
				submitInfo.ppSignalSemaphores = nullptr;
				submitInfo.pFence = nullptr;

				CHECKED_CALL(pQueue->Submit(&submitInfo));
				CHECKED_CALL(pQueue->WaitIdle());
			}

			{ // Transition i-th mip back to shader resource
				// Create a command buffer
				grfx::CommandBufferPtr cmdBuffer;
				CHECKED_CALL(pQueue->CreateCommandBuffer(&cmdBuffer));
				// Record into command buffer
				CHECKED_CALL(cmdBuffer->Begin());
				cmdBuffer->TransitionImageLayout(targetImage, i, 1, 0, 1, grfx::RESOURCE_STATE_GENERAL, grfx::RESOURCE_STATE_SHADER_RESOURCE);
				CHECKED_CALL(cmdBuffer->End());
				// Submitt to queue
				grfx::SubmitInfo submitInfo = {};
				submitInfo.commandBufferCount = 1;
				submitInfo.ppCommandBuffers = &cmdBuffer;
				submitInfo.waitSemaphoreCount = 0;
				submitInfo.ppWaitSemaphores = nullptr;
				submitInfo.signalSemaphoreCount = 0;
				submitInfo.ppSignalSemaphores = nullptr;
				submitInfo.pFence = nullptr;
				CHECKED_CALL(pQueue->Submit(&submitInfo));
				CHECKED_CALL(pQueue->WaitIdle());
			}
		}

		// Change ownership to reference so object doesn't get destroyed
		targetImage->SetOwnership(grfx::OWNERSHIP_REFERENCE);

		// Assign output
		*ppImage = targetImage;

		return SUCCESS;
	}

	bool IsDDSFile(const std::filesystem::path& path)
	{
		return (std::strstr(path.string().c_str(), ".dds") != nullptr || std::strstr(path.string().c_str(), ".ktx") != nullptr);
	}

	struct MipLevel
	{
		uint32_t width;
		uint32_t height;
		uint32_t bufferWidth;
		uint32_t bufferHeight;
		uint32_t srcRowStride;
		uint32_t dstRowStride;
		size_t   offset;
	};

	Result CreateImageFromCompressedImage(
		grfx::Queue* pQueue,
		const gli::texture& image,
		grfx::Image** ppImage,
		const ImageOptions& options)
	{
		Result ppxres;

		LOG_INFO("Target type: " << grfx::ToString(image.target()) << "\n");
		LOG_INFO("Format: " << grfx::ToString(image.format()) << "\n");
		LOG_INFO("Swizzles: " << image.swizzles()[0] << ", " << image.swizzles()[1] << ", " << image.swizzles()[2] << ", " << image.swizzles()[3] << "\n");
		LOG_INFO("Layer information:\n"
			<< "\tBase layer: " << image.base_layer() << "\n"
			<< "\tMax layer: " << image.max_layer() << "\n"
			<< "\t# of layers: " << image.layers() << "\n");
		LOG_INFO("Face information:\n"
			<< "\tBase face: " << image.base_face() << "\n"
			<< "\tMax face: " << image.max_face() << "\n"
			<< "\t# of faces: " << image.faces() << "\n");
		LOG_INFO("Level information:\n"
			<< "\tBase level: " << image.base_level() << "\n"
			<< "\tMax level: " << image.max_level() << "\n"
			<< "\t# of levels: " << image.levels() << "\n");
		LOG_INFO("Image extents by level:\n");
		for (gli::texture::size_type level = 0; level < image.levels(); level++) {
			LOG_INFO("\textent(level == " << level << "): [" << image.extent(level)[0] << ", " << image.extent(level)[1] << ", " << image.extent(level)[2] << "]\n");
		}
		LOG_INFO("Total image size (bytes): " << image.size() << "\n");
		LOG_INFO("Image size by level:\n");
		for (gli::texture::size_type i = 0; i < image.levels(); i++) {
			LOG_INFO("\tsize(level == " << i << "): " << image.size(i) << "\n");
		}
		LOG_INFO("Image data pointer: " << image.data() << "\n");

		ASSERT_MSG((image.target() == gli::TARGET_2D), "Expecting a 2D DDS image.");

		// Scoped destroy
		grfx::ScopeDestroyer SCOPED_DESTROYER(pQueue->GetDevice());

		// Cap mip level count
		const grfx::Format format = ToGrfxFormat(image.format());
		const uint32_t     maxMipLevelCount = std::min<uint32_t>(options.mMipLevelCount, static_cast<uint32_t>(image.levels()));
		const uint32_t     imageWidth = static_cast<uint32_t>(image.extent(0)[0]);
		const uint32_t     imageHeight = static_cast<uint32_t>(image.extent(0)[1]);

		// Row stride and texture offset alignment to handle DX's requirements
		const uint32_t rowStrideAlignment = grfx::IsDx12(pQueue->GetDevice()->GetApi()) ? D3D12_TEXTURE_DATA_PITCH_ALIGNMENT : 1;
		const uint32_t offsetAlignment = grfx::IsDx12(pQueue->GetDevice()->GetApi()) ? D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT : 1;
		const uint32_t bytesPerTexel = grfx::GetFormatDescription(format)->bytesPerTexel;
		const uint32_t blockWidth = grfx::GetFormatDescription(format)->blockWidth;

		// Create staging buffer
		grfx::BufferPtr stagingBuffer;
		LOG_INFO("Storage size for image: " << image.size() << " bytes\n");
		LOG_INFO("Is image compressed: " << (gli::is_compressed(image.format()) ? "YES" : "NO"));

		grfx::BufferCreateInfo ci = {};
		ci.size = 0;
		ci.usageFlags.bits.transferSrc = true;
		ci.memoryUsage = grfx::MEMORY_USAGE_CPU_TO_GPU;

		// Compute each mipmap level size and alignments.
		// This step filters out levels too small to match minimal alignment.
		std::vector<MipLevel> levelSizes;
		for (gli::texture::size_type level = 0; level < maxMipLevelCount; level++) {
			MipLevel ls;
			ls.width = static_cast<uint32_t>(image.extent(level)[0]);
			ls.height = static_cast<uint32_t>(image.extent(level)[1]);
			// Stop when mipmaps are becoming too small to respect the format alignment.
			// The DXT* format documentation says texture sizes must be a multiple of 4.
			// For some reason, tools like imagemagick can generate mipmaps with a size < 4.
			// We need to ignore those.
			if (ls.width < blockWidth || ls.height < blockWidth) {
				break;
			}

			// If the DDS file contains textures which size is not a multiple of 4, something is wrong.
			// Since imagemagick can create invalid mipmap levels, I'd assume it can also create invalid
			// textures with non-multiple-of-4 sizes. Asserting to catch those.
			if (ls.width % blockWidth != 0 || ls.height % blockWidth != 0) {
				LOG_ERROR("Compressed textures width & height must be a multiple of the block size.");
				return ERROR_IMAGE_INVALID_FORMAT;
			}

			// Compute pitch for this format.
			// See https://learn.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide
			const uint32_t blockRowByteSize = (bytesPerTexel * blockWidth) / (blockWidth * blockWidth);
			const uint32_t rowStride = (ls.width * blockRowByteSize);

			ls.bufferWidth = ls.width;
			ls.bufferHeight = ls.height;
			ls.srcRowStride = rowStride;
			ls.dstRowStride = RoundUp<uint32_t>(ls.srcRowStride, rowStrideAlignment);

			ls.offset = ci.size;
			ci.size += (image.size(level) / ls.srcRowStride) * ls.dstRowStride;
			ci.size = RoundUp<uint64_t>(ci.size, offsetAlignment);
			levelSizes.emplace_back(std::move(ls));
		}
		const uint32_t mipmapLevelCount = CountU32(levelSizes);
		ASSERT_MSG(mipmapLevelCount > 0, "Requested texture size too small for the chosen format.");

		ppxres = pQueue->GetDevice()->CreateBuffer(&ci, &stagingBuffer);
		if (Failed(ppxres)) {
			return ppxres;
		}
		SCOPED_DESTROYER.AddObject(stagingBuffer);

		// Map and copy to staging buffer
		void* pBufferAddress = nullptr;
		ppxres = stagingBuffer->MapMemory(0, &pBufferAddress);
		if (Failed(ppxres)) {
			return ppxres;
		}

		for (size_t level = 0; level < mipmapLevelCount; level++) {
			auto& ls = levelSizes[level];

			const char* pSrc = static_cast<const char*>(image.data(0, 0, level));
			char* pDst = static_cast<char*>(pBufferAddress) + ls.offset;
			for (uint32_t row = 0; row * ls.srcRowStride < image.size(level); row++) {
				const char* pSrcRow = pSrc + row * ls.srcRowStride;
				char* pDstRow = pDst + row * ls.dstRowStride;
				memcpy(pDstRow, pSrcRow, ls.srcRowStride);
			}
		}

		stagingBuffer->UnmapMemory();

		// Create target image
		grfx::ImagePtr targetImage;
		{
			grfx::ImageCreateInfo ci = {};
			ci.type = grfx::IMAGE_TYPE_2D;
			ci.width = imageWidth;
			ci.height = imageHeight;
			ci.depth = 1;
			ci.format = format;
			ci.sampleCount = grfx::SAMPLE_COUNT_1;
			ci.mipLevelCount = mipmapLevelCount;
			ci.arrayLayerCount = 1;
			ci.usageFlags.bits.transferDst = true;
			ci.usageFlags.bits.sampled = true;
			ci.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;

			ci.usageFlags.flags |= options.mAdditionalUsage;

			ppxres = pQueue->GetDevice()->CreateImage(&ci, &targetImage);
			if (Failed(ppxres)) {
				return ppxres;
			}
			SCOPED_DESTROYER.AddObject(targetImage);
		}

		std::vector<grfx::BufferToImageCopyInfo> copyInfos(mipmapLevelCount);
		for (gli::texture::size_type level = 0; level < mipmapLevelCount; level++) {
			auto& ls = levelSizes[level];
			auto& copyInfo = copyInfos[level];

			// Copy info
			copyInfo.srcBuffer.imageWidth = ls.bufferWidth;
			copyInfo.srcBuffer.imageHeight = ls.bufferHeight;
			copyInfo.srcBuffer.imageRowStride = ls.dstRowStride;
			copyInfo.srcBuffer.footprintOffset = ls.offset;
			copyInfo.srcBuffer.footprintWidth = ls.bufferWidth;
			copyInfo.srcBuffer.footprintHeight = ls.bufferHeight;
			copyInfo.srcBuffer.footprintDepth = 1;
			copyInfo.dstImage.mipLevel = static_cast<uint32_t>(level);
			copyInfo.dstImage.arrayLayer = 0;
			copyInfo.dstImage.arrayLayerCount = 1;
			copyInfo.dstImage.x = 0;
			copyInfo.dstImage.y = 0;
			copyInfo.dstImage.z = 0;
			copyInfo.dstImage.width = ls.width;
			copyInfo.dstImage.height = ls.height;
			copyInfo.dstImage.depth = 1;
		}

		// Copy to GPU image
		ppxres = pQueue->CopyBufferToImage(
			copyInfos,
			stagingBuffer,
			targetImage,
			ALL_SUBRESOURCES,
			grfx::RESOURCE_STATE_UNDEFINED,
			grfx::RESOURCE_STATE_SHADER_RESOURCE);
		if (Failed(ppxres)) {
			return ppxres;
		}

		// Change ownership to reference so object doesn't get destroyed
		targetImage->SetOwnership(grfx::OWNERSHIP_REFERENCE);

		// Assign output
		*ppImage = targetImage;

		return SUCCESS;
	}

	// -------------------------------------------------------------------------------------------------

	Result CreateImageFromFile(
		grfx::Queue* pQueue,
		const std::filesystem::path& path,
		grfx::Image** ppImage,
		const ImageOptions& options,
		bool                         useGpu)
	{
		ASSERT_NULL_ARG(pQueue);
		ASSERT_NULL_ARG(ppImage);

		ScopedTimer timer("Image creation from file '" + path.string() + "'");

		Result ppxres;
		if (Bitmap::IsBitmapFile(path)) {
			// Load bitmap
			Bitmap bitmap;
			ppxres = Bitmap::LoadFile(path, &bitmap);
			if (Failed(ppxres)) {
				return ppxres;
			}

			if (useGpu) {
				ppxres = CreateImageFromBitmapGpu(pQueue, &bitmap, ppImage, options);
			}
			else {
				ppxres = CreateImageFromBitmap(pQueue, &bitmap, ppImage, options);
			}

			if (Failed(ppxres)) {
				return ppxres;
			}
		}
		else if (IsDDSFile(path)) {
			// Generate a bitmap out of a DDS
			gli::texture image = gli::load(path.string().c_str());
			if (image.empty()) {
				return Result::ERROR_IMAGE_FILE_LOAD_FAILED;
			}
			LOG_INFO("Successfully loaded compressed image: " << path);
			ppxres = CreateImageFromCompressedImage(pQueue, image, ppImage, options);
		}
		else {
			ppxres = Result::ERROR_IMAGE_FILE_LOAD_FAILED;
		}

		if (ppxres != Result::SUCCESS) {
			LOG_INFO("Failed to create image from image file: " << path);
		}
		return SUCCESS;
	}

	// -------------------------------------------------------------------------------------------------

	Result CopyBitmapToTexture(
		grfx::Queue* pQueue,
		const Bitmap* pBitmap,
		grfx::Texture* pTexture,
		uint32_t            mipLevel,
		uint32_t            arrayLayer,
		grfx::ResourceState stateBefore,
		grfx::ResourceState stateAfter)
	{
		ASSERT_NULL_ARG(pQueue);
		ASSERT_NULL_ARG(pBitmap);
		ASSERT_NULL_ARG(pTexture);

		Result ppxres = CopyBitmapToImage(
			pQueue,
			pBitmap,
			pTexture->GetImage(),
			mipLevel,
			arrayLayer,
			stateBefore,
			stateAfter);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	// -------------------------------------------------------------------------------------------------

	Result CreateTextureFromBitmap(
		grfx::Queue* pQueue,
		const Bitmap* pBitmap,
		grfx::Texture** ppTexture,
		const TextureOptions& options)
	{
		ASSERT_NULL_ARG(pQueue);
		ASSERT_NULL_ARG(pBitmap);
		ASSERT_NULL_ARG(ppTexture);

		Result ppxres = ERROR_FAILED;

		// Scoped destroy
		grfx::ScopeDestroyer SCOPED_DESTROYER(pQueue->GetDevice());

		// Cap mip level count
		uint32_t maxMipLevelCount = Mipmap::CalculateLevelCount(pBitmap->GetWidth(), pBitmap->GetHeight());
		uint32_t mipLevelCount = std::min<uint32_t>(options.mMipLevelCount, maxMipLevelCount);

		// Create target texture
		grfx::TexturePtr targetTexture;
		{
			grfx::TextureCreateInfo ci = {};
			ci.pImage = nullptr;
			ci.imageType = grfx::IMAGE_TYPE_2D;
			ci.width = pBitmap->GetWidth();
			ci.height = pBitmap->GetHeight();
			ci.depth = 1;
			ci.imageFormat = ToGrfxFormat(pBitmap->GetFormat());
			ci.sampleCount = grfx::SAMPLE_COUNT_1;
			ci.mipLevelCount = mipLevelCount;
			ci.arrayLayerCount = 1;
			ci.usageFlags.bits.transferDst = true;
			ci.usageFlags.bits.sampled = true;
			ci.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;
			ci.initialState = options.mInitialState;
			ci.RTVClearValue = { {0, 0, 0, 0} };
			ci.DSVClearValue = { 1.0f, 0xFF };
			ci.sampledImageViewType = grfx::IMAGE_VIEW_TYPE_UNDEFINED;
			ci.sampledImageViewFormat = grfx::FORMAT_UNDEFINED;
			ci.pSampledImageYcbcrConversion = options.mYcbcrConversion;
			ci.renderTargetViewFormat = grfx::FORMAT_UNDEFINED;
			ci.depthStencilViewFormat = grfx::FORMAT_UNDEFINED;
			ci.storageImageViewFormat = grfx::FORMAT_UNDEFINED;
			ci.ownership = grfx::OWNERSHIP_REFERENCE;

			ci.usageFlags.flags |= options.mAdditionalUsage;

			ppxres = pQueue->GetDevice()->CreateTexture(&ci, &targetTexture);
			if (Failed(ppxres)) {
				return ppxres;
			}
			SCOPED_DESTROYER.AddObject(targetTexture);
		}

		// Since this mipmap is temporary, it's safe to use the static pool.
		Mipmap mipmap = Mipmap(*pBitmap, mipLevelCount, /* useStaticPool= */ true);
		if (!mipmap.IsOk()) {
			return ERROR_FAILED;
		}

		// Copy mips to texture
		for (uint32_t mipLevel = 0; mipLevel < mipLevelCount; ++mipLevel) {
			const Bitmap* pMip = mipmap.GetMip(mipLevel);

			ppxres = CopyBitmapToTexture(
				pQueue,
				pMip,
				targetTexture,
				mipLevel,
				0,
				options.mInitialState,
				options.mInitialState);
			if (Failed(ppxres)) {
				return ppxres;
			}
		}

		// Change ownership to reference so object doesn't get destroyed
		targetTexture->SetOwnership(grfx::OWNERSHIP_REFERENCE);

		// Assign output
		*ppTexture = targetTexture;

		return SUCCESS;
	}

	Result CreateTextureFromMipmap(
		grfx::Queue* pQueue,
		const Mipmap* pMipmap,
		grfx::Texture** ppTexture,
		const TextureOptions& options)
	{
		ASSERT_NULL_ARG(pQueue);
		ASSERT_NULL_ARG(pMipmap);
		ASSERT_NULL_ARG(ppTexture);

		Result ppxres = ERROR_FAILED;

		// Scoped destroy
		grfx::ScopeDestroyer SCOPED_DESTROYER(pQueue->GetDevice());

		// Cap mip level count
		auto pMip0 = pMipmap->GetMip(0);

		// Create target texture
		grfx::TexturePtr targetTexture;
		{
			grfx::TextureCreateInfo ci = {};
			ci.pImage = nullptr;
			ci.imageType = grfx::IMAGE_TYPE_2D;
			ci.width = pMip0->GetWidth();
			ci.height = pMip0->GetHeight();
			ci.depth = 1;
			ci.imageFormat = ToGrfxFormat(pMip0->GetFormat());
			ci.sampleCount = grfx::SAMPLE_COUNT_1;
			ci.mipLevelCount = pMipmap->GetLevelCount();
			ci.arrayLayerCount = 1;
			ci.usageFlags.bits.transferDst = true;
			ci.usageFlags.bits.sampled = true;
			ci.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;
			ci.initialState = options.mInitialState;
			ci.RTVClearValue = { {0, 0, 0, 0} };
			ci.DSVClearValue = { 1.0f, 0xFF };
			ci.sampledImageViewType = grfx::IMAGE_VIEW_TYPE_UNDEFINED;
			ci.sampledImageViewFormat = grfx::FORMAT_UNDEFINED;
			ci.pSampledImageYcbcrConversion = options.mYcbcrConversion;
			ci.renderTargetViewFormat = grfx::FORMAT_UNDEFINED;
			ci.depthStencilViewFormat = grfx::FORMAT_UNDEFINED;
			ci.storageImageViewFormat = grfx::FORMAT_UNDEFINED;
			ci.ownership = grfx::OWNERSHIP_REFERENCE;

			ci.usageFlags.flags |= options.mAdditionalUsage;

			ppxres = pQueue->GetDevice()->CreateTexture(&ci, &targetTexture);
			if (Failed(ppxres)) {
				return ppxres;
			}
			SCOPED_DESTROYER.AddObject(targetTexture);
		}

		// Copy mips to texture
		for (uint32_t mipLevel = 0; mipLevel < pMipmap->GetLevelCount(); ++mipLevel) {
			const Bitmap* pMip = pMipmap->GetMip(mipLevel);

			ppxres = CopyBitmapToTexture(
				pQueue,
				pMip,
				targetTexture,
				mipLevel,
				0,
				options.mInitialState,
				options.mInitialState);
			if (Failed(ppxres)) {
				return ppxres;
			}
		}

		// Change ownership to reference so object doesn't get destroyed
		targetTexture->SetOwnership(grfx::OWNERSHIP_REFERENCE);

		// Assign output
		*ppTexture = targetTexture;

		return SUCCESS;
	}

	// -------------------------------------------------------------------------------------------------

	Result CreateTextureFromFile(
		grfx::Queue* pQueue,
		const std::filesystem::path& path,
		grfx::Texture** ppTexture,
		const TextureOptions& options)
	{
		ASSERT_NULL_ARG(pQueue);
		ASSERT_NULL_ARG(ppTexture);

		ScopedTimer timer("Texture creation from image file '" + path.string() + "'");

		// Load bitmap
		Bitmap bitmap;
		Result ppxres = Bitmap::LoadFile(path, &bitmap);
		if (Failed(ppxres)) {
			return ppxres;
		}
		return CreateTextureFromBitmap(pQueue, &bitmap, ppTexture, options);
	}

	// -------------------------------------------------------------------------------------------------

	struct SubImage
	{
		uint32_t width = 0;
		uint32_t height = 0;
		uint32_t bufferOffset = 0;
	};

	SubImage CalcSubimageCrossHorizontalLeft(
		uint32_t     subImageIndex,
		uint32_t     imageWidth,
		uint32_t     imageHeight,
		grfx::Format format)
	{
		uint32_t cellPixelsX = imageWidth / 4;
		uint32_t cellPixelsY = imageHeight / 3;
		uint32_t cellX = 0;
		uint32_t cellY = 0;
		switch (subImageIndex) {
		default: break;

		case 0: {
			cellX = 1;
			cellY = 0;
		} break;

		case 1: {
			cellX = 0;
			cellY = 1;
		} break;

		case 2: {
			cellX = 1;
			cellY = 1;
		} break;

		case 3: {
			cellX = 2;
			cellY = 1;
		} break;

		case 4: {
			cellX = 3;
			cellY = 1;
		} break;

		case 5: {
			cellX = 1;
			cellY = 2;

		} break;
		}

		uint32_t pixelStride = grfx::GetFormatDescription(format)->bytesPerTexel;
		uint32_t pixelOffsetX = cellX * cellPixelsX * pixelStride;
		uint32_t pixelOffsetY = cellY * cellPixelsY * imageWidth * pixelStride;

		SubImage subImage = {};
		subImage.width = cellPixelsX;
		subImage.height = cellPixelsY;
		subImage.bufferOffset = pixelOffsetX + pixelOffsetY;

		return subImage;
	}

	Result CreateIBLTexturesFromFile(
		grfx::Queue* pQueue,
		const std::filesystem::path& path,
		grfx::Texture** ppIrradianceTexture,
		grfx::Texture** ppEnvironmentTexture)
	{
		ASSERT_NULL_ARG(pQueue);
		ASSERT_NULL_ARG(ppIrradianceTexture);
		ASSERT_NULL_ARG(ppEnvironmentTexture);

		auto fileBytes = fs::load_file(path);
		if (!fileBytes.has_value()) {
			return ERROR_IMAGE_FILE_LOAD_FAILED;
		}

		auto is = std::istringstream(std::string(fileBytes.value().data(), fileBytes.value().size()));
		if (!is.good()) {
			return ERROR_IMAGE_FILE_LOAD_FAILED;
		}

		std::filesystem::path irrFile;
		is >> irrFile;

		std::filesystem::path envFile;
		is >> envFile;

		uint32_t baseWidth = 0;
		is >> baseWidth;

		uint32_t baseHeight = 0;
		is >> baseHeight;

		uint32_t levelCount = 0;
		is >> levelCount;

		if (irrFile.empty() || envFile.empty() || (baseWidth == 0) || (baseHeight == 0) || (levelCount == 0)) {
			return ERROR_IMAGE_FILE_LOAD_FAILED;
		}

		// Create irradiance texture - does not require mip maps
		std::filesystem::path irrFilePath = path.parent_path() / irrFile;
		Result                ppxres;
		{
			ScopedTimer timer("Texture creation from file '" + irrFilePath.string() + "'");
			ppxres = CreateTextureFromFile(pQueue, irrFilePath, ppIrradianceTexture);
		}
		if (Failed(ppxres)) {
			return ppxres;
		}

		// Load IBL environment map - this is stored as a bitmap on disk
		std::filesystem::path envFilePath = path.parent_path() / envFile;
		ScopedTimer           timer("Texture creation from mipmap file '" + envFilePath.string() + "'");
		Mipmap                mipmap = {};
		ppxres = Mipmap::LoadFile(envFilePath, baseWidth, baseHeight, &mipmap, levelCount);
		if (Failed(ppxres)) {
			return ppxres;
		}

		// Create environment texture
		return CreateTextureFromMipmap(pQueue, &mipmap, ppEnvironmentTexture);
	}

	// -------------------------------------------------------------------------------------------------

	Result CreateCubeMapFromFile(
		grfx::Queue* pQueue,
		const std::filesystem::path& path,
		const CubeMapCreateInfo* pCreateInfo,
		grfx::Image** ppImage,
		const grfx::ImageUsageFlags& additionalImageUsage)
	{
		ASSERT_NULL_ARG(pQueue);
		ASSERT_NULL_ARG(ppImage);
		ScopedTimer timer("Cubemap creation from file '" + path.string() + "'");

		// Load bitmap
		Bitmap bitmap;
		Result ppxres = Bitmap::LoadFile(path, &bitmap);
		if (Failed(ppxres)) {
			return ppxres;
		}

		// Scoped destroy
		grfx::ScopeDestroyer SCOPED_DESTROYER(pQueue->GetDevice());

		// Create staging buffer
		grfx::BufferPtr stagingBuffer;
		{
			uint64_t bitmapFootprintSize = bitmap.GetFootprintSize();

			grfx::BufferCreateInfo ci = {};
			ci.size = bitmapFootprintSize;
			ci.usageFlags.bits.transferSrc = true;
			ci.memoryUsage = grfx::MEMORY_USAGE_CPU_TO_GPU;

			ppxres = pQueue->GetDevice()->CreateBuffer(&ci, &stagingBuffer);
			if (Failed(ppxres)) {
				return ppxres;
			}
			SCOPED_DESTROYER.AddObject(stagingBuffer);

			// Map and copy to staging buffer
			void* pBufferAddress = nullptr;
			ppxres = stagingBuffer->MapMemory(0, &pBufferAddress);
			if (Failed(ppxres)) {
				return ppxres;
			}
			std::memcpy(pBufferAddress, bitmap.GetData(), bitmapFootprintSize);
			stagingBuffer->UnmapMemory();
		}

		// Target format
		grfx::Format targetFormat = grfx::FORMAT_R8G8B8A8_UNORM;

		ASSERT_MSG(bitmap.GetWidth() * 3 == bitmap.GetHeight() * 4, "cubemap texture dimension must be a multiple of 4x3");
		// Calculate subImage to use for target image dimensions
		SubImage tmpSubImage = CalcSubimageCrossHorizontalLeft(0, bitmap.GetWidth(), bitmap.GetHeight(), targetFormat);

		ASSERT_MSG(tmpSubImage.width == tmpSubImage.height, "cubemap face width != height");
		// Create target image
		grfx::ImagePtr targetImage;
		{
			grfx::ImageCreateInfo ci = {};
			ci.type = grfx::IMAGE_TYPE_CUBE;
			ci.width = tmpSubImage.width;
			ci.height = tmpSubImage.height;
			ci.depth = 1;
			ci.format = targetFormat;
			ci.sampleCount = grfx::SAMPLE_COUNT_1;
			ci.mipLevelCount = 1;
			ci.arrayLayerCount = 6;
			ci.usageFlags.bits.transferDst = true;
			ci.usageFlags.bits.sampled = true;
			ci.memoryUsage = grfx::MEMORY_USAGE_GPU_ONLY;

			ci.usageFlags.flags |= additionalImageUsage.flags;

			ppxres = pQueue->GetDevice()->CreateImage(&ci, &targetImage);
			if (Failed(ppxres)) {
				return ppxres;
			}
			SCOPED_DESTROYER.AddObject(targetImage);
		}

		// Copy to GPU image
		//
		{
			uint32_t faces[6] = {
				pCreateInfo->posX,
				pCreateInfo->negX,
				pCreateInfo->posY,
				pCreateInfo->negY,
				pCreateInfo->posZ,
				pCreateInfo->negZ,
			};

			std::vector<grfx::BufferToImageCopyInfo> copyInfos(6);
			for (uint32_t arrayLayer = 0; arrayLayer < 6; ++arrayLayer) {
				uint32_t subImageIndex = faces[arrayLayer];
				SubImage subImage = CalcSubimageCrossHorizontalLeft(subImageIndex, bitmap.GetWidth(), bitmap.GetHeight(), targetFormat);

				// Copy info
				grfx::BufferToImageCopyInfo& copyInfo = copyInfos[arrayLayer];
				copyInfo.srcBuffer.imageWidth = bitmap.GetWidth();
				copyInfo.srcBuffer.imageHeight = bitmap.GetHeight();
				copyInfo.srcBuffer.imageRowStride = bitmap.GetRowStride();
				copyInfo.srcBuffer.footprintOffset = subImage.bufferOffset;
				copyInfo.srcBuffer.footprintWidth = subImage.width;
				copyInfo.srcBuffer.footprintHeight = subImage.height;
				copyInfo.srcBuffer.footprintDepth = 1;
				copyInfo.dstImage.mipLevel = 0;
				copyInfo.dstImage.arrayLayer = arrayLayer;
				copyInfo.dstImage.arrayLayerCount = 1;
				copyInfo.dstImage.x = 0;
				copyInfo.dstImage.y = 0;
				copyInfo.dstImage.z = 0;
				copyInfo.dstImage.width = subImage.width;
				copyInfo.dstImage.height = subImage.height;
				copyInfo.dstImage.depth = 1;
			}

			ppxres = pQueue->CopyBufferToImage(
				copyInfos,
				stagingBuffer,
				targetImage,
				ALL_SUBRESOURCES,
				grfx::RESOURCE_STATE_UNDEFINED,
				grfx::RESOURCE_STATE_SHADER_RESOURCE);
			if (Failed(ppxres)) {
				return ppxres;
			}
		}

		// Change ownership to reference so object doesn't get destroyed
		targetImage->SetOwnership(grfx::OWNERSHIP_REFERENCE);

		// Assign output
		*ppImage = targetImage;

		return SUCCESS;
	}

	// -------------------------------------------------------------------------------------------------

	Result CreateMeshFromGeometry(
		grfx::Queue* pQueue,
		const Geometry* pGeometry,
		grfx::Mesh** ppMesh)
	{
		ASSERT_NULL_ARG(pQueue);
		ASSERT_NULL_ARG(pGeometry);
		ASSERT_NULL_ARG(ppMesh);

		grfx::ScopeDestroyer SCOPED_DESTROYER(pQueue->GetDevice());

		// Create staging buffer
		grfx::BufferPtr stagingBuffer;
		{
			uint32_t biggestBufferSize = pGeometry->GetLargestBufferSize();

			grfx::BufferCreateInfo ci = {};
			ci.size = biggestBufferSize;
			ci.usageFlags.bits.transferSrc = true;
			ci.memoryUsage = grfx::MEMORY_USAGE_CPU_TO_GPU;

			Result ppxres = pQueue->GetDevice()->CreateBuffer(&ci, &stagingBuffer);
			if (Failed(ppxres)) {
				return ppxres;
			}
			SCOPED_DESTROYER.AddObject(stagingBuffer);
		}

		// Create target mesh
		grfx::MeshPtr targetMesh;
		{
			grfx::MeshCreateInfo ci = grfx::MeshCreateInfo(*pGeometry);

			Result ppxres = pQueue->GetDevice()->CreateMesh(&ci, &targetMesh);
			if (Failed(ppxres)) {
				return ppxres;
			}
			SCOPED_DESTROYER.AddObject(targetMesh);
		}

		// Copy geometry data to mesh
		{
			// Copy info
			grfx::BufferToBufferCopyInfo copyInfo = {};

			// Index buffer
			if (pGeometry->GetIndexType() != grfx::INDEX_TYPE_UNDEFINED) {
				const Geometry::Buffer* pGeoBuffer = pGeometry->GetIndexBuffer();
				ASSERT_NULL_ARG(pGeoBuffer);

				uint32_t geoBufferSize = pGeoBuffer->GetSize();

				Result ppxres = stagingBuffer->CopyFromSource(geoBufferSize, pGeoBuffer->GetData());
				if (Failed(ppxres)) {
					return ppxres;
				}

				copyInfo.size = geoBufferSize;

				// Copy to GPU buffer
				ppxres = pQueue->CopyBufferToBuffer(&copyInfo, stagingBuffer, targetMesh->GetIndexBuffer(), grfx::RESOURCE_STATE_INDEX_BUFFER, grfx::RESOURCE_STATE_INDEX_BUFFER);
				if (Failed(ppxres)) {
					return ppxres;
				}
			}

			// Vertex buffers
			uint32_t vertexBufferCount = pGeometry->GetVertexBufferCount();
			for (uint32_t i = 0; i < vertexBufferCount; ++i) {
				const Geometry::Buffer* pGeoBuffer = pGeometry->GetVertexBuffer(i);
				ASSERT_NULL_ARG(pGeoBuffer);

				uint32_t geoBufferSize = pGeoBuffer->GetSize();

				Result ppxres = stagingBuffer->CopyFromSource(geoBufferSize, pGeoBuffer->GetData());
				if (Failed(ppxres)) {
					return ppxres;
				}

				copyInfo.size = geoBufferSize;

				grfx::BufferPtr targetBuffer = targetMesh->GetVertexBuffer(i);

				// Copy to GPU buffer
				ppxres = pQueue->CopyBufferToBuffer(&copyInfo, stagingBuffer, targetBuffer, grfx::RESOURCE_STATE_VERTEX_BUFFER, grfx::RESOURCE_STATE_VERTEX_BUFFER);
				if (Failed(ppxres)) {
					return ppxres;
				}
			}
		}

		// Change ownership to reference so object doesn't get destroyed
		targetMesh->SetOwnership(grfx::OWNERSHIP_REFERENCE);

		// Assign output
		*ppMesh = targetMesh;

		return SUCCESS;
	}

	// -------------------------------------------------------------------------------------------------

	Result CreateMeshFromTriMesh(
		grfx::Queue* pQueue,
		const TriMesh* pTriMesh,
		grfx::Mesh** ppMesh)
	{
		ASSERT_NULL_ARG(pQueue);
		ASSERT_NULL_ARG(pTriMesh);
		ASSERT_NULL_ARG(ppMesh);

		Result ppxres = ERROR_FAILED;

		Geometry geo;
		ppxres = Geometry::Create(*pTriMesh, &geo);
		if (Failed(ppxres)) {
			return ppxres;
		}

		ppxres = CreateMeshFromGeometry(pQueue, &geo, ppMesh);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	// -------------------------------------------------------------------------------------------------

	Result CreateMeshFromWireMesh(
		grfx::Queue* pQueue,
		const WireMesh* pWireMesh,
		grfx::Mesh** ppMesh)
	{
		ASSERT_NULL_ARG(pQueue);
		ASSERT_NULL_ARG(pWireMesh);
		ASSERT_NULL_ARG(ppMesh);

		Result ppxres = ERROR_FAILED;

		Geometry geo;
		ppxres = Geometry::Create(*pWireMesh, &geo);
		if (Failed(ppxres)) {
			return ppxres;
		}

		ppxres = CreateMeshFromGeometry(pQueue, &geo, ppMesh);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

	// -------------------------------------------------------------------------------------------------

	Result CreateMeshFromFile(
		grfx::Queue* pQueue,
		const std::filesystem::path& path,
		grfx::Mesh** ppMesh,
		const TriMeshOptions& options)
	{
		ASSERT_NULL_ARG(pQueue);
		ASSERT_NULL_ARG(ppMesh);

		TriMesh mesh = TriMesh::CreateFromOBJ(path, options);

		Result ppxres = CreateMeshFromTriMesh(pQueue, &mesh, ppMesh);
		if (Failed(ppxres)) {
			return ppxres;
		}

		return SUCCESS;
	}

} // namespace grfx_util

#pragma endregion
